
SHT31_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800a020  0800a020  0001a020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a604  0800a604  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a60c  0800a60c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a60c  0800a60c  0001a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a610  0800a610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001e0  0800a7f4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800a7f4  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db1b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dee  00000000  00000000  0002dd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00030658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ec5  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e991  00000000  00000000  00047f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0c3  00000000  00000000  00056926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e39e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  000e3a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a004 	.word	0x0800a004

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800a004 	.word	0x0800a004

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f869 	bl	8001510 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffb9 	bl	80013c0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f85b 	bl	8001510 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f851 	bl	8001510 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffe1 	bl	8001444 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffd7 	bl	8001444 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 fe89 	bl	8002210 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fad2 	bl	8001ab0 <__aeabi_dsub>
 800050c:	f001 fe80 	bl	8002210 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f837 	bl	80015d8 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 feb4 	bl	80022dc <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f82e 	bl	80015d8 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fa94 	bl	8001ab0 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fe6d 	bl	800227c <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f817 	bl	80015d8 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fe94 	bl	80022dc <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ff8e 	bl	8002504 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ff89 	bl	8002504 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	469b      	mov	fp, r3
 80005fa:	d433      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fc:	465a      	mov	r2, fp
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83a      	bhi.n	8000686 <__udivmoddi4+0xc2>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e078      	b.n	8000708 <__udivmoddi4+0x144>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e075      	b.n	800070e <__udivmoddi4+0x14a>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e028      	b.n	800068e <__udivmoddi4+0xca>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	4652      	mov	r2, sl
 800066c:	40da      	lsrs	r2, r3
 800066e:	4641      	mov	r1, r8
 8000670:	0013      	movs	r3, r2
 8000672:	464a      	mov	r2, r9
 8000674:	408a      	lsls	r2, r1
 8000676:	0017      	movs	r7, r2
 8000678:	4642      	mov	r2, r8
 800067a:	431f      	orrs	r7, r3
 800067c:	4653      	mov	r3, sl
 800067e:	4093      	lsls	r3, r2
 8000680:	001e      	movs	r6, r3
 8000682:	42af      	cmp	r7, r5
 8000684:	d9c4      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4643      	mov	r3, r8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0d9      	beq.n	8000648 <__udivmoddi4+0x84>
 8000694:	07fb      	lsls	r3, r7, #31
 8000696:	0872      	lsrs	r2, r6, #1
 8000698:	431a      	orrs	r2, r3
 800069a:	4646      	mov	r6, r8
 800069c:	087b      	lsrs	r3, r7, #1
 800069e:	e00e      	b.n	80006be <__udivmoddi4+0xfa>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d101      	bne.n	80006a8 <__udivmoddi4+0xe4>
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d80c      	bhi.n	80006c2 <__udivmoddi4+0xfe>
 80006a8:	1aa4      	subs	r4, r4, r2
 80006aa:	419d      	sbcs	r5, r3
 80006ac:	2001      	movs	r0, #1
 80006ae:	1924      	adds	r4, r4, r4
 80006b0:	416d      	adcs	r5, r5
 80006b2:	2100      	movs	r1, #0
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1824      	adds	r4, r4, r0
 80006b8:	414d      	adcs	r5, r1
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d006      	beq.n	80006cc <__udivmoddi4+0x108>
 80006be:	42ab      	cmp	r3, r5
 80006c0:	d9ee      	bls.n	80006a0 <__udivmoddi4+0xdc>
 80006c2:	3e01      	subs	r6, #1
 80006c4:	1924      	adds	r4, r4, r4
 80006c6:	416d      	adcs	r5, r5
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d1f8      	bne.n	80006be <__udivmoddi4+0xfa>
 80006cc:	9800      	ldr	r0, [sp, #0]
 80006ce:	9901      	ldr	r1, [sp, #4]
 80006d0:	465b      	mov	r3, fp
 80006d2:	1900      	adds	r0, r0, r4
 80006d4:	4169      	adcs	r1, r5
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db24      	blt.n	8000724 <__udivmoddi4+0x160>
 80006da:	002b      	movs	r3, r5
 80006dc:	465a      	mov	r2, fp
 80006de:	4644      	mov	r4, r8
 80006e0:	40d3      	lsrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db2a      	blt.n	8000746 <__udivmoddi4+0x182>
 80006f0:	0026      	movs	r6, r4
 80006f2:	409e      	lsls	r6, r3
 80006f4:	0033      	movs	r3, r6
 80006f6:	0026      	movs	r6, r4
 80006f8:	4647      	mov	r7, r8
 80006fa:	40be      	lsls	r6, r7
 80006fc:	0032      	movs	r2, r6
 80006fe:	1a80      	subs	r0, r0, r2
 8000700:	4199      	sbcs	r1, r3
 8000702:	9000      	str	r0, [sp, #0]
 8000704:	9101      	str	r1, [sp, #4]
 8000706:	e79f      	b.n	8000648 <__udivmoddi4+0x84>
 8000708:	42a3      	cmp	r3, r4
 800070a:	d8bc      	bhi.n	8000686 <__udivmoddi4+0xc2>
 800070c:	e783      	b.n	8000616 <__udivmoddi4+0x52>
 800070e:	4642      	mov	r2, r8
 8000710:	2320      	movs	r3, #32
 8000712:	2100      	movs	r1, #0
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	9100      	str	r1, [sp, #0]
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	40da      	lsrs	r2, r3
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	e786      	b.n	8000632 <__udivmoddi4+0x6e>
 8000724:	4642      	mov	r2, r8
 8000726:	2320      	movs	r3, #32
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	4646      	mov	r6, r8
 800072e:	409a      	lsls	r2, r3
 8000730:	0023      	movs	r3, r4
 8000732:	40f3      	lsrs	r3, r6
 8000734:	4644      	mov	r4, r8
 8000736:	4313      	orrs	r3, r2
 8000738:	002a      	movs	r2, r5
 800073a:	40e2      	lsrs	r2, r4
 800073c:	001c      	movs	r4, r3
 800073e:	465b      	mov	r3, fp
 8000740:	0015      	movs	r5, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	dad4      	bge.n	80006f0 <__udivmoddi4+0x12c>
 8000746:	4642      	mov	r2, r8
 8000748:	002f      	movs	r7, r5
 800074a:	2320      	movs	r3, #32
 800074c:	0026      	movs	r6, r4
 800074e:	4097      	lsls	r7, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	40de      	lsrs	r6, r3
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7cd      	b.n	80006f6 <__udivmoddi4+0x132>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	000d      	movs	r5, r1
 8000766:	0004      	movs	r4, r0
 8000768:	b5c0      	push	{r6, r7, lr}
 800076a:	001f      	movs	r7, r3
 800076c:	0011      	movs	r1, r2
 800076e:	0328      	lsls	r0, r5, #12
 8000770:	0f62      	lsrs	r2, r4, #29
 8000772:	0a40      	lsrs	r0, r0, #9
 8000774:	4310      	orrs	r0, r2
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	0d52      	lsrs	r2, r2, #21
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	4691      	mov	r9, r2
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	0ffa      	lsrs	r2, r7, #31
 8000784:	0f4f      	lsrs	r7, r1, #29
 8000786:	006e      	lsls	r6, r5, #1
 8000788:	4327      	orrs	r7, r4
 800078a:	4692      	mov	sl, r2
 800078c:	46b8      	mov	r8, r7
 800078e:	0d76      	lsrs	r6, r6, #21
 8000790:	0fed      	lsrs	r5, r5, #31
 8000792:	00c9      	lsls	r1, r1, #3
 8000794:	4295      	cmp	r5, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e099      	b.n	80008ce <__aeabi_dadd+0x172>
 800079a:	464c      	mov	r4, r9
 800079c:	1b34      	subs	r4, r6, r4
 800079e:	46a4      	mov	ip, r4
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e07c      	b.n	80008a0 <__aeabi_dadd+0x144>
 80007a6:	464a      	mov	r2, r9
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e0b8      	b.n	8000920 <__aeabi_dadd+0x1c4>
 80007ae:	4ac5      	ldr	r2, [pc, #788]	; (8000ac4 <__aeabi_dadd+0x368>)
 80007b0:	4296      	cmp	r6, r2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x5a>
 80007b4:	e11c      	b.n	80009f0 <__aeabi_dadd+0x294>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	003c      	movs	r4, r7
 80007ba:	0412      	lsls	r2, r2, #16
 80007bc:	4314      	orrs	r4, r2
 80007be:	46a0      	mov	r8, r4
 80007c0:	4662      	mov	r2, ip
 80007c2:	2a38      	cmp	r2, #56	; 0x38
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x6c>
 80007c6:	e161      	b.n	8000a8c <__aeabi_dadd+0x330>
 80007c8:	2a1f      	cmp	r2, #31
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0x72>
 80007cc:	e1cc      	b.n	8000b68 <__aeabi_dadd+0x40c>
 80007ce:	4664      	mov	r4, ip
 80007d0:	2220      	movs	r2, #32
 80007d2:	1b12      	subs	r2, r2, r4
 80007d4:	4644      	mov	r4, r8
 80007d6:	4094      	lsls	r4, r2
 80007d8:	000f      	movs	r7, r1
 80007da:	46a1      	mov	r9, r4
 80007dc:	4664      	mov	r4, ip
 80007de:	4091      	lsls	r1, r2
 80007e0:	40e7      	lsrs	r7, r4
 80007e2:	464c      	mov	r4, r9
 80007e4:	1e4a      	subs	r2, r1, #1
 80007e6:	4191      	sbcs	r1, r2
 80007e8:	433c      	orrs	r4, r7
 80007ea:	4642      	mov	r2, r8
 80007ec:	4321      	orrs	r1, r4
 80007ee:	4664      	mov	r4, ip
 80007f0:	40e2      	lsrs	r2, r4
 80007f2:	1a80      	subs	r0, r0, r2
 80007f4:	1a5c      	subs	r4, r3, r1
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	419b      	sbcs	r3, r3
 80007fa:	425f      	negs	r7, r3
 80007fc:	1bc7      	subs	r7, r0, r7
 80007fe:	023b      	lsls	r3, r7, #8
 8000800:	d400      	bmi.n	8000804 <__aeabi_dadd+0xa8>
 8000802:	e0d0      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000804:	027f      	lsls	r7, r7, #9
 8000806:	0a7f      	lsrs	r7, r7, #9
 8000808:	2f00      	cmp	r7, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0xb2>
 800080c:	e0ff      	b.n	8000a0e <__aeabi_dadd+0x2b2>
 800080e:	0038      	movs	r0, r7
 8000810:	f001 fe5a 	bl	80024c8 <__clzsi2>
 8000814:	0001      	movs	r1, r0
 8000816:	3908      	subs	r1, #8
 8000818:	2320      	movs	r3, #32
 800081a:	0022      	movs	r2, r4
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	408f      	lsls	r7, r1
 8000820:	40da      	lsrs	r2, r3
 8000822:	408c      	lsls	r4, r1
 8000824:	4317      	orrs	r7, r2
 8000826:	42b1      	cmp	r1, r6
 8000828:	da00      	bge.n	800082c <__aeabi_dadd+0xd0>
 800082a:	e0ff      	b.n	8000a2c <__aeabi_dadd+0x2d0>
 800082c:	1b89      	subs	r1, r1, r6
 800082e:	1c4b      	adds	r3, r1, #1
 8000830:	2b1f      	cmp	r3, #31
 8000832:	dd00      	ble.n	8000836 <__aeabi_dadd+0xda>
 8000834:	e0a8      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000836:	2220      	movs	r2, #32
 8000838:	0039      	movs	r1, r7
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	0020      	movs	r0, r4
 800083e:	4094      	lsls	r4, r2
 8000840:	4091      	lsls	r1, r2
 8000842:	40d8      	lsrs	r0, r3
 8000844:	1e62      	subs	r2, r4, #1
 8000846:	4194      	sbcs	r4, r2
 8000848:	40df      	lsrs	r7, r3
 800084a:	2600      	movs	r6, #0
 800084c:	4301      	orrs	r1, r0
 800084e:	430c      	orrs	r4, r1
 8000850:	0763      	lsls	r3, r4, #29
 8000852:	d009      	beq.n	8000868 <__aeabi_dadd+0x10c>
 8000854:	230f      	movs	r3, #15
 8000856:	4023      	ands	r3, r4
 8000858:	2b04      	cmp	r3, #4
 800085a:	d005      	beq.n	8000868 <__aeabi_dadd+0x10c>
 800085c:	1d23      	adds	r3, r4, #4
 800085e:	42a3      	cmp	r3, r4
 8000860:	41a4      	sbcs	r4, r4
 8000862:	4264      	negs	r4, r4
 8000864:	193f      	adds	r7, r7, r4
 8000866:	001c      	movs	r4, r3
 8000868:	023b      	lsls	r3, r7, #8
 800086a:	d400      	bmi.n	800086e <__aeabi_dadd+0x112>
 800086c:	e09e      	b.n	80009ac <__aeabi_dadd+0x250>
 800086e:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000870:	3601      	adds	r6, #1
 8000872:	429e      	cmp	r6, r3
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x11c>
 8000876:	e0b7      	b.n	80009e8 <__aeabi_dadd+0x28c>
 8000878:	4a93      	ldr	r2, [pc, #588]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800087a:	08e4      	lsrs	r4, r4, #3
 800087c:	4017      	ands	r7, r2
 800087e:	077b      	lsls	r3, r7, #29
 8000880:	0571      	lsls	r1, r6, #21
 8000882:	027f      	lsls	r7, r7, #9
 8000884:	4323      	orrs	r3, r4
 8000886:	0b3f      	lsrs	r7, r7, #12
 8000888:	0d4a      	lsrs	r2, r1, #21
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	433a      	orrs	r2, r7
 800088e:	07ed      	lsls	r5, r5, #31
 8000890:	432a      	orrs	r2, r5
 8000892:	0018      	movs	r0, r3
 8000894:	0011      	movs	r1, r2
 8000896:	bce0      	pop	{r5, r6, r7}
 8000898:	46ba      	mov	sl, r7
 800089a:	46b1      	mov	r9, r6
 800089c:	46a8      	mov	r8, r5
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	2c00      	cmp	r4, #0
 80008a2:	d04b      	beq.n	800093c <__aeabi_dadd+0x1e0>
 80008a4:	464c      	mov	r4, r9
 80008a6:	1ba4      	subs	r4, r4, r6
 80008a8:	46a4      	mov	ip, r4
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d000      	beq.n	80008b0 <__aeabi_dadd+0x154>
 80008ae:	e123      	b.n	8000af8 <__aeabi_dadd+0x39c>
 80008b0:	0004      	movs	r4, r0
 80008b2:	431c      	orrs	r4, r3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x15c>
 80008b6:	e1af      	b.n	8000c18 <__aeabi_dadd+0x4bc>
 80008b8:	4662      	mov	r2, ip
 80008ba:	1e54      	subs	r4, r2, #1
 80008bc:	2a01      	cmp	r2, #1
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x166>
 80008c0:	e215      	b.n	8000cee <__aeabi_dadd+0x592>
 80008c2:	4d80      	ldr	r5, [pc, #512]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008c4:	45ac      	cmp	ip, r5
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x16e>
 80008c8:	e1c8      	b.n	8000c5c <__aeabi_dadd+0x500>
 80008ca:	46a4      	mov	ip, r4
 80008cc:	e11b      	b.n	8000b06 <__aeabi_dadd+0x3aa>
 80008ce:	464a      	mov	r2, r9
 80008d0:	1ab2      	subs	r2, r6, r2
 80008d2:	4694      	mov	ip, r2
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	dc00      	bgt.n	80008da <__aeabi_dadd+0x17e>
 80008d8:	e0ac      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 80008da:	464a      	mov	r2, r9
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d043      	beq.n	8000968 <__aeabi_dadd+0x20c>
 80008e0:	4a78      	ldr	r2, [pc, #480]	; (8000ac4 <__aeabi_dadd+0x368>)
 80008e2:	4296      	cmp	r6, r2
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x18c>
 80008e6:	e1af      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	003c      	movs	r4, r7
 80008ec:	0412      	lsls	r2, r2, #16
 80008ee:	4314      	orrs	r4, r2
 80008f0:	46a0      	mov	r8, r4
 80008f2:	4662      	mov	r2, ip
 80008f4:	2a38      	cmp	r2, #56	; 0x38
 80008f6:	dc67      	bgt.n	80009c8 <__aeabi_dadd+0x26c>
 80008f8:	2a1f      	cmp	r2, #31
 80008fa:	dc00      	bgt.n	80008fe <__aeabi_dadd+0x1a2>
 80008fc:	e15f      	b.n	8000bbe <__aeabi_dadd+0x462>
 80008fe:	4647      	mov	r7, r8
 8000900:	3a20      	subs	r2, #32
 8000902:	40d7      	lsrs	r7, r2
 8000904:	4662      	mov	r2, ip
 8000906:	2a20      	cmp	r2, #32
 8000908:	d005      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 800090a:	4664      	mov	r4, ip
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	4321      	orrs	r1, r4
 8000916:	1e4a      	subs	r2, r1, #1
 8000918:	4191      	sbcs	r1, r2
 800091a:	000c      	movs	r4, r1
 800091c:	433c      	orrs	r4, r7
 800091e:	e057      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000920:	003a      	movs	r2, r7
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x1cc>
 8000926:	e105      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 8000928:	0022      	movs	r2, r4
 800092a:	3a01      	subs	r2, #1
 800092c:	2c01      	cmp	r4, #1
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x1d6>
 8000930:	e182      	b.n	8000c38 <__aeabi_dadd+0x4dc>
 8000932:	4c64      	ldr	r4, [pc, #400]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000934:	45a4      	cmp	ip, r4
 8000936:	d05b      	beq.n	80009f0 <__aeabi_dadd+0x294>
 8000938:	4694      	mov	ip, r2
 800093a:	e741      	b.n	80007c0 <__aeabi_dadd+0x64>
 800093c:	4c63      	ldr	r4, [pc, #396]	; (8000acc <__aeabi_dadd+0x370>)
 800093e:	1c77      	adds	r7, r6, #1
 8000940:	4227      	tst	r7, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_dadd+0x1ea>
 8000944:	e0c4      	b.n	8000ad0 <__aeabi_dadd+0x374>
 8000946:	0004      	movs	r4, r0
 8000948:	431c      	orrs	r4, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x1f4>
 800094e:	e169      	b.n	8000c24 <__aeabi_dadd+0x4c8>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x1fa>
 8000954:	e1bf      	b.n	8000cd6 <__aeabi_dadd+0x57a>
 8000956:	4644      	mov	r4, r8
 8000958:	430c      	orrs	r4, r1
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x202>
 800095c:	e1d0      	b.n	8000d00 <__aeabi_dadd+0x5a4>
 800095e:	0742      	lsls	r2, r0, #29
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	08c0      	lsrs	r0, r0, #3
 8000966:	e029      	b.n	80009bc <__aeabi_dadd+0x260>
 8000968:	003a      	movs	r2, r7
 800096a:	430a      	orrs	r2, r1
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x214>
 800096e:	e170      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000970:	4662      	mov	r2, ip
 8000972:	4664      	mov	r4, ip
 8000974:	3a01      	subs	r2, #1
 8000976:	2c01      	cmp	r4, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c51      	ldr	r4, [pc, #324]	; (8000ac4 <__aeabi_dadd+0x368>)
 800097e:	45a4      	cmp	ip, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e161      	b.n	8000c48 <__aeabi_dadd+0x4ec>
 8000984:	4694      	mov	ip, r2
 8000986:	e7b4      	b.n	80008f2 <__aeabi_dadd+0x196>
 8000988:	003a      	movs	r2, r7
 800098a:	391f      	subs	r1, #31
 800098c:	40ca      	lsrs	r2, r1
 800098e:	0011      	movs	r1, r2
 8000990:	2b20      	cmp	r3, #32
 8000992:	d003      	beq.n	800099c <__aeabi_dadd+0x240>
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	409f      	lsls	r7, r3
 800099a:	433c      	orrs	r4, r7
 800099c:	1e63      	subs	r3, r4, #1
 800099e:	419c      	sbcs	r4, r3
 80009a0:	2700      	movs	r7, #0
 80009a2:	2600      	movs	r6, #0
 80009a4:	430c      	orrs	r4, r1
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e753      	b.n	8000854 <__aeabi_dadd+0xf8>
 80009ac:	46b4      	mov	ip, r6
 80009ae:	08e4      	lsrs	r4, r4, #3
 80009b0:	077b      	lsls	r3, r7, #29
 80009b2:	4323      	orrs	r3, r4
 80009b4:	08f8      	lsrs	r0, r7, #3
 80009b6:	4a43      	ldr	r2, [pc, #268]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009b8:	4594      	cmp	ip, r2
 80009ba:	d01d      	beq.n	80009f8 <__aeabi_dadd+0x29c>
 80009bc:	4662      	mov	r2, ip
 80009be:	0307      	lsls	r7, r0, #12
 80009c0:	0552      	lsls	r2, r2, #21
 80009c2:	0b3f      	lsrs	r7, r7, #12
 80009c4:	0d52      	lsrs	r2, r2, #21
 80009c6:	e760      	b.n	800088a <__aeabi_dadd+0x12e>
 80009c8:	4644      	mov	r4, r8
 80009ca:	430c      	orrs	r4, r1
 80009cc:	1e62      	subs	r2, r4, #1
 80009ce:	4194      	sbcs	r4, r2
 80009d0:	18e4      	adds	r4, r4, r3
 80009d2:	429c      	cmp	r4, r3
 80009d4:	419b      	sbcs	r3, r3
 80009d6:	425f      	negs	r7, r3
 80009d8:	183f      	adds	r7, r7, r0
 80009da:	023b      	lsls	r3, r7, #8
 80009dc:	d5e3      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <__aeabi_dadd+0x368>)
 80009e0:	3601      	adds	r6, #1
 80009e2:	429e      	cmp	r6, r3
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x28c>
 80009e6:	e0b5      	b.n	8000b54 <__aeabi_dadd+0x3f8>
 80009e8:	0032      	movs	r2, r6
 80009ea:	2700      	movs	r7, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	e74c      	b.n	800088a <__aeabi_dadd+0x12e>
 80009f0:	0742      	lsls	r2, r0, #29
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	08c0      	lsrs	r0, r0, #3
 80009f8:	001a      	movs	r2, r3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x2a4>
 80009fe:	e1e1      	b.n	8000dc4 <__aeabi_dadd+0x668>
 8000a00:	2780      	movs	r7, #128	; 0x80
 8000a02:	033f      	lsls	r7, r7, #12
 8000a04:	4307      	orrs	r7, r0
 8000a06:	033f      	lsls	r7, r7, #12
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a0a:	0b3f      	lsrs	r7, r7, #12
 8000a0c:	e73d      	b.n	800088a <__aeabi_dadd+0x12e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f001 fd5a 	bl	80024c8 <__clzsi2>
 8000a14:	0001      	movs	r1, r0
 8000a16:	3118      	adds	r1, #24
 8000a18:	291f      	cmp	r1, #31
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_dadd+0x2c2>
 8000a1c:	e6fc      	b.n	8000818 <__aeabi_dadd+0xbc>
 8000a1e:	3808      	subs	r0, #8
 8000a20:	4084      	lsls	r4, r0
 8000a22:	0027      	movs	r7, r4
 8000a24:	2400      	movs	r4, #0
 8000a26:	42b1      	cmp	r1, r6
 8000a28:	db00      	blt.n	8000a2c <__aeabi_dadd+0x2d0>
 8000a2a:	e6ff      	b.n	800082c <__aeabi_dadd+0xd0>
 8000a2c:	4a26      	ldr	r2, [pc, #152]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a2e:	1a76      	subs	r6, r6, r1
 8000a30:	4017      	ands	r7, r2
 8000a32:	e70d      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d02f      	beq.n	8000a98 <__aeabi_dadd+0x33c>
 8000a38:	464a      	mov	r2, r9
 8000a3a:	1b92      	subs	r2, r2, r6
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x2e8>
 8000a42:	e0ad      	b.n	8000ba0 <__aeabi_dadd+0x444>
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <__aeabi_dadd+0x368>)
 8000a46:	4591      	cmp	r9, r2
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x2f0>
 8000a4a:	e10f      	b.n	8000c6c <__aeabi_dadd+0x510>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0412      	lsls	r2, r2, #16
 8000a50:	4310      	orrs	r0, r2
 8000a52:	4662      	mov	r2, ip
 8000a54:	2a38      	cmp	r2, #56	; 0x38
 8000a56:	dd00      	ble.n	8000a5a <__aeabi_dadd+0x2fe>
 8000a58:	e10f      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000a5a:	2a1f      	cmp	r2, #31
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_dadd+0x304>
 8000a5e:	e180      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000a60:	4664      	mov	r4, ip
 8000a62:	2220      	movs	r2, #32
 8000a64:	001e      	movs	r6, r3
 8000a66:	1b12      	subs	r2, r2, r4
 8000a68:	4667      	mov	r7, ip
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	40fe      	lsrs	r6, r7
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	4193      	sbcs	r3, r2
 8000a76:	40f8      	lsrs	r0, r7
 8000a78:	4334      	orrs	r4, r6
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4480      	add	r8, r0
 8000a7e:	1864      	adds	r4, r4, r1
 8000a80:	428c      	cmp	r4, r1
 8000a82:	41bf      	sbcs	r7, r7
 8000a84:	427f      	negs	r7, r7
 8000a86:	464e      	mov	r6, r9
 8000a88:	4447      	add	r7, r8
 8000a8a:	e7a6      	b.n	80009da <__aeabi_dadd+0x27e>
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	0011      	movs	r1, r2
 8000a92:	1e4a      	subs	r2, r1, #1
 8000a94:	4191      	sbcs	r1, r2
 8000a96:	e6ad      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000a98:	4c0c      	ldr	r4, [pc, #48]	; (8000acc <__aeabi_dadd+0x370>)
 8000a9a:	1c72      	adds	r2, r6, #1
 8000a9c:	4222      	tst	r2, r4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x346>
 8000aa0:	e0a1      	b.n	8000be6 <__aeabi_dadd+0x48a>
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_dadd+0x350>
 8000aaa:	e0fa      	b.n	8000ca2 <__aeabi_dadd+0x546>
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x356>
 8000ab0:	e145      	b.n	8000d3e <__aeabi_dadd+0x5e2>
 8000ab2:	003a      	movs	r2, r7
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x35e>
 8000ab8:	e146      	b.n	8000d48 <__aeabi_dadd+0x5ec>
 8000aba:	0742      	lsls	r2, r0, #29
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	08c0      	lsrs	r0, r0, #3
 8000ac2:	e77b      	b.n	80009bc <__aeabi_dadd+0x260>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff
 8000acc:	000007fe 	.word	0x000007fe
 8000ad0:	4647      	mov	r7, r8
 8000ad2:	1a5c      	subs	r4, r3, r1
 8000ad4:	1bc2      	subs	r2, r0, r7
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	41bf      	sbcs	r7, r7
 8000ada:	427f      	negs	r7, r7
 8000adc:	46b9      	mov	r9, r7
 8000ade:	0017      	movs	r7, r2
 8000ae0:	464a      	mov	r2, r9
 8000ae2:	1abf      	subs	r7, r7, r2
 8000ae4:	023a      	lsls	r2, r7, #8
 8000ae6:	d500      	bpl.n	8000aea <__aeabi_dadd+0x38e>
 8000ae8:	e08d      	b.n	8000c06 <__aeabi_dadd+0x4aa>
 8000aea:	0023      	movs	r3, r4
 8000aec:	433b      	orrs	r3, r7
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x396>
 8000af0:	e68a      	b.n	8000808 <__aeabi_dadd+0xac>
 8000af2:	2000      	movs	r0, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	e761      	b.n	80009bc <__aeabi_dadd+0x260>
 8000af8:	4cb4      	ldr	r4, [pc, #720]	; (8000dcc <__aeabi_dadd+0x670>)
 8000afa:	45a1      	cmp	r9, r4
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x3a4>
 8000afe:	e0ad      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	0424      	lsls	r4, r4, #16
 8000b04:	4320      	orrs	r0, r4
 8000b06:	4664      	mov	r4, ip
 8000b08:	2c38      	cmp	r4, #56	; 0x38
 8000b0a:	dc3d      	bgt.n	8000b88 <__aeabi_dadd+0x42c>
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	2c1f      	cmp	r4, #31
 8000b10:	dd00      	ble.n	8000b14 <__aeabi_dadd+0x3b8>
 8000b12:	e0b7      	b.n	8000c84 <__aeabi_dadd+0x528>
 8000b14:	2520      	movs	r5, #32
 8000b16:	001e      	movs	r6, r3
 8000b18:	1b2d      	subs	r5, r5, r4
 8000b1a:	0004      	movs	r4, r0
 8000b1c:	40ab      	lsls	r3, r5
 8000b1e:	40ac      	lsls	r4, r5
 8000b20:	40d6      	lsrs	r6, r2
 8000b22:	40d0      	lsrs	r0, r2
 8000b24:	4642      	mov	r2, r8
 8000b26:	1e5d      	subs	r5, r3, #1
 8000b28:	41ab      	sbcs	r3, r5
 8000b2a:	4334      	orrs	r4, r6
 8000b2c:	1a12      	subs	r2, r2, r0
 8000b2e:	4690      	mov	r8, r2
 8000b30:	4323      	orrs	r3, r4
 8000b32:	e02c      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000b34:	0742      	lsls	r2, r0, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c0      	lsrs	r0, r0, #3
 8000b3c:	e73b      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000b3e:	185c      	adds	r4, r3, r1
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4440      	add	r0, r8
 8000b46:	425b      	negs	r3, r3
 8000b48:	18c7      	adds	r7, r0, r3
 8000b4a:	2601      	movs	r6, #1
 8000b4c:	023b      	lsls	r3, r7, #8
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_dadd+0x3f6>
 8000b50:	e729      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b52:	2602      	movs	r6, #2
 8000b54:	4a9e      	ldr	r2, [pc, #632]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000b56:	0863      	lsrs	r3, r4, #1
 8000b58:	4017      	ands	r7, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4014      	ands	r4, r2
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	07fb      	lsls	r3, r7, #31
 8000b62:	431c      	orrs	r4, r3
 8000b64:	087f      	lsrs	r7, r7, #1
 8000b66:	e673      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000b68:	4644      	mov	r4, r8
 8000b6a:	3a20      	subs	r2, #32
 8000b6c:	40d4      	lsrs	r4, r2
 8000b6e:	4662      	mov	r2, ip
 8000b70:	2a20      	cmp	r2, #32
 8000b72:	d005      	beq.n	8000b80 <__aeabi_dadd+0x424>
 8000b74:	4667      	mov	r7, ip
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	1bd2      	subs	r2, r2, r7
 8000b7a:	4647      	mov	r7, r8
 8000b7c:	4097      	lsls	r7, r2
 8000b7e:	4339      	orrs	r1, r7
 8000b80:	1e4a      	subs	r2, r1, #1
 8000b82:	4191      	sbcs	r1, r2
 8000b84:	4321      	orrs	r1, r4
 8000b86:	e635      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	1e58      	subs	r0, r3, #1
 8000b8c:	4183      	sbcs	r3, r0
 8000b8e:	1acc      	subs	r4, r1, r3
 8000b90:	42a1      	cmp	r1, r4
 8000b92:	41bf      	sbcs	r7, r7
 8000b94:	4643      	mov	r3, r8
 8000b96:	427f      	negs	r7, r7
 8000b98:	4655      	mov	r5, sl
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	1bdf      	subs	r7, r3, r7
 8000b9e:	e62e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x44c>
 8000ba6:	e0bd      	b.n	8000d24 <__aeabi_dadd+0x5c8>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	4664      	mov	r4, ip
 8000bac:	3a01      	subs	r2, #1
 8000bae:	2c01      	cmp	r4, #1
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x458>
 8000bb2:	e0e5      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000bb4:	4c85      	ldr	r4, [pc, #532]	; (8000dcc <__aeabi_dadd+0x670>)
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d058      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000bba:	4694      	mov	ip, r2
 8000bbc:	e749      	b.n	8000a52 <__aeabi_dadd+0x2f6>
 8000bbe:	4664      	mov	r4, ip
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	1b12      	subs	r2, r2, r4
 8000bc4:	4644      	mov	r4, r8
 8000bc6:	4094      	lsls	r4, r2
 8000bc8:	000f      	movs	r7, r1
 8000bca:	46a1      	mov	r9, r4
 8000bcc:	4664      	mov	r4, ip
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	40e7      	lsrs	r7, r4
 8000bd2:	464c      	mov	r4, r9
 8000bd4:	1e4a      	subs	r2, r1, #1
 8000bd6:	4191      	sbcs	r1, r2
 8000bd8:	433c      	orrs	r4, r7
 8000bda:	4642      	mov	r2, r8
 8000bdc:	430c      	orrs	r4, r1
 8000bde:	4661      	mov	r1, ip
 8000be0:	40ca      	lsrs	r2, r1
 8000be2:	1880      	adds	r0, r0, r2
 8000be4:	e6f4      	b.n	80009d0 <__aeabi_dadd+0x274>
 8000be6:	4c79      	ldr	r4, [pc, #484]	; (8000dcc <__aeabi_dadd+0x670>)
 8000be8:	42a2      	cmp	r2, r4
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x492>
 8000bec:	e6fd      	b.n	80009ea <__aeabi_dadd+0x28e>
 8000bee:	1859      	adds	r1, r3, r1
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	419b      	sbcs	r3, r3
 8000bf4:	4440      	add	r0, r8
 8000bf6:	425f      	negs	r7, r3
 8000bf8:	19c7      	adds	r7, r0, r7
 8000bfa:	07fc      	lsls	r4, r7, #31
 8000bfc:	0849      	lsrs	r1, r1, #1
 8000bfe:	0016      	movs	r6, r2
 8000c00:	430c      	orrs	r4, r1
 8000c02:	087f      	lsrs	r7, r7, #1
 8000c04:	e6cf      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c06:	1acc      	subs	r4, r1, r3
 8000c08:	42a1      	cmp	r1, r4
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1a18      	subs	r0, r3, r0
 8000c12:	4655      	mov	r5, sl
 8000c14:	1bc7      	subs	r7, r0, r7
 8000c16:	e5f7      	b.n	8000808 <__aeabi_dadd+0xac>
 8000c18:	08c9      	lsrs	r1, r1, #3
 8000c1a:	077b      	lsls	r3, r7, #29
 8000c1c:	4655      	mov	r5, sl
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	08f8      	lsrs	r0, r7, #3
 8000c22:	e6c8      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x4ce>
 8000c28:	e081      	b.n	8000d2e <__aeabi_dadd+0x5d2>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	d115      	bne.n	8000c5c <__aeabi_dadd+0x500>
 8000c30:	2080      	movs	r0, #128	; 0x80
 8000c32:	2500      	movs	r5, #0
 8000c34:	0300      	lsls	r0, r0, #12
 8000c36:	e6e3      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c38:	1a5c      	subs	r4, r3, r1
 8000c3a:	42a3      	cmp	r3, r4
 8000c3c:	419b      	sbcs	r3, r3
 8000c3e:	1bc7      	subs	r7, r0, r7
 8000c40:	425b      	negs	r3, r3
 8000c42:	2601      	movs	r6, #1
 8000c44:	1aff      	subs	r7, r7, r3
 8000c46:	e5da      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000c48:	0742      	lsls	r2, r0, #29
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	08c0      	lsrs	r0, r0, #3
 8000c50:	e6d2      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	e6ac      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	4642      	mov	r2, r8
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	075b      	lsls	r3, r3, #29
 8000c64:	4655      	mov	r5, sl
 8000c66:	430b      	orrs	r3, r1
 8000c68:	08d0      	lsrs	r0, r2, #3
 8000c6a:	e6c5      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	4642      	mov	r2, r8
 8000c70:	075b      	lsls	r3, r3, #29
 8000c72:	08c9      	lsrs	r1, r1, #3
 8000c74:	430b      	orrs	r3, r1
 8000c76:	08d0      	lsrs	r0, r2, #3
 8000c78:	e6be      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000c7a:	4303      	orrs	r3, r0
 8000c7c:	001c      	movs	r4, r3
 8000c7e:	1e63      	subs	r3, r4, #1
 8000c80:	419c      	sbcs	r4, r3
 8000c82:	e6fc      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000c84:	0002      	movs	r2, r0
 8000c86:	3c20      	subs	r4, #32
 8000c88:	40e2      	lsrs	r2, r4
 8000c8a:	0014      	movs	r4, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d003      	beq.n	8000c9a <__aeabi_dadd+0x53e>
 8000c92:	2540      	movs	r5, #64	; 0x40
 8000c94:	1aad      	subs	r5, r5, r2
 8000c96:	40a8      	lsls	r0, r5
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	1e58      	subs	r0, r3, #1
 8000c9c:	4183      	sbcs	r3, r0
 8000c9e:	4323      	orrs	r3, r4
 8000ca0:	e775      	b.n	8000b8e <__aeabi_dadd+0x432>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d0e2      	beq.n	8000c6c <__aeabi_dadd+0x510>
 8000ca6:	003a      	movs	r2, r7
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	d0cd      	beq.n	8000c48 <__aeabi_dadd+0x4ec>
 8000cac:	0742      	lsls	r2, r0, #29
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	08c0      	lsrs	r0, r0, #3
 8000cb6:	0312      	lsls	r2, r2, #12
 8000cb8:	4210      	tst	r0, r2
 8000cba:	d006      	beq.n	8000cca <__aeabi_dadd+0x56e>
 8000cbc:	08fc      	lsrs	r4, r7, #3
 8000cbe:	4214      	tst	r4, r2
 8000cc0:	d103      	bne.n	8000cca <__aeabi_dadd+0x56e>
 8000cc2:	0020      	movs	r0, r4
 8000cc4:	08cb      	lsrs	r3, r1, #3
 8000cc6:	077a      	lsls	r2, r7, #29
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	0f5a      	lsrs	r2, r3, #29
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	0752      	lsls	r2, r2, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	e690      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x582>
 8000cdc:	e709      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000cde:	4643      	mov	r3, r8
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	075b      	lsls	r3, r3, #29
 8000ce6:	4655      	mov	r5, sl
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	08d0      	lsrs	r0, r2, #3
 8000cec:	e666      	b.n	80009bc <__aeabi_dadd+0x260>
 8000cee:	1acc      	subs	r4, r1, r3
 8000cf0:	42a1      	cmp	r1, r4
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	1a3f      	subs	r7, r7, r0
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	4655      	mov	r5, sl
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	1a7f      	subs	r7, r7, r1
 8000cfe:	e57e      	b.n	80007fe <__aeabi_dadd+0xa2>
 8000d00:	4642      	mov	r2, r8
 8000d02:	1a5c      	subs	r4, r3, r1
 8000d04:	1a87      	subs	r7, r0, r2
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	4192      	sbcs	r2, r2
 8000d0a:	4252      	negs	r2, r2
 8000d0c:	1abf      	subs	r7, r7, r2
 8000d0e:	023a      	lsls	r2, r7, #8
 8000d10:	d53d      	bpl.n	8000d8e <__aeabi_dadd+0x632>
 8000d12:	1acc      	subs	r4, r1, r3
 8000d14:	42a1      	cmp	r1, r4
 8000d16:	4189      	sbcs	r1, r1
 8000d18:	4643      	mov	r3, r8
 8000d1a:	4249      	negs	r1, r1
 8000d1c:	1a1f      	subs	r7, r3, r0
 8000d1e:	4655      	mov	r5, sl
 8000d20:	1a7f      	subs	r7, r7, r1
 8000d22:	e595      	b.n	8000850 <__aeabi_dadd+0xf4>
 8000d24:	077b      	lsls	r3, r7, #29
 8000d26:	08c9      	lsrs	r1, r1, #3
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	08f8      	lsrs	r0, r7, #3
 8000d2c:	e643      	b.n	80009b6 <__aeabi_dadd+0x25a>
 8000d2e:	4644      	mov	r4, r8
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	430c      	orrs	r4, r1
 8000d34:	d130      	bne.n	8000d98 <__aeabi_dadd+0x63c>
 8000d36:	0742      	lsls	r2, r0, #29
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	08c0      	lsrs	r0, r0, #3
 8000d3c:	e65c      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000d3e:	077b      	lsls	r3, r7, #29
 8000d40:	08c9      	lsrs	r1, r1, #3
 8000d42:	430b      	orrs	r3, r1
 8000d44:	08f8      	lsrs	r0, r7, #3
 8000d46:	e639      	b.n	80009bc <__aeabi_dadd+0x260>
 8000d48:	185c      	adds	r4, r3, r1
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	419b      	sbcs	r3, r3
 8000d4e:	4440      	add	r0, r8
 8000d50:	425b      	negs	r3, r3
 8000d52:	18c7      	adds	r7, r0, r3
 8000d54:	023b      	lsls	r3, r7, #8
 8000d56:	d400      	bmi.n	8000d5a <__aeabi_dadd+0x5fe>
 8000d58:	e625      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <__aeabi_dadd+0x674>)
 8000d5c:	2601      	movs	r6, #1
 8000d5e:	401f      	ands	r7, r3
 8000d60:	e621      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d62:	0004      	movs	r4, r0
 8000d64:	3a20      	subs	r2, #32
 8000d66:	40d4      	lsrs	r4, r2
 8000d68:	4662      	mov	r2, ip
 8000d6a:	2a20      	cmp	r2, #32
 8000d6c:	d004      	beq.n	8000d78 <__aeabi_dadd+0x61c>
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	4666      	mov	r6, ip
 8000d72:	1b92      	subs	r2, r2, r6
 8000d74:	4090      	lsls	r0, r2
 8000d76:	4303      	orrs	r3, r0
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	4193      	sbcs	r3, r2
 8000d7c:	431c      	orrs	r4, r3
 8000d7e:	e67e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000d80:	185c      	adds	r4, r3, r1
 8000d82:	428c      	cmp	r4, r1
 8000d84:	4189      	sbcs	r1, r1
 8000d86:	4440      	add	r0, r8
 8000d88:	4249      	negs	r1, r1
 8000d8a:	1847      	adds	r7, r0, r1
 8000d8c:	e6dd      	b.n	8000b4a <__aeabi_dadd+0x3ee>
 8000d8e:	0023      	movs	r3, r4
 8000d90:	433b      	orrs	r3, r7
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e6ad      	b.n	8000af2 <__aeabi_dadd+0x396>
 8000d96:	e606      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d98:	0744      	lsls	r4, r0, #29
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	08c0      	lsrs	r0, r0, #3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	4220      	tst	r0, r4
 8000da4:	d008      	beq.n	8000db8 <__aeabi_dadd+0x65c>
 8000da6:	4642      	mov	r2, r8
 8000da8:	08d6      	lsrs	r6, r2, #3
 8000daa:	4226      	tst	r6, r4
 8000dac:	d104      	bne.n	8000db8 <__aeabi_dadd+0x65c>
 8000dae:	4655      	mov	r5, sl
 8000db0:	0030      	movs	r0, r6
 8000db2:	08cb      	lsrs	r3, r1, #3
 8000db4:	0751      	lsls	r1, r2, #29
 8000db6:	430b      	orrs	r3, r1
 8000db8:	0f5a      	lsrs	r2, r3, #29
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	0752      	lsls	r2, r2, #29
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	e619      	b.n	80009f8 <__aeabi_dadd+0x29c>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4a01      	ldr	r2, [pc, #4]	; (8000dcc <__aeabi_dadd+0x670>)
 8000dc8:	001f      	movs	r7, r3
 8000dca:	e55e      	b.n	800088a <__aeabi_dadd+0x12e>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff

08000dd4 <__aeabi_ddiv>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	4657      	mov	r7, sl
 8000dd8:	464e      	mov	r6, r9
 8000dda:	4645      	mov	r5, r8
 8000ddc:	46de      	mov	lr, fp
 8000dde:	b5e0      	push	{r5, r6, r7, lr}
 8000de0:	4681      	mov	r9, r0
 8000de2:	0005      	movs	r5, r0
 8000de4:	030c      	lsls	r4, r1, #12
 8000de6:	0048      	lsls	r0, r1, #1
 8000de8:	4692      	mov	sl, r2
 8000dea:	001f      	movs	r7, r3
 8000dec:	b085      	sub	sp, #20
 8000dee:	0b24      	lsrs	r4, r4, #12
 8000df0:	0d40      	lsrs	r0, r0, #21
 8000df2:	0fce      	lsrs	r6, r1, #31
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x26>
 8000df8:	e156      	b.n	80010a8 <__aeabi_ddiv+0x2d4>
 8000dfa:	4bd4      	ldr	r3, [pc, #848]	; (800114c <__aeabi_ddiv+0x378>)
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e>
 8000e00:	e172      	b.n	80010e8 <__aeabi_ddiv+0x314>
 8000e02:	0f6b      	lsrs	r3, r5, #29
 8000e04:	00e4      	lsls	r4, r4, #3
 8000e06:	431c      	orrs	r4, r3
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4bcf      	ldr	r3, [pc, #828]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e12:	00ed      	lsls	r5, r5, #3
 8000e14:	469b      	mov	fp, r3
 8000e16:	2300      	movs	r3, #0
 8000e18:	4699      	mov	r9, r3
 8000e1a:	4483      	add	fp, r0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	033c      	lsls	r4, r7, #12
 8000e20:	007b      	lsls	r3, r7, #1
 8000e22:	4650      	mov	r0, sl
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	0fff      	lsrs	r7, r7, #31
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x5c>
 8000e2e:	e11f      	b.n	8001070 <__aeabi_ddiv+0x29c>
 8000e30:	4ac6      	ldr	r2, [pc, #792]	; (800114c <__aeabi_ddiv+0x378>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x64>
 8000e36:	e162      	b.n	80010fe <__aeabi_ddiv+0x32a>
 8000e38:	49c5      	ldr	r1, [pc, #788]	; (8001150 <__aeabi_ddiv+0x37c>)
 8000e3a:	0f42      	lsrs	r2, r0, #29
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	00e4      	lsls	r4, r4, #3
 8000e40:	4659      	mov	r1, fp
 8000e42:	4314      	orrs	r4, r2
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	4463      	add	r3, ip
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	4314      	orrs	r4, r2
 8000e4e:	469b      	mov	fp, r3
 8000e50:	00c2      	lsls	r2, r0, #3
 8000e52:	2000      	movs	r0, #0
 8000e54:	0033      	movs	r3, r6
 8000e56:	407b      	eors	r3, r7
 8000e58:	469a      	mov	sl, r3
 8000e5a:	464b      	mov	r3, r9
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d827      	bhi.n	8000eb0 <__aeabi_ddiv+0xdc>
 8000e60:	49bc      	ldr	r1, [pc, #752]	; (8001154 <__aeabi_ddiv+0x380>)
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	469f      	mov	pc, r3
 8000e68:	46b2      	mov	sl, r6
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d016      	beq.n	8000e9e <__aeabi_ddiv+0xca>
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0xa2>
 8000e74:	e28e      	b.n	8001394 <__aeabi_ddiv+0x5c0>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d000      	beq.n	8000e7c <__aeabi_ddiv+0xa8>
 8000e7a:	e0d9      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2400      	movs	r4, #0
 8000e80:	2500      	movs	r5, #0
 8000e82:	4652      	mov	r2, sl
 8000e84:	051b      	lsls	r3, r3, #20
 8000e86:	4323      	orrs	r3, r4
 8000e88:	07d2      	lsls	r2, r2, #31
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	0019      	movs	r1, r3
 8000e90:	b005      	add	sp, #20
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	46bb      	mov	fp, r7
 8000e96:	46b2      	mov	sl, r6
 8000e98:	46a9      	mov	r9, r5
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	4baa      	ldr	r3, [pc, #680]	; (800114c <__aeabi_ddiv+0x378>)
 8000ea4:	e7ed      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8000ea6:	46ba      	mov	sl, r7
 8000ea8:	46a0      	mov	r8, r4
 8000eaa:	0015      	movs	r5, r2
 8000eac:	9000      	str	r0, [sp, #0]
 8000eae:	e7dc      	b.n	8000e6a <__aeabi_ddiv+0x96>
 8000eb0:	4544      	cmp	r4, r8
 8000eb2:	d200      	bcs.n	8000eb6 <__aeabi_ddiv+0xe2>
 8000eb4:	e1c7      	b.n	8001246 <__aeabi_ddiv+0x472>
 8000eb6:	d100      	bne.n	8000eba <__aeabi_ddiv+0xe6>
 8000eb8:	e1c2      	b.n	8001240 <__aeabi_ddiv+0x46c>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	002e      	movs	r6, r5
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	44e3      	add	fp, ip
 8000ec8:	0223      	lsls	r3, r4, #8
 8000eca:	0e14      	lsrs	r4, r2, #24
 8000ecc:	431c      	orrs	r4, r3
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	0423      	lsls	r3, r4, #16
 8000ed4:	0c1f      	lsrs	r7, r3, #16
 8000ed6:	0212      	lsls	r2, r2, #8
 8000ed8:	4649      	mov	r1, r9
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	9701      	str	r7, [sp, #4]
 8000ede:	f7ff f9b3 	bl	8000248 <__aeabi_uidivmod>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	437a      	muls	r2, r7
 8000ee6:	040b      	lsls	r3, r1, #16
 8000ee8:	0c31      	lsrs	r1, r6, #16
 8000eea:	4680      	mov	r8, r0
 8000eec:	4319      	orrs	r1, r3
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d907      	bls.n	8000f02 <__aeabi_ddiv+0x12e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	1909      	adds	r1, r1, r4
 8000efa:	44e0      	add	r8, ip
 8000efc:	428c      	cmp	r4, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x12e>
 8000f00:	e207      	b.n	8001312 <__aeabi_ddiv+0x53e>
 8000f02:	1a88      	subs	r0, r1, r2
 8000f04:	4649      	mov	r1, r9
 8000f06:	f7ff f99f 	bl	8000248 <__aeabi_uidivmod>
 8000f0a:	0409      	lsls	r1, r1, #16
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	0431      	lsls	r1, r6, #16
 8000f10:	4666      	mov	r6, ip
 8000f12:	9a01      	ldr	r2, [sp, #4]
 8000f14:	0c09      	lsrs	r1, r1, #16
 8000f16:	4342      	muls	r2, r0
 8000f18:	0003      	movs	r3, r0
 8000f1a:	4331      	orrs	r1, r6
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	d904      	bls.n	8000f2a <__aeabi_ddiv+0x156>
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	3b01      	subs	r3, #1
 8000f24:	428c      	cmp	r4, r1
 8000f26:	d800      	bhi.n	8000f2a <__aeabi_ddiv+0x156>
 8000f28:	e1ed      	b.n	8001306 <__aeabi_ddiv+0x532>
 8000f2a:	1a88      	subs	r0, r1, r2
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4690      	mov	r8, r2
 8000f34:	4641      	mov	r1, r8
 8000f36:	9b00      	ldr	r3, [sp, #0]
 8000f38:	040e      	lsls	r6, r1, #16
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	001f      	movs	r7, r3
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	0c36      	lsrs	r6, r6, #16
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c19      	lsrs	r1, r3, #16
 8000f48:	000b      	movs	r3, r1
 8000f4a:	4373      	muls	r3, r6
 8000f4c:	0c12      	lsrs	r2, r2, #16
 8000f4e:	437e      	muls	r6, r7
 8000f50:	9103      	str	r1, [sp, #12]
 8000f52:	4351      	muls	r1, r2
 8000f54:	437a      	muls	r2, r7
 8000f56:	0c1f      	lsrs	r7, r3, #16
 8000f58:	46bc      	mov	ip, r7
 8000f5a:	1876      	adds	r6, r6, r1
 8000f5c:	4466      	add	r6, ip
 8000f5e:	42b1      	cmp	r1, r6
 8000f60:	d903      	bls.n	8000f6a <__aeabi_ddiv+0x196>
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	468c      	mov	ip, r1
 8000f68:	4462      	add	r2, ip
 8000f6a:	0c31      	lsrs	r1, r6, #16
 8000f6c:	188a      	adds	r2, r1, r2
 8000f6e:	0431      	lsls	r1, r6, #16
 8000f70:	041e      	lsls	r6, r3, #16
 8000f72:	0c36      	lsrs	r6, r6, #16
 8000f74:	198e      	adds	r6, r1, r6
 8000f76:	4290      	cmp	r0, r2
 8000f78:	d302      	bcc.n	8000f80 <__aeabi_ddiv+0x1ac>
 8000f7a:	d112      	bne.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f7c:	42b5      	cmp	r5, r6
 8000f7e:	d210      	bcs.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8000f80:	4643      	mov	r3, r8
 8000f82:	1e59      	subs	r1, r3, #1
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	469c      	mov	ip, r3
 8000f88:	4465      	add	r5, ip
 8000f8a:	001f      	movs	r7, r3
 8000f8c:	429d      	cmp	r5, r3
 8000f8e:	419b      	sbcs	r3, r3
 8000f90:	425b      	negs	r3, r3
 8000f92:	191b      	adds	r3, r3, r4
 8000f94:	18c0      	adds	r0, r0, r3
 8000f96:	4284      	cmp	r4, r0
 8000f98:	d200      	bcs.n	8000f9c <__aeabi_ddiv+0x1c8>
 8000f9a:	e1a0      	b.n	80012de <__aeabi_ddiv+0x50a>
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x1cc>
 8000f9e:	e19b      	b.n	80012d8 <__aeabi_ddiv+0x504>
 8000fa0:	4688      	mov	r8, r1
 8000fa2:	1bae      	subs	r6, r5, r6
 8000fa4:	42b5      	cmp	r5, r6
 8000fa6:	41ad      	sbcs	r5, r5
 8000fa8:	1a80      	subs	r0, r0, r2
 8000faa:	426d      	negs	r5, r5
 8000fac:	1b40      	subs	r0, r0, r5
 8000fae:	4284      	cmp	r4, r0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_ddiv+0x1e0>
 8000fb2:	e1d5      	b.n	8001360 <__aeabi_ddiv+0x58c>
 8000fb4:	4649      	mov	r1, r9
 8000fb6:	f7ff f947 	bl	8000248 <__aeabi_uidivmod>
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	040b      	lsls	r3, r1, #16
 8000fbe:	4342      	muls	r2, r0
 8000fc0:	0c31      	lsrs	r1, r6, #16
 8000fc2:	0005      	movs	r5, r0
 8000fc4:	4319      	orrs	r1, r3
 8000fc6:	428a      	cmp	r2, r1
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x1f8>
 8000fca:	e16c      	b.n	80012a6 <__aeabi_ddiv+0x4d2>
 8000fcc:	1a88      	subs	r0, r1, r2
 8000fce:	4649      	mov	r1, r9
 8000fd0:	f7ff f93a 	bl	8000248 <__aeabi_uidivmod>
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	0436      	lsls	r6, r6, #16
 8000fd8:	4342      	muls	r2, r0
 8000fda:	0409      	lsls	r1, r1, #16
 8000fdc:	0c36      	lsrs	r6, r6, #16
 8000fde:	0003      	movs	r3, r0
 8000fe0:	430e      	orrs	r6, r1
 8000fe2:	42b2      	cmp	r2, r6
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x214>
 8000fe6:	e153      	b.n	8001290 <__aeabi_ddiv+0x4bc>
 8000fe8:	9803      	ldr	r0, [sp, #12]
 8000fea:	1ab6      	subs	r6, r6, r2
 8000fec:	0002      	movs	r2, r0
 8000fee:	042d      	lsls	r5, r5, #16
 8000ff0:	431d      	orrs	r5, r3
 8000ff2:	9f02      	ldr	r7, [sp, #8]
 8000ff4:	042b      	lsls	r3, r5, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	435a      	muls	r2, r3
 8000ffa:	437b      	muls	r3, r7
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	0c29      	lsrs	r1, r5, #16
 8001000:	4348      	muls	r0, r1
 8001002:	0c13      	lsrs	r3, r2, #16
 8001004:	4484      	add	ip, r0
 8001006:	4463      	add	r3, ip
 8001008:	4379      	muls	r1, r7
 800100a:	4298      	cmp	r0, r3
 800100c:	d903      	bls.n	8001016 <__aeabi_ddiv+0x242>
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	0240      	lsls	r0, r0, #9
 8001012:	4684      	mov	ip, r0
 8001014:	4461      	add	r1, ip
 8001016:	0c18      	lsrs	r0, r3, #16
 8001018:	0412      	lsls	r2, r2, #16
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	0c12      	lsrs	r2, r2, #16
 800101e:	1841      	adds	r1, r0, r1
 8001020:	189b      	adds	r3, r3, r2
 8001022:	428e      	cmp	r6, r1
 8001024:	d200      	bcs.n	8001028 <__aeabi_ddiv+0x254>
 8001026:	e0ff      	b.n	8001228 <__aeabi_ddiv+0x454>
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x258>
 800102a:	e0fa      	b.n	8001222 <__aeabi_ddiv+0x44e>
 800102c:	2301      	movs	r3, #1
 800102e:	431d      	orrs	r5, r3
 8001030:	4a49      	ldr	r2, [pc, #292]	; (8001158 <__aeabi_ddiv+0x384>)
 8001032:	445a      	add	r2, fp
 8001034:	2a00      	cmp	r2, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x266>
 8001038:	e0aa      	b.n	8001190 <__aeabi_ddiv+0x3bc>
 800103a:	076b      	lsls	r3, r5, #29
 800103c:	d000      	beq.n	8001040 <__aeabi_ddiv+0x26c>
 800103e:	e13d      	b.n	80012bc <__aeabi_ddiv+0x4e8>
 8001040:	08ed      	lsrs	r5, r5, #3
 8001042:	4643      	mov	r3, r8
 8001044:	01db      	lsls	r3, r3, #7
 8001046:	d506      	bpl.n	8001056 <__aeabi_ddiv+0x282>
 8001048:	4642      	mov	r2, r8
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <__aeabi_ddiv+0x388>)
 800104c:	401a      	ands	r2, r3
 800104e:	4690      	mov	r8, r2
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	445a      	add	r2, fp
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <__aeabi_ddiv+0x38c>)
 8001058:	429a      	cmp	r2, r3
 800105a:	dd00      	ble.n	800105e <__aeabi_ddiv+0x28a>
 800105c:	e71f      	b.n	8000e9e <__aeabi_ddiv+0xca>
 800105e:	4643      	mov	r3, r8
 8001060:	075b      	lsls	r3, r3, #29
 8001062:	431d      	orrs	r5, r3
 8001064:	4643      	mov	r3, r8
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	025c      	lsls	r4, r3, #9
 800106a:	0b24      	lsrs	r4, r4, #12
 800106c:	0d53      	lsrs	r3, r2, #21
 800106e:	e708      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001070:	4652      	mov	r2, sl
 8001072:	4322      	orrs	r2, r4
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x2a4>
 8001076:	e07b      	b.n	8001170 <__aeabi_ddiv+0x39c>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d100      	bne.n	800107e <__aeabi_ddiv+0x2aa>
 800107c:	e0fa      	b.n	8001274 <__aeabi_ddiv+0x4a0>
 800107e:	0020      	movs	r0, r4
 8001080:	f001 fa22 	bl	80024c8 <__clzsi2>
 8001084:	0002      	movs	r2, r0
 8001086:	3a0b      	subs	r2, #11
 8001088:	231d      	movs	r3, #29
 800108a:	0001      	movs	r1, r0
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4652      	mov	r2, sl
 8001090:	3908      	subs	r1, #8
 8001092:	40da      	lsrs	r2, r3
 8001094:	408c      	lsls	r4, r1
 8001096:	4314      	orrs	r4, r2
 8001098:	4652      	mov	r2, sl
 800109a:	408a      	lsls	r2, r1
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <__aeabi_ddiv+0x390>)
 800109e:	4458      	add	r0, fp
 80010a0:	469b      	mov	fp, r3
 80010a2:	4483      	add	fp, r0
 80010a4:	2000      	movs	r0, #0
 80010a6:	e6d5      	b.n	8000e54 <__aeabi_ddiv+0x80>
 80010a8:	464b      	mov	r3, r9
 80010aa:	4323      	orrs	r3, r4
 80010ac:	4698      	mov	r8, r3
 80010ae:	d044      	beq.n	800113a <__aeabi_ddiv+0x366>
 80010b0:	2c00      	cmp	r4, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x2e2>
 80010b4:	e0ce      	b.n	8001254 <__aeabi_ddiv+0x480>
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 fa06 	bl	80024c8 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	390b      	subs	r1, #11
 80010c2:	231d      	movs	r3, #29
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	4649      	mov	r1, r9
 80010c8:	0010      	movs	r0, r2
 80010ca:	40d9      	lsrs	r1, r3
 80010cc:	3808      	subs	r0, #8
 80010ce:	4084      	lsls	r4, r0
 80010d0:	000b      	movs	r3, r1
 80010d2:	464d      	mov	r5, r9
 80010d4:	4323      	orrs	r3, r4
 80010d6:	4698      	mov	r8, r3
 80010d8:	4085      	lsls	r5, r0
 80010da:	4823      	ldr	r0, [pc, #140]	; (8001168 <__aeabi_ddiv+0x394>)
 80010dc:	1a83      	subs	r3, r0, r2
 80010de:	469b      	mov	fp, r3
 80010e0:	2300      	movs	r3, #0
 80010e2:	4699      	mov	r9, r3
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	e69a      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010e8:	464b      	mov	r3, r9
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d11d      	bne.n	800112c <__aeabi_ddiv+0x358>
 80010f0:	2308      	movs	r3, #8
 80010f2:	4699      	mov	r9, r3
 80010f4:	3b06      	subs	r3, #6
 80010f6:	2500      	movs	r5, #0
 80010f8:	4683      	mov	fp, r0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	e68f      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 80010fe:	4652      	mov	r2, sl
 8001100:	4322      	orrs	r2, r4
 8001102:	d109      	bne.n	8001118 <__aeabi_ddiv+0x344>
 8001104:	2302      	movs	r3, #2
 8001106:	4649      	mov	r1, r9
 8001108:	4319      	orrs	r1, r3
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <__aeabi_ddiv+0x398>)
 800110c:	4689      	mov	r9, r1
 800110e:	469c      	mov	ip, r3
 8001110:	2400      	movs	r4, #0
 8001112:	2002      	movs	r0, #2
 8001114:	44e3      	add	fp, ip
 8001116:	e69d      	b.n	8000e54 <__aeabi_ddiv+0x80>
 8001118:	2303      	movs	r3, #3
 800111a:	464a      	mov	r2, r9
 800111c:	431a      	orrs	r2, r3
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <__aeabi_ddiv+0x398>)
 8001120:	4691      	mov	r9, r2
 8001122:	469c      	mov	ip, r3
 8001124:	4652      	mov	r2, sl
 8001126:	2003      	movs	r0, #3
 8001128:	44e3      	add	fp, ip
 800112a:	e693      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800112c:	230c      	movs	r3, #12
 800112e:	4699      	mov	r9, r3
 8001130:	3b09      	subs	r3, #9
 8001132:	46a0      	mov	r8, r4
 8001134:	4683      	mov	fp, r0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e671      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800113a:	2304      	movs	r3, #4
 800113c:	4699      	mov	r9, r3
 800113e:	2300      	movs	r3, #0
 8001140:	469b      	mov	fp, r3
 8001142:	3301      	adds	r3, #1
 8001144:	2500      	movs	r5, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	e669      	b.n	8000e1e <__aeabi_ddiv+0x4a>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff
 8001150:	fffffc01 	.word	0xfffffc01
 8001154:	0800a064 	.word	0x0800a064
 8001158:	000003ff 	.word	0x000003ff
 800115c:	feffffff 	.word	0xfeffffff
 8001160:	000007fe 	.word	0x000007fe
 8001164:	000003f3 	.word	0x000003f3
 8001168:	fffffc0d 	.word	0xfffffc0d
 800116c:	fffff801 	.word	0xfffff801
 8001170:	4649      	mov	r1, r9
 8001172:	2301      	movs	r3, #1
 8001174:	4319      	orrs	r1, r3
 8001176:	4689      	mov	r9, r1
 8001178:	2400      	movs	r4, #0
 800117a:	2001      	movs	r0, #1
 800117c:	e66a      	b.n	8000e54 <__aeabi_ddiv+0x80>
 800117e:	2300      	movs	r3, #0
 8001180:	2480      	movs	r4, #128	; 0x80
 8001182:	469a      	mov	sl, r3
 8001184:	2500      	movs	r5, #0
 8001186:	4b8a      	ldr	r3, [pc, #552]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	e67a      	b.n	8000e82 <__aeabi_ddiv+0xae>
 800118c:	2501      	movs	r5, #1
 800118e:	426d      	negs	r5, r5
 8001190:	2301      	movs	r3, #1
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	2b38      	cmp	r3, #56	; 0x38
 8001196:	dd00      	ble.n	800119a <__aeabi_ddiv+0x3c6>
 8001198:	e670      	b.n	8000e7c <__aeabi_ddiv+0xa8>
 800119a:	2b1f      	cmp	r3, #31
 800119c:	dc00      	bgt.n	80011a0 <__aeabi_ddiv+0x3cc>
 800119e:	e0bf      	b.n	8001320 <__aeabi_ddiv+0x54c>
 80011a0:	211f      	movs	r1, #31
 80011a2:	4249      	negs	r1, r1
 80011a4:	1a8a      	subs	r2, r1, r2
 80011a6:	4641      	mov	r1, r8
 80011a8:	40d1      	lsrs	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d004      	beq.n	80011ba <__aeabi_ddiv+0x3e6>
 80011b0:	4641      	mov	r1, r8
 80011b2:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <__aeabi_ddiv+0x5e0>)
 80011b4:	445b      	add	r3, fp
 80011b6:	4099      	lsls	r1, r3
 80011b8:	430d      	orrs	r5, r1
 80011ba:	1e6b      	subs	r3, r5, #1
 80011bc:	419d      	sbcs	r5, r3
 80011be:	2307      	movs	r3, #7
 80011c0:	432a      	orrs	r2, r5
 80011c2:	001d      	movs	r5, r3
 80011c4:	2400      	movs	r4, #0
 80011c6:	4015      	ands	r5, r2
 80011c8:	4213      	tst	r3, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x3fa>
 80011cc:	e0d4      	b.n	8001378 <__aeabi_ddiv+0x5a4>
 80011ce:	210f      	movs	r1, #15
 80011d0:	2300      	movs	r3, #0
 80011d2:	4011      	ands	r1, r2
 80011d4:	2904      	cmp	r1, #4
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x406>
 80011d8:	e0cb      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011da:	1d11      	adds	r1, r2, #4
 80011dc:	4291      	cmp	r1, r2
 80011de:	4192      	sbcs	r2, r2
 80011e0:	4252      	negs	r2, r2
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	000a      	movs	r2, r1
 80011e6:	0219      	lsls	r1, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_ddiv+0x418>
 80011ea:	e0c2      	b.n	8001372 <__aeabi_ddiv+0x59e>
 80011ec:	2301      	movs	r3, #1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2500      	movs	r5, #0
 80011f2:	e646      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	4641      	mov	r1, r8
 80011f8:	031b      	lsls	r3, r3, #12
 80011fa:	4219      	tst	r1, r3
 80011fc:	d008      	beq.n	8001210 <__aeabi_ddiv+0x43c>
 80011fe:	421c      	tst	r4, r3
 8001200:	d106      	bne.n	8001210 <__aeabi_ddiv+0x43c>
 8001202:	431c      	orrs	r4, r3
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	46ba      	mov	sl, r7
 8001208:	0015      	movs	r5, r2
 800120a:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800120c:	0b24      	lsrs	r4, r4, #12
 800120e:	e638      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	4643      	mov	r3, r8
 8001214:	0324      	lsls	r4, r4, #12
 8001216:	431c      	orrs	r4, r3
 8001218:	0324      	lsls	r4, r4, #12
 800121a:	46b2      	mov	sl, r6
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	e62f      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x454>
 8001226:	e703      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001228:	19a6      	adds	r6, r4, r6
 800122a:	1e68      	subs	r0, r5, #1
 800122c:	42a6      	cmp	r6, r4
 800122e:	d200      	bcs.n	8001232 <__aeabi_ddiv+0x45e>
 8001230:	e08d      	b.n	800134e <__aeabi_ddiv+0x57a>
 8001232:	428e      	cmp	r6, r1
 8001234:	d200      	bcs.n	8001238 <__aeabi_ddiv+0x464>
 8001236:	e0a3      	b.n	8001380 <__aeabi_ddiv+0x5ac>
 8001238:	d100      	bne.n	800123c <__aeabi_ddiv+0x468>
 800123a:	e0b3      	b.n	80013a4 <__aeabi_ddiv+0x5d0>
 800123c:	0005      	movs	r5, r0
 800123e:	e6f5      	b.n	800102c <__aeabi_ddiv+0x258>
 8001240:	42aa      	cmp	r2, r5
 8001242:	d900      	bls.n	8001246 <__aeabi_ddiv+0x472>
 8001244:	e639      	b.n	8000eba <__aeabi_ddiv+0xe6>
 8001246:	4643      	mov	r3, r8
 8001248:	07de      	lsls	r6, r3, #31
 800124a:	0858      	lsrs	r0, r3, #1
 800124c:	086b      	lsrs	r3, r5, #1
 800124e:	431e      	orrs	r6, r3
 8001250:	07ed      	lsls	r5, r5, #31
 8001252:	e639      	b.n	8000ec8 <__aeabi_ddiv+0xf4>
 8001254:	4648      	mov	r0, r9
 8001256:	f001 f937 	bl	80024c8 <__clzsi2>
 800125a:	0001      	movs	r1, r0
 800125c:	0002      	movs	r2, r0
 800125e:	3115      	adds	r1, #21
 8001260:	3220      	adds	r2, #32
 8001262:	291c      	cmp	r1, #28
 8001264:	dc00      	bgt.n	8001268 <__aeabi_ddiv+0x494>
 8001266:	e72c      	b.n	80010c2 <__aeabi_ddiv+0x2ee>
 8001268:	464b      	mov	r3, r9
 800126a:	3808      	subs	r0, #8
 800126c:	4083      	lsls	r3, r0
 800126e:	2500      	movs	r5, #0
 8001270:	4698      	mov	r8, r3
 8001272:	e732      	b.n	80010da <__aeabi_ddiv+0x306>
 8001274:	f001 f928 	bl	80024c8 <__clzsi2>
 8001278:	0003      	movs	r3, r0
 800127a:	001a      	movs	r2, r3
 800127c:	3215      	adds	r2, #21
 800127e:	3020      	adds	r0, #32
 8001280:	2a1c      	cmp	r2, #28
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x4b2>
 8001284:	e700      	b.n	8001088 <__aeabi_ddiv+0x2b4>
 8001286:	4654      	mov	r4, sl
 8001288:	3b08      	subs	r3, #8
 800128a:	2200      	movs	r2, #0
 800128c:	409c      	lsls	r4, r3
 800128e:	e705      	b.n	800109c <__aeabi_ddiv+0x2c8>
 8001290:	1936      	adds	r6, r6, r4
 8001292:	3b01      	subs	r3, #1
 8001294:	42b4      	cmp	r4, r6
 8001296:	d900      	bls.n	800129a <__aeabi_ddiv+0x4c6>
 8001298:	e6a6      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 800129a:	42b2      	cmp	r2, r6
 800129c:	d800      	bhi.n	80012a0 <__aeabi_ddiv+0x4cc>
 800129e:	e6a3      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a0:	1e83      	subs	r3, r0, #2
 80012a2:	1936      	adds	r6, r6, r4
 80012a4:	e6a0      	b.n	8000fe8 <__aeabi_ddiv+0x214>
 80012a6:	1909      	adds	r1, r1, r4
 80012a8:	3d01      	subs	r5, #1
 80012aa:	428c      	cmp	r4, r1
 80012ac:	d900      	bls.n	80012b0 <__aeabi_ddiv+0x4dc>
 80012ae:	e68d      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b0:	428a      	cmp	r2, r1
 80012b2:	d800      	bhi.n	80012b6 <__aeabi_ddiv+0x4e2>
 80012b4:	e68a      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012b6:	1e85      	subs	r5, r0, #2
 80012b8:	1909      	adds	r1, r1, r4
 80012ba:	e687      	b.n	8000fcc <__aeabi_ddiv+0x1f8>
 80012bc:	230f      	movs	r3, #15
 80012be:	402b      	ands	r3, r5
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x4f2>
 80012c4:	e6bc      	b.n	8001040 <__aeabi_ddiv+0x26c>
 80012c6:	2305      	movs	r3, #5
 80012c8:	425b      	negs	r3, r3
 80012ca:	42ab      	cmp	r3, r5
 80012cc:	419b      	sbcs	r3, r3
 80012ce:	3504      	adds	r5, #4
 80012d0:	425b      	negs	r3, r3
 80012d2:	08ed      	lsrs	r5, r5, #3
 80012d4:	4498      	add	r8, r3
 80012d6:	e6b4      	b.n	8001042 <__aeabi_ddiv+0x26e>
 80012d8:	42af      	cmp	r7, r5
 80012da:	d900      	bls.n	80012de <__aeabi_ddiv+0x50a>
 80012dc:	e660      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012de:	4282      	cmp	r2, r0
 80012e0:	d804      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012e2:	d000      	beq.n	80012e6 <__aeabi_ddiv+0x512>
 80012e4:	e65c      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012e6:	42ae      	cmp	r6, r5
 80012e8:	d800      	bhi.n	80012ec <__aeabi_ddiv+0x518>
 80012ea:	e659      	b.n	8000fa0 <__aeabi_ddiv+0x1cc>
 80012ec:	2302      	movs	r3, #2
 80012ee:	425b      	negs	r3, r3
 80012f0:	469c      	mov	ip, r3
 80012f2:	9b00      	ldr	r3, [sp, #0]
 80012f4:	44e0      	add	r8, ip
 80012f6:	469c      	mov	ip, r3
 80012f8:	4465      	add	r5, ip
 80012fa:	429d      	cmp	r5, r3
 80012fc:	419b      	sbcs	r3, r3
 80012fe:	425b      	negs	r3, r3
 8001300:	191b      	adds	r3, r3, r4
 8001302:	18c0      	adds	r0, r0, r3
 8001304:	e64d      	b.n	8000fa2 <__aeabi_ddiv+0x1ce>
 8001306:	428a      	cmp	r2, r1
 8001308:	d800      	bhi.n	800130c <__aeabi_ddiv+0x538>
 800130a:	e60e      	b.n	8000f2a <__aeabi_ddiv+0x156>
 800130c:	1e83      	subs	r3, r0, #2
 800130e:	1909      	adds	r1, r1, r4
 8001310:	e60b      	b.n	8000f2a <__aeabi_ddiv+0x156>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x544>
 8001316:	e5f4      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001318:	1e83      	subs	r3, r0, #2
 800131a:	4698      	mov	r8, r3
 800131c:	1909      	adds	r1, r1, r4
 800131e:	e5f0      	b.n	8000f02 <__aeabi_ddiv+0x12e>
 8001320:	4925      	ldr	r1, [pc, #148]	; (80013b8 <__aeabi_ddiv+0x5e4>)
 8001322:	0028      	movs	r0, r5
 8001324:	4459      	add	r1, fp
 8001326:	408d      	lsls	r5, r1
 8001328:	4642      	mov	r2, r8
 800132a:	408a      	lsls	r2, r1
 800132c:	1e69      	subs	r1, r5, #1
 800132e:	418d      	sbcs	r5, r1
 8001330:	4641      	mov	r1, r8
 8001332:	40d8      	lsrs	r0, r3
 8001334:	40d9      	lsrs	r1, r3
 8001336:	4302      	orrs	r2, r0
 8001338:	432a      	orrs	r2, r5
 800133a:	000b      	movs	r3, r1
 800133c:	0751      	lsls	r1, r2, #29
 800133e:	d100      	bne.n	8001342 <__aeabi_ddiv+0x56e>
 8001340:	e751      	b.n	80011e6 <__aeabi_ddiv+0x412>
 8001342:	210f      	movs	r1, #15
 8001344:	4011      	ands	r1, r2
 8001346:	2904      	cmp	r1, #4
 8001348:	d000      	beq.n	800134c <__aeabi_ddiv+0x578>
 800134a:	e746      	b.n	80011da <__aeabi_ddiv+0x406>
 800134c:	e74b      	b.n	80011e6 <__aeabi_ddiv+0x412>
 800134e:	0005      	movs	r5, r0
 8001350:	428e      	cmp	r6, r1
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x582>
 8001354:	e66a      	b.n	800102c <__aeabi_ddiv+0x258>
 8001356:	9a00      	ldr	r2, [sp, #0]
 8001358:	4293      	cmp	r3, r2
 800135a:	d000      	beq.n	800135e <__aeabi_ddiv+0x58a>
 800135c:	e666      	b.n	800102c <__aeabi_ddiv+0x258>
 800135e:	e667      	b.n	8001030 <__aeabi_ddiv+0x25c>
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <__aeabi_ddiv+0x5e8>)
 8001362:	445a      	add	r2, fp
 8001364:	2a00      	cmp	r2, #0
 8001366:	dc00      	bgt.n	800136a <__aeabi_ddiv+0x596>
 8001368:	e710      	b.n	800118c <__aeabi_ddiv+0x3b8>
 800136a:	2301      	movs	r3, #1
 800136c:	2500      	movs	r5, #0
 800136e:	4498      	add	r8, r3
 8001370:	e667      	b.n	8001042 <__aeabi_ddiv+0x26e>
 8001372:	075d      	lsls	r5, r3, #29
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	0b1c      	lsrs	r4, r3, #12
 8001378:	08d2      	lsrs	r2, r2, #3
 800137a:	2300      	movs	r3, #0
 800137c:	4315      	orrs	r5, r2
 800137e:	e580      	b.n	8000e82 <__aeabi_ddiv+0xae>
 8001380:	9800      	ldr	r0, [sp, #0]
 8001382:	3d02      	subs	r5, #2
 8001384:	0042      	lsls	r2, r0, #1
 8001386:	4282      	cmp	r2, r0
 8001388:	41bf      	sbcs	r7, r7
 800138a:	427f      	negs	r7, r7
 800138c:	193c      	adds	r4, r7, r4
 800138e:	1936      	adds	r6, r6, r4
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	e7dd      	b.n	8001350 <__aeabi_ddiv+0x57c>
 8001394:	2480      	movs	r4, #128	; 0x80
 8001396:	4643      	mov	r3, r8
 8001398:	0324      	lsls	r4, r4, #12
 800139a:	431c      	orrs	r4, r3
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__aeabi_ddiv+0x5dc>)
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	e56e      	b.n	8000e82 <__aeabi_ddiv+0xae>
 80013a4:	9a00      	ldr	r2, [sp, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3ea      	bcc.n	8001380 <__aeabi_ddiv+0x5ac>
 80013aa:	0005      	movs	r5, r0
 80013ac:	e7d3      	b.n	8001356 <__aeabi_ddiv+0x582>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	000007ff 	.word	0x000007ff
 80013b4:	0000043e 	.word	0x0000043e
 80013b8:	0000041e 	.word	0x0000041e
 80013bc:	000003ff 	.word	0x000003ff

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464e      	mov	r6, r9
 80013c4:	4645      	mov	r5, r8
 80013c6:	46de      	mov	lr, fp
 80013c8:	4657      	mov	r7, sl
 80013ca:	4690      	mov	r8, r2
 80013cc:	b5e0      	push	{r5, r6, r7, lr}
 80013ce:	0017      	movs	r7, r2
 80013d0:	031a      	lsls	r2, r3, #12
 80013d2:	0b12      	lsrs	r2, r2, #12
 80013d4:	0005      	movs	r5, r0
 80013d6:	4684      	mov	ip, r0
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <__eqdf2+0x80>)
 80013da:	030e      	lsls	r6, r1, #12
 80013dc:	004c      	lsls	r4, r1, #1
 80013de:	4691      	mov	r9, r2
 80013e0:	005a      	lsls	r2, r3, #1
 80013e2:	0fdb      	lsrs	r3, r3, #31
 80013e4:	469b      	mov	fp, r3
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d64      	lsrs	r4, r4, #21
 80013ea:	0fc9      	lsrs	r1, r1, #31
 80013ec:	0d52      	lsrs	r2, r2, #21
 80013ee:	4284      	cmp	r4, r0
 80013f0:	d019      	beq.n	8001426 <__eqdf2+0x66>
 80013f2:	4282      	cmp	r2, r0
 80013f4:	d010      	beq.n	8001418 <__eqdf2+0x58>
 80013f6:	2001      	movs	r0, #1
 80013f8:	4294      	cmp	r4, r2
 80013fa:	d10e      	bne.n	800141a <__eqdf2+0x5a>
 80013fc:	454e      	cmp	r6, r9
 80013fe:	d10c      	bne.n	800141a <__eqdf2+0x5a>
 8001400:	2001      	movs	r0, #1
 8001402:	45c4      	cmp	ip, r8
 8001404:	d109      	bne.n	800141a <__eqdf2+0x5a>
 8001406:	4559      	cmp	r1, fp
 8001408:	d017      	beq.n	800143a <__eqdf2+0x7a>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d105      	bne.n	800141a <__eqdf2+0x5a>
 800140e:	0030      	movs	r0, r6
 8001410:	4328      	orrs	r0, r5
 8001412:	1e43      	subs	r3, r0, #1
 8001414:	4198      	sbcs	r0, r3
 8001416:	e000      	b.n	800141a <__eqdf2+0x5a>
 8001418:	2001      	movs	r0, #1
 800141a:	bcf0      	pop	{r4, r5, r6, r7}
 800141c:	46bb      	mov	fp, r7
 800141e:	46b2      	mov	sl, r6
 8001420:	46a9      	mov	r9, r5
 8001422:	46a0      	mov	r8, r4
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	0033      	movs	r3, r6
 8001428:	2001      	movs	r0, #1
 800142a:	432b      	orrs	r3, r5
 800142c:	d1f5      	bne.n	800141a <__eqdf2+0x5a>
 800142e:	42a2      	cmp	r2, r4
 8001430:	d1f3      	bne.n	800141a <__eqdf2+0x5a>
 8001432:	464b      	mov	r3, r9
 8001434:	433b      	orrs	r3, r7
 8001436:	d1f0      	bne.n	800141a <__eqdf2+0x5a>
 8001438:	e7e2      	b.n	8001400 <__eqdf2+0x40>
 800143a:	2000      	movs	r0, #0
 800143c:	e7ed      	b.n	800141a <__eqdf2+0x5a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff

08001444 <__gedf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4647      	mov	r7, r8
 8001448:	46ce      	mov	lr, r9
 800144a:	0004      	movs	r4, r0
 800144c:	0018      	movs	r0, r3
 800144e:	0016      	movs	r6, r2
 8001450:	031b      	lsls	r3, r3, #12
 8001452:	0b1b      	lsrs	r3, r3, #12
 8001454:	4d2d      	ldr	r5, [pc, #180]	; (800150c <__gedf2+0xc8>)
 8001456:	004a      	lsls	r2, r1, #1
 8001458:	4699      	mov	r9, r3
 800145a:	b580      	push	{r7, lr}
 800145c:	0043      	lsls	r3, r0, #1
 800145e:	030f      	lsls	r7, r1, #12
 8001460:	46a4      	mov	ip, r4
 8001462:	46b0      	mov	r8, r6
 8001464:	0b3f      	lsrs	r7, r7, #12
 8001466:	0d52      	lsrs	r2, r2, #21
 8001468:	0fc9      	lsrs	r1, r1, #31
 800146a:	0d5b      	lsrs	r3, r3, #21
 800146c:	0fc0      	lsrs	r0, r0, #31
 800146e:	42aa      	cmp	r2, r5
 8001470:	d021      	beq.n	80014b6 <__gedf2+0x72>
 8001472:	42ab      	cmp	r3, r5
 8001474:	d013      	beq.n	800149e <__gedf2+0x5a>
 8001476:	2a00      	cmp	r2, #0
 8001478:	d122      	bne.n	80014c0 <__gedf2+0x7c>
 800147a:	433c      	orrs	r4, r7
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <__gedf2+0x42>
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d022      	beq.n	80014cc <__gedf2+0x88>
 8001486:	2c00      	cmp	r4, #0
 8001488:	d010      	beq.n	80014ac <__gedf2+0x68>
 800148a:	4281      	cmp	r1, r0
 800148c:	d022      	beq.n	80014d4 <__gedf2+0x90>
 800148e:	2002      	movs	r0, #2
 8001490:	3901      	subs	r1, #1
 8001492:	4008      	ands	r0, r1
 8001494:	3801      	subs	r0, #1
 8001496:	bcc0      	pop	{r6, r7}
 8001498:	46b9      	mov	r9, r7
 800149a:	46b0      	mov	r8, r6
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	464d      	mov	r5, r9
 80014a0:	432e      	orrs	r6, r5
 80014a2:	d129      	bne.n	80014f8 <__gedf2+0xb4>
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d1f0      	bne.n	800148a <__gedf2+0x46>
 80014a8:	433c      	orrs	r4, r7
 80014aa:	d1ee      	bne.n	800148a <__gedf2+0x46>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f2      	bne.n	8001496 <__gedf2+0x52>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7ef      	b.n	8001496 <__gedf2+0x52>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d11d      	bne.n	80014f8 <__gedf2+0xb4>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d0ee      	beq.n	800149e <__gedf2+0x5a>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e2      	bne.n	800148a <__gedf2+0x46>
 80014c4:	464c      	mov	r4, r9
 80014c6:	4326      	orrs	r6, r4
 80014c8:	d1df      	bne.n	800148a <__gedf2+0x46>
 80014ca:	e7e0      	b.n	800148e <__gedf2+0x4a>
 80014cc:	2000      	movs	r0, #0
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d0e1      	beq.n	8001496 <__gedf2+0x52>
 80014d2:	e7dc      	b.n	800148e <__gedf2+0x4a>
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dc0a      	bgt.n	80014ee <__gedf2+0xaa>
 80014d8:	dbe8      	blt.n	80014ac <__gedf2+0x68>
 80014da:	454f      	cmp	r7, r9
 80014dc:	d8d7      	bhi.n	800148e <__gedf2+0x4a>
 80014de:	d00e      	beq.n	80014fe <__gedf2+0xba>
 80014e0:	2000      	movs	r0, #0
 80014e2:	454f      	cmp	r7, r9
 80014e4:	d2d7      	bcs.n	8001496 <__gedf2+0x52>
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d0e2      	beq.n	80014b0 <__gedf2+0x6c>
 80014ea:	0008      	movs	r0, r1
 80014ec:	e7d3      	b.n	8001496 <__gedf2+0x52>
 80014ee:	4243      	negs	r3, r0
 80014f0:	4158      	adcs	r0, r3
 80014f2:	0040      	lsls	r0, r0, #1
 80014f4:	3801      	subs	r0, #1
 80014f6:	e7ce      	b.n	8001496 <__gedf2+0x52>
 80014f8:	2002      	movs	r0, #2
 80014fa:	4240      	negs	r0, r0
 80014fc:	e7cb      	b.n	8001496 <__gedf2+0x52>
 80014fe:	45c4      	cmp	ip, r8
 8001500:	d8c5      	bhi.n	800148e <__gedf2+0x4a>
 8001502:	2000      	movs	r0, #0
 8001504:	45c4      	cmp	ip, r8
 8001506:	d2c6      	bcs.n	8001496 <__gedf2+0x52>
 8001508:	e7ed      	b.n	80014e6 <__gedf2+0xa2>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	000007ff 	.word	0x000007ff

08001510 <__ledf2>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4647      	mov	r7, r8
 8001514:	46ce      	mov	lr, r9
 8001516:	0004      	movs	r4, r0
 8001518:	0018      	movs	r0, r3
 800151a:	0016      	movs	r6, r2
 800151c:	031b      	lsls	r3, r3, #12
 800151e:	0b1b      	lsrs	r3, r3, #12
 8001520:	4d2c      	ldr	r5, [pc, #176]	; (80015d4 <__ledf2+0xc4>)
 8001522:	004a      	lsls	r2, r1, #1
 8001524:	4699      	mov	r9, r3
 8001526:	b580      	push	{r7, lr}
 8001528:	0043      	lsls	r3, r0, #1
 800152a:	030f      	lsls	r7, r1, #12
 800152c:	46a4      	mov	ip, r4
 800152e:	46b0      	mov	r8, r6
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0d52      	lsrs	r2, r2, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	0fc0      	lsrs	r0, r0, #31
 800153a:	42aa      	cmp	r2, r5
 800153c:	d00d      	beq.n	800155a <__ledf2+0x4a>
 800153e:	42ab      	cmp	r3, r5
 8001540:	d010      	beq.n	8001564 <__ledf2+0x54>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d127      	bne.n	8001596 <__ledf2+0x86>
 8001546:	433c      	orrs	r4, r7
 8001548:	2b00      	cmp	r3, #0
 800154a:	d111      	bne.n	8001570 <__ledf2+0x60>
 800154c:	464d      	mov	r5, r9
 800154e:	432e      	orrs	r6, r5
 8001550:	d10e      	bne.n	8001570 <__ledf2+0x60>
 8001552:	2000      	movs	r0, #0
 8001554:	2c00      	cmp	r4, #0
 8001556:	d015      	beq.n	8001584 <__ledf2+0x74>
 8001558:	e00e      	b.n	8001578 <__ledf2+0x68>
 800155a:	003d      	movs	r5, r7
 800155c:	4325      	orrs	r5, r4
 800155e:	d110      	bne.n	8001582 <__ledf2+0x72>
 8001560:	4293      	cmp	r3, r2
 8001562:	d118      	bne.n	8001596 <__ledf2+0x86>
 8001564:	464d      	mov	r5, r9
 8001566:	432e      	orrs	r6, r5
 8001568:	d10b      	bne.n	8001582 <__ledf2+0x72>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d102      	bne.n	8001574 <__ledf2+0x64>
 800156e:	433c      	orrs	r4, r7
 8001570:	2c00      	cmp	r4, #0
 8001572:	d00b      	beq.n	800158c <__ledf2+0x7c>
 8001574:	4281      	cmp	r1, r0
 8001576:	d014      	beq.n	80015a2 <__ledf2+0x92>
 8001578:	2002      	movs	r0, #2
 800157a:	3901      	subs	r1, #1
 800157c:	4008      	ands	r0, r1
 800157e:	3801      	subs	r0, #1
 8001580:	e000      	b.n	8001584 <__ledf2+0x74>
 8001582:	2002      	movs	r0, #2
 8001584:	bcc0      	pop	{r6, r7}
 8001586:	46b9      	mov	r9, r7
 8001588:	46b0      	mov	r8, r6
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	2800      	cmp	r0, #0
 800158e:	d1f9      	bne.n	8001584 <__ledf2+0x74>
 8001590:	2001      	movs	r0, #1
 8001592:	4240      	negs	r0, r0
 8001594:	e7f6      	b.n	8001584 <__ledf2+0x74>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ec      	bne.n	8001574 <__ledf2+0x64>
 800159a:	464c      	mov	r4, r9
 800159c:	4326      	orrs	r6, r4
 800159e:	d1e9      	bne.n	8001574 <__ledf2+0x64>
 80015a0:	e7ea      	b.n	8001578 <__ledf2+0x68>
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd04      	ble.n	80015b0 <__ledf2+0xa0>
 80015a6:	4243      	negs	r3, r0
 80015a8:	4158      	adcs	r0, r3
 80015aa:	0040      	lsls	r0, r0, #1
 80015ac:	3801      	subs	r0, #1
 80015ae:	e7e9      	b.n	8001584 <__ledf2+0x74>
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbeb      	blt.n	800158c <__ledf2+0x7c>
 80015b4:	454f      	cmp	r7, r9
 80015b6:	d8df      	bhi.n	8001578 <__ledf2+0x68>
 80015b8:	d006      	beq.n	80015c8 <__ledf2+0xb8>
 80015ba:	2000      	movs	r0, #0
 80015bc:	454f      	cmp	r7, r9
 80015be:	d2e1      	bcs.n	8001584 <__ledf2+0x74>
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0e5      	beq.n	8001590 <__ledf2+0x80>
 80015c4:	0008      	movs	r0, r1
 80015c6:	e7dd      	b.n	8001584 <__ledf2+0x74>
 80015c8:	45c4      	cmp	ip, r8
 80015ca:	d8d5      	bhi.n	8001578 <__ledf2+0x68>
 80015cc:	2000      	movs	r0, #0
 80015ce:	45c4      	cmp	ip, r8
 80015d0:	d2d8      	bcs.n	8001584 <__ledf2+0x74>
 80015d2:	e7f5      	b.n	80015c0 <__ledf2+0xb0>
 80015d4:	000007ff 	.word	0x000007ff

080015d8 <__aeabi_dmul>:
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	4657      	mov	r7, sl
 80015dc:	464e      	mov	r6, r9
 80015de:	4645      	mov	r5, r8
 80015e0:	46de      	mov	lr, fp
 80015e2:	b5e0      	push	{r5, r6, r7, lr}
 80015e4:	4698      	mov	r8, r3
 80015e6:	030c      	lsls	r4, r1, #12
 80015e8:	004b      	lsls	r3, r1, #1
 80015ea:	0006      	movs	r6, r0
 80015ec:	4692      	mov	sl, r2
 80015ee:	b087      	sub	sp, #28
 80015f0:	0b24      	lsrs	r4, r4, #12
 80015f2:	0d5b      	lsrs	r3, r3, #21
 80015f4:	0fcf      	lsrs	r7, r1, #31
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dmul+0x24>
 80015fa:	e15c      	b.n	80018b6 <__aeabi_dmul+0x2de>
 80015fc:	4ad9      	ldr	r2, [pc, #868]	; (8001964 <__aeabi_dmul+0x38c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d100      	bne.n	8001604 <__aeabi_dmul+0x2c>
 8001602:	e175      	b.n	80018f0 <__aeabi_dmul+0x318>
 8001604:	0f42      	lsrs	r2, r0, #29
 8001606:	00e4      	lsls	r4, r4, #3
 8001608:	4314      	orrs	r4, r2
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	0412      	lsls	r2, r2, #16
 800160e:	4314      	orrs	r4, r2
 8001610:	4ad5      	ldr	r2, [pc, #852]	; (8001968 <__aeabi_dmul+0x390>)
 8001612:	00c5      	lsls	r5, r0, #3
 8001614:	4694      	mov	ip, r2
 8001616:	4463      	add	r3, ip
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	4699      	mov	r9, r3
 800161e:	469b      	mov	fp, r3
 8001620:	4643      	mov	r3, r8
 8001622:	4642      	mov	r2, r8
 8001624:	031e      	lsls	r6, r3, #12
 8001626:	0fd2      	lsrs	r2, r2, #31
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4650      	mov	r0, sl
 800162c:	4690      	mov	r8, r2
 800162e:	0b36      	lsrs	r6, r6, #12
 8001630:	0d5b      	lsrs	r3, r3, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x5e>
 8001634:	e120      	b.n	8001878 <__aeabi_dmul+0x2a0>
 8001636:	4acb      	ldr	r2, [pc, #812]	; (8001964 <__aeabi_dmul+0x38c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x66>
 800163c:	e162      	b.n	8001904 <__aeabi_dmul+0x32c>
 800163e:	49ca      	ldr	r1, [pc, #808]	; (8001968 <__aeabi_dmul+0x390>)
 8001640:	0f42      	lsrs	r2, r0, #29
 8001642:	468c      	mov	ip, r1
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	4463      	add	r3, ip
 8001648:	00f6      	lsls	r6, r6, #3
 800164a:	468c      	mov	ip, r1
 800164c:	4316      	orrs	r6, r2
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	449c      	add	ip, r3
 8001652:	0412      	lsls	r2, r2, #16
 8001654:	4663      	mov	r3, ip
 8001656:	4316      	orrs	r6, r2
 8001658:	00c2      	lsls	r2, r0, #3
 800165a:	2000      	movs	r0, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	9900      	ldr	r1, [sp, #0]
 8001660:	4643      	mov	r3, r8
 8001662:	3101      	adds	r1, #1
 8001664:	468c      	mov	ip, r1
 8001666:	4649      	mov	r1, r9
 8001668:	407b      	eors	r3, r7
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	290f      	cmp	r1, #15
 800166e:	d826      	bhi.n	80016be <__aeabi_dmul+0xe6>
 8001670:	4bbe      	ldr	r3, [pc, #760]	; (800196c <__aeabi_dmul+0x394>)
 8001672:	0089      	lsls	r1, r1, #2
 8001674:	5859      	ldr	r1, [r3, r1]
 8001676:	468f      	mov	pc, r1
 8001678:	4643      	mov	r3, r8
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	0034      	movs	r4, r6
 800167e:	0015      	movs	r5, r2
 8001680:	4683      	mov	fp, r0
 8001682:	465b      	mov	r3, fp
 8001684:	2b02      	cmp	r3, #2
 8001686:	d016      	beq.n	80016b6 <__aeabi_dmul+0xde>
 8001688:	2b03      	cmp	r3, #3
 800168a:	d100      	bne.n	800168e <__aeabi_dmul+0xb6>
 800168c:	e203      	b.n	8001a96 <__aeabi_dmul+0x4be>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0xbc>
 8001692:	e0cd      	b.n	8001830 <__aeabi_dmul+0x258>
 8001694:	2200      	movs	r2, #0
 8001696:	2400      	movs	r4, #0
 8001698:	2500      	movs	r5, #0
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	0512      	lsls	r2, r2, #20
 800169e:	4322      	orrs	r2, r4
 80016a0:	07db      	lsls	r3, r3, #31
 80016a2:	431a      	orrs	r2, r3
 80016a4:	0028      	movs	r0, r5
 80016a6:	0011      	movs	r1, r2
 80016a8:	b007      	add	sp, #28
 80016aa:	bcf0      	pop	{r4, r5, r6, r7}
 80016ac:	46bb      	mov	fp, r7
 80016ae:	46b2      	mov	sl, r6
 80016b0:	46a9      	mov	r9, r5
 80016b2:	46a0      	mov	r8, r4
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b6:	2400      	movs	r4, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	4aaa      	ldr	r2, [pc, #680]	; (8001964 <__aeabi_dmul+0x38c>)
 80016bc:	e7ed      	b.n	800169a <__aeabi_dmul+0xc2>
 80016be:	0c28      	lsrs	r0, r5, #16
 80016c0:	042d      	lsls	r5, r5, #16
 80016c2:	0c2d      	lsrs	r5, r5, #16
 80016c4:	002b      	movs	r3, r5
 80016c6:	0c11      	lsrs	r1, r2, #16
 80016c8:	0412      	lsls	r2, r2, #16
 80016ca:	0c12      	lsrs	r2, r2, #16
 80016cc:	4353      	muls	r3, r2
 80016ce:	4698      	mov	r8, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	002f      	movs	r7, r5
 80016d4:	4343      	muls	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	434f      	muls	r7, r1
 80016da:	444f      	add	r7, r9
 80016dc:	46bb      	mov	fp, r7
 80016de:	4647      	mov	r7, r8
 80016e0:	000b      	movs	r3, r1
 80016e2:	0c3f      	lsrs	r7, r7, #16
 80016e4:	46ba      	mov	sl, r7
 80016e6:	4343      	muls	r3, r0
 80016e8:	44da      	add	sl, fp
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	45d1      	cmp	r9, sl
 80016ee:	d904      	bls.n	80016fa <__aeabi_dmul+0x122>
 80016f0:	2780      	movs	r7, #128	; 0x80
 80016f2:	027f      	lsls	r7, r7, #9
 80016f4:	46b9      	mov	r9, r7
 80016f6:	444b      	add	r3, r9
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	4653      	mov	r3, sl
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	469b      	mov	fp, r3
 8001700:	4653      	mov	r3, sl
 8001702:	041f      	lsls	r7, r3, #16
 8001704:	4643      	mov	r3, r8
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	4698      	mov	r8, r3
 800170c:	003b      	movs	r3, r7
 800170e:	4443      	add	r3, r8
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	0c33      	lsrs	r3, r6, #16
 8001714:	0436      	lsls	r6, r6, #16
 8001716:	0c36      	lsrs	r6, r6, #16
 8001718:	4698      	mov	r8, r3
 800171a:	0033      	movs	r3, r6
 800171c:	4343      	muls	r3, r0
 800171e:	4699      	mov	r9, r3
 8001720:	4643      	mov	r3, r8
 8001722:	4343      	muls	r3, r0
 8001724:	002f      	movs	r7, r5
 8001726:	469a      	mov	sl, r3
 8001728:	4643      	mov	r3, r8
 800172a:	4377      	muls	r7, r6
 800172c:	435d      	muls	r5, r3
 800172e:	0c38      	lsrs	r0, r7, #16
 8001730:	444d      	add	r5, r9
 8001732:	1945      	adds	r5, r0, r5
 8001734:	45a9      	cmp	r9, r5
 8001736:	d903      	bls.n	8001740 <__aeabi_dmul+0x168>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4699      	mov	r9, r3
 800173e:	44ca      	add	sl, r9
 8001740:	043f      	lsls	r7, r7, #16
 8001742:	0c28      	lsrs	r0, r5, #16
 8001744:	0c3f      	lsrs	r7, r7, #16
 8001746:	042d      	lsls	r5, r5, #16
 8001748:	19ed      	adds	r5, r5, r7
 800174a:	0c27      	lsrs	r7, r4, #16
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	0c24      	lsrs	r4, r4, #16
 8001750:	0003      	movs	r3, r0
 8001752:	0020      	movs	r0, r4
 8001754:	4350      	muls	r0, r2
 8001756:	437a      	muls	r2, r7
 8001758:	4691      	mov	r9, r2
 800175a:	003a      	movs	r2, r7
 800175c:	4453      	add	r3, sl
 800175e:	9305      	str	r3, [sp, #20]
 8001760:	0c03      	lsrs	r3, r0, #16
 8001762:	469a      	mov	sl, r3
 8001764:	434a      	muls	r2, r1
 8001766:	4361      	muls	r1, r4
 8001768:	4449      	add	r1, r9
 800176a:	4451      	add	r1, sl
 800176c:	44ab      	add	fp, r5
 800176e:	4589      	cmp	r9, r1
 8001770:	d903      	bls.n	800177a <__aeabi_dmul+0x1a2>
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4699      	mov	r9, r3
 8001778:	444a      	add	r2, r9
 800177a:	0400      	lsls	r0, r0, #16
 800177c:	0c0b      	lsrs	r3, r1, #16
 800177e:	0c00      	lsrs	r0, r0, #16
 8001780:	0409      	lsls	r1, r1, #16
 8001782:	1809      	adds	r1, r1, r0
 8001784:	0020      	movs	r0, r4
 8001786:	4699      	mov	r9, r3
 8001788:	4643      	mov	r3, r8
 800178a:	4370      	muls	r0, r6
 800178c:	435c      	muls	r4, r3
 800178e:	437e      	muls	r6, r7
 8001790:	435f      	muls	r7, r3
 8001792:	0c03      	lsrs	r3, r0, #16
 8001794:	4698      	mov	r8, r3
 8001796:	19a4      	adds	r4, r4, r6
 8001798:	4444      	add	r4, r8
 800179a:	444a      	add	r2, r9
 800179c:	9703      	str	r7, [sp, #12]
 800179e:	42a6      	cmp	r6, r4
 80017a0:	d904      	bls.n	80017ac <__aeabi_dmul+0x1d4>
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4698      	mov	r8, r3
 80017a8:	4447      	add	r7, r8
 80017aa:	9703      	str	r7, [sp, #12]
 80017ac:	0423      	lsls	r3, r4, #16
 80017ae:	9e02      	ldr	r6, [sp, #8]
 80017b0:	469a      	mov	sl, r3
 80017b2:	9b05      	ldr	r3, [sp, #20]
 80017b4:	445e      	add	r6, fp
 80017b6:	4698      	mov	r8, r3
 80017b8:	42ae      	cmp	r6, r5
 80017ba:	41ad      	sbcs	r5, r5
 80017bc:	1876      	adds	r6, r6, r1
 80017be:	428e      	cmp	r6, r1
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	0400      	lsls	r0, r0, #16
 80017c4:	0c00      	lsrs	r0, r0, #16
 80017c6:	4450      	add	r0, sl
 80017c8:	4440      	add	r0, r8
 80017ca:	426d      	negs	r5, r5
 80017cc:	1947      	adds	r7, r0, r5
 80017ce:	46b8      	mov	r8, r7
 80017d0:	4693      	mov	fp, r2
 80017d2:	4249      	negs	r1, r1
 80017d4:	4689      	mov	r9, r1
 80017d6:	44c3      	add	fp, r8
 80017d8:	44d9      	add	r9, fp
 80017da:	4298      	cmp	r0, r3
 80017dc:	4180      	sbcs	r0, r0
 80017de:	45a8      	cmp	r8, r5
 80017e0:	41ad      	sbcs	r5, r5
 80017e2:	4593      	cmp	fp, r2
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	4589      	cmp	r9, r1
 80017e8:	4189      	sbcs	r1, r1
 80017ea:	426d      	negs	r5, r5
 80017ec:	4240      	negs	r0, r0
 80017ee:	4328      	orrs	r0, r5
 80017f0:	0c24      	lsrs	r4, r4, #16
 80017f2:	4252      	negs	r2, r2
 80017f4:	4249      	negs	r1, r1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	1900      	adds	r0, r0, r4
 80017fc:	1880      	adds	r0, r0, r2
 80017fe:	18c7      	adds	r7, r0, r3
 8001800:	464b      	mov	r3, r9
 8001802:	0ddc      	lsrs	r4, r3, #23
 8001804:	9b04      	ldr	r3, [sp, #16]
 8001806:	0275      	lsls	r5, r6, #9
 8001808:	431d      	orrs	r5, r3
 800180a:	1e6a      	subs	r2, r5, #1
 800180c:	4195      	sbcs	r5, r2
 800180e:	464b      	mov	r3, r9
 8001810:	0df6      	lsrs	r6, r6, #23
 8001812:	027f      	lsls	r7, r7, #9
 8001814:	4335      	orrs	r5, r6
 8001816:	025a      	lsls	r2, r3, #9
 8001818:	433c      	orrs	r4, r7
 800181a:	4315      	orrs	r5, r2
 800181c:	01fb      	lsls	r3, r7, #7
 800181e:	d400      	bmi.n	8001822 <__aeabi_dmul+0x24a>
 8001820:	e11c      	b.n	8001a5c <__aeabi_dmul+0x484>
 8001822:	2101      	movs	r1, #1
 8001824:	086a      	lsrs	r2, r5, #1
 8001826:	400d      	ands	r5, r1
 8001828:	4315      	orrs	r5, r2
 800182a:	07e2      	lsls	r2, r4, #31
 800182c:	4315      	orrs	r5, r2
 800182e:	0864      	lsrs	r4, r4, #1
 8001830:	494f      	ldr	r1, [pc, #316]	; (8001970 <__aeabi_dmul+0x398>)
 8001832:	4461      	add	r1, ip
 8001834:	2900      	cmp	r1, #0
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x262>
 8001838:	e0b0      	b.n	800199c <__aeabi_dmul+0x3c4>
 800183a:	076b      	lsls	r3, r5, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x27a>
 800183e:	220f      	movs	r2, #15
 8001840:	402a      	ands	r2, r5
 8001842:	2a04      	cmp	r2, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x27a>
 8001846:	1d2a      	adds	r2, r5, #4
 8001848:	42aa      	cmp	r2, r5
 800184a:	41ad      	sbcs	r5, r5
 800184c:	426d      	negs	r5, r5
 800184e:	1964      	adds	r4, r4, r5
 8001850:	0015      	movs	r5, r2
 8001852:	01e3      	lsls	r3, r4, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x288>
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <__aeabi_dmul+0x39c>)
 800185a:	00c9      	lsls	r1, r1, #3
 800185c:	4014      	ands	r4, r2
 800185e:	4461      	add	r1, ip
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <__aeabi_dmul+0x3a0>)
 8001862:	4291      	cmp	r1, r2
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x290>
 8001866:	e726      	b.n	80016b6 <__aeabi_dmul+0xde>
 8001868:	0762      	lsls	r2, r4, #29
 800186a:	08ed      	lsrs	r5, r5, #3
 800186c:	0264      	lsls	r4, r4, #9
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	4315      	orrs	r5, r2
 8001872:	0b24      	lsrs	r4, r4, #12
 8001874:	0d4a      	lsrs	r2, r1, #21
 8001876:	e710      	b.n	800169a <__aeabi_dmul+0xc2>
 8001878:	4652      	mov	r2, sl
 800187a:	4332      	orrs	r2, r6
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0x2a8>
 800187e:	e07f      	b.n	8001980 <__aeabi_dmul+0x3a8>
 8001880:	2e00      	cmp	r6, #0
 8001882:	d100      	bne.n	8001886 <__aeabi_dmul+0x2ae>
 8001884:	e0dc      	b.n	8001a40 <__aeabi_dmul+0x468>
 8001886:	0030      	movs	r0, r6
 8001888:	f000 fe1e 	bl	80024c8 <__clzsi2>
 800188c:	0002      	movs	r2, r0
 800188e:	3a0b      	subs	r2, #11
 8001890:	231d      	movs	r3, #29
 8001892:	0001      	movs	r1, r0
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	4652      	mov	r2, sl
 8001898:	3908      	subs	r1, #8
 800189a:	40da      	lsrs	r2, r3
 800189c:	408e      	lsls	r6, r1
 800189e:	4316      	orrs	r6, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	408a      	lsls	r2, r1
 80018a4:	9b00      	ldr	r3, [sp, #0]
 80018a6:	4935      	ldr	r1, [pc, #212]	; (800197c <__aeabi_dmul+0x3a4>)
 80018a8:	1a18      	subs	r0, r3, r0
 80018aa:	0003      	movs	r3, r0
 80018ac:	468c      	mov	ip, r1
 80018ae:	4463      	add	r3, ip
 80018b0:	2000      	movs	r0, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	e6d3      	b.n	800165e <__aeabi_dmul+0x86>
 80018b6:	0025      	movs	r5, r4
 80018b8:	4305      	orrs	r5, r0
 80018ba:	d04a      	beq.n	8001952 <__aeabi_dmul+0x37a>
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dmul+0x2ea>
 80018c0:	e0b0      	b.n	8001a24 <__aeabi_dmul+0x44c>
 80018c2:	0020      	movs	r0, r4
 80018c4:	f000 fe00 	bl	80024c8 <__clzsi2>
 80018c8:	0001      	movs	r1, r0
 80018ca:	0002      	movs	r2, r0
 80018cc:	390b      	subs	r1, #11
 80018ce:	231d      	movs	r3, #29
 80018d0:	0010      	movs	r0, r2
 80018d2:	1a5b      	subs	r3, r3, r1
 80018d4:	0031      	movs	r1, r6
 80018d6:	0035      	movs	r5, r6
 80018d8:	3808      	subs	r0, #8
 80018da:	4084      	lsls	r4, r0
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	4085      	lsls	r5, r0
 80018e0:	430c      	orrs	r4, r1
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <__aeabi_dmul+0x3a4>)
 80018e4:	1a83      	subs	r3, r0, r2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	4699      	mov	r9, r3
 80018ec:	469b      	mov	fp, r3
 80018ee:	e697      	b.n	8001620 <__aeabi_dmul+0x48>
 80018f0:	0005      	movs	r5, r0
 80018f2:	4325      	orrs	r5, r4
 80018f4:	d126      	bne.n	8001944 <__aeabi_dmul+0x36c>
 80018f6:	2208      	movs	r2, #8
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2302      	movs	r3, #2
 80018fc:	2400      	movs	r4, #0
 80018fe:	4691      	mov	r9, r2
 8001900:	469b      	mov	fp, r3
 8001902:	e68d      	b.n	8001620 <__aeabi_dmul+0x48>
 8001904:	4652      	mov	r2, sl
 8001906:	9b00      	ldr	r3, [sp, #0]
 8001908:	4332      	orrs	r2, r6
 800190a:	d110      	bne.n	800192e <__aeabi_dmul+0x356>
 800190c:	4915      	ldr	r1, [pc, #84]	; (8001964 <__aeabi_dmul+0x38c>)
 800190e:	2600      	movs	r6, #0
 8001910:	468c      	mov	ip, r1
 8001912:	4463      	add	r3, ip
 8001914:	4649      	mov	r1, r9
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	4319      	orrs	r1, r3
 800191c:	4689      	mov	r9, r1
 800191e:	2002      	movs	r0, #2
 8001920:	e69d      	b.n	800165e <__aeabi_dmul+0x86>
 8001922:	465b      	mov	r3, fp
 8001924:	9701      	str	r7, [sp, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d000      	beq.n	800192c <__aeabi_dmul+0x354>
 800192a:	e6ad      	b.n	8001688 <__aeabi_dmul+0xb0>
 800192c:	e6c3      	b.n	80016b6 <__aeabi_dmul+0xde>
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <__aeabi_dmul+0x38c>)
 8001930:	2003      	movs	r0, #3
 8001932:	4694      	mov	ip, r2
 8001934:	4463      	add	r3, ip
 8001936:	464a      	mov	r2, r9
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	4652      	mov	r2, sl
 8001942:	e68c      	b.n	800165e <__aeabi_dmul+0x86>
 8001944:	220c      	movs	r2, #12
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2303      	movs	r3, #3
 800194a:	0005      	movs	r5, r0
 800194c:	4691      	mov	r9, r2
 800194e:	469b      	mov	fp, r3
 8001950:	e666      	b.n	8001620 <__aeabi_dmul+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	2400      	movs	r4, #0
 800195e:	469b      	mov	fp, r3
 8001960:	e65e      	b.n	8001620 <__aeabi_dmul+0x48>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	000007ff 	.word	0x000007ff
 8001968:	fffffc01 	.word	0xfffffc01
 800196c:	0800a0a4 	.word	0x0800a0a4
 8001970:	000003ff 	.word	0x000003ff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	fffffc0d 	.word	0xfffffc0d
 8001980:	4649      	mov	r1, r9
 8001982:	2301      	movs	r3, #1
 8001984:	4319      	orrs	r1, r3
 8001986:	4689      	mov	r9, r1
 8001988:	2600      	movs	r6, #0
 800198a:	2001      	movs	r0, #1
 800198c:	e667      	b.n	800165e <__aeabi_dmul+0x86>
 800198e:	2300      	movs	r3, #0
 8001990:	2480      	movs	r4, #128	; 0x80
 8001992:	2500      	movs	r5, #0
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	e67e      	b.n	800169a <__aeabi_dmul+0xc2>
 800199c:	2001      	movs	r0, #1
 800199e:	1a40      	subs	r0, r0, r1
 80019a0:	2838      	cmp	r0, #56	; 0x38
 80019a2:	dd00      	ble.n	80019a6 <__aeabi_dmul+0x3ce>
 80019a4:	e676      	b.n	8001694 <__aeabi_dmul+0xbc>
 80019a6:	281f      	cmp	r0, #31
 80019a8:	dd5b      	ble.n	8001a62 <__aeabi_dmul+0x48a>
 80019aa:	221f      	movs	r2, #31
 80019ac:	0023      	movs	r3, r4
 80019ae:	4252      	negs	r2, r2
 80019b0:	1a51      	subs	r1, r2, r1
 80019b2:	40cb      	lsrs	r3, r1
 80019b4:	0019      	movs	r1, r3
 80019b6:	2820      	cmp	r0, #32
 80019b8:	d003      	beq.n	80019c2 <__aeabi_dmul+0x3ea>
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <__aeabi_dmul+0x4d0>)
 80019bc:	4462      	add	r2, ip
 80019be:	4094      	lsls	r4, r2
 80019c0:	4325      	orrs	r5, r4
 80019c2:	1e6a      	subs	r2, r5, #1
 80019c4:	4195      	sbcs	r5, r2
 80019c6:	002a      	movs	r2, r5
 80019c8:	430a      	orrs	r2, r1
 80019ca:	2107      	movs	r1, #7
 80019cc:	000d      	movs	r5, r1
 80019ce:	2400      	movs	r4, #0
 80019d0:	4015      	ands	r5, r2
 80019d2:	4211      	tst	r1, r2
 80019d4:	d05b      	beq.n	8001a8e <__aeabi_dmul+0x4b6>
 80019d6:	210f      	movs	r1, #15
 80019d8:	2400      	movs	r4, #0
 80019da:	4011      	ands	r1, r2
 80019dc:	2904      	cmp	r1, #4
 80019de:	d053      	beq.n	8001a88 <__aeabi_dmul+0x4b0>
 80019e0:	1d11      	adds	r1, r2, #4
 80019e2:	4291      	cmp	r1, r2
 80019e4:	4192      	sbcs	r2, r2
 80019e6:	4252      	negs	r2, r2
 80019e8:	18a4      	adds	r4, r4, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	0223      	lsls	r3, r4, #8
 80019ee:	d54b      	bpl.n	8001a88 <__aeabi_dmul+0x4b0>
 80019f0:	2201      	movs	r2, #1
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	e650      	b.n	800169a <__aeabi_dmul+0xc2>
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	421c      	tst	r4, r3
 80019fe:	d009      	beq.n	8001a14 <__aeabi_dmul+0x43c>
 8001a00:	421e      	tst	r6, r3
 8001a02:	d107      	bne.n	8001a14 <__aeabi_dmul+0x43c>
 8001a04:	4333      	orrs	r3, r6
 8001a06:	031c      	lsls	r4, r3, #12
 8001a08:	4643      	mov	r3, r8
 8001a0a:	0015      	movs	r5, r2
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	e642      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0312      	lsls	r2, r2, #12
 8001a18:	4314      	orrs	r4, r2
 8001a1a:	0324      	lsls	r4, r4, #12
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001a1e:	0b24      	lsrs	r4, r4, #12
 8001a20:	9701      	str	r7, [sp, #4]
 8001a22:	e63a      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a24:	f000 fd50 	bl	80024c8 <__clzsi2>
 8001a28:	0001      	movs	r1, r0
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	3115      	adds	r1, #21
 8001a2e:	3220      	adds	r2, #32
 8001a30:	291c      	cmp	r1, #28
 8001a32:	dc00      	bgt.n	8001a36 <__aeabi_dmul+0x45e>
 8001a34:	e74b      	b.n	80018ce <__aeabi_dmul+0x2f6>
 8001a36:	0034      	movs	r4, r6
 8001a38:	3808      	subs	r0, #8
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	4084      	lsls	r4, r0
 8001a3e:	e750      	b.n	80018e2 <__aeabi_dmul+0x30a>
 8001a40:	f000 fd42 	bl	80024c8 <__clzsi2>
 8001a44:	0003      	movs	r3, r0
 8001a46:	001a      	movs	r2, r3
 8001a48:	3215      	adds	r2, #21
 8001a4a:	3020      	adds	r0, #32
 8001a4c:	2a1c      	cmp	r2, #28
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dmul+0x47a>
 8001a50:	e71e      	b.n	8001890 <__aeabi_dmul+0x2b8>
 8001a52:	4656      	mov	r6, sl
 8001a54:	3b08      	subs	r3, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	409e      	lsls	r6, r3
 8001a5a:	e723      	b.n	80018a4 <__aeabi_dmul+0x2cc>
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	469c      	mov	ip, r3
 8001a60:	e6e6      	b.n	8001830 <__aeabi_dmul+0x258>
 8001a62:	4912      	ldr	r1, [pc, #72]	; (8001aac <__aeabi_dmul+0x4d4>)
 8001a64:	0022      	movs	r2, r4
 8001a66:	4461      	add	r1, ip
 8001a68:	002e      	movs	r6, r5
 8001a6a:	408d      	lsls	r5, r1
 8001a6c:	408a      	lsls	r2, r1
 8001a6e:	40c6      	lsrs	r6, r0
 8001a70:	1e69      	subs	r1, r5, #1
 8001a72:	418d      	sbcs	r5, r1
 8001a74:	4332      	orrs	r2, r6
 8001a76:	432a      	orrs	r2, r5
 8001a78:	40c4      	lsrs	r4, r0
 8001a7a:	0753      	lsls	r3, r2, #29
 8001a7c:	d0b6      	beq.n	80019ec <__aeabi_dmul+0x414>
 8001a7e:	210f      	movs	r1, #15
 8001a80:	4011      	ands	r1, r2
 8001a82:	2904      	cmp	r1, #4
 8001a84:	d1ac      	bne.n	80019e0 <__aeabi_dmul+0x408>
 8001a86:	e7b1      	b.n	80019ec <__aeabi_dmul+0x414>
 8001a88:	0765      	lsls	r5, r4, #29
 8001a8a:	0264      	lsls	r4, r4, #9
 8001a8c:	0b24      	lsrs	r4, r4, #12
 8001a8e:	08d2      	lsrs	r2, r2, #3
 8001a90:	4315      	orrs	r5, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	e601      	b.n	800169a <__aeabi_dmul+0xc2>
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0312      	lsls	r2, r2, #12
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	4a01      	ldr	r2, [pc, #4]	; (8001aa4 <__aeabi_dmul+0x4cc>)
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	e5fa      	b.n	800169a <__aeabi_dmul+0xc2>
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e

08001ab0 <__aeabi_dsub>:
 8001ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab2:	4657      	mov	r7, sl
 8001ab4:	464e      	mov	r6, r9
 8001ab6:	4645      	mov	r5, r8
 8001ab8:	46de      	mov	lr, fp
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	001e      	movs	r6, r3
 8001abe:	0017      	movs	r7, r2
 8001ac0:	004a      	lsls	r2, r1, #1
 8001ac2:	030b      	lsls	r3, r1, #12
 8001ac4:	0d52      	lsrs	r2, r2, #21
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	4690      	mov	r8, r2
 8001aca:	0f42      	lsrs	r2, r0, #29
 8001acc:	431a      	orrs	r2, r3
 8001ace:	0fcd      	lsrs	r5, r1, #31
 8001ad0:	4ccd      	ldr	r4, [pc, #820]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ad2:	0331      	lsls	r1, r6, #12
 8001ad4:	00c3      	lsls	r3, r0, #3
 8001ad6:	4694      	mov	ip, r2
 8001ad8:	0070      	lsls	r0, r6, #1
 8001ada:	0f7a      	lsrs	r2, r7, #29
 8001adc:	0a49      	lsrs	r1, r1, #9
 8001ade:	00ff      	lsls	r7, r7, #3
 8001ae0:	469a      	mov	sl, r3
 8001ae2:	46b9      	mov	r9, r7
 8001ae4:	0d40      	lsrs	r0, r0, #21
 8001ae6:	0ff6      	lsrs	r6, r6, #31
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	42a0      	cmp	r0, r4
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x40>
 8001aee:	e0b1      	b.n	8001c54 <__aeabi_dsub+0x1a4>
 8001af0:	2201      	movs	r2, #1
 8001af2:	4056      	eors	r6, r2
 8001af4:	46b3      	mov	fp, r6
 8001af6:	42b5      	cmp	r5, r6
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x4c>
 8001afa:	e088      	b.n	8001c0e <__aeabi_dsub+0x15e>
 8001afc:	4642      	mov	r2, r8
 8001afe:	1a12      	subs	r2, r2, r0
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x56>
 8001b04:	e0ae      	b.n	8001c64 <__aeabi_dsub+0x1b4>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x5c>
 8001b0a:	e0c1      	b.n	8001c90 <__aeabi_dsub+0x1e0>
 8001b0c:	48be      	ldr	r0, [pc, #760]	; (8001e08 <__aeabi_dsub+0x358>)
 8001b0e:	4580      	cmp	r8, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x64>
 8001b12:	e151      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001b14:	2080      	movs	r0, #128	; 0x80
 8001b16:	0400      	lsls	r0, r0, #16
 8001b18:	4301      	orrs	r1, r0
 8001b1a:	2a38      	cmp	r2, #56	; 0x38
 8001b1c:	dd00      	ble.n	8001b20 <__aeabi_dsub+0x70>
 8001b1e:	e17b      	b.n	8001e18 <__aeabi_dsub+0x368>
 8001b20:	2a1f      	cmp	r2, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x76>
 8001b24:	e1ee      	b.n	8001f04 <__aeabi_dsub+0x454>
 8001b26:	2020      	movs	r0, #32
 8001b28:	003e      	movs	r6, r7
 8001b2a:	1a80      	subs	r0, r0, r2
 8001b2c:	000c      	movs	r4, r1
 8001b2e:	40d6      	lsrs	r6, r2
 8001b30:	40d1      	lsrs	r1, r2
 8001b32:	4087      	lsls	r7, r0
 8001b34:	4662      	mov	r2, ip
 8001b36:	4084      	lsls	r4, r0
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	1e78      	subs	r0, r7, #1
 8001b3c:	4187      	sbcs	r7, r0
 8001b3e:	4694      	mov	ip, r2
 8001b40:	4334      	orrs	r4, r6
 8001b42:	4327      	orrs	r7, r4
 8001b44:	1bdc      	subs	r4, r3, r7
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	4662      	mov	r2, ip
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4699      	mov	r9, r3
 8001b52:	464b      	mov	r3, r9
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0xaa>
 8001b58:	e118      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	0258      	lsls	r0, r3, #9
 8001b5e:	0a43      	lsrs	r3, r0, #9
 8001b60:	4699      	mov	r9, r3
 8001b62:	464b      	mov	r3, r9
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0xba>
 8001b68:	e137      	b.n	8001dda <__aeabi_dsub+0x32a>
 8001b6a:	4648      	mov	r0, r9
 8001b6c:	f000 fcac 	bl	80024c8 <__clzsi2>
 8001b70:	0001      	movs	r1, r0
 8001b72:	3908      	subs	r1, #8
 8001b74:	2320      	movs	r3, #32
 8001b76:	0022      	movs	r2, r4
 8001b78:	4648      	mov	r0, r9
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	40da      	lsrs	r2, r3
 8001b7e:	4088      	lsls	r0, r1
 8001b80:	408c      	lsls	r4, r1
 8001b82:	4643      	mov	r3, r8
 8001b84:	4310      	orrs	r0, r2
 8001b86:	4588      	cmp	r8, r1
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0xdc>
 8001b8a:	e136      	b.n	8001dfa <__aeabi_dsub+0x34a>
 8001b8c:	1ac9      	subs	r1, r1, r3
 8001b8e:	1c4b      	adds	r3, r1, #1
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0xe6>
 8001b94:	e0ea      	b.n	8001d6c <__aeabi_dsub+0x2bc>
 8001b96:	2220      	movs	r2, #32
 8001b98:	0026      	movs	r6, r4
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4094      	lsls	r4, r2
 8001ba0:	40de      	lsrs	r6, r3
 8001ba2:	40d8      	lsrs	r0, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4091      	lsls	r1, r2
 8001ba8:	1e62      	subs	r2, r4, #1
 8001baa:	4194      	sbcs	r4, r2
 8001bac:	4681      	mov	r9, r0
 8001bae:	4698      	mov	r8, r3
 8001bb0:	4331      	orrs	r1, r6
 8001bb2:	430c      	orrs	r4, r1
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x11c>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a1      	add	r9, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	464b      	mov	r3, r9
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x124>
 8001bd2:	e0de      	b.n	8001d92 <__aeabi_dsub+0x2e2>
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <__aeabi_dsub+0x358>)
 8001bd8:	3101      	adds	r1, #1
 8001bda:	4299      	cmp	r1, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x130>
 8001bde:	e0e7      	b.n	8001db0 <__aeabi_dsub+0x300>
 8001be0:	464b      	mov	r3, r9
 8001be2:	488a      	ldr	r0, [pc, #552]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001be4:	08e4      	lsrs	r4, r4, #3
 8001be6:	4003      	ands	r3, r0
 8001be8:	0018      	movs	r0, r3
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	075b      	lsls	r3, r3, #29
 8001bee:	0240      	lsls	r0, r0, #9
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	0d4a      	lsrs	r2, r1, #21
 8001bf4:	0b04      	lsrs	r4, r0, #12
 8001bf6:	0512      	lsls	r2, r2, #20
 8001bf8:	07ed      	lsls	r5, r5, #31
 8001bfa:	4322      	orrs	r2, r4
 8001bfc:	432a      	orrs	r2, r5
 8001bfe:	0018      	movs	r0, r3
 8001c00:	0011      	movs	r1, r2
 8001c02:	bcf0      	pop	{r4, r5, r6, r7}
 8001c04:	46bb      	mov	fp, r7
 8001c06:	46b2      	mov	sl, r6
 8001c08:	46a9      	mov	r9, r5
 8001c0a:	46a0      	mov	r8, r4
 8001c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0e:	4642      	mov	r2, r8
 8001c10:	1a12      	subs	r2, r2, r0
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	dd52      	ble.n	8001cbc <__aeabi_dsub+0x20c>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x16c>
 8001c1a:	e09c      	b.n	8001d56 <__aeabi_dsub+0x2a6>
 8001c1c:	45a0      	cmp	r8, r4
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x172>
 8001c20:	e0ca      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001c22:	2080      	movs	r0, #128	; 0x80
 8001c24:	0400      	lsls	r0, r0, #16
 8001c26:	4301      	orrs	r1, r0
 8001c28:	2a38      	cmp	r2, #56	; 0x38
 8001c2a:	dd00      	ble.n	8001c2e <__aeabi_dsub+0x17e>
 8001c2c:	e149      	b.n	8001ec2 <__aeabi_dsub+0x412>
 8001c2e:	2a1f      	cmp	r2, #31
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x184>
 8001c32:	e197      	b.n	8001f64 <__aeabi_dsub+0x4b4>
 8001c34:	0010      	movs	r0, r2
 8001c36:	000e      	movs	r6, r1
 8001c38:	3820      	subs	r0, #32
 8001c3a:	40c6      	lsrs	r6, r0
 8001c3c:	2a20      	cmp	r2, #32
 8001c3e:	d004      	beq.n	8001c4a <__aeabi_dsub+0x19a>
 8001c40:	2040      	movs	r0, #64	; 0x40
 8001c42:	1a82      	subs	r2, r0, r2
 8001c44:	4091      	lsls	r1, r2
 8001c46:	430f      	orrs	r7, r1
 8001c48:	46b9      	mov	r9, r7
 8001c4a:	464c      	mov	r4, r9
 8001c4c:	1e62      	subs	r2, r4, #1
 8001c4e:	4194      	sbcs	r4, r2
 8001c50:	4334      	orrs	r4, r6
 8001c52:	e13a      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001c54:	000a      	movs	r2, r1
 8001c56:	433a      	orrs	r2, r7
 8001c58:	d028      	beq.n	8001cac <__aeabi_dsub+0x1fc>
 8001c5a:	46b3      	mov	fp, r6
 8001c5c:	42b5      	cmp	r5, r6
 8001c5e:	d02b      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001c60:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <__aeabi_dsub+0x360>)
 8001c62:	4442      	add	r2, r8
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d05d      	beq.n	8001d24 <__aeabi_dsub+0x274>
 8001c68:	4642      	mov	r2, r8
 8001c6a:	4644      	mov	r4, r8
 8001c6c:	1a82      	subs	r2, r0, r2
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dsub+0x1c4>
 8001c72:	e0f5      	b.n	8001e60 <__aeabi_dsub+0x3b0>
 8001c74:	4665      	mov	r5, ip
 8001c76:	431d      	orrs	r5, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x1cc>
 8001c7a:	e19c      	b.n	8001fb6 <__aeabi_dsub+0x506>
 8001c7c:	1e55      	subs	r5, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1d4>
 8001c82:	e1fb      	b.n	800207c <__aeabi_dsub+0x5cc>
 8001c84:	4c60      	ldr	r4, [pc, #384]	; (8001e08 <__aeabi_dsub+0x358>)
 8001c86:	42a2      	cmp	r2, r4
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x1dc>
 8001c8a:	e1bd      	b.n	8002008 <__aeabi_dsub+0x558>
 8001c8c:	002a      	movs	r2, r5
 8001c8e:	e0f0      	b.n	8001e72 <__aeabi_dsub+0x3c2>
 8001c90:	0008      	movs	r0, r1
 8001c92:	4338      	orrs	r0, r7
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e8>
 8001c96:	e0c3      	b.n	8001e20 <__aeabi_dsub+0x370>
 8001c98:	1e50      	subs	r0, r2, #1
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1f0>
 8001c9e:	e1a8      	b.n	8001ff2 <__aeabi_dsub+0x542>
 8001ca0:	4c59      	ldr	r4, [pc, #356]	; (8001e08 <__aeabi_dsub+0x358>)
 8001ca2:	42a2      	cmp	r2, r4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1f8>
 8001ca6:	e087      	b.n	8001db8 <__aeabi_dsub+0x308>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	e736      	b.n	8001b1a <__aeabi_dsub+0x6a>
 8001cac:	2201      	movs	r2, #1
 8001cae:	4056      	eors	r6, r2
 8001cb0:	46b3      	mov	fp, r6
 8001cb2:	42b5      	cmp	r5, r6
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x208>
 8001cb6:	e721      	b.n	8001afc <__aeabi_dsub+0x4c>
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <__aeabi_dsub+0x360>)
 8001cba:	4442      	add	r2, r8
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x212>
 8001cc0:	e0b5      	b.n	8001e2e <__aeabi_dsub+0x37e>
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	4644      	mov	r4, r8
 8001cc6:	1a82      	subs	r2, r0, r2
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x21e>
 8001ccc:	e138      	b.n	8001f40 <__aeabi_dsub+0x490>
 8001cce:	4e4e      	ldr	r6, [pc, #312]	; (8001e08 <__aeabi_dsub+0x358>)
 8001cd0:	42b0      	cmp	r0, r6
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dsub+0x226>
 8001cd4:	e1de      	b.n	8002094 <__aeabi_dsub+0x5e4>
 8001cd6:	2680      	movs	r6, #128	; 0x80
 8001cd8:	4664      	mov	r4, ip
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4334      	orrs	r4, r6
 8001cde:	46a4      	mov	ip, r4
 8001ce0:	2a38      	cmp	r2, #56	; 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x236>
 8001ce4:	e196      	b.n	8002014 <__aeabi_dsub+0x564>
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0x23c>
 8001cea:	e224      	b.n	8002136 <__aeabi_dsub+0x686>
 8001cec:	2620      	movs	r6, #32
 8001cee:	1ab4      	subs	r4, r6, r2
 8001cf0:	46a2      	mov	sl, r4
 8001cf2:	4664      	mov	r4, ip
 8001cf4:	4656      	mov	r6, sl
 8001cf6:	40b4      	lsls	r4, r6
 8001cf8:	46a1      	mov	r9, r4
 8001cfa:	001c      	movs	r4, r3
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	40d4      	lsrs	r4, r2
 8001d00:	4326      	orrs	r6, r4
 8001d02:	0034      	movs	r4, r6
 8001d04:	4656      	mov	r6, sl
 8001d06:	40b3      	lsls	r3, r6
 8001d08:	1e5e      	subs	r6, r3, #1
 8001d0a:	41b3      	sbcs	r3, r6
 8001d0c:	431c      	orrs	r4, r3
 8001d0e:	4663      	mov	r3, ip
 8001d10:	40d3      	lsrs	r3, r2
 8001d12:	18c9      	adds	r1, r1, r3
 8001d14:	19e4      	adds	r4, r4, r7
 8001d16:	42bc      	cmp	r4, r7
 8001d18:	41bf      	sbcs	r7, r7
 8001d1a:	427f      	negs	r7, r7
 8001d1c:	46b9      	mov	r9, r7
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4489      	add	r9, r1
 8001d22:	e0d8      	b.n	8001ed6 <__aeabi_dsub+0x426>
 8001d24:	4640      	mov	r0, r8
 8001d26:	4c3b      	ldr	r4, [pc, #236]	; (8001e14 <__aeabi_dsub+0x364>)
 8001d28:	3001      	adds	r0, #1
 8001d2a:	4220      	tst	r0, r4
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x280>
 8001d2e:	e0b4      	b.n	8001e9a <__aeabi_dsub+0x3ea>
 8001d30:	4640      	mov	r0, r8
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dsub+0x288>
 8001d36:	e144      	b.n	8001fc2 <__aeabi_dsub+0x512>
 8001d38:	4660      	mov	r0, ip
 8001d3a:	4318      	orrs	r0, r3
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x290>
 8001d3e:	e190      	b.n	8002062 <__aeabi_dsub+0x5b2>
 8001d40:	0008      	movs	r0, r1
 8001d42:	4338      	orrs	r0, r7
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x298>
 8001d46:	e1aa      	b.n	800209e <__aeabi_dsub+0x5ee>
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	0749      	lsls	r1, r1, #29
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	4661      	mov	r1, ip
 8001d52:	08cc      	lsrs	r4, r1, #3
 8001d54:	e027      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001d56:	0008      	movs	r0, r1
 8001d58:	4338      	orrs	r0, r7
 8001d5a:	d061      	beq.n	8001e20 <__aeabi_dsub+0x370>
 8001d5c:	1e50      	subs	r0, r2, #1
 8001d5e:	2a01      	cmp	r2, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x2b4>
 8001d62:	e139      	b.n	8001fd8 <__aeabi_dsub+0x528>
 8001d64:	42a2      	cmp	r2, r4
 8001d66:	d027      	beq.n	8001db8 <__aeabi_dsub+0x308>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	e75d      	b.n	8001c28 <__aeabi_dsub+0x178>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	391f      	subs	r1, #31
 8001d70:	40ca      	lsrs	r2, r1
 8001d72:	0011      	movs	r1, r2
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d003      	beq.n	8001d80 <__aeabi_dsub+0x2d0>
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4098      	lsls	r0, r3
 8001d7e:	4304      	orrs	r4, r0
 8001d80:	1e63      	subs	r3, r4, #1
 8001d82:	419c      	sbcs	r4, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	4699      	mov	r9, r3
 8001d88:	4698      	mov	r8, r3
 8001d8a:	430c      	orrs	r4, r1
 8001d8c:	0763      	lsls	r3, r4, #29
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x2e2>
 8001d90:	e712      	b.n	8001bb8 <__aeabi_dsub+0x108>
 8001d92:	464b      	mov	r3, r9
 8001d94:	464a      	mov	r2, r9
 8001d96:	08e4      	lsrs	r4, r4, #3
 8001d98:	075b      	lsls	r3, r3, #29
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	08d4      	lsrs	r4, r2, #3
 8001d9e:	4642      	mov	r2, r8
 8001da0:	4919      	ldr	r1, [pc, #100]	; (8001e08 <__aeabi_dsub+0x358>)
 8001da2:	428a      	cmp	r2, r1
 8001da4:	d00e      	beq.n	8001dc4 <__aeabi_dsub+0x314>
 8001da6:	0324      	lsls	r4, r4, #12
 8001da8:	0552      	lsls	r2, r2, #21
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	0d52      	lsrs	r2, r2, #21
 8001dae:	e722      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db0:	000a      	movs	r2, r1
 8001db2:	2400      	movs	r4, #0
 8001db4:	2300      	movs	r3, #0
 8001db6:	e71e      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	4662      	mov	r2, ip
 8001dbc:	0752      	lsls	r2, r2, #29
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	4662      	mov	r2, ip
 8001dc2:	08d4      	lsrs	r4, r2, #3
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	4322      	orrs	r2, r4
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x31c>
 8001dca:	e1fc      	b.n	80021c6 <__aeabi_dsub+0x716>
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0312      	lsls	r2, r2, #12
 8001dd0:	4314      	orrs	r4, r2
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <__aeabi_dsub+0x358>)
 8001dd6:	0b24      	lsrs	r4, r4, #12
 8001dd8:	e70d      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	f000 fb74 	bl	80024c8 <__clzsi2>
 8001de0:	0001      	movs	r1, r0
 8001de2:	3118      	adds	r1, #24
 8001de4:	291f      	cmp	r1, #31
 8001de6:	dc00      	bgt.n	8001dea <__aeabi_dsub+0x33a>
 8001de8:	e6c4      	b.n	8001b74 <__aeabi_dsub+0xc4>
 8001dea:	3808      	subs	r0, #8
 8001dec:	4084      	lsls	r4, r0
 8001dee:	4643      	mov	r3, r8
 8001df0:	0020      	movs	r0, r4
 8001df2:	2400      	movs	r4, #0
 8001df4:	4588      	cmp	r8, r1
 8001df6:	dc00      	bgt.n	8001dfa <__aeabi_dsub+0x34a>
 8001df8:	e6c8      	b.n	8001b8c <__aeabi_dsub+0xdc>
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__aeabi_dsub+0x35c>)
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	4010      	ands	r0, r2
 8001e00:	4698      	mov	r8, r3
 8001e02:	4681      	mov	r9, r0
 8001e04:	e6d6      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	fffff801 	.word	0xfffff801
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	430f      	orrs	r7, r1
 8001e1a:	1e7a      	subs	r2, r7, #1
 8001e1c:	4197      	sbcs	r7, r2
 8001e1e:	e691      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001e20:	4661      	mov	r1, ip
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	0749      	lsls	r1, r1, #29
 8001e26:	430b      	orrs	r3, r1
 8001e28:	4661      	mov	r1, ip
 8001e2a:	08cc      	lsrs	r4, r1, #3
 8001e2c:	e7b8      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001e2e:	4640      	mov	r0, r8
 8001e30:	4cd3      	ldr	r4, [pc, #844]	; (8002180 <__aeabi_dsub+0x6d0>)
 8001e32:	3001      	adds	r0, #1
 8001e34:	4220      	tst	r0, r4
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x38a>
 8001e38:	e0a2      	b.n	8001f80 <__aeabi_dsub+0x4d0>
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x392>
 8001e40:	e101      	b.n	8002046 <__aeabi_dsub+0x596>
 8001e42:	4660      	mov	r0, ip
 8001e44:	4318      	orrs	r0, r3
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x39a>
 8001e48:	e15e      	b.n	8002108 <__aeabi_dsub+0x658>
 8001e4a:	0008      	movs	r0, r1
 8001e4c:	4338      	orrs	r0, r7
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x3a2>
 8001e50:	e15f      	b.n	8002112 <__aeabi_dsub+0x662>
 8001e52:	4661      	mov	r1, ip
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	0749      	lsls	r1, r1, #29
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	08cc      	lsrs	r4, r1, #3
 8001e5e:	e7a2      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001e60:	4dc8      	ldr	r5, [pc, #800]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001e62:	42a8      	cmp	r0, r5
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x3b8>
 8001e66:	e0cf      	b.n	8002008 <__aeabi_dsub+0x558>
 8001e68:	2580      	movs	r5, #128	; 0x80
 8001e6a:	4664      	mov	r4, ip
 8001e6c:	042d      	lsls	r5, r5, #16
 8001e6e:	432c      	orrs	r4, r5
 8001e70:	46a4      	mov	ip, r4
 8001e72:	2a38      	cmp	r2, #56	; 0x38
 8001e74:	dc56      	bgt.n	8001f24 <__aeabi_dsub+0x474>
 8001e76:	2a1f      	cmp	r2, #31
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_dsub+0x3cc>
 8001e7a:	e0d1      	b.n	8002020 <__aeabi_dsub+0x570>
 8001e7c:	2520      	movs	r5, #32
 8001e7e:	001e      	movs	r6, r3
 8001e80:	1aad      	subs	r5, r5, r2
 8001e82:	4664      	mov	r4, ip
 8001e84:	40ab      	lsls	r3, r5
 8001e86:	40ac      	lsls	r4, r5
 8001e88:	40d6      	lsrs	r6, r2
 8001e8a:	1e5d      	subs	r5, r3, #1
 8001e8c:	41ab      	sbcs	r3, r5
 8001e8e:	4334      	orrs	r4, r6
 8001e90:	4323      	orrs	r3, r4
 8001e92:	4664      	mov	r4, ip
 8001e94:	40d4      	lsrs	r4, r2
 8001e96:	1b09      	subs	r1, r1, r4
 8001e98:	e049      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8001e9a:	4660      	mov	r0, ip
 8001e9c:	1bdc      	subs	r4, r3, r7
 8001e9e:	1a46      	subs	r6, r0, r1
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	4180      	sbcs	r0, r0
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	4681      	mov	r9, r0
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	4681      	mov	r9, r0
 8001eb0:	0200      	lsls	r0, r0, #8
 8001eb2:	d476      	bmi.n	8001fa2 <__aeabi_dsub+0x4f2>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x40c>
 8001eba:	e652      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	e771      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8001ec2:	4339      	orrs	r1, r7
 8001ec4:	000c      	movs	r4, r1
 8001ec6:	1e62      	subs	r2, r4, #1
 8001ec8:	4194      	sbcs	r4, r2
 8001eca:	18e4      	adds	r4, r4, r3
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	419b      	sbcs	r3, r3
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	4463      	add	r3, ip
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	d400      	bmi.n	8001ede <__aeabi_dsub+0x42e>
 8001edc:	e756      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4ba8      	ldr	r3, [pc, #672]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001ee4:	44e0      	add	r8, ip
 8001ee6:	4598      	cmp	r8, r3
 8001ee8:	d038      	beq.n	8001f5c <__aeabi_dsub+0x4ac>
 8001eea:	464b      	mov	r3, r9
 8001eec:	48a6      	ldr	r0, [pc, #664]	; (8002188 <__aeabi_dsub+0x6d8>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4003      	ands	r3, r0
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	0863      	lsrs	r3, r4, #1
 8001ef6:	4014      	ands	r4, r2
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	07c3      	lsls	r3, r0, #31
 8001efc:	431c      	orrs	r4, r3
 8001efe:	0843      	lsrs	r3, r0, #1
 8001f00:	4699      	mov	r9, r3
 8001f02:	e657      	b.n	8001bb4 <__aeabi_dsub+0x104>
 8001f04:	0010      	movs	r0, r2
 8001f06:	000e      	movs	r6, r1
 8001f08:	3820      	subs	r0, #32
 8001f0a:	40c6      	lsrs	r6, r0
 8001f0c:	2a20      	cmp	r2, #32
 8001f0e:	d004      	beq.n	8001f1a <__aeabi_dsub+0x46a>
 8001f10:	2040      	movs	r0, #64	; 0x40
 8001f12:	1a82      	subs	r2, r0, r2
 8001f14:	4091      	lsls	r1, r2
 8001f16:	430f      	orrs	r7, r1
 8001f18:	46b9      	mov	r9, r7
 8001f1a:	464f      	mov	r7, r9
 8001f1c:	1e7a      	subs	r2, r7, #1
 8001f1e:	4197      	sbcs	r7, r2
 8001f20:	4337      	orrs	r7, r6
 8001f22:	e60f      	b.n	8001b44 <__aeabi_dsub+0x94>
 8001f24:	4662      	mov	r2, ip
 8001f26:	431a      	orrs	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	4193      	sbcs	r3, r2
 8001f2e:	1afc      	subs	r4, r7, r3
 8001f30:	42a7      	cmp	r7, r4
 8001f32:	41bf      	sbcs	r7, r7
 8001f34:	427f      	negs	r7, r7
 8001f36:	1bcb      	subs	r3, r1, r7
 8001f38:	4699      	mov	r9, r3
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	e608      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8001f40:	4666      	mov	r6, ip
 8001f42:	431e      	orrs	r6, r3
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x498>
 8001f46:	e0be      	b.n	80020c6 <__aeabi_dsub+0x616>
 8001f48:	1e56      	subs	r6, r2, #1
 8001f4a:	2a01      	cmp	r2, #1
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x4a0>
 8001f4e:	e109      	b.n	8002164 <__aeabi_dsub+0x6b4>
 8001f50:	4c8c      	ldr	r4, [pc, #560]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f52:	42a2      	cmp	r2, r4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x4a8>
 8001f56:	e119      	b.n	800218c <__aeabi_dsub+0x6dc>
 8001f58:	0032      	movs	r2, r6
 8001f5a:	e6c1      	b.n	8001ce0 <__aeabi_dsub+0x230>
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	2400      	movs	r4, #0
 8001f60:	2300      	movs	r3, #0
 8001f62:	e648      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8001f64:	2020      	movs	r0, #32
 8001f66:	000c      	movs	r4, r1
 8001f68:	1a80      	subs	r0, r0, r2
 8001f6a:	003e      	movs	r6, r7
 8001f6c:	4087      	lsls	r7, r0
 8001f6e:	4084      	lsls	r4, r0
 8001f70:	40d6      	lsrs	r6, r2
 8001f72:	1e78      	subs	r0, r7, #1
 8001f74:	4187      	sbcs	r7, r0
 8001f76:	40d1      	lsrs	r1, r2
 8001f78:	4334      	orrs	r4, r6
 8001f7a:	433c      	orrs	r4, r7
 8001f7c:	448c      	add	ip, r1
 8001f7e:	e7a4      	b.n	8001eca <__aeabi_dsub+0x41a>
 8001f80:	4a80      	ldr	r2, [pc, #512]	; (8002184 <__aeabi_dsub+0x6d4>)
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x4d8>
 8001f86:	e0e9      	b.n	800215c <__aeabi_dsub+0x6ac>
 8001f88:	19df      	adds	r7, r3, r7
 8001f8a:	429f      	cmp	r7, r3
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	4461      	add	r1, ip
 8001f90:	425b      	negs	r3, r3
 8001f92:	18c9      	adds	r1, r1, r3
 8001f94:	07cc      	lsls	r4, r1, #31
 8001f96:	087f      	lsrs	r7, r7, #1
 8001f98:	084b      	lsrs	r3, r1, #1
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4680      	mov	r8, r0
 8001f9e:	433c      	orrs	r4, r7
 8001fa0:	e6f4      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001fa2:	1afc      	subs	r4, r7, r3
 8001fa4:	42a7      	cmp	r7, r4
 8001fa6:	41bf      	sbcs	r7, r7
 8001fa8:	4663      	mov	r3, ip
 8001faa:	427f      	negs	r7, r7
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	1bcb      	subs	r3, r1, r7
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	e5d5      	b.n	8001b62 <__aeabi_dsub+0xb2>
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	465d      	mov	r5, fp
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e6ee      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	d000      	beq.n	8001fca <__aeabi_dsub+0x51a>
 8001fc8:	e082      	b.n	80020d0 <__aeabi_dsub+0x620>
 8001fca:	000b      	movs	r3, r1
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	d11b      	bne.n	8002008 <__aeabi_dsub+0x558>
 8001fd0:	2480      	movs	r4, #128	; 0x80
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	0324      	lsls	r4, r4, #12
 8001fd6:	e6f9      	b.n	8001dcc <__aeabi_dsub+0x31c>
 8001fd8:	19dc      	adds	r4, r3, r7
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	419b      	sbcs	r3, r3
 8001fde:	4461      	add	r1, ip
 8001fe0:	4689      	mov	r9, r1
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	4499      	add	r9, r3
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	d444      	bmi.n	8002076 <__aeabi_dsub+0x5c6>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4698      	mov	r8, r3
 8001ff0:	e6cc      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8001ff2:	1bdc      	subs	r4, r3, r7
 8001ff4:	4662      	mov	r2, ip
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	419b      	sbcs	r3, r3
 8001ffa:	1a51      	subs	r1, r2, r1
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	1acb      	subs	r3, r1, r3
 8002000:	4699      	mov	r9, r3
 8002002:	2301      	movs	r3, #1
 8002004:	4698      	mov	r8, r3
 8002006:	e5a4      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002008:	08ff      	lsrs	r7, r7, #3
 800200a:	074b      	lsls	r3, r1, #29
 800200c:	465d      	mov	r5, fp
 800200e:	433b      	orrs	r3, r7
 8002010:	08cc      	lsrs	r4, r1, #3
 8002012:	e6d7      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002014:	4662      	mov	r2, ip
 8002016:	431a      	orrs	r2, r3
 8002018:	0014      	movs	r4, r2
 800201a:	1e63      	subs	r3, r4, #1
 800201c:	419c      	sbcs	r4, r3
 800201e:	e679      	b.n	8001d14 <__aeabi_dsub+0x264>
 8002020:	0015      	movs	r5, r2
 8002022:	4664      	mov	r4, ip
 8002024:	3d20      	subs	r5, #32
 8002026:	40ec      	lsrs	r4, r5
 8002028:	46a0      	mov	r8, r4
 800202a:	2a20      	cmp	r2, #32
 800202c:	d005      	beq.n	800203a <__aeabi_dsub+0x58a>
 800202e:	2540      	movs	r5, #64	; 0x40
 8002030:	4664      	mov	r4, ip
 8002032:	1aaa      	subs	r2, r5, r2
 8002034:	4094      	lsls	r4, r2
 8002036:	4323      	orrs	r3, r4
 8002038:	469a      	mov	sl, r3
 800203a:	4654      	mov	r4, sl
 800203c:	1e63      	subs	r3, r4, #1
 800203e:	419c      	sbcs	r4, r3
 8002040:	4643      	mov	r3, r8
 8002042:	4323      	orrs	r3, r4
 8002044:	e773      	b.n	8001f2e <__aeabi_dsub+0x47e>
 8002046:	4662      	mov	r2, ip
 8002048:	431a      	orrs	r2, r3
 800204a:	d023      	beq.n	8002094 <__aeabi_dsub+0x5e4>
 800204c:	000a      	movs	r2, r1
 800204e:	433a      	orrs	r2, r7
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x5a4>
 8002052:	e0a0      	b.n	8002196 <__aeabi_dsub+0x6e6>
 8002054:	4662      	mov	r2, ip
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	0752      	lsls	r2, r2, #29
 800205a:	4313      	orrs	r3, r2
 800205c:	4662      	mov	r2, ip
 800205e:	08d4      	lsrs	r4, r2, #3
 8002060:	e6b0      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002062:	000b      	movs	r3, r1
 8002064:	433b      	orrs	r3, r7
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x5ba>
 8002068:	e728      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800206a:	08ff      	lsrs	r7, r7, #3
 800206c:	074b      	lsls	r3, r1, #29
 800206e:	465d      	mov	r5, fp
 8002070:	433b      	orrs	r3, r7
 8002072:	08cc      	lsrs	r4, r1, #3
 8002074:	e697      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002076:	2302      	movs	r3, #2
 8002078:	4698      	mov	r8, r3
 800207a:	e736      	b.n	8001eea <__aeabi_dsub+0x43a>
 800207c:	1afc      	subs	r4, r7, r3
 800207e:	42a7      	cmp	r7, r4
 8002080:	41bf      	sbcs	r7, r7
 8002082:	4663      	mov	r3, ip
 8002084:	427f      	negs	r7, r7
 8002086:	1ac9      	subs	r1, r1, r3
 8002088:	1bcb      	subs	r3, r1, r7
 800208a:	4699      	mov	r9, r3
 800208c:	2301      	movs	r3, #1
 800208e:	465d      	mov	r5, fp
 8002090:	4698      	mov	r8, r3
 8002092:	e55e      	b.n	8001b52 <__aeabi_dsub+0xa2>
 8002094:	074b      	lsls	r3, r1, #29
 8002096:	08ff      	lsrs	r7, r7, #3
 8002098:	433b      	orrs	r3, r7
 800209a:	08cc      	lsrs	r4, r1, #3
 800209c:	e692      	b.n	8001dc4 <__aeabi_dsub+0x314>
 800209e:	1bdc      	subs	r4, r3, r7
 80020a0:	4660      	mov	r0, ip
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	41b6      	sbcs	r6, r6
 80020a6:	1a40      	subs	r0, r0, r1
 80020a8:	4276      	negs	r6, r6
 80020aa:	1b80      	subs	r0, r0, r6
 80020ac:	4681      	mov	r9, r0
 80020ae:	0200      	lsls	r0, r0, #8
 80020b0:	d560      	bpl.n	8002174 <__aeabi_dsub+0x6c4>
 80020b2:	1afc      	subs	r4, r7, r3
 80020b4:	42a7      	cmp	r7, r4
 80020b6:	41bf      	sbcs	r7, r7
 80020b8:	4663      	mov	r3, ip
 80020ba:	427f      	negs	r7, r7
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	1bcb      	subs	r3, r1, r7
 80020c0:	4699      	mov	r9, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e576      	b.n	8001bb4 <__aeabi_dsub+0x104>
 80020c6:	08ff      	lsrs	r7, r7, #3
 80020c8:	074b      	lsls	r3, r1, #29
 80020ca:	433b      	orrs	r3, r7
 80020cc:	08cc      	lsrs	r4, r1, #3
 80020ce:	e667      	b.n	8001da0 <__aeabi_dsub+0x2f0>
 80020d0:	000a      	movs	r2, r1
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	433a      	orrs	r2, r7
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x62a>
 80020d8:	e66f      	b.n	8001dba <__aeabi_dsub+0x30a>
 80020da:	4662      	mov	r2, ip
 80020dc:	0752      	lsls	r2, r2, #29
 80020de:	4313      	orrs	r3, r2
 80020e0:	4662      	mov	r2, ip
 80020e2:	08d4      	lsrs	r4, r2, #3
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0312      	lsls	r2, r2, #12
 80020e8:	4214      	tst	r4, r2
 80020ea:	d007      	beq.n	80020fc <__aeabi_dsub+0x64c>
 80020ec:	08c8      	lsrs	r0, r1, #3
 80020ee:	4210      	tst	r0, r2
 80020f0:	d104      	bne.n	80020fc <__aeabi_dsub+0x64c>
 80020f2:	465d      	mov	r5, fp
 80020f4:	0004      	movs	r4, r0
 80020f6:	08fb      	lsrs	r3, r7, #3
 80020f8:	0749      	lsls	r1, r1, #29
 80020fa:	430b      	orrs	r3, r1
 80020fc:	0f5a      	lsrs	r2, r3, #29
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	0752      	lsls	r2, r2, #29
 8002104:	4313      	orrs	r3, r2
 8002106:	e65d      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	08ff      	lsrs	r7, r7, #3
 800210c:	433b      	orrs	r3, r7
 800210e:	08cc      	lsrs	r4, r1, #3
 8002110:	e649      	b.n	8001da6 <__aeabi_dsub+0x2f6>
 8002112:	19dc      	adds	r4, r3, r7
 8002114:	429c      	cmp	r4, r3
 8002116:	419b      	sbcs	r3, r3
 8002118:	4461      	add	r1, ip
 800211a:	4689      	mov	r9, r1
 800211c:	425b      	negs	r3, r3
 800211e:	4499      	add	r9, r3
 8002120:	464b      	mov	r3, r9
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	d400      	bmi.n	8002128 <__aeabi_dsub+0x678>
 8002126:	e631      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002128:	464a      	mov	r2, r9
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <__aeabi_dsub+0x6d8>)
 800212c:	401a      	ands	r2, r3
 800212e:	2301      	movs	r3, #1
 8002130:	4691      	mov	r9, r2
 8002132:	4698      	mov	r8, r3
 8002134:	e62a      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 8002136:	0016      	movs	r6, r2
 8002138:	4664      	mov	r4, ip
 800213a:	3e20      	subs	r6, #32
 800213c:	40f4      	lsrs	r4, r6
 800213e:	46a0      	mov	r8, r4
 8002140:	2a20      	cmp	r2, #32
 8002142:	d005      	beq.n	8002150 <__aeabi_dsub+0x6a0>
 8002144:	2640      	movs	r6, #64	; 0x40
 8002146:	4664      	mov	r4, ip
 8002148:	1ab2      	subs	r2, r6, r2
 800214a:	4094      	lsls	r4, r2
 800214c:	4323      	orrs	r3, r4
 800214e:	469a      	mov	sl, r3
 8002150:	4654      	mov	r4, sl
 8002152:	1e63      	subs	r3, r4, #1
 8002154:	419c      	sbcs	r4, r3
 8002156:	4643      	mov	r3, r8
 8002158:	431c      	orrs	r4, r3
 800215a:	e5db      	b.n	8001d14 <__aeabi_dsub+0x264>
 800215c:	0002      	movs	r2, r0
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e548      	b.n	8001bf6 <__aeabi_dsub+0x146>
 8002164:	19dc      	adds	r4, r3, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	4461      	add	r1, ip
 800216c:	4689      	mov	r9, r1
 800216e:	427f      	negs	r7, r7
 8002170:	44b9      	add	r9, r7
 8002172:	e738      	b.n	8001fe6 <__aeabi_dsub+0x536>
 8002174:	464b      	mov	r3, r9
 8002176:	4323      	orrs	r3, r4
 8002178:	d100      	bne.n	800217c <__aeabi_dsub+0x6cc>
 800217a:	e69f      	b.n	8001ebc <__aeabi_dsub+0x40c>
 800217c:	e606      	b.n	8001d8c <__aeabi_dsub+0x2dc>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	000007fe 	.word	0x000007fe
 8002184:	000007ff 	.word	0x000007ff
 8002188:	ff7fffff 	.word	0xff7fffff
 800218c:	08ff      	lsrs	r7, r7, #3
 800218e:	074b      	lsls	r3, r1, #29
 8002190:	433b      	orrs	r3, r7
 8002192:	08cc      	lsrs	r4, r1, #3
 8002194:	e616      	b.n	8001dc4 <__aeabi_dsub+0x314>
 8002196:	4662      	mov	r2, ip
 8002198:	08db      	lsrs	r3, r3, #3
 800219a:	0752      	lsls	r2, r2, #29
 800219c:	4313      	orrs	r3, r2
 800219e:	4662      	mov	r2, ip
 80021a0:	08d4      	lsrs	r4, r2, #3
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0312      	lsls	r2, r2, #12
 80021a6:	4214      	tst	r4, r2
 80021a8:	d007      	beq.n	80021ba <__aeabi_dsub+0x70a>
 80021aa:	08c8      	lsrs	r0, r1, #3
 80021ac:	4210      	tst	r0, r2
 80021ae:	d104      	bne.n	80021ba <__aeabi_dsub+0x70a>
 80021b0:	465d      	mov	r5, fp
 80021b2:	0004      	movs	r4, r0
 80021b4:	08fb      	lsrs	r3, r7, #3
 80021b6:	0749      	lsls	r1, r1, #29
 80021b8:	430b      	orrs	r3, r1
 80021ba:	0f5a      	lsrs	r2, r3, #29
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	0752      	lsls	r2, r2, #29
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	e5fe      	b.n	8001dc4 <__aeabi_dsub+0x314>
 80021c6:	2300      	movs	r3, #0
 80021c8:	4a01      	ldr	r2, [pc, #4]	; (80021d0 <__aeabi_dsub+0x720>)
 80021ca:	001c      	movs	r4, r3
 80021cc:	e513      	b.n	8001bf6 <__aeabi_dsub+0x146>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff

080021d4 <__aeabi_dcmpun>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0005      	movs	r5, r0
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <__aeabi_dcmpun+0x38>)
 80021da:	031c      	lsls	r4, r3, #12
 80021dc:	0016      	movs	r6, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	030a      	lsls	r2, r1, #12
 80021e2:	0049      	lsls	r1, r1, #1
 80021e4:	0b12      	lsrs	r2, r2, #12
 80021e6:	0d49      	lsrs	r1, r1, #21
 80021e8:	0b24      	lsrs	r4, r4, #12
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	4281      	cmp	r1, r0
 80021ee:	d008      	beq.n	8002202 <__aeabi_dcmpun+0x2e>
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <__aeabi_dcmpun+0x38>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 80021f8:	0020      	movs	r0, r4
 80021fa:	4330      	orrs	r0, r6
 80021fc:	1e43      	subs	r3, r0, #1
 80021fe:	4198      	sbcs	r0, r3
 8002200:	bd70      	pop	{r4, r5, r6, pc}
 8002202:	2001      	movs	r0, #1
 8002204:	432a      	orrs	r2, r5
 8002206:	d1fb      	bne.n	8002200 <__aeabi_dcmpun+0x2c>
 8002208:	e7f2      	b.n	80021f0 <__aeabi_dcmpun+0x1c>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff

08002210 <__aeabi_d2iz>:
 8002210:	000a      	movs	r2, r1
 8002212:	b530      	push	{r4, r5, lr}
 8002214:	4c13      	ldr	r4, [pc, #76]	; (8002264 <__aeabi_d2iz+0x54>)
 8002216:	0053      	lsls	r3, r2, #1
 8002218:	0309      	lsls	r1, r1, #12
 800221a:	0005      	movs	r5, r0
 800221c:	0b09      	lsrs	r1, r1, #12
 800221e:	2000      	movs	r0, #0
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	0fd2      	lsrs	r2, r2, #31
 8002224:	42a3      	cmp	r3, r4
 8002226:	dd04      	ble.n	8002232 <__aeabi_d2iz+0x22>
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <__aeabi_d2iz+0x58>)
 800222a:	4283      	cmp	r3, r0
 800222c:	dd02      	ble.n	8002234 <__aeabi_d2iz+0x24>
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <__aeabi_d2iz+0x5c>)
 8002230:	18d0      	adds	r0, r2, r3
 8002232:	bd30      	pop	{r4, r5, pc}
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	0340      	lsls	r0, r0, #13
 8002238:	4301      	orrs	r1, r0
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <__aeabi_d2iz+0x60>)
 800223c:	1ac0      	subs	r0, r0, r3
 800223e:	281f      	cmp	r0, #31
 8002240:	dd08      	ble.n	8002254 <__aeabi_d2iz+0x44>
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <__aeabi_d2iz+0x64>)
 8002244:	1ac3      	subs	r3, r0, r3
 8002246:	40d9      	lsrs	r1, r3
 8002248:	000b      	movs	r3, r1
 800224a:	4258      	negs	r0, r3
 800224c:	2a00      	cmp	r2, #0
 800224e:	d1f0      	bne.n	8002232 <__aeabi_d2iz+0x22>
 8002250:	0018      	movs	r0, r3
 8002252:	e7ee      	b.n	8002232 <__aeabi_d2iz+0x22>
 8002254:	4c08      	ldr	r4, [pc, #32]	; (8002278 <__aeabi_d2iz+0x68>)
 8002256:	40c5      	lsrs	r5, r0
 8002258:	46a4      	mov	ip, r4
 800225a:	4463      	add	r3, ip
 800225c:	4099      	lsls	r1, r3
 800225e:	000b      	movs	r3, r1
 8002260:	432b      	orrs	r3, r5
 8002262:	e7f2      	b.n	800224a <__aeabi_d2iz+0x3a>
 8002264:	000003fe 	.word	0x000003fe
 8002268:	0000041d 	.word	0x0000041d
 800226c:	7fffffff 	.word	0x7fffffff
 8002270:	00000433 	.word	0x00000433
 8002274:	00000413 	.word	0x00000413
 8002278:	fffffbed 	.word	0xfffffbed

0800227c <__aeabi_i2d>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2800      	cmp	r0, #0
 8002280:	d016      	beq.n	80022b0 <__aeabi_i2d+0x34>
 8002282:	17c3      	asrs	r3, r0, #31
 8002284:	18c5      	adds	r5, r0, r3
 8002286:	405d      	eors	r5, r3
 8002288:	0fc4      	lsrs	r4, r0, #31
 800228a:	0028      	movs	r0, r5
 800228c:	f000 f91c 	bl	80024c8 <__clzsi2>
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <__aeabi_i2d+0x5c>)
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	280a      	cmp	r0, #10
 8002296:	dc16      	bgt.n	80022c6 <__aeabi_i2d+0x4a>
 8002298:	0003      	movs	r3, r0
 800229a:	002e      	movs	r6, r5
 800229c:	3315      	adds	r3, #21
 800229e:	409e      	lsls	r6, r3
 80022a0:	230b      	movs	r3, #11
 80022a2:	1a18      	subs	r0, r3, r0
 80022a4:	40c5      	lsrs	r5, r0
 80022a6:	0552      	lsls	r2, r2, #21
 80022a8:	032d      	lsls	r5, r5, #12
 80022aa:	0b2d      	lsrs	r5, r5, #12
 80022ac:	0d53      	lsrs	r3, r2, #21
 80022ae:	e003      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022b0:	2400      	movs	r4, #0
 80022b2:	2300      	movs	r3, #0
 80022b4:	2500      	movs	r5, #0
 80022b6:	2600      	movs	r6, #0
 80022b8:	051b      	lsls	r3, r3, #20
 80022ba:	432b      	orrs	r3, r5
 80022bc:	07e4      	lsls	r4, r4, #31
 80022be:	4323      	orrs	r3, r4
 80022c0:	0030      	movs	r0, r6
 80022c2:	0019      	movs	r1, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	380b      	subs	r0, #11
 80022c8:	4085      	lsls	r5, r0
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	032d      	lsls	r5, r5, #12
 80022ce:	2600      	movs	r6, #0
 80022d0:	0b2d      	lsrs	r5, r5, #12
 80022d2:	0d53      	lsrs	r3, r2, #21
 80022d4:	e7f0      	b.n	80022b8 <__aeabi_i2d+0x3c>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	0000041e 	.word	0x0000041e

080022dc <__aeabi_ui2d>:
 80022dc:	b510      	push	{r4, lr}
 80022de:	1e04      	subs	r4, r0, #0
 80022e0:	d010      	beq.n	8002304 <__aeabi_ui2d+0x28>
 80022e2:	f000 f8f1 	bl	80024c8 <__clzsi2>
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <__aeabi_ui2d+0x48>)
 80022e8:	1a1b      	subs	r3, r3, r0
 80022ea:	280a      	cmp	r0, #10
 80022ec:	dc11      	bgt.n	8002312 <__aeabi_ui2d+0x36>
 80022ee:	220b      	movs	r2, #11
 80022f0:	0021      	movs	r1, r4
 80022f2:	1a12      	subs	r2, r2, r0
 80022f4:	40d1      	lsrs	r1, r2
 80022f6:	3015      	adds	r0, #21
 80022f8:	030a      	lsls	r2, r1, #12
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	4084      	lsls	r4, r0
 80022fe:	0b12      	lsrs	r2, r2, #12
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	e001      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	051b      	lsls	r3, r3, #20
 800230a:	4313      	orrs	r3, r2
 800230c:	0020      	movs	r0, r4
 800230e:	0019      	movs	r1, r3
 8002310:	bd10      	pop	{r4, pc}
 8002312:	0022      	movs	r2, r4
 8002314:	380b      	subs	r0, #11
 8002316:	4082      	lsls	r2, r0
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	0312      	lsls	r2, r2, #12
 800231c:	2400      	movs	r4, #0
 800231e:	0b12      	lsrs	r2, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7f1      	b.n	8002308 <__aeabi_ui2d+0x2c>
 8002324:	0000041e 	.word	0x0000041e

08002328 <__aeabi_f2d>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	0043      	lsls	r3, r0, #1
 800232c:	0246      	lsls	r6, r0, #9
 800232e:	0fc4      	lsrs	r4, r0, #31
 8002330:	20fe      	movs	r0, #254	; 0xfe
 8002332:	0e1b      	lsrs	r3, r3, #24
 8002334:	1c59      	adds	r1, r3, #1
 8002336:	0a75      	lsrs	r5, r6, #9
 8002338:	4208      	tst	r0, r1
 800233a:	d00c      	beq.n	8002356 <__aeabi_f2d+0x2e>
 800233c:	22e0      	movs	r2, #224	; 0xe0
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4694      	mov	ip, r2
 8002342:	076d      	lsls	r5, r5, #29
 8002344:	0b36      	lsrs	r6, r6, #12
 8002346:	4463      	add	r3, ip
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	4333      	orrs	r3, r6
 800234c:	07e4      	lsls	r4, r4, #31
 800234e:	4323      	orrs	r3, r4
 8002350:	0028      	movs	r0, r5
 8002352:	0019      	movs	r1, r3
 8002354:	bd70      	pop	{r4, r5, r6, pc}
 8002356:	2b00      	cmp	r3, #0
 8002358:	d114      	bne.n	8002384 <__aeabi_f2d+0x5c>
 800235a:	2d00      	cmp	r5, #0
 800235c:	d01b      	beq.n	8002396 <__aeabi_f2d+0x6e>
 800235e:	0028      	movs	r0, r5
 8002360:	f000 f8b2 	bl	80024c8 <__clzsi2>
 8002364:	280a      	cmp	r0, #10
 8002366:	dc1c      	bgt.n	80023a2 <__aeabi_f2d+0x7a>
 8002368:	230b      	movs	r3, #11
 800236a:	002e      	movs	r6, r5
 800236c:	1a1b      	subs	r3, r3, r0
 800236e:	40de      	lsrs	r6, r3
 8002370:	0003      	movs	r3, r0
 8002372:	3315      	adds	r3, #21
 8002374:	409d      	lsls	r5, r3
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <__aeabi_f2d+0x88>)
 8002378:	0336      	lsls	r6, r6, #12
 800237a:	1a12      	subs	r2, r2, r0
 800237c:	0552      	lsls	r2, r2, #21
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0d53      	lsrs	r3, r2, #21
 8002382:	e7e1      	b.n	8002348 <__aeabi_f2d+0x20>
 8002384:	2d00      	cmp	r5, #0
 8002386:	d009      	beq.n	800239c <__aeabi_f2d+0x74>
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	0b36      	lsrs	r6, r6, #12
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <__aeabi_f2d+0x8c>)
 8002390:	076d      	lsls	r5, r5, #29
 8002392:	4316      	orrs	r6, r2
 8002394:	e7d8      	b.n	8002348 <__aeabi_f2d+0x20>
 8002396:	2300      	movs	r3, #0
 8002398:	2600      	movs	r6, #0
 800239a:	e7d5      	b.n	8002348 <__aeabi_f2d+0x20>
 800239c:	2600      	movs	r6, #0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <__aeabi_f2d+0x8c>)
 80023a0:	e7d2      	b.n	8002348 <__aeabi_f2d+0x20>
 80023a2:	0003      	movs	r3, r0
 80023a4:	3b0b      	subs	r3, #11
 80023a6:	409d      	lsls	r5, r3
 80023a8:	002e      	movs	r6, r5
 80023aa:	2500      	movs	r5, #0
 80023ac:	e7e3      	b.n	8002376 <__aeabi_f2d+0x4e>
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	00000389 	.word	0x00000389
 80023b4:	000007ff 	.word	0x000007ff

080023b8 <__aeabi_d2f>:
 80023b8:	0002      	movs	r2, r0
 80023ba:	004b      	lsls	r3, r1, #1
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	0d5b      	lsrs	r3, r3, #21
 80023c0:	030c      	lsls	r4, r1, #12
 80023c2:	4e3d      	ldr	r6, [pc, #244]	; (80024b8 <__aeabi_d2f+0x100>)
 80023c4:	0a64      	lsrs	r4, r4, #9
 80023c6:	0f40      	lsrs	r0, r0, #29
 80023c8:	1c5f      	adds	r7, r3, #1
 80023ca:	0fc9      	lsrs	r1, r1, #31
 80023cc:	4304      	orrs	r4, r0
 80023ce:	00d5      	lsls	r5, r2, #3
 80023d0:	4237      	tst	r7, r6
 80023d2:	d00a      	beq.n	80023ea <__aeabi_d2f+0x32>
 80023d4:	4839      	ldr	r0, [pc, #228]	; (80024bc <__aeabi_d2f+0x104>)
 80023d6:	181e      	adds	r6, r3, r0
 80023d8:	2efe      	cmp	r6, #254	; 0xfe
 80023da:	dd16      	ble.n	800240a <__aeabi_d2f+0x52>
 80023dc:	20ff      	movs	r0, #255	; 0xff
 80023de:	2400      	movs	r4, #0
 80023e0:	05c0      	lsls	r0, r0, #23
 80023e2:	4320      	orrs	r0, r4
 80023e4:	07c9      	lsls	r1, r1, #31
 80023e6:	4308      	orrs	r0, r1
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <__aeabi_d2f+0x44>
 80023ee:	432c      	orrs	r4, r5
 80023f0:	d026      	beq.n	8002440 <__aeabi_d2f+0x88>
 80023f2:	2205      	movs	r2, #5
 80023f4:	0192      	lsls	r2, r2, #6
 80023f6:	0a54      	lsrs	r4, r2, #9
 80023f8:	b2d8      	uxtb	r0, r3
 80023fa:	e7f1      	b.n	80023e0 <__aeabi_d2f+0x28>
 80023fc:	4325      	orrs	r5, r4
 80023fe:	d0ed      	beq.n	80023dc <__aeabi_d2f+0x24>
 8002400:	2080      	movs	r0, #128	; 0x80
 8002402:	03c0      	lsls	r0, r0, #15
 8002404:	4304      	orrs	r4, r0
 8002406:	20ff      	movs	r0, #255	; 0xff
 8002408:	e7ea      	b.n	80023e0 <__aeabi_d2f+0x28>
 800240a:	2e00      	cmp	r6, #0
 800240c:	dd1b      	ble.n	8002446 <__aeabi_d2f+0x8e>
 800240e:	0192      	lsls	r2, r2, #6
 8002410:	1e53      	subs	r3, r2, #1
 8002412:	419a      	sbcs	r2, r3
 8002414:	00e4      	lsls	r4, r4, #3
 8002416:	0f6d      	lsrs	r5, r5, #29
 8002418:	4322      	orrs	r2, r4
 800241a:	432a      	orrs	r2, r5
 800241c:	0753      	lsls	r3, r2, #29
 800241e:	d048      	beq.n	80024b2 <__aeabi_d2f+0xfa>
 8002420:	230f      	movs	r3, #15
 8002422:	4013      	ands	r3, r2
 8002424:	2b04      	cmp	r3, #4
 8002426:	d000      	beq.n	800242a <__aeabi_d2f+0x72>
 8002428:	3204      	adds	r2, #4
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	04db      	lsls	r3, r3, #19
 800242e:	4013      	ands	r3, r2
 8002430:	d03f      	beq.n	80024b2 <__aeabi_d2f+0xfa>
 8002432:	1c70      	adds	r0, r6, #1
 8002434:	2efe      	cmp	r6, #254	; 0xfe
 8002436:	d0d1      	beq.n	80023dc <__aeabi_d2f+0x24>
 8002438:	0192      	lsls	r2, r2, #6
 800243a:	0a54      	lsrs	r4, r2, #9
 800243c:	b2c0      	uxtb	r0, r0
 800243e:	e7cf      	b.n	80023e0 <__aeabi_d2f+0x28>
 8002440:	2000      	movs	r0, #0
 8002442:	2400      	movs	r4, #0
 8002444:	e7cc      	b.n	80023e0 <__aeabi_d2f+0x28>
 8002446:	0032      	movs	r2, r6
 8002448:	3217      	adds	r2, #23
 800244a:	db22      	blt.n	8002492 <__aeabi_d2f+0xda>
 800244c:	2080      	movs	r0, #128	; 0x80
 800244e:	0400      	lsls	r0, r0, #16
 8002450:	4320      	orrs	r0, r4
 8002452:	241e      	movs	r4, #30
 8002454:	1ba4      	subs	r4, r4, r6
 8002456:	2c1f      	cmp	r4, #31
 8002458:	dd1d      	ble.n	8002496 <__aeabi_d2f+0xde>
 800245a:	2202      	movs	r2, #2
 800245c:	4252      	negs	r2, r2
 800245e:	1b96      	subs	r6, r2, r6
 8002460:	0002      	movs	r2, r0
 8002462:	40f2      	lsrs	r2, r6
 8002464:	0016      	movs	r6, r2
 8002466:	2c20      	cmp	r4, #32
 8002468:	d004      	beq.n	8002474 <__aeabi_d2f+0xbc>
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <__aeabi_d2f+0x108>)
 800246c:	4694      	mov	ip, r2
 800246e:	4463      	add	r3, ip
 8002470:	4098      	lsls	r0, r3
 8002472:	4305      	orrs	r5, r0
 8002474:	002a      	movs	r2, r5
 8002476:	1e53      	subs	r3, r2, #1
 8002478:	419a      	sbcs	r2, r3
 800247a:	4332      	orrs	r2, r6
 800247c:	2600      	movs	r6, #0
 800247e:	0753      	lsls	r3, r2, #29
 8002480:	d1ce      	bne.n	8002420 <__aeabi_d2f+0x68>
 8002482:	2480      	movs	r4, #128	; 0x80
 8002484:	0013      	movs	r3, r2
 8002486:	04e4      	lsls	r4, r4, #19
 8002488:	2001      	movs	r0, #1
 800248a:	4023      	ands	r3, r4
 800248c:	4222      	tst	r2, r4
 800248e:	d1d3      	bne.n	8002438 <__aeabi_d2f+0x80>
 8002490:	e7b0      	b.n	80023f4 <__aeabi_d2f+0x3c>
 8002492:	2300      	movs	r3, #0
 8002494:	e7ad      	b.n	80023f2 <__aeabi_d2f+0x3a>
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <__aeabi_d2f+0x10c>)
 8002498:	4694      	mov	ip, r2
 800249a:	002a      	movs	r2, r5
 800249c:	40e2      	lsrs	r2, r4
 800249e:	0014      	movs	r4, r2
 80024a0:	002a      	movs	r2, r5
 80024a2:	4463      	add	r3, ip
 80024a4:	409a      	lsls	r2, r3
 80024a6:	4098      	lsls	r0, r3
 80024a8:	1e55      	subs	r5, r2, #1
 80024aa:	41aa      	sbcs	r2, r5
 80024ac:	4302      	orrs	r2, r0
 80024ae:	4322      	orrs	r2, r4
 80024b0:	e7e4      	b.n	800247c <__aeabi_d2f+0xc4>
 80024b2:	0033      	movs	r3, r6
 80024b4:	e79e      	b.n	80023f4 <__aeabi_d2f+0x3c>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007fe 	.word	0x000007fe
 80024bc:	fffffc80 	.word	0xfffffc80
 80024c0:	fffffca2 	.word	0xfffffca2
 80024c4:	fffffc82 	.word	0xfffffc82

080024c8 <__clzsi2>:
 80024c8:	211c      	movs	r1, #28
 80024ca:	2301      	movs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	4298      	cmp	r0, r3
 80024d0:	d301      	bcc.n	80024d6 <__clzsi2+0xe>
 80024d2:	0c00      	lsrs	r0, r0, #16
 80024d4:	3910      	subs	r1, #16
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	4298      	cmp	r0, r3
 80024da:	d301      	bcc.n	80024e0 <__clzsi2+0x18>
 80024dc:	0a00      	lsrs	r0, r0, #8
 80024de:	3908      	subs	r1, #8
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	4298      	cmp	r0, r3
 80024e4:	d301      	bcc.n	80024ea <__clzsi2+0x22>
 80024e6:	0900      	lsrs	r0, r0, #4
 80024e8:	3904      	subs	r1, #4
 80024ea:	a202      	add	r2, pc, #8	; (adr r2, 80024f4 <__clzsi2+0x2c>)
 80024ec:	5c10      	ldrb	r0, [r2, r0]
 80024ee:	1840      	adds	r0, r0, r1
 80024f0:	4770      	bx	lr
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	02020304 	.word	0x02020304
 80024f8:	01010101 	.word	0x01010101
	...

08002504 <__clzdi2>:
 8002504:	b510      	push	{r4, lr}
 8002506:	2900      	cmp	r1, #0
 8002508:	d103      	bne.n	8002512 <__clzdi2+0xe>
 800250a:	f7ff ffdd 	bl	80024c8 <__clzsi2>
 800250e:	3020      	adds	r0, #32
 8002510:	e002      	b.n	8002518 <__clzdi2+0x14>
 8002512:	0008      	movs	r0, r1
 8002514:	f7ff ffd8 	bl	80024c8 <__clzsi2>
 8002518:	bd10      	pop	{r4, pc}
 800251a:	46c0      	nop			; (mov r8, r8)

0800251c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b0b8      	sub	sp, #224	; 0xe0
 8002520:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t buf[200];
	float temp=20;
 8002522:	4b53      	ldr	r3, [pc, #332]	; (8002670 <main+0x154>)
 8002524:	22d4      	movs	r2, #212	; 0xd4
 8002526:	18ba      	adds	r2, r7, r2
 8002528:	6013      	str	r3, [r2, #0]
	float hum=20;
 800252a:	4b51      	ldr	r3, [pc, #324]	; (8002670 <main+0x154>)
 800252c:	22d0      	movs	r2, #208	; 0xd0
 800252e:	18ba      	adds	r2, r7, r2
 8002530:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002532:	f000 fba3 	bl	8002c7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002536:	f000 f8a9 	bl	800268c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800253a:	f000 f963 	bl	8002804 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800253e:	f000 f92d 	bl	800279c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002542:	f000 f8eb 	bl	800271c <MX_I2C1_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		strcpy((char*) buf, "Hello\r\n");
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <main+0x158>)
 800254a:	ca03      	ldmia	r2!, {r0, r1}
 800254c:	c303      	stmia	r3!, {r0, r1}
		HAL_UART_Transmit(&huart2, buf, strlen((char*) buf), HAL_MAX_DELAY);
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	0018      	movs	r0, r3
 8002552:	f7fd fdd7 	bl	8000104 <strlen>
 8002556:	0003      	movs	r3, r0
 8002558:	b29a      	uxth	r2, r3
 800255a:	2301      	movs	r3, #1
 800255c:	425b      	negs	r3, r3
 800255e:	1d39      	adds	r1, r7, #4
 8002560:	4845      	ldr	r0, [pc, #276]	; (8002678 <main+0x15c>)
 8002562:	f002 fb19 	bl	8004b98 <HAL_UART_Transmit>
		memset(buf, 0, sizeof(buf));
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	22c8      	movs	r2, #200	; 0xc8
 800256a:	2100      	movs	r1, #0
 800256c:	0018      	movs	r0, r3
 800256e:	f003 f81b 	bl	80055a8 <memset>

		buf[0] = (uint8_t) ((SS_CLOCK_STR_DIS_HGH_REP & 0xFF00) >> 8);
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2224      	movs	r2, #36	; 0x24
 8002576:	701a      	strb	r2, [r3, #0]
		buf[1] = (uint8_t) (SS_CLOCK_STR_DIS_HGH_REP & 0x00FF);
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]

		ret = HAL_I2C_Master_Transmit(&hi2c1, (DEFAULT_ADDR << 1), buf, 2,
 800257e:	25cf      	movs	r5, #207	; 0xcf
 8002580:	197c      	adds	r4, r7, r5
 8002582:	1d3a      	adds	r2, r7, #4
 8002584:	483d      	ldr	r0, [pc, #244]	; (800267c <main+0x160>)
 8002586:	2301      	movs	r3, #1
 8002588:	425b      	negs	r3, r3
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2302      	movs	r3, #2
 800258e:	2188      	movs	r1, #136	; 0x88
 8002590:	f000 feea 	bl	8003368 <HAL_I2C_Master_Transmit>
 8002594:	0003      	movs	r3, r0
 8002596:	7023      	strb	r3, [r4, #0]
				HAL_MAX_DELAY);
		memset(buf, 0, sizeof(buf));
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	22c8      	movs	r2, #200	; 0xc8
 800259c:	2100      	movs	r1, #0
 800259e:	0018      	movs	r0, r3
 80025a0:	f003 f802 	bl	80055a8 <memset>

		if (ret != HAL_OK) {
 80025a4:	197b      	adds	r3, r7, r5
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d014      	beq.n	80025d6 <main+0xba>
			strcpy((char*) buf, "Error Tx\r\n");
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <main+0x164>)
 80025b0:	ca03      	ldmia	r2!, {r0, r1}
 80025b2:	c303      	stmia	r3!, {r0, r1}
 80025b4:	8811      	ldrh	r1, [r2, #0]
 80025b6:	8019      	strh	r1, [r3, #0]
 80025b8:	7892      	ldrb	r2, [r2, #2]
 80025ba:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart2, buf, strlen((char*) buf), HAL_MAX_DELAY);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	0018      	movs	r0, r3
 80025c0:	f7fd fda0 	bl	8000104 <strlen>
 80025c4:	0003      	movs	r3, r0
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	2301      	movs	r3, #1
 80025ca:	425b      	negs	r3, r3
 80025cc:	1d39      	adds	r1, r7, #4
 80025ce:	482a      	ldr	r0, [pc, #168]	; (8002678 <main+0x15c>)
 80025d0:	f002 fae2 	bl	8004b98 <HAL_UART_Transmit>
 80025d4:	e7b7      	b.n	8002546 <main+0x2a>
		} else {
			HAL_Delay(50);
 80025d6:	2032      	movs	r0, #50	; 0x32
 80025d8:	f000 fbd6 	bl	8002d88 <HAL_Delay>
			ret = HAL_I2C_Master_Receive(&hi2c1, (DEFAULT_ADDR << 1), buf, 6,
 80025dc:	25cf      	movs	r5, #207	; 0xcf
 80025de:	197c      	adds	r4, r7, r5
 80025e0:	1d3a      	adds	r2, r7, #4
 80025e2:	4826      	ldr	r0, [pc, #152]	; (800267c <main+0x160>)
 80025e4:	2301      	movs	r3, #1
 80025e6:	425b      	negs	r3, r3
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2306      	movs	r3, #6
 80025ec:	2188      	movs	r1, #136	; 0x88
 80025ee:	f000 ffc3 	bl	8003578 <HAL_I2C_Master_Receive>
 80025f2:	0003      	movs	r3, r0
 80025f4:	7023      	strb	r3, [r4, #0]
					HAL_MAX_DELAY);
			if (ret != HAL_OK) {
 80025f6:	197b      	adds	r3, r7, r5
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d014      	beq.n	8002628 <main+0x10c>
				strcpy((char*) buf, "Error Rx\r\n");
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4a20      	ldr	r2, [pc, #128]	; (8002684 <main+0x168>)
 8002602:	ca03      	ldmia	r2!, {r0, r1}
 8002604:	c303      	stmia	r3!, {r0, r1}
 8002606:	8811      	ldrh	r1, [r2, #0]
 8002608:	8019      	strh	r1, [r3, #0]
 800260a:	7892      	ldrb	r2, [r2, #2]
 800260c:	709a      	strb	r2, [r3, #2]
				HAL_UART_Transmit(&huart2, buf, strlen((char*) buf),
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	0018      	movs	r0, r3
 8002612:	f7fd fd77 	bl	8000104 <strlen>
 8002616:	0003      	movs	r3, r0
 8002618:	b29a      	uxth	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	425b      	negs	r3, r3
 800261e:	1d39      	adds	r1, r7, #4
 8002620:	4815      	ldr	r0, [pc, #84]	; (8002678 <main+0x15c>)
 8002622:	f002 fab9 	bl	8004b98 <HAL_UART_Transmit>
 8002626:	e78e      	b.n	8002546 <main+0x2a>
						HAL_MAX_DELAY);
			}
			else{
				sprintf((char*)buf,"Temperatura:%.2f - Humedad:%.2f\r\n",temp,hum);
 8002628:	23d4      	movs	r3, #212	; 0xd4
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	f7ff fe7b 	bl	8002328 <__aeabi_f2d>
 8002632:	0004      	movs	r4, r0
 8002634:	000d      	movs	r5, r1
 8002636:	23d0      	movs	r3, #208	; 0xd0
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	f7ff fe74 	bl	8002328 <__aeabi_f2d>
 8002640:	0002      	movs	r2, r0
 8002642:	000b      	movs	r3, r1
 8002644:	4910      	ldr	r1, [pc, #64]	; (8002688 <main+0x16c>)
 8002646:	1d38      	adds	r0, r7, #4
 8002648:	9200      	str	r2, [sp, #0]
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	0022      	movs	r2, r4
 800264e:	002b      	movs	r3, r5
 8002650:	f003 fe2c 	bl	80062ac <siprintf>
				HAL_UART_Transmit(&huart2, buf, strlen((char*) buf),
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	0018      	movs	r0, r3
 8002658:	f7fd fd54 	bl	8000104 <strlen>
 800265c:	0003      	movs	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	2301      	movs	r3, #1
 8002662:	425b      	negs	r3, r3
 8002664:	1d39      	adds	r1, r7, #4
 8002666:	4804      	ldr	r0, [pc, #16]	; (8002678 <main+0x15c>)
 8002668:	f002 fa96 	bl	8004b98 <HAL_UART_Transmit>
		strcpy((char*) buf, "Hello\r\n");
 800266c:	e76b      	b.n	8002546 <main+0x2a>
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	41a00000 	.word	0x41a00000
 8002674:	0800a020 	.word	0x0800a020
 8002678:	20000250 	.word	0x20000250
 800267c:	200001fc 	.word	0x200001fc
 8002680:	0800a028 	.word	0x0800a028
 8002684:	0800a034 	.word	0x0800a034
 8002688:	0800a040 	.word	0x0800a040

0800268c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b093      	sub	sp, #76	; 0x4c
 8002690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002692:	2410      	movs	r4, #16
 8002694:	193b      	adds	r3, r7, r4
 8002696:	0018      	movs	r0, r3
 8002698:	2338      	movs	r3, #56	; 0x38
 800269a:	001a      	movs	r2, r3
 800269c:	2100      	movs	r1, #0
 800269e:	f002 ff83 	bl	80055a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80026a2:	003b      	movs	r3, r7
 80026a4:	0018      	movs	r0, r3
 80026a6:	2310      	movs	r3, #16
 80026a8:	001a      	movs	r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	f002 ff7c 	bl	80055a8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	0018      	movs	r0, r3
 80026b6:	f001 fb8f 	bl	8003dd8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	2202      	movs	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	0052      	lsls	r2, r2, #1
 80026c6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	2240      	movs	r2, #64	; 0x40
 80026d2:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 fbc7 	bl	8003e70 <HAL_RCC_OscConfig>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <SystemClock_Config+0x5e>
		Error_Handler();
 80026e6:	f000 f8ef 	bl	80028c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80026ea:	003b      	movs	r3, r7
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026f0:	003b      	movs	r3, r7
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f6:	003b      	movs	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026fc:	003b      	movs	r3, r7
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002702:	003b      	movs	r3, r7
 8002704:	2100      	movs	r1, #0
 8002706:	0018      	movs	r0, r3
 8002708:	f001 fecc 	bl	80044a4 <HAL_RCC_ClockConfig>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <SystemClock_Config+0x88>
		Error_Handler();
 8002710:	f000 f8da 	bl	80028c8 <Error_Handler>
	}
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b013      	add	sp, #76	; 0x4c
 800271a:	bd90      	pop	{r4, r7, pc}

0800271c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <MX_I2C1_Init+0x74>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <MX_I2C1_Init+0x78>)
 8002724:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_I2C1_Init+0x74>)
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <MX_I2C1_Init+0x7c>)
 800272a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <MX_I2C1_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_I2C1_Init+0x74>)
 8002734:	2201      	movs	r2, #1
 8002736:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_I2C1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_I2C1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C1_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C1_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C1_Init+0x74>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C1_Init+0x74>)
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fd6f 	bl	800323c <HAL_I2C_Init>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002762:	f000 f8b1 	bl	80028c8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C1_Init+0x74>)
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f001 fa9c 	bl	8003ca8 <HAL_I2CEx_ConfigAnalogFilter>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002774:	f000 f8a8 	bl	80028c8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <MX_I2C1_Init+0x74>)
 800277a:	2100      	movs	r1, #0
 800277c:	0018      	movs	r0, r3
 800277e:	f001 fadf 	bl	8003d40 <HAL_I2CEx_ConfigDigitalFilter>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002786:	f000 f89f 	bl	80028c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200001fc 	.word	0x200001fc
 8002794:	40005400 	.word	0x40005400
 8002798:	00303d5b 	.word	0x00303d5b

0800279c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <MX_USART2_UART_Init+0x64>)
 80027a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027a8:	22e1      	movs	r2, #225	; 0xe1
 80027aa:	0252      	lsls	r2, r2, #9
 80027ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	0552      	lsls	r2, r2, #21
 80027b4:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027c4:	220c      	movs	r2, #12
 80027c6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027dc:	2200      	movs	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <MX_USART2_UART_Init+0x60>)
 80027e8:	0018      	movs	r0, r3
 80027ea:	f002 f97f 	bl	8004aec <HAL_UART_Init>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART2_UART_Init+0x5a>
		Error_Handler();
 80027f2:	f000 f869 	bl	80028c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000250 	.word	0x20000250
 8002800:	40004400 	.word	0x40004400

08002804 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800280a:	240c      	movs	r4, #12
 800280c:	193b      	adds	r3, r7, r4
 800280e:	0018      	movs	r0, r3
 8002810:	2314      	movs	r3, #20
 8002812:	001a      	movs	r2, r3
 8002814:	2100      	movs	r1, #0
 8002816:	f002 fec7 	bl	80055a8 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	4b28      	ldr	r3, [pc, #160]	; (80028bc <MX_GPIO_Init+0xb8>)
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002820:	2104      	movs	r1, #4
 8002822:	430a      	orrs	r2, r1
 8002824:	635a      	str	r2, [r3, #52]	; 0x34
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	2204      	movs	r2, #4
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002838:	2120      	movs	r1, #32
 800283a:	430a      	orrs	r2, r1
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	2220      	movs	r2, #32
 8002844:	4013      	ands	r3, r2
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_GPIO_Init+0xb8>)
 800284c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <MX_GPIO_Init+0xb8>)
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <MX_GPIO_Init+0xbc>)
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fcc9 	bl	8003200 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : T_NRST_Pin */
	GPIO_InitStruct.Pin = T_NRST_Pin;
 800286e:	193b      	adds	r3, r7, r4
 8002870:	2204      	movs	r2, #4
 8002872:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002874:	193b      	adds	r3, r7, r4
 8002876:	2288      	movs	r2, #136	; 0x88
 8002878:	0352      	lsls	r2, r2, #13
 800287a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	193b      	adds	r3, r7, r4
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8002882:	193b      	adds	r3, r7, r4
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <MX_GPIO_Init+0xc0>)
 8002886:	0019      	movs	r1, r3
 8002888:	0010      	movs	r0, r2
 800288a:	f000 fb55 	bl	8002f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 800288e:	0021      	movs	r1, r4
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2201      	movs	r2, #1
 800289a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <MX_GPIO_Init+0xbc>)
 80028ac:	0019      	movs	r1, r3
 80028ae:	0010      	movs	r0, r2
 80028b0:	f000 fb42 	bl	8002f38 <HAL_GPIO_Init>

}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b009      	add	sp, #36	; 0x24
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	50000800 	.word	0x50000800
 80028c4:	50001400 	.word	0x50001400

080028c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
}
 80028ce:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028d0:	e7fe      	b.n	80028d0 <Error_Handler+0x8>
	...

080028d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_MspInit+0x44>)
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_MspInit+0x44>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_MspInit+0x44>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2201      	movs	r2, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_MspInit+0x44>)
 80028f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_MspInit+0x44>)
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0549      	lsls	r1, r1, #21
 80028fc:	430a      	orrs	r2, r1
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_MspInit+0x44>)
 8002902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	055b      	lsls	r3, r3, #21
 8002908:	4013      	ands	r3, r2
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b002      	add	sp, #8
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b095      	sub	sp, #84	; 0x54
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	233c      	movs	r3, #60	; 0x3c
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	0018      	movs	r0, r3
 800292a:	2314      	movs	r3, #20
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f002 fe3a 	bl	80055a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	2414      	movs	r4, #20
 8002936:	193b      	adds	r3, r7, r4
 8002938:	0018      	movs	r0, r3
 800293a:	2328      	movs	r3, #40	; 0x28
 800293c:	001a      	movs	r2, r3
 800293e:	2100      	movs	r1, #0
 8002940:	f002 fe32 	bl	80055a8 <memset>
  if(hi2c->Instance==I2C1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <HAL_I2C_MspInit+0xbc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d13f      	bne.n	80029ce <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	2220      	movs	r2, #32
 8002952:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800295a:	193b      	adds	r3, r7, r4
 800295c:	0018      	movs	r0, r3
 800295e:	f001 ff4b 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002966:	f7ff ffaf 	bl	80028c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_I2C_MspInit+0xc0>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_I2C_MspInit+0xc0>)
 8002970:	2101      	movs	r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_I2C_MspInit+0xc0>)
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002982:	213c      	movs	r1, #60	; 0x3c
 8002984:	187b      	adds	r3, r7, r1
 8002986:	22c0      	movs	r2, #192	; 0xc0
 8002988:	00d2      	lsls	r2, r2, #3
 800298a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2212      	movs	r2, #18
 8002990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	2206      	movs	r2, #6
 80029a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	187a      	adds	r2, r7, r1
 80029a6:	23a0      	movs	r3, #160	; 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	0011      	movs	r1, r2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 fac3 	bl	8002f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_I2C_MspInit+0xc0>)
 80029b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_I2C_MspInit+0xc0>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0389      	lsls	r1, r1, #14
 80029bc:	430a      	orrs	r2, r1
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_I2C_MspInit+0xc0>)
 80029c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	039b      	lsls	r3, r3, #14
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b015      	add	sp, #84	; 0x54
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	40005400 	.word	0x40005400
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b08b      	sub	sp, #44	; 0x2c
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	2414      	movs	r4, #20
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	0018      	movs	r0, r3
 80029ee:	2314      	movs	r3, #20
 80029f0:	001a      	movs	r2, r3
 80029f2:	2100      	movs	r1, #0
 80029f4:	f002 fdd8 	bl	80055a8 <memset>
  if(huart->Instance==USART2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_UART_MspInit+0x8c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d130      	bne.n	8002a64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_UART_MspInit+0x90>)
 8002a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_UART_MspInit+0x90>)
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	0289      	lsls	r1, r1, #10
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_UART_MspInit+0x90>)
 8002a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_UART_MspInit+0x90>)
 8002a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_UART_MspInit+0x90>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_UART_MspInit+0x90>)
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8002a36:	0021      	movs	r1, r4
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	2202      	movs	r2, #2
 8002a42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2201      	movs	r2, #1
 8002a48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2201      	movs	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	187a      	adds	r2, r7, r1
 8002a58:	23a0      	movs	r3, #160	; 0xa0
 8002a5a:	05db      	lsls	r3, r3, #23
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 fa6a 	bl	8002f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b00b      	add	sp, #44	; 0x2c
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	40004400 	.word	0x40004400
 8002a70:	40021000 	.word	0x40021000

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <NMI_Handler+0x4>

08002a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <HardFault_Handler+0x4>

08002a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a98:	f000 f95a 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
  return 1;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_kill>:

int _kill(int pid, int sig)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ab8:	f002 fd4c 	bl	8005554 <__errno>
 8002abc:	0003      	movs	r3, r0
 8002abe:	2216      	movs	r2, #22
 8002ac0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	425b      	negs	r3, r3
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_exit>:

void _exit (int status)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	425a      	negs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0011      	movs	r1, r2
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7ff ffe5 	bl	8002aae <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ae4:	e7fe      	b.n	8002ae4 <_exit+0x16>

08002ae6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e00a      	b.n	8002b0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002af8:	e000      	b.n	8002afc <_read+0x16>
 8002afa:	bf00      	nop
 8002afc:	0001      	movs	r1, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	60ba      	str	r2, [r7, #8]
 8002b04:	b2ca      	uxtb	r2, r1
 8002b06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dbf0      	blt.n	8002af8 <_read+0x12>
  }

  return len;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b006      	add	sp, #24
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e009      	b.n	8002b46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	60ba      	str	r2, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	e000      	b.n	8002b40 <_write+0x20>
 8002b3e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dbf1      	blt.n	8002b32 <_write+0x12>
  }
  return len;
 8002b4e:	687b      	ldr	r3, [r7, #4]
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b006      	add	sp, #24
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_close>:

int _close(int file)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	425b      	negs	r3, r3
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0192      	lsls	r2, r2, #6
 8002b7c:	605a      	str	r2, [r3, #4]
  return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_isatty>:

int _isatty(int file)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <_sbrk+0x5c>)
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <_sbrk+0x60>)
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <_sbrk+0x64>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <_sbrk+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	18d3      	adds	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be0:	f002 fcb8 	bl	8005554 <__errno>
 8002be4:	0003      	movs	r3, r0
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	425b      	negs	r3, r3
 8002bee:	e009      	b.n	8002c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <_sbrk+0x64>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	18d2      	adds	r2, r2, r3
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <_sbrk+0x64>)
 8002c00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20002000 	.word	0x20002000
 8002c10:	00000400 	.word	0x00000400
 8002c14:	200002e4 	.word	0x200002e4
 8002c18:	20000300 	.word	0x20000300

08002c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c2c:	f7ff fff6 	bl	8002c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c32:	490d      	ldr	r1, [pc, #52]	; (8002c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c34:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <LoopForever+0xe>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c38:	e002      	b.n	8002c40 <LoopCopyDataInit>

08002c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3e:	3304      	adds	r3, #4

08002c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c44:	d3f9      	bcc.n	8002c3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c48:	4c0a      	ldr	r4, [pc, #40]	; (8002c74 <LoopForever+0x16>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c4c:	e001      	b.n	8002c52 <LoopFillZerobss>

08002c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c50:	3204      	adds	r2, #4

08002c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c54:	d3fb      	bcc.n	8002c4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c56:	f002 fc83 	bl	8005560 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c5a:	f7ff fc5f 	bl	800251c <main>

08002c5e <LoopForever>:

LoopForever:
  b LoopForever
 8002c5e:	e7fe      	b.n	8002c5e <LoopForever>
  ldr   r0, =_estack
 8002c60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c68:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c6c:	0800a614 	.word	0x0800a614
  ldr r2, =_sbss
 8002c70:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c74:	200002fc 	.word	0x200002fc

08002c78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c78:	e7fe      	b.n	8002c78 <ADC1_IRQHandler>
	...

08002c7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x3c>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_Init+0x3c>)
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	0049      	lsls	r1, r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c96:	2000      	movs	r0, #0
 8002c98:	f000 f810 	bl	8002cbc <HAL_InitTick>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e001      	b.n	8002cac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ca8:	f7ff fe14 	bl	80028d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	781b      	ldrb	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40022000 	.word	0x40022000

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_InitTick+0x88>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d02b      	beq.n	8002d2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_InitTick+0x8c>)
 8002cd6:	681c      	ldr	r4, [r3, #0]
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_InitTick+0x88>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	0019      	movs	r1, r3
 8002cde:	23fa      	movs	r3, #250	; 0xfa
 8002ce0:	0098      	lsls	r0, r3, #2
 8002ce2:	f7fd fa2b 	bl	800013c <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	0019      	movs	r1, r3
 8002cea:	0020      	movs	r0, r4
 8002cec:	f7fd fa26 	bl	800013c <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 f913 	bl	8002f1e <HAL_SYSTICK_Config>
 8002cf8:	1e03      	subs	r3, r0, #0
 8002cfa:	d112      	bne.n	8002d22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d80a      	bhi.n	8002d18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	2301      	movs	r3, #1
 8002d06:	425b      	negs	r3, r3
 8002d08:	2200      	movs	r2, #0
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 f8f2 	bl	8002ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_InitTick+0x90>)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e00d      	b.n	8002d34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e008      	b.n	8002d34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d22:	230f      	movs	r3, #15
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e003      	b.n	8002d34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d34:	230f      	movs	r3, #15
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b005      	add	sp, #20
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	20000008 	.word	0x20000008
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	20000004 	.word	0x20000004

08002d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_IncTick+0x1c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	001a      	movs	r2, r3
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_IncTick+0x20>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	18d2      	adds	r2, r2, r3
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_IncTick+0x20>)
 8002d62:	601a      	str	r2, [r3, #0]
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	200002e8 	.word	0x200002e8

08002d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_GetTick+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	200002e8 	.word	0x200002e8

08002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fff0 	bl	8002d74 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	d005      	beq.n	8002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_Delay+0x44>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	001a      	movs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	f7ff ffe0 	bl	8002d74 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d8f7      	bhi.n	8002db0 <HAL_Delay+0x28>
  {
  }
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	20000008 	.word	0x20000008

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b7f      	cmp	r3, #127	; 0x7f
 8002de4:	d828      	bhi.n	8002e38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de6:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <__NVIC_SetPriority+0xd4>)
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	33c0      	adds	r3, #192	; 0xc0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	589b      	ldr	r3, [r3, r2]
 8002df6:	1dfa      	adds	r2, r7, #7
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	400a      	ands	r2, r1
 8002e00:	00d2      	lsls	r2, r2, #3
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	4091      	lsls	r1, r2
 8002e06:	000a      	movs	r2, r1
 8002e08:	43d2      	mvns	r2, r2
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	019b      	lsls	r3, r3, #6
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	401a      	ands	r2, r3
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	4003      	ands	r3, r0
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e24:	481f      	ldr	r0, [pc, #124]	; (8002ea4 <__NVIC_SetPriority+0xd4>)
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	33c0      	adds	r3, #192	; 0xc0
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e36:	e031      	b.n	8002e9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <__NVIC_SetPriority+0xd8>)
 8002e3a:	1dfb      	adds	r3, r7, #7
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	0019      	movs	r1, r3
 8002e40:	230f      	movs	r3, #15
 8002e42:	400b      	ands	r3, r1
 8002e44:	3b08      	subs	r3, #8
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3306      	adds	r3, #6
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	3304      	adds	r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1dfa      	adds	r2, r7, #7
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	0011      	movs	r1, r2
 8002e58:	2203      	movs	r2, #3
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	00d2      	lsls	r2, r2, #3
 8002e5e:	21ff      	movs	r1, #255	; 0xff
 8002e60:	4091      	lsls	r1, r2
 8002e62:	000a      	movs	r2, r1
 8002e64:	43d2      	mvns	r2, r2
 8002e66:	401a      	ands	r2, r3
 8002e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	019b      	lsls	r3, r3, #6
 8002e6e:	22ff      	movs	r2, #255	; 0xff
 8002e70:	401a      	ands	r2, r3
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	0018      	movs	r0, r3
 8002e78:	2303      	movs	r3, #3
 8002e7a:	4003      	ands	r3, r0
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <__NVIC_SetPriority+0xd8>)
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	001c      	movs	r4, r3
 8002e88:	230f      	movs	r3, #15
 8002e8a:	4023      	ands	r3, r4
 8002e8c:	3b08      	subs	r3, #8
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	430a      	orrs	r2, r1
 8002e92:	3306      	adds	r3, #6
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	18c3      	adds	r3, r0, r3
 8002e98:	3304      	adds	r3, #4
 8002e9a:	601a      	str	r2, [r3, #0]
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bd90      	pop	{r4, r7, pc}
 8002ea4:	e000e100 	.word	0xe000e100
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	045b      	lsls	r3, r3, #17
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d301      	bcc.n	8002ec4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e010      	b.n	8002ee6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <SysTick_Config+0x44>)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ecc:	2301      	movs	r3, #1
 8002ece:	425b      	negs	r3, r3
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff ff7c 	bl	8002dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <SysTick_Config+0x44>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <SysTick_Config+0x44>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	e000e010 	.word	0xe000e010

08002ef4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	210f      	movs	r1, #15
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	1c02      	adds	r2, r0, #0
 8002f04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	0011      	movs	r1, r2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff ff5d 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff ffbf 	bl	8002eac <SysTick_Config>
 8002f2e:	0003      	movs	r3, r0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	e147      	b.n	80031d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4091      	lsls	r1, r2
 8002f52:	000a      	movs	r2, r1
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d100      	bne.n	8002f60 <HAL_GPIO_Init+0x28>
 8002f5e:	e138      	b.n	80031d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2203      	movs	r2, #3
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d005      	beq.n	8002f78 <HAL_GPIO_Init+0x40>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d130      	bne.n	8002fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	409a      	lsls	r2, r3
 8002f86:	0013      	movs	r3, r2
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fae:	2201      	movs	r2, #1
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	0013      	movs	r3, r2
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	0013      	movs	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d017      	beq.n	8003016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	0013      	movs	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2203      	movs	r2, #3
 800301c:	4013      	ands	r3, r2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d123      	bne.n	800306a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	58d3      	ldr	r3, [r2, r3]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2207      	movs	r2, #7
 8003034:	4013      	ands	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	43da      	mvns	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2107      	movs	r1, #7
 800304e:	400b      	ands	r3, r1
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	409a      	lsls	r2, r3
 8003054:	0013      	movs	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	6939      	ldr	r1, [r7, #16]
 8003068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	43da      	mvns	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2203      	movs	r2, #3
 8003088:	401a      	ands	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	23c0      	movs	r3, #192	; 0xc0
 80030a4:	029b      	lsls	r3, r3, #10
 80030a6:	4013      	ands	r3, r2
 80030a8:	d100      	bne.n	80030ac <HAL_GPIO_Init+0x174>
 80030aa:	e092      	b.n	80031d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80030ac:	4a50      	ldr	r2, [pc, #320]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3318      	adds	r3, #24
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	589b      	ldr	r3, [r3, r2]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	220f      	movs	r2, #15
 80030c4:	409a      	lsls	r2, r3
 80030c6:	0013      	movs	r3, r2
 80030c8:	43da      	mvns	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	23a0      	movs	r3, #160	; 0xa0
 80030d4:	05db      	lsls	r3, r3, #23
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0x1ca>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a45      	ldr	r2, [pc, #276]	; (80031f4 <HAL_GPIO_Init+0x2bc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_GPIO_Init+0x1c6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <HAL_GPIO_Init+0x2c0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <HAL_GPIO_Init+0x1c2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a43      	ldr	r2, [pc, #268]	; (80031fc <HAL_GPIO_Init+0x2c4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_GPIO_Init+0x1be>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x1cc>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e004      	b.n	8003104 <HAL_GPIO_Init+0x1cc>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_Init+0x1cc>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_GPIO_Init+0x1cc>
 8003102:	2300      	movs	r3, #0
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	2103      	movs	r1, #3
 8003108:	400a      	ands	r2, r1
 800310a:	00d2      	lsls	r2, r2, #3
 800310c:	4093      	lsls	r3, r2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003114:	4936      	ldr	r1, [pc, #216]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3318      	adds	r3, #24
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43da      	mvns	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	035b      	lsls	r3, r3, #13
 800313a:	4013      	ands	r3, r2
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43da      	mvns	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	039b      	lsls	r3, r3, #14
 8003164:	4013      	ands	r3, r2
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003176:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 8003178:	2384      	movs	r3, #132	; 0x84
 800317a:	58d3      	ldr	r3, [r2, r3]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43da      	mvns	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	4013      	ands	r3, r2
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800319c:	4914      	ldr	r1, [pc, #80]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 800319e:	2284      	movs	r2, #132	; 0x84
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	58d3      	ldr	r3, [r2, r3]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	025b      	lsls	r3, r3, #9
 80031be:	4013      	ands	r3, r2
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ca:	4909      	ldr	r1, [pc, #36]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3301      	adds	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	40da      	lsrs	r2, r3
 80031e0:	1e13      	subs	r3, r2, #0
 80031e2:	d000      	beq.n	80031e6 <HAL_GPIO_Init+0x2ae>
 80031e4:	e6b0      	b.n	8002f48 <HAL_GPIO_Init+0x10>
  }
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b006      	add	sp, #24
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021800 	.word	0x40021800
 80031f4:	50000400 	.word	0x50000400
 80031f8:	50000800 	.word	0x50000800
 80031fc:	50000c00 	.word	0x50000c00

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	0008      	movs	r0, r1
 800320a:	0011      	movs	r1, r2
 800320c:	1cbb      	adds	r3, r7, #2
 800320e:	1c02      	adds	r2, r0, #0
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	1c7b      	adds	r3, r7, #1
 8003214:	1c0a      	adds	r2, r1, #0
 8003216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003218:	1c7b      	adds	r3, r7, #1
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003220:	1cbb      	adds	r3, r7, #2
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003228:	e003      	b.n	8003232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800322a:	1cbb      	adds	r3, r7, #2
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b002      	add	sp, #8
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e082      	b.n	8003354 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2241      	movs	r2, #65	; 0x41
 8003252:	5c9b      	ldrb	r3, [r3, r2]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2240      	movs	r2, #64	; 0x40
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff fb59 	bl	800291c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2241      	movs	r2, #65	; 0x41
 800326e:	2124      	movs	r1, #36	; 0x24
 8003270:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2101      	movs	r1, #1
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4934      	ldr	r1, [pc, #208]	; (800335c <HAL_I2C_Init+0x120>)
 800328c:	400a      	ands	r2, r1
 800328e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4931      	ldr	r1, [pc, #196]	; (8003360 <HAL_I2C_Init+0x124>)
 800329c:	400a      	ands	r2, r1
 800329e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0209      	lsls	r1, r1, #8
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	e007      	b.n	80032ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2184      	movs	r1, #132	; 0x84
 80032c4:	0209      	lsls	r1, r1, #8
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d104      	bne.n	80032dc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	491f      	ldr	r1, [pc, #124]	; (8003364 <HAL_I2C_Init+0x128>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	491a      	ldr	r1, [pc, #104]	; (8003360 <HAL_I2C_Init+0x124>)
 80032f8:	400a      	ands	r2, r1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	431a      	orrs	r2, r3
 8003306:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69d9      	ldr	r1, [r3, #28]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2241      	movs	r2, #65	; 0x41
 8003340:	2120      	movs	r1, #32
 8003342:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2242      	movs	r2, #66	; 0x42
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	f0ffffff 	.word	0xf0ffffff
 8003360:	ffff7fff 	.word	0xffff7fff
 8003364:	02008000 	.word	0x02008000

08003368 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	0008      	movs	r0, r1
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	0019      	movs	r1, r3
 8003376:	230a      	movs	r3, #10
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	1c02      	adds	r2, r0, #0
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	2308      	movs	r3, #8
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	1c0a      	adds	r2, r1, #0
 8003384:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2241      	movs	r2, #65	; 0x41
 800338a:	5c9b      	ldrb	r3, [r3, r2]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b20      	cmp	r3, #32
 8003390:	d000      	beq.n	8003394 <HAL_I2C_Master_Transmit+0x2c>
 8003392:	e0e7      	b.n	8003564 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	5c9b      	ldrb	r3, [r3, r2]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_I2C_Master_Transmit+0x3a>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0e1      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1fe>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2240      	movs	r2, #64	; 0x40
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033aa:	f7ff fce3 	bl	8002d74 <HAL_GetTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	0219      	lsls	r1, r3, #8
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2319      	movs	r3, #25
 80033be:	2201      	movs	r2, #1
 80033c0:	f000 fa04 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0cc      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2241      	movs	r2, #65	; 0x41
 80033d0:	2121      	movs	r1, #33	; 0x21
 80033d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2242      	movs	r2, #66	; 0x42
 80033d8:	2110      	movs	r1, #16
 80033da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2208      	movs	r2, #8
 80033ec:	18ba      	adds	r2, r7, r2
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2bff      	cmp	r3, #255	; 0xff
 8003400:	d911      	bls.n	8003426 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	045c      	lsls	r4, r3, #17
 8003412:	230a      	movs	r3, #10
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	8819      	ldrh	r1, [r3, #0]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	4b55      	ldr	r3, [pc, #340]	; (8003570 <HAL_I2C_Master_Transmit+0x208>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	0023      	movs	r3, r4
 8003420:	f000 fc08 	bl	8003c34 <I2C_TransferConfig>
 8003424:	e075      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	b2da      	uxtb	r2, r3
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	049c      	lsls	r4, r3, #18
 800343a:	230a      	movs	r3, #10
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	8819      	ldrh	r1, [r3, #0]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <HAL_I2C_Master_Transmit+0x208>)
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	0023      	movs	r3, r4
 8003448:	f000 fbf4 	bl	8003c34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800344c:	e061      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 f9f8 	bl	800384a <I2C_WaitOnTXISFlagUntilTimeout>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e081      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03a      	beq.n	8003512 <HAL_I2C_Master_Transmit+0x1aa>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d136      	bne.n	8003512 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	0013      	movs	r3, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	f000 f98b 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e053      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2bff      	cmp	r3, #255	; 0xff
 80034c6:	d911      	bls.n	80034ec <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	045c      	lsls	r4, r3, #17
 80034d8:	230a      	movs	r3, #10
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	8819      	ldrh	r1, [r3, #0]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	0023      	movs	r3, r4
 80034e6:	f000 fba5 	bl	8003c34 <I2C_TransferConfig>
 80034ea:	e012      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	049c      	lsls	r4, r3, #18
 8003500:	230a      	movs	r3, #10
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	8819      	ldrh	r1, [r3, #0]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	2300      	movs	r3, #0
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	0023      	movs	r3, r4
 800350e:	f000 fb91 	bl	8003c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d198      	bne.n	800344e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f9d0 	bl	80038c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e01a      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2220      	movs	r2, #32
 8003536:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	490c      	ldr	r1, [pc, #48]	; (8003574 <HAL_I2C_Master_Transmit+0x20c>)
 8003544:	400a      	ands	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2241      	movs	r2, #65	; 0x41
 800354c:	2120      	movs	r1, #32
 800354e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2242      	movs	r2, #66	; 0x42
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b007      	add	sp, #28
 800356c:	bd90      	pop	{r4, r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	80002000 	.word	0x80002000
 8003574:	fe00e800 	.word	0xfe00e800

08003578 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	0008      	movs	r0, r1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	0019      	movs	r1, r3
 8003586:	230a      	movs	r3, #10
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	1c02      	adds	r2, r0, #0
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	2308      	movs	r3, #8
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	1c0a      	adds	r2, r1, #0
 8003594:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2241      	movs	r2, #65	; 0x41
 800359a:	5c9b      	ldrb	r3, [r3, r2]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d000      	beq.n	80035a4 <HAL_I2C_Master_Receive+0x2c>
 80035a2:	e0e8      	b.n	8003776 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2240      	movs	r2, #64	; 0x40
 80035a8:	5c9b      	ldrb	r3, [r3, r2]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Master_Receive+0x3a>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0e2      	b.n	8003778 <HAL_I2C_Master_Receive+0x200>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2240      	movs	r2, #64	; 0x40
 80035b6:	2101      	movs	r1, #1
 80035b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ba:	f7ff fbdb 	bl	8002d74 <HAL_GetTick>
 80035be:	0003      	movs	r3, r0
 80035c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	0219      	lsls	r1, r3, #8
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2319      	movs	r3, #25
 80035ce:	2201      	movs	r2, #1
 80035d0:	f000 f8fc 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cd      	b.n	8003778 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2241      	movs	r2, #65	; 0x41
 80035e0:	2122      	movs	r1, #34	; 0x22
 80035e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2242      	movs	r2, #66	; 0x42
 80035e8:	2110      	movs	r1, #16
 80035ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2208      	movs	r2, #8
 80035fc:	18ba      	adds	r2, r7, r2
 80035fe:	8812      	ldrh	r2, [r2, #0]
 8003600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2bff      	cmp	r3, #255	; 0xff
 8003610:	d911      	bls.n	8003636 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	b2da      	uxtb	r2, r3
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	045c      	lsls	r4, r3, #17
 8003622:	230a      	movs	r3, #10
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	8819      	ldrh	r1, [r3, #0]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	4b55      	ldr	r3, [pc, #340]	; (8003780 <HAL_I2C_Master_Receive+0x208>)
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	0023      	movs	r3, r4
 8003630:	f000 fb00 	bl	8003c34 <I2C_TransferConfig>
 8003634:	e076      	b.n	8003724 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	b2da      	uxtb	r2, r3
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	049c      	lsls	r4, r3, #18
 800364a:	230a      	movs	r3, #10
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	8819      	ldrh	r1, [r3, #0]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <HAL_I2C_Master_Receive+0x208>)
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	0023      	movs	r3, r4
 8003658:	f000 faec 	bl	8003c34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800365c:	e062      	b.n	8003724 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	0018      	movs	r0, r3
 8003666:	f000 f96b 	bl	8003940 <I2C_WaitOnRXNEFlagUntilTimeout>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e082      	b.n	8003778 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03a      	beq.n	8003724 <HAL_I2C_Master_Receive+0x1ac>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d136      	bne.n	8003724 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	f000 f882 	bl	80037cc <I2C_WaitOnFlagUntilTimeout>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e053      	b.n	8003778 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2bff      	cmp	r3, #255	; 0xff
 80036d8:	d911      	bls.n	80036fe <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	045c      	lsls	r4, r3, #17
 80036ea:	230a      	movs	r3, #10
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	0023      	movs	r3, r4
 80036f8:	f000 fa9c 	bl	8003c34 <I2C_TransferConfig>
 80036fc:	e012      	b.n	8003724 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	b2da      	uxtb	r2, r3
 800370e:	2380      	movs	r3, #128	; 0x80
 8003710:	049c      	lsls	r4, r3, #18
 8003712:	230a      	movs	r3, #10
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	8819      	ldrh	r1, [r3, #0]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	0023      	movs	r3, r4
 8003720:	f000 fa88 	bl	8003c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d197      	bne.n	800365e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f8c7 	bl	80038c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800373a:	1e03      	subs	r3, r0, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e01a      	b.n	8003778 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2220      	movs	r2, #32
 8003748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	490b      	ldr	r1, [pc, #44]	; (8003784 <HAL_I2C_Master_Receive+0x20c>)
 8003756:	400a      	ands	r2, r1
 8003758:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2241      	movs	r2, #65	; 0x41
 800375e:	2120      	movs	r1, #32
 8003760:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2242      	movs	r2, #66	; 0x42
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
  }
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b007      	add	sp, #28
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	80002400 	.word	0x80002400
 8003784:	fe00e800 	.word	0xfe00e800

08003788 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d007      	beq.n	80037c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	619a      	str	r2, [r3, #24]
  }
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037dc:	e021      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	d01e      	beq.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7ff fac6 	bl	8002d74 <HAL_GetTick>
 80037e8:	0002      	movs	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d113      	bne.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	2220      	movs	r2, #32
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2241      	movs	r2, #65	; 0x41
 800380a:	2120      	movs	r1, #32
 800380c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2242      	movs	r2, #66	; 0x42
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	4013      	ands	r3, r2
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	425a      	negs	r2, r3
 8003832:	4153      	adcs	r3, r2
 8003834:	b2db      	uxtb	r3, r3
 8003836:	001a      	movs	r2, r3
 8003838:	1dfb      	adds	r3, r7, #7
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d0ce      	beq.n	80037de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bd80      	pop	{r7, pc}

0800384a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003856:	e02b      	b.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f8e8 	bl	8003a34 <I2C_IsErrorOccurred>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d001      	beq.n	800386c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e029      	b.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	d01e      	beq.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7ff fa7f 	bl	8002d74 <HAL_GetTick>
 8003876:	0002      	movs	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d113      	bne.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	2220      	movs	r2, #32
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2241      	movs	r2, #65	; 0x41
 8003898:	2120      	movs	r1, #32
 800389a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2242      	movs	r2, #66	; 0x42
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d1cc      	bne.n	8003858 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d4:	e028      	b.n	8003928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f8a9 	bl	8003a34 <I2C_IsErrorOccurred>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d001      	beq.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e026      	b.n	8003938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7ff fa43 	bl	8002d74 <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d113      	bne.n	8003928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2220      	movs	r2, #32
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2241      	movs	r2, #65	; 0x41
 8003910:	2120      	movs	r1, #32
 8003912:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2242      	movs	r2, #66	; 0x42
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2220      	movs	r2, #32
 8003930:	4013      	ands	r3, r2
 8003932:	2b20      	cmp	r3, #32
 8003934:	d1cf      	bne.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800394c:	e064      	b.n	8003a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	0018      	movs	r0, r3
 8003956:	f000 f86d 	bl	8003a34 <I2C_IsErrorOccurred>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d001      	beq.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e062      	b.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2220      	movs	r2, #32
 800396a:	4013      	ands	r3, r2
 800396c:	2b20      	cmp	r3, #32
 800396e:	d138      	bne.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	2b04      	cmp	r3, #4
 800397c:	d105      	bne.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e04e      	b.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2210      	movs	r2, #16
 8003992:	4013      	ands	r3, r2
 8003994:	2b10      	cmp	r3, #16
 8003996:	d107      	bne.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2204      	movs	r2, #4
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
 80039a6:	e002      	b.n	80039ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2220      	movs	r2, #32
 80039b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	491b      	ldr	r1, [pc, #108]	; (8003a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80039c2:	400a      	ands	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2241      	movs	r2, #65	; 0x41
 80039ca:	2120      	movs	r1, #32
 80039cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2242      	movs	r2, #66	; 0x42
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	2100      	movs	r1, #0
 80039dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7ff f9c7 	bl	8002d74 <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	2220      	movs	r2, #32
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2241      	movs	r2, #65	; 0x41
 8003a08:	2120      	movs	r1, #32
 8003a0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2240      	movs	r2, #64	; 0x40
 8003a10:	2100      	movs	r1, #0
 8003a12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e007      	b.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d193      	bne.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fe00e800 	.word	0xfe00e800

08003a34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b08b      	sub	sp, #44	; 0x2c
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2327      	movs	r3, #39	; 0x27
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <I2C_IsErrorOccurred+0x2e>
 8003a60:	e082      	b.n	8003b68 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2210      	movs	r2, #16
 8003a68:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a6a:	e060      	b.n	8003b2e <I2C_IsErrorOccurred+0xfa>
 8003a6c:	2427      	movs	r4, #39	; 0x27
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	193a      	adds	r2, r7, r4
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	d058      	beq.n	8003b2e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7ff f97a 	bl	8002d74 <HAL_GetTick>
 8003a80:	0002      	movs	r2, r0
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d306      	bcc.n	8003a9a <I2C_IsErrorOccurred+0x66>
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	193a      	adds	r2, r7, r4
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d149      	bne.n	8003b2e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	01db      	lsls	r3, r3, #7
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003aa8:	2013      	movs	r0, #19
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	2142      	movs	r1, #66	; 0x42
 8003ab0:	5c52      	ldrb	r2, [r2, r1]
 8003ab2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	401a      	ands	r2, r3
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d126      	bne.n	8003b16 <I2C_IsErrorOccurred+0xe2>
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d021      	beq.n	8003b16 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003ad2:	183b      	adds	r3, r7, r0
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d01d      	beq.n	8003b16 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	01c9      	lsls	r1, r1, #7
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003aec:	f7ff f942 	bl	8002d74 <HAL_GetTick>
 8003af0:	0003      	movs	r3, r0
 8003af2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af4:	e00f      	b.n	8003b16 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003af6:	f7ff f93d 	bl	8002d74 <HAL_GetTick>
 8003afa:	0002      	movs	r2, r0
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b19      	cmp	r3, #25
 8003b02:	d908      	bls.n	8003b16 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	2220      	movs	r2, #32
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b0c:	2327      	movs	r3, #39	; 0x27
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]

              break;
 8003b14:	e00b      	b.n	8003b2e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2127      	movs	r1, #39	; 0x27
 8003b22:	187a      	adds	r2, r7, r1
 8003b24:	1879      	adds	r1, r7, r1
 8003b26:	7809      	ldrb	r1, [r1, #0]
 8003b28:	7011      	strb	r1, [r2, #0]
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d1e3      	bne.n	8003af6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d004      	beq.n	8003b46 <I2C_IsErrorOccurred+0x112>
 8003b3c:	2327      	movs	r3, #39	; 0x27
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d092      	beq.n	8003a6c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b46:	2327      	movs	r3, #39	; 0x27
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2220      	movs	r2, #32
 8003b56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b60:	2327      	movs	r3, #39	; 0x27
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d00c      	beq.n	8003b94 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	0052      	lsls	r2, r2, #1
 8003b8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b8c:	2327      	movs	r3, #39	; 0x27
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d00c      	beq.n	8003bb8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	00d2      	lsls	r2, r2, #3
 8003bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bb0:	2327      	movs	r3, #39	; 0x27
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00c      	beq.n	8003bdc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bd4:	2327      	movs	r3, #39	; 0x27
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003bdc:	2327      	movs	r3, #39	; 0x27
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01d      	beq.n	8003c22 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7ff fdcd 	bl	8003788 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	490d      	ldr	r1, [pc, #52]	; (8003c30 <I2C_IsErrorOccurred+0x1fc>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2241      	movs	r2, #65	; 0x41
 8003c0e:	2120      	movs	r1, #32
 8003c10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2242      	movs	r2, #66	; 0x42
 8003c16:	2100      	movs	r1, #0
 8003c18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c22:	2327      	movs	r3, #39	; 0x27
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b00b      	add	sp, #44	; 0x2c
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	fe00e800 	.word	0xfe00e800

08003c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	0008      	movs	r0, r1
 8003c3e:	0011      	movs	r1, r2
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	240a      	movs	r4, #10
 8003c44:	193b      	adds	r3, r7, r4
 8003c46:	1c02      	adds	r2, r0, #0
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	2009      	movs	r0, #9
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	1c0a      	adds	r2, r1, #0
 8003c50:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	059b      	lsls	r3, r3, #22
 8003c58:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	0419      	lsls	r1, r3, #16
 8003c60:	23ff      	movs	r3, #255	; 0xff
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c66:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7e:	0d51      	lsrs	r1, r2, #21
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	00d2      	lsls	r2, r2, #3
 8003c84:	400a      	ands	r2, r1
 8003c86:	4907      	ldr	r1, [pc, #28]	; (8003ca4 <I2C_TransferConfig+0x70>)
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	43d2      	mvns	r2, r2
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	0011      	movs	r1, r2
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b007      	add	sp, #28
 8003ca0:	bd90      	pop	{r4, r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	03ff63ff 	.word	0x03ff63ff

08003ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2241      	movs	r2, #65	; 0x41
 8003cb6:	5c9b      	ldrb	r3, [r3, r2]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d138      	bne.n	8003d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2240      	movs	r2, #64	; 0x40
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e032      	b.n	8003d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2240      	movs	r2, #64	; 0x40
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2241      	movs	r2, #65	; 0x41
 8003cd8:	2124      	movs	r1, #36	; 0x24
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	438a      	bics	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4911      	ldr	r1, [pc, #68]	; (8003d3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2241      	movs	r2, #65	; 0x41
 8003d20:	2120      	movs	r1, #32
 8003d22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b002      	add	sp, #8
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	ffffefff 	.word	0xffffefff

08003d40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2241      	movs	r2, #65	; 0x41
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d139      	bne.n	8003dca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2240      	movs	r2, #64	; 0x40
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e033      	b.n	8003dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2241      	movs	r2, #65	; 0x41
 8003d70:	2124      	movs	r1, #36	; 0x24
 8003d72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2241      	movs	r2, #65	; 0x41
 8003dba:	2120      	movs	r1, #32
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e000      	b.n	8003dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
  }
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b004      	add	sp, #16
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fffff0ff 	.word	0xfffff0ff

08003dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d11f      	bne.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	0013      	movs	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4912      	ldr	r1, [pc, #72]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc f996 	bl	800013c <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e16:	e008      	b.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e001      	b.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e009      	b.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	401a      	ands	r2, r3
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d0ed      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b004      	add	sp, #16
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	fffff9ff 	.word	0xfffff9ff
 8003e50:	20000000 	.word	0x20000000
 8003e54:	000f4240 	.word	0x000f4240

08003e58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	23e0      	movs	r3, #224	; 0xe0
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	4013      	ands	r3, r2
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e2fe      	b.n	8004480 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <HAL_RCC_OscConfig+0x1e>
 8003e8c:	e07c      	b.n	8003f88 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8e:	4bc3      	ldr	r3, [pc, #780]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2238      	movs	r2, #56	; 0x38
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e98:	4bc0      	ldr	r3, [pc, #768]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_OscConfig+0x3e>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	4bb9      	ldr	r3, [pc, #740]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d062      	beq.n	8003f86 <HAL_RCC_OscConfig+0x116>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d15e      	bne.n	8003f86 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e2d9      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	025b      	lsls	r3, r3, #9
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x78>
 8003ed8:	4bb0      	ldr	r3, [pc, #704]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4baf      	ldr	r3, [pc, #700]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	0249      	lsls	r1, r1, #9
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e020      	b.n	8003f2a <HAL_RCC_OscConfig+0xba>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	23a0      	movs	r3, #160	; 0xa0
 8003eee:	02db      	lsls	r3, r3, #11
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d10e      	bne.n	8003f12 <HAL_RCC_OscConfig+0xa2>
 8003ef4:	4ba9      	ldr	r3, [pc, #676]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4ba8      	ldr	r3, [pc, #672]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003efa:	2180      	movs	r1, #128	; 0x80
 8003efc:	02c9      	lsls	r1, r1, #11
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	4ba6      	ldr	r3, [pc, #664]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4ba5      	ldr	r3, [pc, #660]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	0249      	lsls	r1, r1, #9
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e00b      	b.n	8003f2a <HAL_RCC_OscConfig+0xba>
 8003f12:	4ba2      	ldr	r3, [pc, #648]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4ba1      	ldr	r3, [pc, #644]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f18:	49a1      	ldr	r1, [pc, #644]	; (80041a0 <HAL_RCC_OscConfig+0x330>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	4b9f      	ldr	r3, [pc, #636]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b9e      	ldr	r3, [pc, #632]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f24:	499f      	ldr	r1, [pc, #636]	; (80041a4 <HAL_RCC_OscConfig+0x334>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d014      	beq.n	8003f5c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fe ff1f 	bl	8002d74 <HAL_GetTick>
 8003f36:	0003      	movs	r3, r0
 8003f38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe ff1a 	bl	8002d74 <HAL_GetTick>
 8003f40:	0002      	movs	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e298      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4b93      	ldr	r3, [pc, #588]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	4013      	ands	r3, r2
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0xcc>
 8003f5a:	e015      	b.n	8003f88 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe ff0a 	bl	8002d74 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f66:	f7fe ff05 	bl	8002d74 <HAL_GetTick>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b64      	cmp	r3, #100	; 0x64
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e283      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f78:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	4013      	ands	r3, r2
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0xf6>
 8003f84:	e000      	b.n	8003f88 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d100      	bne.n	8003f94 <HAL_RCC_OscConfig+0x124>
 8003f92:	e099      	b.n	80040c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f94:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2238      	movs	r2, #56	; 0x38
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f9e:	4b7f      	ldr	r3, [pc, #508]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d102      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x144>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d002      	beq.n	8003fba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d135      	bne.n	8004026 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fba:	4b78      	ldr	r3, [pc, #480]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x162>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e256      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b72      	ldr	r3, [pc, #456]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a74      	ldr	r2, [pc, #464]	; (80041a8 <HAL_RCC_OscConfig+0x338>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	021a      	lsls	r2, r3, #8
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d112      	bne.n	8004014 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fee:	4b6b      	ldr	r3, [pc, #428]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x33c>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	4b67      	ldr	r3, [pc, #412]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004002:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0adb      	lsrs	r3, r3, #11
 8004008:	2207      	movs	r2, #7
 800400a:	4013      	ands	r3, r2
 800400c:	4a68      	ldr	r2, [pc, #416]	; (80041b0 <HAL_RCC_OscConfig+0x340>)
 800400e:	40da      	lsrs	r2, r3
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x344>)
 8004012:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <HAL_RCC_OscConfig+0x348>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0018      	movs	r0, r3
 800401a:	f7fe fe4f 	bl	8002cbc <HAL_InitTick>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d051      	beq.n	80040c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e22c      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d030      	beq.n	8004090 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800402e:	4b5b      	ldr	r3, [pc, #364]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5e      	ldr	r2, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x33c>)
 8004034:	4013      	ands	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	4b57      	ldr	r3, [pc, #348]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004042:	4b56      	ldr	r3, [pc, #344]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b55      	ldr	r3, [pc, #340]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	0049      	lsls	r1, r1, #1
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fe90 	bl	8002d74 <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405a:	f7fe fe8b 	bl	8002d74 <HAL_GetTick>
 800405e:	0002      	movs	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e209      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406c:	4b4b      	ldr	r3, [pc, #300]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4013      	ands	r3, r2
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b48      	ldr	r3, [pc, #288]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x338>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	e01b      	b.n	80040c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004090:	4b42      	ldr	r3, [pc, #264]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b41      	ldr	r3, [pc, #260]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004096:	4949      	ldr	r1, [pc, #292]	; (80041bc <HAL_RCC_OscConfig+0x34c>)
 8004098:	400a      	ands	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fe6a 	bl	8002d74 <HAL_GetTick>
 80040a0:	0003      	movs	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a6:	f7fe fe65 	bl	8002d74 <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1e3      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4013      	ands	r3, r2
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x236>
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2208      	movs	r2, #8
 80040ce:	4013      	ands	r3, r2
 80040d0:	d047      	beq.n	8004162 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040d2:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2238      	movs	r2, #56	; 0x38
 80040d8:	4013      	ands	r3, r2
 80040da:	2b18      	cmp	r3, #24
 80040dc:	d10a      	bne.n	80040f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	2202      	movs	r2, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	d03c      	beq.n	8004162 <HAL_RCC_OscConfig+0x2f2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d138      	bne.n	8004162 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e1c5      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 80040fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004100:	4b26      	ldr	r3, [pc, #152]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004102:	2101      	movs	r1, #1
 8004104:	430a      	orrs	r2, r1
 8004106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe fe34 	bl	8002d74 <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7fe fe2f 	bl	8002d74 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1ad      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004128:	2202      	movs	r2, #2
 800412a:	4013      	ands	r3, r2
 800412c:	d0f1      	beq.n	8004112 <HAL_RCC_OscConfig+0x2a2>
 800412e:	e018      	b.n	8004162 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004136:	2101      	movs	r1, #1
 8004138:	438a      	bics	r2, r1
 800413a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fe1a 	bl	8002d74 <HAL_GetTick>
 8004140:	0003      	movs	r3, r0
 8004142:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004146:	f7fe fe15 	bl	8002d74 <HAL_GetTick>
 800414a:	0002      	movs	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e193      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	2202      	movs	r2, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d1f1      	bne.n	8004146 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2204      	movs	r2, #4
 8004168:	4013      	ands	r3, r2
 800416a:	d100      	bne.n	800416e <HAL_RCC_OscConfig+0x2fe>
 800416c:	e0c6      	b.n	80042fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	231f      	movs	r3, #31
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2238      	movs	r2, #56	; 0x38
 800417c:	4013      	ands	r3, r2
 800417e:	2b20      	cmp	r3, #32
 8004180:	d11e      	bne.n	80041c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_OscConfig+0x32c>)
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d100      	bne.n	800418e <HAL_RCC_OscConfig+0x31e>
 800418c:	e0b6      	b.n	80042fc <HAL_RCC_OscConfig+0x48c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d000      	beq.n	8004198 <HAL_RCC_OscConfig+0x328>
 8004196:	e0b1      	b.n	80042fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e171      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
 800419c:	40021000 	.word	0x40021000
 80041a0:	fffeffff 	.word	0xfffeffff
 80041a4:	fffbffff 	.word	0xfffbffff
 80041a8:	ffff80ff 	.word	0xffff80ff
 80041ac:	ffffc7ff 	.word	0xffffc7ff
 80041b0:	00f42400 	.word	0x00f42400
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000004 	.word	0x20000004
 80041bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c0:	4bb1      	ldr	r3, [pc, #708]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80041c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	055b      	lsls	r3, r3, #21
 80041c8:	4013      	ands	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x360>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x362>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d011      	beq.n	80041fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4bac      	ldr	r3, [pc, #688]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80041d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041da:	4bab      	ldr	r3, [pc, #684]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	0549      	lsls	r1, r1, #21
 80041e0:	430a      	orrs	r2, r1
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80041e4:	4ba8      	ldr	r3, [pc, #672]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80041e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	055b      	lsls	r3, r3, #21
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041f2:	231f      	movs	r3, #31
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fa:	4ba4      	ldr	r3, [pc, #656]	; (800448c <HAL_RCC_OscConfig+0x61c>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4013      	ands	r3, r2
 8004204:	d11a      	bne.n	800423c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004206:	4ba1      	ldr	r3, [pc, #644]	; (800448c <HAL_RCC_OscConfig+0x61c>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4ba0      	ldr	r3, [pc, #640]	; (800448c <HAL_RCC_OscConfig+0x61c>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	0049      	lsls	r1, r1, #1
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004214:	f7fe fdae 	bl	8002d74 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fe fda9 	bl	8002d74 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e127      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004230:	4b96      	ldr	r3, [pc, #600]	; (800448c <HAL_RCC_OscConfig+0x61c>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x3e2>
 8004244:	4b90      	ldr	r3, [pc, #576]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004248:	4b8f      	ldr	r3, [pc, #572]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800424a:	2101      	movs	r1, #1
 800424c:	430a      	orrs	r2, r1
 800424e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004250:	e01c      	b.n	800428c <HAL_RCC_OscConfig+0x41c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b05      	cmp	r3, #5
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x404>
 800425a:	4b8b      	ldr	r3, [pc, #556]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800425c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800425e:	4b8a      	ldr	r3, [pc, #552]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004260:	2104      	movs	r1, #4
 8004262:	430a      	orrs	r2, r1
 8004264:	65da      	str	r2, [r3, #92]	; 0x5c
 8004266:	4b88      	ldr	r3, [pc, #544]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800426a:	4b87      	ldr	r3, [pc, #540]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800426c:	2101      	movs	r1, #1
 800426e:	430a      	orrs	r2, r1
 8004270:	65da      	str	r2, [r3, #92]	; 0x5c
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0x41c>
 8004274:	4b84      	ldr	r3, [pc, #528]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004278:	4b83      	ldr	r3, [pc, #524]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800427a:	2101      	movs	r1, #1
 800427c:	438a      	bics	r2, r1
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004280:	4b81      	ldr	r3, [pc, #516]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004284:	4b80      	ldr	r3, [pc, #512]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004286:	2104      	movs	r1, #4
 8004288:	438a      	bics	r2, r1
 800428a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d014      	beq.n	80042be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe fd6e 	bl	8002d74 <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429c:	e009      	b.n	80042b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fe fd69 	bl	8002d74 <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	4a79      	ldr	r2, [pc, #484]	; (8004490 <HAL_RCC_OscConfig+0x620>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e0e6      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	4b75      	ldr	r3, [pc, #468]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	2202      	movs	r2, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x42e>
 80042bc:	e013      	b.n	80042e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fe fd59 	bl	8002d74 <HAL_GetTick>
 80042c2:	0003      	movs	r3, r0
 80042c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c6:	e009      	b.n	80042dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fe fd54 	bl	8002d74 <HAL_GetTick>
 80042cc:	0002      	movs	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	4a6f      	ldr	r2, [pc, #444]	; (8004490 <HAL_RCC_OscConfig+0x620>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0d1      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2202      	movs	r2, #2
 80042e2:	4013      	ands	r3, r2
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042e6:	231f      	movs	r3, #31
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80042f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f4:	4b64      	ldr	r3, [pc, #400]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80042f6:	4967      	ldr	r1, [pc, #412]	; (8004494 <HAL_RCC_OscConfig+0x624>)
 80042f8:	400a      	ands	r2, r1
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d100      	bne.n	8004306 <HAL_RCC_OscConfig+0x496>
 8004304:	e0bb      	b.n	800447e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004306:	4b60      	ldr	r3, [pc, #384]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2238      	movs	r2, #56	; 0x38
 800430c:	4013      	ands	r3, r2
 800430e:	2b10      	cmp	r3, #16
 8004310:	d100      	bne.n	8004314 <HAL_RCC_OscConfig+0x4a4>
 8004312:	e07b      	b.n	800440c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d156      	bne.n	80043ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	4b5a      	ldr	r3, [pc, #360]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004322:	495d      	ldr	r1, [pc, #372]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe fd24 	bl	8002d74 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fe fd1f 	bl	8002d74 <HAL_GetTick>
 8004336:	0002      	movs	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e09d      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004344:	4b50      	ldr	r3, [pc, #320]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	049b      	lsls	r3, r3, #18
 800434c:	4013      	ands	r3, r2
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004350:	4b4d      	ldr	r3, [pc, #308]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a51      	ldr	r2, [pc, #324]	; (800449c <HAL_RCC_OscConfig+0x62c>)
 8004356:	4013      	ands	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1a      	ldr	r2, [r3, #32]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	431a      	orrs	r2, r3
 800437e:	4b42      	ldr	r3, [pc, #264]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	0449      	lsls	r1, r1, #17
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004392:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	4b3c      	ldr	r3, [pc, #240]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	0549      	lsls	r1, r1, #21
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe fce8 	bl	8002d74 <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fe fce3 	bl	8002d74 <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e061      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043bc:	4b32      	ldr	r3, [pc, #200]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	049b      	lsls	r3, r3, #18
 80043c4:	4013      	ands	r3, r2
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x53a>
 80043c8:	e059      	b.n	800447e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80043d0:	4931      	ldr	r1, [pc, #196]	; (8004498 <HAL_RCC_OscConfig+0x628>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe fccd 	bl	8002d74 <HAL_GetTick>
 80043da:	0003      	movs	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fe fcc8 	bl	8002d74 <HAL_GetTick>
 80043e4:	0002      	movs	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e046      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	049b      	lsls	r3, r3, #18
 80043fa:	4013      	ands	r3, r2
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 8004404:	4926      	ldr	r1, [pc, #152]	; (80044a0 <HAL_RCC_OscConfig+0x630>)
 8004406:	400a      	ands	r2, r1
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	e038      	b.n	800447e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e033      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x618>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2203      	movs	r2, #3
 8004422:	401a      	ands	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	429a      	cmp	r2, r3
 800442a:	d126      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2270      	movs	r2, #112	; 0x70
 8004430:	401a      	ands	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d11f      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	23fe      	movs	r3, #254	; 0xfe
 800443e:	01db      	lsls	r3, r3, #7
 8004440:	401a      	ands	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d116      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	23f8      	movs	r3, #248	; 0xf8
 8004450:	039b      	lsls	r3, r3, #14
 8004452:	401a      	ands	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d10e      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	23e0      	movs	r3, #224	; 0xe0
 8004460:	051b      	lsls	r3, r3, #20
 8004462:	401a      	ands	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	0f5b      	lsrs	r3, r3, #29
 8004470:	075a      	lsls	r2, r3, #29
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b008      	add	sp, #32
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	40007000 	.word	0x40007000
 8004490:	00001388 	.word	0x00001388
 8004494:	efffffff 	.word	0xefffffff
 8004498:	feffffff 	.word	0xfeffffff
 800449c:	11c1808c 	.word	0x11c1808c
 80044a0:	eefefffc 	.word	0xeefefffc

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0e9      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b76      	ldr	r3, [pc, #472]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2207      	movs	r2, #7
 80044be:	4013      	ands	r3, r2
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d91e      	bls.n	8004504 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b73      	ldr	r3, [pc, #460]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2207      	movs	r2, #7
 80044cc:	4393      	bics	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	4b70      	ldr	r3, [pc, #448]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fc4c 	bl	8002d74 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044e0:	e009      	b.n	80044f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e2:	f7fe fc47 	bl	8002d74 <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	4a6a      	ldr	r2, [pc, #424]	; (8004698 <HAL_RCC_ClockConfig+0x1f4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0ca      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044f6:	4b67      	ldr	r3, [pc, #412]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2207      	movs	r2, #7
 80044fc:	4013      	ands	r3, r2
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d1ee      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2202      	movs	r2, #2
 800450a:	4013      	ands	r3, r2
 800450c:	d015      	beq.n	800453a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2204      	movs	r2, #4
 8004514:	4013      	ands	r3, r2
 8004516:	d006      	beq.n	8004526 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004518:	4b60      	ldr	r3, [pc, #384]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	4b5f      	ldr	r3, [pc, #380]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 800451e:	21e0      	movs	r1, #224	; 0xe0
 8004520:	01c9      	lsls	r1, r1, #7
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <HAL_RCC_ClockConfig+0x1fc>)
 800452c:	4013      	ands	r3, r2
 800452e:	0019      	movs	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	4b59      	ldr	r3, [pc, #356]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2201      	movs	r2, #1
 8004540:	4013      	ands	r3, r2
 8004542:	d057      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d107      	bne.n	800455c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	4013      	ands	r3, r2
 8004556:	d12b      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e097      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d107      	bne.n	8004574 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004564:	4b4d      	ldr	r3, [pc, #308]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	049b      	lsls	r3, r3, #18
 800456c:	4013      	ands	r3, r2
 800456e:	d11f      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e08b      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d107      	bne.n	800458c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457c:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4013      	ands	r3, r2
 8004586:	d113      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e07f      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004594:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004598:	2202      	movs	r2, #2
 800459a:	4013      	ands	r3, r2
 800459c:	d108      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e074      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	2202      	movs	r2, #2
 80045a8:	4013      	ands	r3, r2
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e06d      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045b0:	4b3a      	ldr	r3, [pc, #232]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2207      	movs	r2, #7
 80045b6:	4393      	bics	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fe fbd6 	bl	8002d74 <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045cc:	e009      	b.n	80045e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ce:	f7fe fbd1 	bl	8002d74 <HAL_GetTick>
 80045d2:	0002      	movs	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <HAL_RCC_ClockConfig+0x1f4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e054      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2238      	movs	r2, #56	; 0x38
 80045e8:	401a      	ands	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1ec      	bne.n	80045ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2207      	movs	r2, #7
 80045fa:	4013      	ands	r3, r2
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d21e      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2207      	movs	r2, #7
 8004608:	4393      	bics	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	4b21      	ldr	r3, [pc, #132]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004614:	f7fe fbae 	bl	8002d74 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800461c:	e009      	b.n	8004632 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461e:	f7fe fba9 	bl	8002d74 <HAL_GetTick>
 8004622:	0002      	movs	r2, r0
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <HAL_RCC_ClockConfig+0x1f4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e02c      	b.n	800468c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2207      	movs	r2, #7
 8004638:	4013      	ands	r3, r2
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d1ee      	bne.n	800461e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2204      	movs	r2, #4
 8004646:	4013      	ands	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_RCC_ClockConfig+0x200>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800465e:	f000 f829 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004662:	0001      	movs	r1, r0
 8004664:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	220f      	movs	r2, #15
 800466c:	401a      	ands	r2, r3
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <HAL_RCC_ClockConfig+0x204>)
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	58d3      	ldr	r3, [r2, r3]
 8004674:	221f      	movs	r2, #31
 8004676:	4013      	ands	r3, r2
 8004678:	000a      	movs	r2, r1
 800467a:	40da      	lsrs	r2, r3
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x208>)
 800467e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_ClockConfig+0x20c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0018      	movs	r0, r3
 8004686:	f7fe fb19 	bl	8002cbc <HAL_InitTick>
 800468a:	0003      	movs	r3, r0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40022000 	.word	0x40022000
 8004698:	00001388 	.word	0x00001388
 800469c:	40021000 	.word	0x40021000
 80046a0:	fffff0ff 	.word	0xfffff0ff
 80046a4:	ffff8fff 	.word	0xffff8fff
 80046a8:	0800a0e4 	.word	0x0800a0e4
 80046ac:	20000000 	.word	0x20000000
 80046b0:	20000004 	.word	0x20000004

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ba:	4b3c      	ldr	r3, [pc, #240]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2238      	movs	r2, #56	; 0x38
 80046c0:	4013      	ands	r3, r2
 80046c2:	d10f      	bne.n	80046e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046c4:	4b39      	ldr	r3, [pc, #228]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0adb      	lsrs	r3, r3, #11
 80046ca:	2207      	movs	r2, #7
 80046cc:	4013      	ands	r3, r2
 80046ce:	2201      	movs	r2, #1
 80046d0:	409a      	lsls	r2, r3
 80046d2:	0013      	movs	r3, r2
 80046d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	4835      	ldr	r0, [pc, #212]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046da:	f7fb fd2f 	bl	800013c <__udivsi3>
 80046de:	0003      	movs	r3, r0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	e05d      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2238      	movs	r2, #56	; 0x38
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d102      	bne.n	80046f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046f0:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f6:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2238      	movs	r2, #56	; 0x38
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d138      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004702:	4b2a      	ldr	r3, [pc, #168]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2203      	movs	r2, #3
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	2207      	movs	r2, #7
 8004714:	4013      	ands	r3, r2
 8004716:	3301      	adds	r3, #1
 8004718:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d10d      	bne.n	800473c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4824      	ldr	r0, [pc, #144]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004724:	f7fb fd0a 	bl	800013c <__udivsi3>
 8004728:	0003      	movs	r3, r0
 800472a:	0019      	movs	r1, r3
 800472c:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	227f      	movs	r2, #127	; 0x7f
 8004734:	4013      	ands	r3, r2
 8004736:	434b      	muls	r3, r1
 8004738:	617b      	str	r3, [r7, #20]
        break;
 800473a:	e00d      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	481c      	ldr	r0, [pc, #112]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004740:	f7fb fcfc 	bl	800013c <__udivsi3>
 8004744:	0003      	movs	r3, r0
 8004746:	0019      	movs	r1, r3
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	227f      	movs	r2, #127	; 0x7f
 8004750:	4013      	ands	r3, r2
 8004752:	434b      	muls	r3, r1
 8004754:	617b      	str	r3, [r7, #20]
        break;
 8004756:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0f5b      	lsrs	r3, r3, #29
 800475e:	2207      	movs	r2, #7
 8004760:	4013      	ands	r3, r2
 8004762:	3301      	adds	r3, #1
 8004764:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	6978      	ldr	r0, [r7, #20]
 800476a:	f7fb fce7 	bl	800013c <__udivsi3>
 800476e:	0003      	movs	r3, r0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e015      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2238      	movs	r2, #56	; 0x38
 800477a:	4013      	ands	r3, r2
 800477c:	2b20      	cmp	r3, #32
 800477e:	d103      	bne.n	8004788 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2238      	movs	r2, #56	; 0x38
 800478e:	4013      	ands	r3, r2
 8004790:	2b18      	cmp	r3, #24
 8004792:	d103      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004794:	23fa      	movs	r3, #250	; 0xfa
 8004796:	01db      	lsls	r3, r3, #7
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e001      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047a0:	693b      	ldr	r3, [r7, #16]
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b006      	add	sp, #24
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	40021000 	.word	0x40021000
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	007a1200 	.word	0x007a1200

080047b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b02      	ldr	r3, [pc, #8]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20000000 	.word	0x20000000

080047cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047d0:	f7ff fff2 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d4:	0004      	movs	r4, r0
 80047d6:	f7ff fb3f 	bl	8003e58 <LL_RCC_GetAPB1Prescaler>
 80047da:	0003      	movs	r3, r0
 80047dc:	0b1a      	lsrs	r2, r3, #12
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047e0:	0092      	lsls	r2, r2, #2
 80047e2:	58d3      	ldr	r3, [r2, r3]
 80047e4:	221f      	movs	r2, #31
 80047e6:	4013      	ands	r3, r2
 80047e8:	40dc      	lsrs	r4, r3
 80047ea:	0023      	movs	r3, r4
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bdb0      	pop	{r4, r5, r7, pc}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	0800a124 	.word	0x0800a124

080047f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004800:	2313      	movs	r3, #19
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004808:	2312      	movs	r3, #18
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	4013      	ands	r3, r2
 800481a:	d100      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800481c:	e0a3      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2011      	movs	r0, #17
 8004820:	183b      	adds	r3, r7, r0
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004826:	4ba5      	ldr	r3, [pc, #660]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	055b      	lsls	r3, r3, #21
 800482e:	4013      	ands	r3, r2
 8004830:	d110      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004832:	4ba2      	ldr	r3, [pc, #648]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004836:	4ba1      	ldr	r3, [pc, #644]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	0549      	lsls	r1, r1, #21
 800483c:	430a      	orrs	r2, r1
 800483e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004840:	4b9e      	ldr	r3, [pc, #632]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	055b      	lsls	r3, r3, #21
 8004848:	4013      	ands	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484e:	183b      	adds	r3, r7, r0
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004854:	4b9a      	ldr	r3, [pc, #616]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b99      	ldr	r3, [pc, #612]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	0049      	lsls	r1, r1, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004862:	f7fe fa87 	bl	8002d74 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486a:	e00b      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fe fa82 	bl	8002d74 <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d904      	bls.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800487a:	2313      	movs	r3, #19
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	2203      	movs	r2, #3
 8004880:	701a      	strb	r2, [r3, #0]
        break;
 8004882:	e005      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004884:	4b8e      	ldr	r3, [pc, #568]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4013      	ands	r3, r2
 800488e:	d0ed      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004890:	2313      	movs	r3, #19
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d154      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800489a:	4b88      	ldr	r3, [pc, #544]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800489c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800489e:	23c0      	movs	r3, #192	; 0xc0
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d019      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d014      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048b6:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	4a82      	ldr	r2, [pc, #520]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80048bc:	4013      	ands	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048c0:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c4:	4b7d      	ldr	r3, [pc, #500]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	0249      	lsls	r1, r1, #9
 80048ca:	430a      	orrs	r2, r1
 80048cc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ce:	4b7b      	ldr	r3, [pc, #492]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048d2:	4b7a      	ldr	r3, [pc, #488]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d4:	497c      	ldr	r1, [pc, #496]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048da:	4b78      	ldr	r3, [pc, #480]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2201      	movs	r2, #1
 80048e4:	4013      	ands	r3, r2
 80048e6:	d016      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fe fa44 	bl	8002d74 <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f0:	e00c      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7fe fa3f 	bl	8002d74 <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	4a73      	ldr	r2, [pc, #460]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d904      	bls.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004902:	2313      	movs	r3, #19
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2203      	movs	r2, #3
 8004908:	701a      	strb	r2, [r3, #0]
            break;
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490c:	4b6b      	ldr	r3, [pc, #428]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	2202      	movs	r2, #2
 8004912:	4013      	ands	r3, r2
 8004914:	d0ed      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004916:	2313      	movs	r3, #19
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004920:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	4a67      	ldr	r2, [pc, #412]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004926:	4013      	ands	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800492e:	4b63      	ldr	r3, [pc, #396]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004930:	430a      	orrs	r2, r1
 8004932:	65da      	str	r2, [r3, #92]	; 0x5c
 8004934:	e00c      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004936:	2312      	movs	r3, #18
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2213      	movs	r2, #19
 800493c:	18ba      	adds	r2, r7, r2
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e005      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	2312      	movs	r3, #18
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2213      	movs	r2, #19
 800494a:	18ba      	adds	r2, r7, r2
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004950:	2311      	movs	r3, #17
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495a:	4b58      	ldr	r3, [pc, #352]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800495c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800495e:	4b57      	ldr	r3, [pc, #348]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004960:	495b      	ldr	r1, [pc, #364]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004962:	400a      	ands	r2, r1
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	4013      	ands	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004970:	4b52      	ldr	r3, [pc, #328]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	2203      	movs	r2, #3
 8004976:	4393      	bics	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004980:	430a      	orrs	r2, r1
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2210      	movs	r2, #16
 800498a:	4013      	ands	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800498e:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	4a50      	ldr	r2, [pc, #320]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004994:	4013      	ands	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800499e:	430a      	orrs	r2, r1
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4013      	ands	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ae:	4b43      	ldr	r3, [pc, #268]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	4a49      	ldr	r2, [pc, #292]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4013      	ands	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049ce:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	4a42      	ldr	r2, [pc, #264]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049de:	430a      	orrs	r2, r1
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	4013      	ands	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ec:	4b33      	ldr	r3, [pc, #204]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	4a3b      	ldr	r2, [pc, #236]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	4b30      	ldr	r3, [pc, #192]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049fc:	430a      	orrs	r2, r1
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d015      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	0899      	lsrs	r1, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	05db      	lsls	r3, r3, #23
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d106      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a30:	2180      	movs	r1, #128	; 0x80
 8004a32:	0249      	lsls	r1, r1, #9
 8004a34:	430a      	orrs	r2, r1
 8004a36:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	039b      	lsls	r3, r3, #14
 8004a40:	4013      	ands	r3, r2
 8004a42:	d016      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a54:	430a      	orrs	r2, r1
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	03db      	lsls	r3, r3, #15
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d106      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	0449      	lsls	r1, r1, #17
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d016      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	01db      	lsls	r3, r3, #7
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d106      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004aa4:	2180      	movs	r1, #128	; 0x80
 8004aa6:	0249      	lsls	r1, r1, #9
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004aac:	2312      	movs	r3, #18
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	781b      	ldrb	r3, [r3, #0]
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b006      	add	sp, #24
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	fffffcff 	.word	0xfffffcff
 8004ac8:	fffeffff 	.word	0xfffeffff
 8004acc:	00001388 	.word	0x00001388
 8004ad0:	efffffff 	.word	0xefffffff
 8004ad4:	fffff3ff 	.word	0xfffff3ff
 8004ad8:	fff3ffff 	.word	0xfff3ffff
 8004adc:	ffcfffff 	.word	0xffcfffff
 8004ae0:	ffffcfff 	.word	0xffffcfff
 8004ae4:	ffbfffff 	.word	0xffbfffff
 8004ae8:	ffff3fff 	.word	0xffff3fff

08004aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e046      	b.n	8004b8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2288      	movs	r2, #136	; 0x88
 8004b02:	589b      	ldr	r3, [r3, r2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2284      	movs	r2, #132	; 0x84
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7fd ff64 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2288      	movs	r2, #136	; 0x88
 8004b1c:	2124      	movs	r1, #36	; 0x24
 8004b1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	438a      	bics	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 f8cc 	bl	8004cd0 <UART_SetConfig>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e024      	b.n	8004b8c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 fb37 	bl	80051c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	490d      	ldr	r1, [pc, #52]	; (8004b94 <HAL_UART_Init+0xa8>)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	212a      	movs	r1, #42	; 0x2a
 8004b6e:	438a      	bics	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f000 fbcf 	bl	8005328 <UART_CheckIdleState>
 8004b8a:	0003      	movs	r3, r0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	ffffb7ff 	.word	0xffffb7ff

08004b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	1dbb      	adds	r3, r7, #6
 8004ba6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2288      	movs	r2, #136	; 0x88
 8004bac:	589b      	ldr	r3, [r3, r2]
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d000      	beq.n	8004bb4 <HAL_UART_Transmit+0x1c>
 8004bb2:	e088      	b.n	8004cc6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_UART_Transmit+0x2a>
 8004bba:	1dbb      	adds	r3, r7, #6
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e080      	b.n	8004cc8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	015b      	lsls	r3, r3, #5
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d109      	bne.n	8004be6 <HAL_UART_Transmit+0x4e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4013      	ands	r3, r2
 8004be0:	d001      	beq.n	8004be6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e070      	b.n	8004cc8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2290      	movs	r2, #144	; 0x90
 8004bea:	2100      	movs	r1, #0
 8004bec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2288      	movs	r2, #136	; 0x88
 8004bf2:	2121      	movs	r1, #33	; 0x21
 8004bf4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf6:	f7fe f8bd 	bl	8002d74 <HAL_GetTick>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1dba      	adds	r2, r7, #6
 8004c02:	2154      	movs	r1, #84	; 0x54
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	1dba      	adds	r2, r7, #6
 8004c0c:	2156      	movs	r1, #86	; 0x56
 8004c0e:	8812      	ldrh	r2, [r2, #0]
 8004c10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	015b      	lsls	r3, r3, #5
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d108      	bne.n	8004c30 <HAL_UART_Transmit+0x98>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e003      	b.n	8004c38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c38:	e02c      	b.n	8004c94 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	0013      	movs	r3, r2
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	f000 fbbc 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e039      	b.n	8004cc8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	001a      	movs	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	05d2      	lsls	r2, r2, #23
 8004c66:	0dd2      	lsrs	r2, r2, #23
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e007      	b.n	8004c82 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	781a      	ldrb	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2256      	movs	r2, #86	; 0x56
 8004c86:	5a9b      	ldrh	r3, [r3, r2]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2256      	movs	r2, #86	; 0x56
 8004c92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2256      	movs	r2, #86	; 0x56
 8004c98:	5a9b      	ldrh	r3, [r3, r2]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1cc      	bne.n	8004c3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	0013      	movs	r3, r2
 8004caa:	2200      	movs	r2, #0
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	f000 fb89 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8004cb2:	1e03      	subs	r3, r0, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e006      	b.n	8004cc8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2288      	movs	r2, #136	; 0x88
 8004cbe:	2120      	movs	r1, #32
 8004cc0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b008      	add	sp, #32
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	b5b0      	push	{r4, r5, r7, lr}
 8004cd2:	b090      	sub	sp, #64	; 0x40
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd8:	231a      	movs	r3, #26
 8004cda:	2220      	movs	r2, #32
 8004cdc:	189b      	adds	r3, r3, r2
 8004cde:	19db      	adds	r3, r3, r7
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4ac4      	ldr	r2, [pc, #784]	; (8005014 <UART_SetConfig+0x344>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4abf      	ldr	r2, [pc, #764]	; (8005018 <UART_SetConfig+0x348>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	68d9      	ldr	r1, [r3, #12]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	0003      	movs	r3, r0
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4ab9      	ldr	r2, [pc, #740]	; (800501c <UART_SetConfig+0x34c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d42:	4313      	orrs	r3, r2
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4ab4      	ldr	r2, [pc, #720]	; (8005020 <UART_SetConfig+0x350>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	220f      	movs	r2, #15
 8004d64:	4393      	bics	r3, r2
 8004d66:	0018      	movs	r0, r3
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	0003      	movs	r3, r0
 8004d72:	430b      	orrs	r3, r1
 8004d74:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4aaa      	ldr	r2, [pc, #680]	; (8005024 <UART_SetConfig+0x354>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d131      	bne.n	8004de4 <UART_SetConfig+0x114>
 8004d80:	4ba9      	ldr	r3, [pc, #676]	; (8005028 <UART_SetConfig+0x358>)
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	2203      	movs	r2, #3
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d01d      	beq.n	8004dc8 <UART_SetConfig+0xf8>
 8004d8c:	d823      	bhi.n	8004dd6 <UART_SetConfig+0x106>
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d00c      	beq.n	8004dac <UART_SetConfig+0xdc>
 8004d92:	d820      	bhi.n	8004dd6 <UART_SetConfig+0x106>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <UART_SetConfig+0xce>
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d00e      	beq.n	8004dba <UART_SetConfig+0xea>
 8004d9c:	e01b      	b.n	8004dd6 <UART_SetConfig+0x106>
 8004d9e:	231b      	movs	r3, #27
 8004da0:	2220      	movs	r2, #32
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	19db      	adds	r3, r3, r7
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e071      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004dac:	231b      	movs	r3, #27
 8004dae:	2220      	movs	r2, #32
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	19db      	adds	r3, r3, r7
 8004db4:	2202      	movs	r2, #2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e06a      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004dba:	231b      	movs	r3, #27
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	19db      	adds	r3, r3, r7
 8004dc2:	2204      	movs	r2, #4
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e063      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004dc8:	231b      	movs	r3, #27
 8004dca:	2220      	movs	r2, #32
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	19db      	adds	r3, r3, r7
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	e05c      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004dd6:	231b      	movs	r3, #27
 8004dd8:	2220      	movs	r2, #32
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	19db      	adds	r3, r3, r7
 8004dde:	2210      	movs	r2, #16
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e055      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a90      	ldr	r2, [pc, #576]	; (800502c <UART_SetConfig+0x35c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d106      	bne.n	8004dfc <UART_SetConfig+0x12c>
 8004dee:	231b      	movs	r3, #27
 8004df0:	2220      	movs	r2, #32
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	19db      	adds	r3, r3, r7
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e049      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a86      	ldr	r2, [pc, #536]	; (800501c <UART_SetConfig+0x34c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d13e      	bne.n	8004e84 <UART_SetConfig+0x1b4>
 8004e06:	4b88      	ldr	r3, [pc, #544]	; (8005028 <UART_SetConfig+0x358>)
 8004e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0a:	23c0      	movs	r3, #192	; 0xc0
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	4013      	ands	r3, r2
 8004e10:	22c0      	movs	r2, #192	; 0xc0
 8004e12:	0112      	lsls	r2, r2, #4
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d027      	beq.n	8004e68 <UART_SetConfig+0x198>
 8004e18:	22c0      	movs	r2, #192	; 0xc0
 8004e1a:	0112      	lsls	r2, r2, #4
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d82a      	bhi.n	8004e76 <UART_SetConfig+0x1a6>
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d011      	beq.n	8004e4c <UART_SetConfig+0x17c>
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d822      	bhi.n	8004e76 <UART_SetConfig+0x1a6>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <UART_SetConfig+0x16e>
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	00d2      	lsls	r2, r2, #3
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <UART_SetConfig+0x18a>
 8004e3c:	e01b      	b.n	8004e76 <UART_SetConfig+0x1a6>
 8004e3e:	231b      	movs	r3, #27
 8004e40:	2220      	movs	r2, #32
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	19db      	adds	r3, r3, r7
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e021      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004e4c:	231b      	movs	r3, #27
 8004e4e:	2220      	movs	r2, #32
 8004e50:	189b      	adds	r3, r3, r2
 8004e52:	19db      	adds	r3, r3, r7
 8004e54:	2202      	movs	r2, #2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e01a      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004e5a:	231b      	movs	r3, #27
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	19db      	adds	r3, r3, r7
 8004e62:	2204      	movs	r2, #4
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e013      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004e68:	231b      	movs	r3, #27
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	19db      	adds	r3, r3, r7
 8004e70:	2208      	movs	r2, #8
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	e00c      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004e76:	231b      	movs	r3, #27
 8004e78:	2220      	movs	r2, #32
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	19db      	adds	r3, r3, r7
 8004e7e:	2210      	movs	r2, #16
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e005      	b.n	8004e90 <UART_SetConfig+0x1c0>
 8004e84:	231b      	movs	r3, #27
 8004e86:	2220      	movs	r2, #32
 8004e88:	189b      	adds	r3, r3, r2
 8004e8a:	19db      	adds	r3, r3, r7
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a61      	ldr	r2, [pc, #388]	; (800501c <UART_SetConfig+0x34c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d000      	beq.n	8004e9c <UART_SetConfig+0x1cc>
 8004e9a:	e092      	b.n	8004fc2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e9c:	231b      	movs	r3, #27
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	189b      	adds	r3, r3, r2
 8004ea2:	19db      	adds	r3, r3, r7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d015      	beq.n	8004ed6 <UART_SetConfig+0x206>
 8004eaa:	dc18      	bgt.n	8004ede <UART_SetConfig+0x20e>
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d00d      	beq.n	8004ecc <UART_SetConfig+0x1fc>
 8004eb0:	dc15      	bgt.n	8004ede <UART_SetConfig+0x20e>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <UART_SetConfig+0x1ec>
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d005      	beq.n	8004ec6 <UART_SetConfig+0x1f6>
 8004eba:	e010      	b.n	8004ede <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7ff fc86 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ec4:	e014      	b.n	8004ef0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec6:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <UART_SetConfig+0x360>)
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eca:	e011      	b.n	8004ef0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ecc:	f7ff fbf2 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ed4:	e00c      	b.n	8004ef0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004edc:	e008      	b.n	8004ef0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004ee2:	231a      	movs	r3, #26
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	19db      	adds	r3, r3, r7
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
        break;
 8004eee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d100      	bne.n	8004ef8 <UART_SetConfig+0x228>
 8004ef6:	e147      	b.n	8005188 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efc:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <UART_SetConfig+0x364>)
 8004efe:	0052      	lsls	r2, r2, #1
 8004f00:	5ad3      	ldrh	r3, [r2, r3]
 8004f02:	0019      	movs	r1, r3
 8004f04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f06:	f7fb f919 	bl	800013c <__udivsi3>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	0013      	movs	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d305      	bcc.n	8004f2a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d906      	bls.n	8004f38 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004f2a:	231a      	movs	r3, #26
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	19db      	adds	r3, r3, r7
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e127      	b.n	8005188 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <UART_SetConfig+0x364>)
 8004f46:	0052      	lsls	r2, r2, #1
 8004f48:	5ad3      	ldrh	r3, [r2, r3]
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	69b8      	ldr	r0, [r7, #24]
 8004f56:	69f9      	ldr	r1, [r7, #28]
 8004f58:	f7fb faa4 	bl	80004a4 <__aeabi_uldivmod>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	000b      	movs	r3, r1
 8004f60:	0e11      	lsrs	r1, r2, #24
 8004f62:	021d      	lsls	r5, r3, #8
 8004f64:	430d      	orrs	r5, r1
 8004f66:	0214      	lsls	r4, r2, #8
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68b8      	ldr	r0, [r7, #8]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	1900      	adds	r0, r0, r4
 8004f7a:	4169      	adcs	r1, r5
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f7fb fa8b 	bl	80004a4 <__aeabi_uldivmod>
 8004f8e:	0002      	movs	r2, r0
 8004f90:	000b      	movs	r3, r1
 8004f92:	0013      	movs	r3, r2
 8004f94:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f98:	23c0      	movs	r3, #192	; 0xc0
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d309      	bcc.n	8004fb4 <UART_SetConfig+0x2e4>
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	035b      	lsls	r3, r3, #13
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d204      	bcs.n	8004fb4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e0e9      	b.n	8005188 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004fb4:	231a      	movs	r3, #26
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	189b      	adds	r3, r3, r2
 8004fba:	19db      	adds	r3, r3, r7
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	e0e2      	b.n	8005188 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d000      	beq.n	8004fd0 <UART_SetConfig+0x300>
 8004fce:	e083      	b.n	80050d8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004fd0:	231b      	movs	r3, #27
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	19db      	adds	r3, r3, r7
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d015      	beq.n	800500a <UART_SetConfig+0x33a>
 8004fde:	dc2b      	bgt.n	8005038 <UART_SetConfig+0x368>
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d00d      	beq.n	8005000 <UART_SetConfig+0x330>
 8004fe4:	dc28      	bgt.n	8005038 <UART_SetConfig+0x368>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <UART_SetConfig+0x320>
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d005      	beq.n	8004ffa <UART_SetConfig+0x32a>
 8004fee:	e023      	b.n	8005038 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7ff fbec 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ff8:	e027      	b.n	800504a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <UART_SetConfig+0x360>)
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ffe:	e024      	b.n	800504a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005000:	f7ff fb58 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8005004:	0003      	movs	r3, r0
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005008:	e01f      	b.n	800504a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005010:	e01b      	b.n	800504a <UART_SetConfig+0x37a>
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	cfff69f3 	.word	0xcfff69f3
 8005018:	ffffcfff 	.word	0xffffcfff
 800501c:	40008000 	.word	0x40008000
 8005020:	11fff4ff 	.word	0x11fff4ff
 8005024:	40013800 	.word	0x40013800
 8005028:	40021000 	.word	0x40021000
 800502c:	40004400 	.word	0x40004400
 8005030:	00f42400 	.word	0x00f42400
 8005034:	0800a144 	.word	0x0800a144
      default:
        pclk = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800503c:	231a      	movs	r3, #26
 800503e:	2220      	movs	r2, #32
 8005040:	189b      	adds	r3, r3, r2
 8005042:	19db      	adds	r3, r3, r7
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
        break;
 8005048:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	2b00      	cmp	r3, #0
 800504e:	d100      	bne.n	8005052 <UART_SetConfig+0x382>
 8005050:	e09a      	b.n	8005188 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005056:	4b58      	ldr	r3, [pc, #352]	; (80051b8 <UART_SetConfig+0x4e8>)
 8005058:	0052      	lsls	r2, r2, #1
 800505a:	5ad3      	ldrh	r3, [r2, r3]
 800505c:	0019      	movs	r1, r3
 800505e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005060:	f7fb f86c 	bl	800013c <__udivsi3>
 8005064:	0003      	movs	r3, r0
 8005066:	005a      	lsls	r2, r3, #1
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	18d2      	adds	r2, r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0019      	movs	r1, r3
 8005076:	0010      	movs	r0, r2
 8005078:	f7fb f860 	bl	800013c <__udivsi3>
 800507c:	0003      	movs	r3, r0
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d921      	bls.n	80050ca <UART_SetConfig+0x3fa>
 8005086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	025b      	lsls	r3, r3, #9
 800508c:	429a      	cmp	r2, r3
 800508e:	d21c      	bcs.n	80050ca <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	b29a      	uxth	r2, r3
 8005094:	200e      	movs	r0, #14
 8005096:	2420      	movs	r4, #32
 8005098:	1903      	adds	r3, r0, r4
 800509a:	19db      	adds	r3, r3, r7
 800509c:	210f      	movs	r1, #15
 800509e:	438a      	bics	r2, r1
 80050a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2207      	movs	r2, #7
 80050aa:	4013      	ands	r3, r2
 80050ac:	b299      	uxth	r1, r3
 80050ae:	1903      	adds	r3, r0, r4
 80050b0:	19db      	adds	r3, r3, r7
 80050b2:	1902      	adds	r2, r0, r4
 80050b4:	19d2      	adds	r2, r2, r7
 80050b6:	8812      	ldrh	r2, [r2, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1902      	adds	r2, r0, r4
 80050c2:	19d2      	adds	r2, r2, r7
 80050c4:	8812      	ldrh	r2, [r2, #0]
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	e05e      	b.n	8005188 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80050ca:	231a      	movs	r3, #26
 80050cc:	2220      	movs	r2, #32
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	19db      	adds	r3, r3, r7
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e057      	b.n	8005188 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050d8:	231b      	movs	r3, #27
 80050da:	2220      	movs	r2, #32
 80050dc:	189b      	adds	r3, r3, r2
 80050de:	19db      	adds	r3, r3, r7
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d015      	beq.n	8005112 <UART_SetConfig+0x442>
 80050e6:	dc18      	bgt.n	800511a <UART_SetConfig+0x44a>
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d00d      	beq.n	8005108 <UART_SetConfig+0x438>
 80050ec:	dc15      	bgt.n	800511a <UART_SetConfig+0x44a>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <UART_SetConfig+0x428>
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d005      	beq.n	8005102 <UART_SetConfig+0x432>
 80050f6:	e010      	b.n	800511a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7ff fb68 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 80050fc:	0003      	movs	r3, r0
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005100:	e014      	b.n	800512c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005102:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <UART_SetConfig+0x4ec>)
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005106:	e011      	b.n	800512c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005108:	f7ff fad4 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 800510c:	0003      	movs	r3, r0
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005110:	e00c      	b.n	800512c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005118:	e008      	b.n	800512c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800511e:	231a      	movs	r3, #26
 8005120:	2220      	movs	r2, #32
 8005122:	189b      	adds	r3, r3, r2
 8005124:	19db      	adds	r3, r3, r7
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
        break;
 800512a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	2b00      	cmp	r3, #0
 8005130:	d02a      	beq.n	8005188 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <UART_SetConfig+0x4e8>)
 8005138:	0052      	lsls	r2, r2, #1
 800513a:	5ad3      	ldrh	r3, [r2, r3]
 800513c:	0019      	movs	r1, r3
 800513e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005140:	f7fa fffc 	bl	800013c <__udivsi3>
 8005144:	0003      	movs	r3, r0
 8005146:	001a      	movs	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	18d2      	adds	r2, r2, r3
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	0019      	movs	r1, r3
 8005156:	0010      	movs	r0, r2
 8005158:	f7fa fff0 	bl	800013c <__udivsi3>
 800515c:	0003      	movs	r3, r0
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d90a      	bls.n	800517c <UART_SetConfig+0x4ac>
 8005166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	025b      	lsls	r3, r3, #9
 800516c:	429a      	cmp	r2, r3
 800516e:	d205      	bcs.n	800517c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	b29a      	uxth	r2, r3
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	e005      	b.n	8005188 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800517c:	231a      	movs	r3, #26
 800517e:	2220      	movs	r2, #32
 8005180:	189b      	adds	r3, r3, r2
 8005182:	19db      	adds	r3, r3, r7
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	226a      	movs	r2, #106	; 0x6a
 800518c:	2101      	movs	r1, #1
 800518e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	2268      	movs	r2, #104	; 0x68
 8005194:	2101      	movs	r1, #1
 8005196:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2200      	movs	r2, #0
 800519c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2200      	movs	r2, #0
 80051a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80051a4:	231a      	movs	r3, #26
 80051a6:	2220      	movs	r2, #32
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	781b      	ldrb	r3, [r3, #0]
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b010      	add	sp, #64	; 0x40
 80051b4:	bdb0      	pop	{r4, r5, r7, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	0800a144 	.word	0x0800a144
 80051bc:	00f42400 	.word	0x00f42400

080051c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	2201      	movs	r2, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	d00b      	beq.n	80051ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a4a      	ldr	r2, [pc, #296]	; (8005304 <UART_AdvFeatureConfig+0x144>)
 80051da:	4013      	ands	r3, r2
 80051dc:	0019      	movs	r1, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	d00b      	beq.n	800520c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4a43      	ldr	r2, [pc, #268]	; (8005308 <UART_AdvFeatureConfig+0x148>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	2204      	movs	r2, #4
 8005212:	4013      	ands	r3, r2
 8005214:	d00b      	beq.n	800522e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a3b      	ldr	r2, [pc, #236]	; (800530c <UART_AdvFeatureConfig+0x14c>)
 800521e:	4013      	ands	r3, r2
 8005220:	0019      	movs	r1, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	2208      	movs	r2, #8
 8005234:	4013      	ands	r3, r2
 8005236:	d00b      	beq.n	8005250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4a34      	ldr	r2, [pc, #208]	; (8005310 <UART_AdvFeatureConfig+0x150>)
 8005240:	4013      	ands	r3, r2
 8005242:	0019      	movs	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	2210      	movs	r2, #16
 8005256:	4013      	ands	r3, r2
 8005258:	d00b      	beq.n	8005272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <UART_AdvFeatureConfig+0x154>)
 8005262:	4013      	ands	r3, r2
 8005264:	0019      	movs	r1, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	2220      	movs	r2, #32
 8005278:	4013      	ands	r3, r2
 800527a:	d00b      	beq.n	8005294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	4a25      	ldr	r2, [pc, #148]	; (8005318 <UART_AdvFeatureConfig+0x158>)
 8005284:	4013      	ands	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	2240      	movs	r2, #64	; 0x40
 800529a:	4013      	ands	r3, r2
 800529c:	d01d      	beq.n	80052da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <UART_AdvFeatureConfig+0x15c>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	0019      	movs	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	035b      	lsls	r3, r3, #13
 80052be:	429a      	cmp	r2, r3
 80052c0:	d10b      	bne.n	80052da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <UART_AdvFeatureConfig+0x160>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	4013      	ands	r3, r2
 80052e2:	d00b      	beq.n	80052fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <UART_AdvFeatureConfig+0x164>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	0019      	movs	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}
 8005304:	fffdffff 	.word	0xfffdffff
 8005308:	fffeffff 	.word	0xfffeffff
 800530c:	fffbffff 	.word	0xfffbffff
 8005310:	ffff7fff 	.word	0xffff7fff
 8005314:	ffffefff 	.word	0xffffefff
 8005318:	ffffdfff 	.word	0xffffdfff
 800531c:	ffefffff 	.word	0xffefffff
 8005320:	ff9fffff 	.word	0xff9fffff
 8005324:	fff7ffff 	.word	0xfff7ffff

08005328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af02      	add	r7, sp, #8
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2290      	movs	r2, #144	; 0x90
 8005334:	2100      	movs	r1, #0
 8005336:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005338:	f7fd fd1c 	bl	8002d74 <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2208      	movs	r2, #8
 8005348:	4013      	ands	r3, r2
 800534a:	2b08      	cmp	r3, #8
 800534c:	d10c      	bne.n	8005368 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	0391      	lsls	r1, r2, #14
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4a1a      	ldr	r2, [pc, #104]	; (80053c0 <UART_CheckIdleState+0x98>)
 8005358:	9200      	str	r2, [sp, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	f000 f832 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d001      	beq.n	8005368 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e026      	b.n	80053b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2204      	movs	r2, #4
 8005370:	4013      	ands	r3, r2
 8005372:	2b04      	cmp	r3, #4
 8005374:	d10c      	bne.n	8005390 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2280      	movs	r2, #128	; 0x80
 800537a:	03d1      	lsls	r1, r2, #15
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <UART_CheckIdleState+0x98>)
 8005380:	9200      	str	r2, [sp, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	f000 f81e 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d001      	beq.n	8005390 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e012      	b.n	80053b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2288      	movs	r2, #136	; 0x88
 8005394:	2120      	movs	r1, #32
 8005396:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	228c      	movs	r2, #140	; 0x8c
 800539c:	2120      	movs	r1, #32
 800539e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2284      	movs	r2, #132	; 0x84
 80053b0:	2100      	movs	r1, #0
 80053b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	0018      	movs	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b004      	add	sp, #16
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	01ffffff 	.word	0x01ffffff

080053c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b094      	sub	sp, #80	; 0x50
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	1dfb      	adds	r3, r7, #7
 80053d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d4:	e0a7      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d8:	3301      	adds	r3, #1
 80053da:	d100      	bne.n	80053de <UART_WaitOnFlagUntilTimeout+0x1a>
 80053dc:	e0a3      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053de:	f7fd fcc9 	bl	8002d74 <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d13f      	bne.n	8005474 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f4:	f3ef 8310 	mrs	r3, PRIMASK
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053fc:	647b      	str	r3, [r7, #68]	; 0x44
 80053fe:	2301      	movs	r3, #1
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	f383 8810 	msr	PRIMASK, r3
}
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	494e      	ldr	r1, [pc, #312]	; (8005550 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005416:	400a      	ands	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	f383 8810 	msr	PRIMASK, r3
}
 8005424:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	643b      	str	r3, [r7, #64]	; 0x40
 8005430:	2301      	movs	r3, #1
 8005432:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2101      	movs	r1, #1
 8005448:	438a      	bics	r2, r1
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	f383 8810 	msr	PRIMASK, r3
}
 8005456:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2288      	movs	r2, #136	; 0x88
 800545c:	2120      	movs	r1, #32
 800545e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	228c      	movs	r2, #140	; 0x8c
 8005464:	2120      	movs	r1, #32
 8005466:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2284      	movs	r2, #132	; 0x84
 800546c:	2100      	movs	r1, #0
 800546e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e069      	b.n	8005548 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2204      	movs	r2, #4
 800547c:	4013      	ands	r3, r2
 800547e:	d052      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	401a      	ands	r2, r3
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	429a      	cmp	r2, r3
 8005492:	d148      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2280      	movs	r2, #128	; 0x80
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549e:	f3ef 8310 	mrs	r3, PRIMASK
 80054a2:	613b      	str	r3, [r7, #16]
  return(result);
 80054a4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4924      	ldr	r1, [pc, #144]	; (8005550 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f383 8810 	msr	PRIMASK, r3
}
 80054ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d0:	f3ef 8310 	mrs	r3, PRIMASK
 80054d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80054d6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054da:	2301      	movs	r3, #1
 80054dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f383 8810 	msr	PRIMASK, r3
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2101      	movs	r1, #1
 80054f2:	438a      	bics	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
 80054f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	f383 8810 	msr	PRIMASK, r3
}
 8005500:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2288      	movs	r2, #136	; 0x88
 8005506:	2120      	movs	r1, #32
 8005508:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	228c      	movs	r2, #140	; 0x8c
 800550e:	2120      	movs	r1, #32
 8005510:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2290      	movs	r2, #144	; 0x90
 8005516:	2120      	movs	r1, #32
 8005518:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2284      	movs	r2, #132	; 0x84
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e010      	b.n	8005548 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	425a      	negs	r2, r3
 8005536:	4153      	adcs	r3, r2
 8005538:	b2db      	uxtb	r3, r3
 800553a:	001a      	movs	r2, r3
 800553c:	1dfb      	adds	r3, r7, #7
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d100      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0x182>
 8005544:	e747      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b014      	add	sp, #80	; 0x50
 800554e:	bd80      	pop	{r7, pc}
 8005550:	fffffe5f 	.word	0xfffffe5f

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	2000000c 	.word	0x2000000c

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	2600      	movs	r6, #0
 8005564:	4d0c      	ldr	r5, [pc, #48]	; (8005598 <__libc_init_array+0x38>)
 8005566:	4c0d      	ldr	r4, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005568:	1b64      	subs	r4, r4, r5
 800556a:	10a4      	asrs	r4, r4, #2
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	2600      	movs	r6, #0
 8005572:	f004 fd47 	bl	800a004 <_init>
 8005576:	4d0a      	ldr	r5, [pc, #40]	; (80055a0 <__libc_init_array+0x40>)
 8005578:	4c0a      	ldr	r4, [pc, #40]	; (80055a4 <__libc_init_array+0x44>)
 800557a:	1b64      	subs	r4, r4, r5
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	00b3      	lsls	r3, r6, #2
 8005586:	58eb      	ldr	r3, [r5, r3]
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	00b3      	lsls	r3, r6, #2
 8005590:	58eb      	ldr	r3, [r5, r3]
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	0800a60c 	.word	0x0800a60c
 800559c:	0800a60c 	.word	0x0800a60c
 80055a0:	0800a60c 	.word	0x0800a60c
 80055a4:	0800a610 	.word	0x0800a610

080055a8 <memset>:
 80055a8:	0003      	movs	r3, r0
 80055aa:	1882      	adds	r2, r0, r2
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	7019      	strb	r1, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__cvt>:
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	001e      	movs	r6, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	0014      	movs	r4, r2
 80055c0:	b08b      	sub	sp, #44	; 0x2c
 80055c2:	429e      	cmp	r6, r3
 80055c4:	da04      	bge.n	80055d0 <__cvt+0x18>
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	0609      	lsls	r1, r1, #24
 80055ca:	1873      	adds	r3, r6, r1
 80055cc:	001e      	movs	r6, r3
 80055ce:	232d      	movs	r3, #45	; 0x2d
 80055d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055d4:	7013      	strb	r3, [r2, #0]
 80055d6:	2320      	movs	r3, #32
 80055d8:	2203      	movs	r2, #3
 80055da:	439f      	bics	r7, r3
 80055dc:	2f46      	cmp	r7, #70	; 0x46
 80055de:	d007      	beq.n	80055f0 <__cvt+0x38>
 80055e0:	003b      	movs	r3, r7
 80055e2:	3b45      	subs	r3, #69	; 0x45
 80055e4:	4259      	negs	r1, r3
 80055e6:	414b      	adcs	r3, r1
 80055e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80055ea:	3a01      	subs	r2, #1
 80055ec:	18cb      	adds	r3, r1, r3
 80055ee:	9310      	str	r3, [sp, #64]	; 0x40
 80055f0:	ab09      	add	r3, sp, #36	; 0x24
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	ab08      	add	r3, sp, #32
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055fa:	9200      	str	r2, [sp, #0]
 80055fc:	9302      	str	r3, [sp, #8]
 80055fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005600:	0022      	movs	r2, r4
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	0033      	movs	r3, r6
 8005606:	f001 fdc3 	bl	8007190 <_dtoa_r>
 800560a:	0005      	movs	r5, r0
 800560c:	2f47      	cmp	r7, #71	; 0x47
 800560e:	d102      	bne.n	8005616 <__cvt+0x5e>
 8005610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005612:	07db      	lsls	r3, r3, #31
 8005614:	d528      	bpl.n	8005668 <__cvt+0xb0>
 8005616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005618:	18eb      	adds	r3, r5, r3
 800561a:	9307      	str	r3, [sp, #28]
 800561c:	2f46      	cmp	r7, #70	; 0x46
 800561e:	d114      	bne.n	800564a <__cvt+0x92>
 8005620:	782b      	ldrb	r3, [r5, #0]
 8005622:	2b30      	cmp	r3, #48	; 0x30
 8005624:	d10c      	bne.n	8005640 <__cvt+0x88>
 8005626:	2200      	movs	r2, #0
 8005628:	2300      	movs	r3, #0
 800562a:	0020      	movs	r0, r4
 800562c:	0031      	movs	r1, r6
 800562e:	f7fa ff0b 	bl	8000448 <__aeabi_dcmpeq>
 8005632:	2800      	cmp	r0, #0
 8005634:	d104      	bne.n	8005640 <__cvt+0x88>
 8005636:	2301      	movs	r3, #1
 8005638:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005642:	9a07      	ldr	r2, [sp, #28]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	9307      	str	r3, [sp, #28]
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	0020      	movs	r0, r4
 8005650:	0031      	movs	r1, r6
 8005652:	f7fa fef9 	bl	8000448 <__aeabi_dcmpeq>
 8005656:	2800      	cmp	r0, #0
 8005658:	d001      	beq.n	800565e <__cvt+0xa6>
 800565a:	9b07      	ldr	r3, [sp, #28]
 800565c:	9309      	str	r3, [sp, #36]	; 0x24
 800565e:	2230      	movs	r2, #48	; 0x30
 8005660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005662:	9907      	ldr	r1, [sp, #28]
 8005664:	428b      	cmp	r3, r1
 8005666:	d306      	bcc.n	8005676 <__cvt+0xbe>
 8005668:	0028      	movs	r0, r5
 800566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800566e:	1b5b      	subs	r3, r3, r5
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	b00b      	add	sp, #44	; 0x2c
 8005674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	9109      	str	r1, [sp, #36]	; 0x24
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e7f0      	b.n	8005660 <__cvt+0xa8>

0800567e <__exponent>:
 800567e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005680:	1c83      	adds	r3, r0, #2
 8005682:	b087      	sub	sp, #28
 8005684:	9303      	str	r3, [sp, #12]
 8005686:	0005      	movs	r5, r0
 8005688:	000c      	movs	r4, r1
 800568a:	232b      	movs	r3, #43	; 0x2b
 800568c:	7002      	strb	r2, [r0, #0]
 800568e:	2900      	cmp	r1, #0
 8005690:	da01      	bge.n	8005696 <__exponent+0x18>
 8005692:	424c      	negs	r4, r1
 8005694:	3302      	adds	r3, #2
 8005696:	706b      	strb	r3, [r5, #1]
 8005698:	2c09      	cmp	r4, #9
 800569a:	dd31      	ble.n	8005700 <__exponent+0x82>
 800569c:	270a      	movs	r7, #10
 800569e:	ab04      	add	r3, sp, #16
 80056a0:	1dde      	adds	r6, r3, #7
 80056a2:	0020      	movs	r0, r4
 80056a4:	0039      	movs	r1, r7
 80056a6:	9601      	str	r6, [sp, #4]
 80056a8:	f7fa feb8 	bl	800041c <__aeabi_idivmod>
 80056ac:	3e01      	subs	r6, #1
 80056ae:	3130      	adds	r1, #48	; 0x30
 80056b0:	0020      	movs	r0, r4
 80056b2:	7031      	strb	r1, [r6, #0]
 80056b4:	0039      	movs	r1, r7
 80056b6:	9402      	str	r4, [sp, #8]
 80056b8:	f7fa fdca 	bl	8000250 <__divsi3>
 80056bc:	9b02      	ldr	r3, [sp, #8]
 80056be:	0004      	movs	r4, r0
 80056c0:	2b63      	cmp	r3, #99	; 0x63
 80056c2:	dcee      	bgt.n	80056a2 <__exponent+0x24>
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	3430      	adds	r4, #48	; 0x30
 80056c8:	1e9a      	subs	r2, r3, #2
 80056ca:	0013      	movs	r3, r2
 80056cc:	9903      	ldr	r1, [sp, #12]
 80056ce:	7014      	strb	r4, [r2, #0]
 80056d0:	a804      	add	r0, sp, #16
 80056d2:	3007      	adds	r0, #7
 80056d4:	4298      	cmp	r0, r3
 80056d6:	d80e      	bhi.n	80056f6 <__exponent+0x78>
 80056d8:	ab04      	add	r3, sp, #16
 80056da:	3307      	adds	r3, #7
 80056dc:	2000      	movs	r0, #0
 80056de:	429a      	cmp	r2, r3
 80056e0:	d804      	bhi.n	80056ec <__exponent+0x6e>
 80056e2:	ab04      	add	r3, sp, #16
 80056e4:	3009      	adds	r0, #9
 80056e6:	18c0      	adds	r0, r0, r3
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	1ac0      	subs	r0, r0, r3
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	1818      	adds	r0, r3, r0
 80056f0:	1b40      	subs	r0, r0, r5
 80056f2:	b007      	add	sp, #28
 80056f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f6:	7818      	ldrb	r0, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	7008      	strb	r0, [r1, #0]
 80056fc:	3101      	adds	r1, #1
 80056fe:	e7e7      	b.n	80056d0 <__exponent+0x52>
 8005700:	2330      	movs	r3, #48	; 0x30
 8005702:	18e4      	adds	r4, r4, r3
 8005704:	70ab      	strb	r3, [r5, #2]
 8005706:	1d28      	adds	r0, r5, #4
 8005708:	70ec      	strb	r4, [r5, #3]
 800570a:	e7f1      	b.n	80056f0 <__exponent+0x72>

0800570c <_printf_float>:
 800570c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570e:	b095      	sub	sp, #84	; 0x54
 8005710:	000c      	movs	r4, r1
 8005712:	9209      	str	r2, [sp, #36]	; 0x24
 8005714:	001e      	movs	r6, r3
 8005716:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005718:	0007      	movs	r7, r0
 800571a:	f002 fec7 	bl	80084ac <_localeconv_r>
 800571e:	6803      	ldr	r3, [r0, #0]
 8005720:	0018      	movs	r0, r3
 8005722:	930c      	str	r3, [sp, #48]	; 0x30
 8005724:	f7fa fcee 	bl	8000104 <strlen>
 8005728:	2300      	movs	r3, #0
 800572a:	9312      	str	r3, [sp, #72]	; 0x48
 800572c:	7e23      	ldrb	r3, [r4, #24]
 800572e:	2207      	movs	r2, #7
 8005730:	930a      	str	r3, [sp, #40]	; 0x28
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	900e      	str	r0, [sp, #56]	; 0x38
 8005736:	930d      	str	r3, [sp, #52]	; 0x34
 8005738:	990d      	ldr	r1, [sp, #52]	; 0x34
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	05c9      	lsls	r1, r1, #23
 800573e:	d547      	bpl.n	80057d0 <_printf_float+0xc4>
 8005740:	189b      	adds	r3, r3, r2
 8005742:	4393      	bics	r3, r2
 8005744:	001a      	movs	r2, r3
 8005746:	3208      	adds	r2, #8
 8005748:	602a      	str	r2, [r5, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	64a2      	str	r2, [r4, #72]	; 0x48
 8005750:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005752:	2201      	movs	r2, #1
 8005754:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005756:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005758:	930b      	str	r3, [sp, #44]	; 0x2c
 800575a:	006b      	lsls	r3, r5, #1
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005760:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005762:	4ba7      	ldr	r3, [pc, #668]	; (8005a00 <_printf_float+0x2f4>)
 8005764:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005766:	4252      	negs	r2, r2
 8005768:	f7fc fd34 	bl	80021d4 <__aeabi_dcmpun>
 800576c:	2800      	cmp	r0, #0
 800576e:	d131      	bne.n	80057d4 <_printf_float+0xc8>
 8005770:	2201      	movs	r2, #1
 8005772:	4ba3      	ldr	r3, [pc, #652]	; (8005a00 <_printf_float+0x2f4>)
 8005774:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005776:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005778:	4252      	negs	r2, r2
 800577a:	f7fa fe75 	bl	8000468 <__aeabi_dcmple>
 800577e:	2800      	cmp	r0, #0
 8005780:	d128      	bne.n	80057d4 <_printf_float+0xc8>
 8005782:	2200      	movs	r2, #0
 8005784:	2300      	movs	r3, #0
 8005786:	0029      	movs	r1, r5
 8005788:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800578a:	f7fa fe63 	bl	8000454 <__aeabi_dcmplt>
 800578e:	2800      	cmp	r0, #0
 8005790:	d003      	beq.n	800579a <_printf_float+0x8e>
 8005792:	0023      	movs	r3, r4
 8005794:	222d      	movs	r2, #45	; 0x2d
 8005796:	3343      	adds	r3, #67	; 0x43
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579c:	4d99      	ldr	r5, [pc, #612]	; (8005a04 <_printf_float+0x2f8>)
 800579e:	2b47      	cmp	r3, #71	; 0x47
 80057a0:	d900      	bls.n	80057a4 <_printf_float+0x98>
 80057a2:	4d99      	ldr	r5, [pc, #612]	; (8005a08 <_printf_float+0x2fc>)
 80057a4:	2303      	movs	r3, #3
 80057a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	3301      	adds	r3, #1
 80057ac:	439a      	bics	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	6022      	str	r2, [r4, #0]
 80057b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b6:	0021      	movs	r1, r4
 80057b8:	0038      	movs	r0, r7
 80057ba:	9600      	str	r6, [sp, #0]
 80057bc:	aa13      	add	r2, sp, #76	; 0x4c
 80057be:	f000 f9e7 	bl	8005b90 <_printf_common>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	d000      	beq.n	80057c8 <_printf_float+0xbc>
 80057c6:	e0a2      	b.n	800590e <_printf_float+0x202>
 80057c8:	2001      	movs	r0, #1
 80057ca:	4240      	negs	r0, r0
 80057cc:	b015      	add	sp, #84	; 0x54
 80057ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d0:	3307      	adds	r3, #7
 80057d2:	e7b6      	b.n	8005742 <_printf_float+0x36>
 80057d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057d6:	002b      	movs	r3, r5
 80057d8:	0010      	movs	r0, r2
 80057da:	0029      	movs	r1, r5
 80057dc:	f7fc fcfa 	bl	80021d4 <__aeabi_dcmpun>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d00b      	beq.n	80057fc <_printf_float+0xf0>
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	da03      	bge.n	80057f0 <_printf_float+0xe4>
 80057e8:	0023      	movs	r3, r4
 80057ea:	222d      	movs	r2, #45	; 0x2d
 80057ec:	3343      	adds	r3, #67	; 0x43
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f2:	4d86      	ldr	r5, [pc, #536]	; (8005a0c <_printf_float+0x300>)
 80057f4:	2b47      	cmp	r3, #71	; 0x47
 80057f6:	d9d5      	bls.n	80057a4 <_printf_float+0x98>
 80057f8:	4d85      	ldr	r5, [pc, #532]	; (8005a10 <_printf_float+0x304>)
 80057fa:	e7d3      	b.n	80057a4 <_printf_float+0x98>
 80057fc:	2220      	movs	r2, #32
 80057fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	4391      	bics	r1, r2
 8005804:	910f      	str	r1, [sp, #60]	; 0x3c
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	d149      	bne.n	800589e <_printf_float+0x192>
 800580a:	3307      	adds	r3, #7
 800580c:	6063      	str	r3, [r4, #4]
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4313      	orrs	r3, r2
 8005816:	2200      	movs	r2, #0
 8005818:	9206      	str	r2, [sp, #24]
 800581a:	aa12      	add	r2, sp, #72	; 0x48
 800581c:	9205      	str	r2, [sp, #20]
 800581e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005820:	a908      	add	r1, sp, #32
 8005822:	9204      	str	r2, [sp, #16]
 8005824:	aa11      	add	r2, sp, #68	; 0x44
 8005826:	9203      	str	r2, [sp, #12]
 8005828:	2223      	movs	r2, #35	; 0x23
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1852      	adds	r2, r2, r1
 8005832:	9202      	str	r2, [sp, #8]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	0038      	movs	r0, r7
 8005838:	002b      	movs	r3, r5
 800583a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800583c:	f7ff febc 	bl	80055b8 <__cvt>
 8005840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005842:	0005      	movs	r5, r0
 8005844:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005846:	2b47      	cmp	r3, #71	; 0x47
 8005848:	d108      	bne.n	800585c <_printf_float+0x150>
 800584a:	1ccb      	adds	r3, r1, #3
 800584c:	db02      	blt.n	8005854 <_printf_float+0x148>
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	4299      	cmp	r1, r3
 8005852:	dd48      	ble.n	80058e6 <_printf_float+0x1da>
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	3b02      	subs	r3, #2
 8005858:	b2db      	uxtb	r3, r3
 800585a:	930a      	str	r3, [sp, #40]	; 0x28
 800585c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585e:	2b65      	cmp	r3, #101	; 0x65
 8005860:	d824      	bhi.n	80058ac <_printf_float+0x1a0>
 8005862:	0020      	movs	r0, r4
 8005864:	001a      	movs	r2, r3
 8005866:	3901      	subs	r1, #1
 8005868:	3050      	adds	r0, #80	; 0x50
 800586a:	9111      	str	r1, [sp, #68]	; 0x44
 800586c:	f7ff ff07 	bl	800567e <__exponent>
 8005870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005872:	900b      	str	r0, [sp, #44]	; 0x2c
 8005874:	1813      	adds	r3, r2, r0
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	2a01      	cmp	r2, #1
 800587a:	dc02      	bgt.n	8005882 <_printf_float+0x176>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	07d2      	lsls	r2, r2, #31
 8005880:	d501      	bpl.n	8005886 <_printf_float+0x17a>
 8005882:	3301      	adds	r3, #1
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	2323      	movs	r3, #35	; 0x23
 8005888:	aa08      	add	r2, sp, #32
 800588a:	189b      	adds	r3, r3, r2
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d100      	bne.n	8005894 <_printf_float+0x188>
 8005892:	e78f      	b.n	80057b4 <_printf_float+0xa8>
 8005894:	0023      	movs	r3, r4
 8005896:	222d      	movs	r2, #45	; 0x2d
 8005898:	3343      	adds	r3, #67	; 0x43
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e78a      	b.n	80057b4 <_printf_float+0xa8>
 800589e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058a0:	2a47      	cmp	r2, #71	; 0x47
 80058a2:	d1b4      	bne.n	800580e <_printf_float+0x102>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1b2      	bne.n	800580e <_printf_float+0x102>
 80058a8:	3301      	adds	r3, #1
 80058aa:	e7af      	b.n	800580c <_printf_float+0x100>
 80058ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ae:	2b66      	cmp	r3, #102	; 0x66
 80058b0:	d11b      	bne.n	80058ea <_printf_float+0x1de>
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	2900      	cmp	r1, #0
 80058b6:	dd0d      	ble.n	80058d4 <_printf_float+0x1c8>
 80058b8:	6121      	str	r1, [r4, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <_printf_float+0x1b8>
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	07d2      	lsls	r2, r2, #31
 80058c2:	d502      	bpl.n	80058ca <_printf_float+0x1be>
 80058c4:	3301      	adds	r3, #1
 80058c6:	1859      	adds	r1, r3, r1
 80058c8:	6121      	str	r1, [r4, #16]
 80058ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80058ce:	2300      	movs	r3, #0
 80058d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d2:	e7d8      	b.n	8005886 <_printf_float+0x17a>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <_printf_float+0x1d4>
 80058d8:	2201      	movs	r2, #1
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	4211      	tst	r1, r2
 80058de:	d000      	beq.n	80058e2 <_printf_float+0x1d6>
 80058e0:	1c9a      	adds	r2, r3, #2
 80058e2:	6122      	str	r2, [r4, #16]
 80058e4:	e7f1      	b.n	80058ca <_printf_float+0x1be>
 80058e6:	2367      	movs	r3, #103	; 0x67
 80058e8:	930a      	str	r3, [sp, #40]	; 0x28
 80058ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058ee:	4293      	cmp	r3, r2
 80058f0:	db06      	blt.n	8005900 <_printf_float+0x1f4>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	07d2      	lsls	r2, r2, #31
 80058f8:	d5e7      	bpl.n	80058ca <_printf_float+0x1be>
 80058fa:	3301      	adds	r3, #1
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	e7e4      	b.n	80058ca <_printf_float+0x1be>
 8005900:	2101      	movs	r1, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	dc01      	bgt.n	800590a <_printf_float+0x1fe>
 8005906:	1849      	adds	r1, r1, r1
 8005908:	1ac9      	subs	r1, r1, r3
 800590a:	1852      	adds	r2, r2, r1
 800590c:	e7e9      	b.n	80058e2 <_printf_float+0x1d6>
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	0553      	lsls	r3, r2, #21
 8005912:	d407      	bmi.n	8005924 <_printf_float+0x218>
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	002a      	movs	r2, r5
 8005918:	0038      	movs	r0, r7
 800591a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800591c:	47b0      	blx	r6
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d128      	bne.n	8005974 <_printf_float+0x268>
 8005922:	e751      	b.n	80057c8 <_printf_float+0xbc>
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	2b65      	cmp	r3, #101	; 0x65
 8005928:	d800      	bhi.n	800592c <_printf_float+0x220>
 800592a:	e0e1      	b.n	8005af0 <_printf_float+0x3e4>
 800592c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800592e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005930:	2200      	movs	r2, #0
 8005932:	2300      	movs	r3, #0
 8005934:	f7fa fd88 	bl	8000448 <__aeabi_dcmpeq>
 8005938:	2800      	cmp	r0, #0
 800593a:	d031      	beq.n	80059a0 <_printf_float+0x294>
 800593c:	2301      	movs	r3, #1
 800593e:	0038      	movs	r0, r7
 8005940:	4a34      	ldr	r2, [pc, #208]	; (8005a14 <_printf_float+0x308>)
 8005942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005944:	47b0      	blx	r6
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d100      	bne.n	800594c <_printf_float+0x240>
 800594a:	e73d      	b.n	80057c8 <_printf_float+0xbc>
 800594c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800594e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005950:	4293      	cmp	r3, r2
 8005952:	db02      	blt.n	800595a <_printf_float+0x24e>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07db      	lsls	r3, r3, #31
 8005958:	d50c      	bpl.n	8005974 <_printf_float+0x268>
 800595a:	0038      	movs	r0, r7
 800595c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800595e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005960:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005962:	47b0      	blx	r6
 8005964:	2500      	movs	r5, #0
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d100      	bne.n	800596c <_printf_float+0x260>
 800596a:	e72d      	b.n	80057c8 <_printf_float+0xbc>
 800596c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800596e:	3b01      	subs	r3, #1
 8005970:	42ab      	cmp	r3, r5
 8005972:	dc0a      	bgt.n	800598a <_printf_float+0x27e>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	079b      	lsls	r3, r3, #30
 8005978:	d500      	bpl.n	800597c <_printf_float+0x270>
 800597a:	e106      	b.n	8005b8a <_printf_float+0x47e>
 800597c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	4298      	cmp	r0, r3
 8005982:	db00      	blt.n	8005986 <_printf_float+0x27a>
 8005984:	e722      	b.n	80057cc <_printf_float+0xc0>
 8005986:	0018      	movs	r0, r3
 8005988:	e720      	b.n	80057cc <_printf_float+0xc0>
 800598a:	0022      	movs	r2, r4
 800598c:	2301      	movs	r3, #1
 800598e:	0038      	movs	r0, r7
 8005990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005992:	321a      	adds	r2, #26
 8005994:	47b0      	blx	r6
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	d100      	bne.n	800599c <_printf_float+0x290>
 800599a:	e715      	b.n	80057c8 <_printf_float+0xbc>
 800599c:	3501      	adds	r5, #1
 800599e:	e7e5      	b.n	800596c <_printf_float+0x260>
 80059a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dc38      	bgt.n	8005a18 <_printf_float+0x30c>
 80059a6:	2301      	movs	r3, #1
 80059a8:	0038      	movs	r0, r7
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <_printf_float+0x308>)
 80059ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ae:	47b0      	blx	r6
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d100      	bne.n	80059b6 <_printf_float+0x2aa>
 80059b4:	e708      	b.n	80057c8 <_printf_float+0xbc>
 80059b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d102      	bne.n	80059c4 <_printf_float+0x2b8>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	07db      	lsls	r3, r3, #31
 80059c2:	d5d7      	bpl.n	8005974 <_printf_float+0x268>
 80059c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059c6:	0038      	movs	r0, r7
 80059c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059cc:	47b0      	blx	r6
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d100      	bne.n	80059d4 <_printf_float+0x2c8>
 80059d2:	e6f9      	b.n	80057c8 <_printf_float+0xbc>
 80059d4:	2300      	movs	r3, #0
 80059d6:	930a      	str	r3, [sp, #40]	; 0x28
 80059d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059dc:	425b      	negs	r3, r3
 80059de:	4293      	cmp	r3, r2
 80059e0:	dc01      	bgt.n	80059e6 <_printf_float+0x2da>
 80059e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059e4:	e797      	b.n	8005916 <_printf_float+0x20a>
 80059e6:	0022      	movs	r2, r4
 80059e8:	2301      	movs	r3, #1
 80059ea:	0038      	movs	r0, r7
 80059ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ee:	321a      	adds	r2, #26
 80059f0:	47b0      	blx	r6
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d100      	bne.n	80059f8 <_printf_float+0x2ec>
 80059f6:	e6e7      	b.n	80057c8 <_printf_float+0xbc>
 80059f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fa:	3301      	adds	r3, #1
 80059fc:	e7eb      	b.n	80059d6 <_printf_float+0x2ca>
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	7fefffff 	.word	0x7fefffff
 8005a04:	0800a160 	.word	0x0800a160
 8005a08:	0800a164 	.word	0x0800a164
 8005a0c:	0800a168 	.word	0x0800a168
 8005a10:	0800a16c 	.word	0x0800a16c
 8005a14:	0800a170 	.word	0x0800a170
 8005a18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	dd00      	ble.n	8005a24 <_printf_float+0x318>
 8005a22:	930a      	str	r3, [sp, #40]	; 0x28
 8005a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dc3c      	bgt.n	8005aa4 <_printf_float+0x398>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a30:	43db      	mvns	r3, r3
 8005a32:	17db      	asrs	r3, r3, #31
 8005a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3e:	4013      	ands	r3, r2
 8005a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a46:	4293      	cmp	r3, r2
 8005a48:	dc34      	bgt.n	8005ab4 <_printf_float+0x3a8>
 8005a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	db3d      	blt.n	8005ace <_printf_float+0x3c2>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	07db      	lsls	r3, r3, #31
 8005a56:	d43a      	bmi.n	8005ace <_printf_float+0x3c2>
 8005a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	1a52      	subs	r2, r2, r1
 8005a62:	920a      	str	r2, [sp, #40]	; 0x28
 8005a64:	429a      	cmp	r2, r3
 8005a66:	dd00      	ble.n	8005a6a <_printf_float+0x35e>
 8005a68:	930a      	str	r3, [sp, #40]	; 0x28
 8005a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dc36      	bgt.n	8005ade <_printf_float+0x3d2>
 8005a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a72:	2500      	movs	r5, #0
 8005a74:	43db      	mvns	r3, r3
 8005a76:	17db      	asrs	r3, r3, #31
 8005a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a84:	400a      	ands	r2, r1
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dc00      	bgt.n	8005a8e <_printf_float+0x382>
 8005a8c:	e772      	b.n	8005974 <_printf_float+0x268>
 8005a8e:	0022      	movs	r2, r4
 8005a90:	2301      	movs	r3, #1
 8005a92:	0038      	movs	r0, r7
 8005a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a96:	321a      	adds	r2, #26
 8005a98:	47b0      	blx	r6
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	d100      	bne.n	8005aa0 <_printf_float+0x394>
 8005a9e:	e693      	b.n	80057c8 <_printf_float+0xbc>
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7ea      	b.n	8005a7a <_printf_float+0x36e>
 8005aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa6:	002a      	movs	r2, r5
 8005aa8:	0038      	movs	r0, r7
 8005aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aac:	47b0      	blx	r6
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d1bb      	bne.n	8005a2a <_printf_float+0x31e>
 8005ab2:	e689      	b.n	80057c8 <_printf_float+0xbc>
 8005ab4:	0022      	movs	r2, r4
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	0038      	movs	r0, r7
 8005aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005abc:	321a      	adds	r2, #26
 8005abe:	47b0      	blx	r6
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d100      	bne.n	8005ac6 <_printf_float+0x3ba>
 8005ac4:	e680      	b.n	80057c8 <_printf_float+0xbc>
 8005ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac8:	3301      	adds	r3, #1
 8005aca:	930d      	str	r3, [sp, #52]	; 0x34
 8005acc:	e7b3      	b.n	8005a36 <_printf_float+0x32a>
 8005ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad0:	0038      	movs	r0, r7
 8005ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad6:	47b0      	blx	r6
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d1bd      	bne.n	8005a58 <_printf_float+0x34c>
 8005adc:	e674      	b.n	80057c8 <_printf_float+0xbc>
 8005ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae0:	0038      	movs	r0, r7
 8005ae2:	18ea      	adds	r2, r5, r3
 8005ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae8:	47b0      	blx	r6
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d1c0      	bne.n	8005a70 <_printf_float+0x364>
 8005aee:	e66b      	b.n	80057c8 <_printf_float+0xbc>
 8005af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	dc02      	bgt.n	8005afc <_printf_float+0x3f0>
 8005af6:	2301      	movs	r3, #1
 8005af8:	421a      	tst	r2, r3
 8005afa:	d034      	beq.n	8005b66 <_printf_float+0x45a>
 8005afc:	2301      	movs	r3, #1
 8005afe:	002a      	movs	r2, r5
 8005b00:	0038      	movs	r0, r7
 8005b02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b04:	47b0      	blx	r6
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	d100      	bne.n	8005b0c <_printf_float+0x400>
 8005b0a:	e65d      	b.n	80057c8 <_printf_float+0xbc>
 8005b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b0e:	0038      	movs	r0, r7
 8005b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b14:	47b0      	blx	r6
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d100      	bne.n	8005b1c <_printf_float+0x410>
 8005b1a:	e655      	b.n	80057c8 <_printf_float+0xbc>
 8005b1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005b1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005b20:	2200      	movs	r2, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	f7fa fc90 	bl	8000448 <__aeabi_dcmpeq>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d11a      	bne.n	8005b62 <_printf_float+0x456>
 8005b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b2e:	1c6a      	adds	r2, r5, #1
 8005b30:	3b01      	subs	r3, #1
 8005b32:	0038      	movs	r0, r7
 8005b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b36:	47b0      	blx	r6
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d10e      	bne.n	8005b5a <_printf_float+0x44e>
 8005b3c:	e644      	b.n	80057c8 <_printf_float+0xbc>
 8005b3e:	0022      	movs	r2, r4
 8005b40:	2301      	movs	r3, #1
 8005b42:	0038      	movs	r0, r7
 8005b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b46:	321a      	adds	r2, #26
 8005b48:	47b0      	blx	r6
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	d100      	bne.n	8005b50 <_printf_float+0x444>
 8005b4e:	e63b      	b.n	80057c8 <_printf_float+0xbc>
 8005b50:	3501      	adds	r5, #1
 8005b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b54:	3b01      	subs	r3, #1
 8005b56:	42ab      	cmp	r3, r5
 8005b58:	dcf1      	bgt.n	8005b3e <_printf_float+0x432>
 8005b5a:	0022      	movs	r2, r4
 8005b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b5e:	3250      	adds	r2, #80	; 0x50
 8005b60:	e6da      	b.n	8005918 <_printf_float+0x20c>
 8005b62:	2500      	movs	r5, #0
 8005b64:	e7f5      	b.n	8005b52 <_printf_float+0x446>
 8005b66:	002a      	movs	r2, r5
 8005b68:	e7e3      	b.n	8005b32 <_printf_float+0x426>
 8005b6a:	0022      	movs	r2, r4
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	0038      	movs	r0, r7
 8005b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b72:	3219      	adds	r2, #25
 8005b74:	47b0      	blx	r6
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	d100      	bne.n	8005b7c <_printf_float+0x470>
 8005b7a:	e625      	b.n	80057c8 <_printf_float+0xbc>
 8005b7c:	3501      	adds	r5, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dcf0      	bgt.n	8005b6a <_printf_float+0x45e>
 8005b88:	e6f8      	b.n	800597c <_printf_float+0x270>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	e7f7      	b.n	8005b7e <_printf_float+0x472>
 8005b8e:	46c0      	nop			; (mov r8, r8)

08005b90 <_printf_common>:
 8005b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b92:	0015      	movs	r5, r2
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	688a      	ldr	r2, [r1, #8]
 8005b98:	690b      	ldr	r3, [r1, #16]
 8005b9a:	000c      	movs	r4, r1
 8005b9c:	9000      	str	r0, [sp, #0]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	da00      	bge.n	8005ba4 <_printf_common+0x14>
 8005ba2:	0013      	movs	r3, r2
 8005ba4:	0022      	movs	r2, r4
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	3243      	adds	r2, #67	; 0x43
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d001      	beq.n	8005bb4 <_printf_common+0x24>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	069b      	lsls	r3, r3, #26
 8005bb8:	d502      	bpl.n	8005bc0 <_printf_common+0x30>
 8005bba:	682b      	ldr	r3, [r5, #0]
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	2306      	movs	r3, #6
 8005bc4:	0017      	movs	r7, r2
 8005bc6:	401f      	ands	r7, r3
 8005bc8:	421a      	tst	r2, r3
 8005bca:	d027      	beq.n	8005c1c <_printf_common+0x8c>
 8005bcc:	0023      	movs	r3, r4
 8005bce:	3343      	adds	r3, #67	; 0x43
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	4193      	sbcs	r3, r2
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	0692      	lsls	r2, r2, #26
 8005bda:	d430      	bmi.n	8005c3e <_printf_common+0xae>
 8005bdc:	0022      	movs	r2, r4
 8005bde:	9901      	ldr	r1, [sp, #4]
 8005be0:	9800      	ldr	r0, [sp, #0]
 8005be2:	9e08      	ldr	r6, [sp, #32]
 8005be4:	3243      	adds	r2, #67	; 0x43
 8005be6:	47b0      	blx	r6
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d025      	beq.n	8005c38 <_printf_common+0xa8>
 8005bec:	2306      	movs	r3, #6
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	682a      	ldr	r2, [r5, #0]
 8005bf2:	68e1      	ldr	r1, [r4, #12]
 8005bf4:	2500      	movs	r5, #0
 8005bf6:	4003      	ands	r3, r0
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d103      	bne.n	8005c04 <_printf_common+0x74>
 8005bfc:	1a8d      	subs	r5, r1, r2
 8005bfe:	43eb      	mvns	r3, r5
 8005c00:	17db      	asrs	r3, r3, #31
 8005c02:	401d      	ands	r5, r3
 8005c04:	68a3      	ldr	r3, [r4, #8]
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	dd01      	ble.n	8005c10 <_printf_common+0x80>
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	18ed      	adds	r5, r5, r3
 8005c10:	2700      	movs	r7, #0
 8005c12:	42bd      	cmp	r5, r7
 8005c14:	d120      	bne.n	8005c58 <_printf_common+0xc8>
 8005c16:	2000      	movs	r0, #0
 8005c18:	e010      	b.n	8005c3c <_printf_common+0xac>
 8005c1a:	3701      	adds	r7, #1
 8005c1c:	68e3      	ldr	r3, [r4, #12]
 8005c1e:	682a      	ldr	r2, [r5, #0]
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	42bb      	cmp	r3, r7
 8005c24:	ddd2      	ble.n	8005bcc <_printf_common+0x3c>
 8005c26:	0022      	movs	r2, r4
 8005c28:	2301      	movs	r3, #1
 8005c2a:	9901      	ldr	r1, [sp, #4]
 8005c2c:	9800      	ldr	r0, [sp, #0]
 8005c2e:	9e08      	ldr	r6, [sp, #32]
 8005c30:	3219      	adds	r2, #25
 8005c32:	47b0      	blx	r6
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d1f0      	bne.n	8005c1a <_printf_common+0x8a>
 8005c38:	2001      	movs	r0, #1
 8005c3a:	4240      	negs	r0, r0
 8005c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c3e:	2030      	movs	r0, #48	; 0x30
 8005c40:	18e1      	adds	r1, r4, r3
 8005c42:	3143      	adds	r1, #67	; 0x43
 8005c44:	7008      	strb	r0, [r1, #0]
 8005c46:	0021      	movs	r1, r4
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	3145      	adds	r1, #69	; 0x45
 8005c4c:	7809      	ldrb	r1, [r1, #0]
 8005c4e:	18a2      	adds	r2, r4, r2
 8005c50:	3243      	adds	r2, #67	; 0x43
 8005c52:	3302      	adds	r3, #2
 8005c54:	7011      	strb	r1, [r2, #0]
 8005c56:	e7c1      	b.n	8005bdc <_printf_common+0x4c>
 8005c58:	0022      	movs	r2, r4
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	9901      	ldr	r1, [sp, #4]
 8005c5e:	9800      	ldr	r0, [sp, #0]
 8005c60:	9e08      	ldr	r6, [sp, #32]
 8005c62:	321a      	adds	r2, #26
 8005c64:	47b0      	blx	r6
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa8>
 8005c6a:	3701      	adds	r7, #1
 8005c6c:	e7d1      	b.n	8005c12 <_printf_common+0x82>
	...

08005c70 <_printf_i>:
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b08b      	sub	sp, #44	; 0x2c
 8005c74:	9206      	str	r2, [sp, #24]
 8005c76:	000a      	movs	r2, r1
 8005c78:	3243      	adds	r2, #67	; 0x43
 8005c7a:	9307      	str	r3, [sp, #28]
 8005c7c:	9005      	str	r0, [sp, #20]
 8005c7e:	9204      	str	r2, [sp, #16]
 8005c80:	7e0a      	ldrb	r2, [r1, #24]
 8005c82:	000c      	movs	r4, r1
 8005c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c86:	2a78      	cmp	r2, #120	; 0x78
 8005c88:	d807      	bhi.n	8005c9a <_printf_i+0x2a>
 8005c8a:	2a62      	cmp	r2, #98	; 0x62
 8005c8c:	d809      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8e:	2a00      	cmp	r2, #0
 8005c90:	d100      	bne.n	8005c94 <_printf_i+0x24>
 8005c92:	e0c1      	b.n	8005e18 <_printf_i+0x1a8>
 8005c94:	2a58      	cmp	r2, #88	; 0x58
 8005c96:	d100      	bne.n	8005c9a <_printf_i+0x2a>
 8005c98:	e08c      	b.n	8005db4 <_printf_i+0x144>
 8005c9a:	0026      	movs	r6, r4
 8005c9c:	3642      	adds	r6, #66	; 0x42
 8005c9e:	7032      	strb	r2, [r6, #0]
 8005ca0:	e022      	b.n	8005ce8 <_printf_i+0x78>
 8005ca2:	0010      	movs	r0, r2
 8005ca4:	3863      	subs	r0, #99	; 0x63
 8005ca6:	2815      	cmp	r0, #21
 8005ca8:	d8f7      	bhi.n	8005c9a <_printf_i+0x2a>
 8005caa:	f7fa fa3d 	bl	8000128 <__gnu_thumb1_case_shi>
 8005cae:	0016      	.short	0x0016
 8005cb0:	fff6001f 	.word	0xfff6001f
 8005cb4:	fff6fff6 	.word	0xfff6fff6
 8005cb8:	001ffff6 	.word	0x001ffff6
 8005cbc:	fff6fff6 	.word	0xfff6fff6
 8005cc0:	fff6fff6 	.word	0xfff6fff6
 8005cc4:	003600a8 	.word	0x003600a8
 8005cc8:	fff6009a 	.word	0xfff6009a
 8005ccc:	00b9fff6 	.word	0x00b9fff6
 8005cd0:	0036fff6 	.word	0x0036fff6
 8005cd4:	fff6fff6 	.word	0xfff6fff6
 8005cd8:	009e      	.short	0x009e
 8005cda:	0026      	movs	r6, r4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	3642      	adds	r6, #66	; 0x42
 8005ce0:	1d11      	adds	r1, r2, #4
 8005ce2:	6019      	str	r1, [r3, #0]
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	7033      	strb	r3, [r6, #0]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0a7      	b.n	8005e3c <_printf_i+0x1cc>
 8005cec:	6808      	ldr	r0, [r1, #0]
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	1d0a      	adds	r2, r1, #4
 8005cf2:	0605      	lsls	r5, r0, #24
 8005cf4:	d50b      	bpl.n	8005d0e <_printf_i+0x9e>
 8005cf6:	680d      	ldr	r5, [r1, #0]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	da03      	bge.n	8005d06 <_printf_i+0x96>
 8005cfe:	232d      	movs	r3, #45	; 0x2d
 8005d00:	9a04      	ldr	r2, [sp, #16]
 8005d02:	426d      	negs	r5, r5
 8005d04:	7013      	strb	r3, [r2, #0]
 8005d06:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <_printf_i+0x21c>)
 8005d08:	270a      	movs	r7, #10
 8005d0a:	9303      	str	r3, [sp, #12]
 8005d0c:	e01b      	b.n	8005d46 <_printf_i+0xd6>
 8005d0e:	680d      	ldr	r5, [r1, #0]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	0641      	lsls	r1, r0, #25
 8005d14:	d5f1      	bpl.n	8005cfa <_printf_i+0x8a>
 8005d16:	b22d      	sxth	r5, r5
 8005d18:	e7ef      	b.n	8005cfa <_printf_i+0x8a>
 8005d1a:	680d      	ldr	r5, [r1, #0]
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	1d08      	adds	r0, r1, #4
 8005d20:	6018      	str	r0, [r3, #0]
 8005d22:	062e      	lsls	r6, r5, #24
 8005d24:	d501      	bpl.n	8005d2a <_printf_i+0xba>
 8005d26:	680d      	ldr	r5, [r1, #0]
 8005d28:	e003      	b.n	8005d32 <_printf_i+0xc2>
 8005d2a:	066d      	lsls	r5, r5, #25
 8005d2c:	d5fb      	bpl.n	8005d26 <_printf_i+0xb6>
 8005d2e:	680d      	ldr	r5, [r1, #0]
 8005d30:	b2ad      	uxth	r5, r5
 8005d32:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <_printf_i+0x21c>)
 8005d34:	2708      	movs	r7, #8
 8005d36:	9303      	str	r3, [sp, #12]
 8005d38:	2a6f      	cmp	r2, #111	; 0x6f
 8005d3a:	d000      	beq.n	8005d3e <_printf_i+0xce>
 8005d3c:	3702      	adds	r7, #2
 8005d3e:	0023      	movs	r3, r4
 8005d40:	2200      	movs	r2, #0
 8005d42:	3343      	adds	r3, #67	; 0x43
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6863      	ldr	r3, [r4, #4]
 8005d48:	60a3      	str	r3, [r4, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	db03      	blt.n	8005d56 <_printf_i+0xe6>
 8005d4e:	2204      	movs	r2, #4
 8005d50:	6821      	ldr	r1, [r4, #0]
 8005d52:	4391      	bics	r1, r2
 8005d54:	6021      	str	r1, [r4, #0]
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	d102      	bne.n	8005d60 <_printf_i+0xf0>
 8005d5a:	9e04      	ldr	r6, [sp, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00c      	beq.n	8005d7a <_printf_i+0x10a>
 8005d60:	9e04      	ldr	r6, [sp, #16]
 8005d62:	0028      	movs	r0, r5
 8005d64:	0039      	movs	r1, r7
 8005d66:	f7fa fa6f 	bl	8000248 <__aeabi_uidivmod>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	3e01      	subs	r6, #1
 8005d6e:	5c5b      	ldrb	r3, [r3, r1]
 8005d70:	7033      	strb	r3, [r6, #0]
 8005d72:	002b      	movs	r3, r5
 8005d74:	0005      	movs	r5, r0
 8005d76:	429f      	cmp	r7, r3
 8005d78:	d9f3      	bls.n	8005d62 <_printf_i+0xf2>
 8005d7a:	2f08      	cmp	r7, #8
 8005d7c:	d109      	bne.n	8005d92 <_printf_i+0x122>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	07db      	lsls	r3, r3, #31
 8005d82:	d506      	bpl.n	8005d92 <_printf_i+0x122>
 8005d84:	6863      	ldr	r3, [r4, #4]
 8005d86:	6922      	ldr	r2, [r4, #16]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	dc02      	bgt.n	8005d92 <_printf_i+0x122>
 8005d8c:	2330      	movs	r3, #48	; 0x30
 8005d8e:	3e01      	subs	r6, #1
 8005d90:	7033      	strb	r3, [r6, #0]
 8005d92:	9b04      	ldr	r3, [sp, #16]
 8005d94:	1b9b      	subs	r3, r3, r6
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	9b07      	ldr	r3, [sp, #28]
 8005d9a:	0021      	movs	r1, r4
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	9805      	ldr	r0, [sp, #20]
 8005da0:	9b06      	ldr	r3, [sp, #24]
 8005da2:	aa09      	add	r2, sp, #36	; 0x24
 8005da4:	f7ff fef4 	bl	8005b90 <_printf_common>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d14c      	bne.n	8005e46 <_printf_i+0x1d6>
 8005dac:	2001      	movs	r0, #1
 8005dae:	4240      	negs	r0, r0
 8005db0:	b00b      	add	sp, #44	; 0x2c
 8005db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db4:	3145      	adds	r1, #69	; 0x45
 8005db6:	700a      	strb	r2, [r1, #0]
 8005db8:	4a34      	ldr	r2, [pc, #208]	; (8005e8c <_printf_i+0x21c>)
 8005dba:	9203      	str	r2, [sp, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	6821      	ldr	r1, [r4, #0]
 8005dc0:	ca20      	ldmia	r2!, {r5}
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	0608      	lsls	r0, r1, #24
 8005dc6:	d516      	bpl.n	8005df6 <_printf_i+0x186>
 8005dc8:	07cb      	lsls	r3, r1, #31
 8005dca:	d502      	bpl.n	8005dd2 <_printf_i+0x162>
 8005dcc:	2320      	movs	r3, #32
 8005dce:	4319      	orrs	r1, r3
 8005dd0:	6021      	str	r1, [r4, #0]
 8005dd2:	2710      	movs	r7, #16
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d1b2      	bne.n	8005d3e <_printf_i+0xce>
 8005dd8:	2320      	movs	r3, #32
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	439a      	bics	r2, r3
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	e7ad      	b.n	8005d3e <_printf_i+0xce>
 8005de2:	2220      	movs	r2, #32
 8005de4:	6809      	ldr	r1, [r1, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	6022      	str	r2, [r4, #0]
 8005dea:	0022      	movs	r2, r4
 8005dec:	2178      	movs	r1, #120	; 0x78
 8005dee:	3245      	adds	r2, #69	; 0x45
 8005df0:	7011      	strb	r1, [r2, #0]
 8005df2:	4a27      	ldr	r2, [pc, #156]	; (8005e90 <_printf_i+0x220>)
 8005df4:	e7e1      	b.n	8005dba <_printf_i+0x14a>
 8005df6:	0648      	lsls	r0, r1, #25
 8005df8:	d5e6      	bpl.n	8005dc8 <_printf_i+0x158>
 8005dfa:	b2ad      	uxth	r5, r5
 8005dfc:	e7e4      	b.n	8005dc8 <_printf_i+0x158>
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	680d      	ldr	r5, [r1, #0]
 8005e02:	1d10      	adds	r0, r2, #4
 8005e04:	6949      	ldr	r1, [r1, #20]
 8005e06:	6018      	str	r0, [r3, #0]
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	062e      	lsls	r6, r5, #24
 8005e0c:	d501      	bpl.n	8005e12 <_printf_i+0x1a2>
 8005e0e:	6019      	str	r1, [r3, #0]
 8005e10:	e002      	b.n	8005e18 <_printf_i+0x1a8>
 8005e12:	066d      	lsls	r5, r5, #25
 8005e14:	d5fb      	bpl.n	8005e0e <_printf_i+0x19e>
 8005e16:	8019      	strh	r1, [r3, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9e04      	ldr	r6, [sp, #16]
 8005e1c:	6123      	str	r3, [r4, #16]
 8005e1e:	e7bb      	b.n	8005d98 <_printf_i+0x128>
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	1d11      	adds	r1, r2, #4
 8005e24:	6019      	str	r1, [r3, #0]
 8005e26:	6816      	ldr	r6, [r2, #0]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	0030      	movs	r0, r6
 8005e2c:	6862      	ldr	r2, [r4, #4]
 8005e2e:	f002 fb5d 	bl	80084ec <memchr>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d001      	beq.n	8005e3a <_printf_i+0x1ca>
 8005e36:	1b80      	subs	r0, r0, r6
 8005e38:	6060      	str	r0, [r4, #4]
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	6123      	str	r3, [r4, #16]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9a04      	ldr	r2, [sp, #16]
 8005e42:	7013      	strb	r3, [r2, #0]
 8005e44:	e7a8      	b.n	8005d98 <_printf_i+0x128>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	0032      	movs	r2, r6
 8005e4a:	9906      	ldr	r1, [sp, #24]
 8005e4c:	9805      	ldr	r0, [sp, #20]
 8005e4e:	9d07      	ldr	r5, [sp, #28]
 8005e50:	47a8      	blx	r5
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d0aa      	beq.n	8005dac <_printf_i+0x13c>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	079b      	lsls	r3, r3, #30
 8005e5a:	d415      	bmi.n	8005e88 <_printf_i+0x218>
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	68e0      	ldr	r0, [r4, #12]
 8005e60:	4298      	cmp	r0, r3
 8005e62:	daa5      	bge.n	8005db0 <_printf_i+0x140>
 8005e64:	0018      	movs	r0, r3
 8005e66:	e7a3      	b.n	8005db0 <_printf_i+0x140>
 8005e68:	0022      	movs	r2, r4
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	9906      	ldr	r1, [sp, #24]
 8005e6e:	9805      	ldr	r0, [sp, #20]
 8005e70:	9e07      	ldr	r6, [sp, #28]
 8005e72:	3219      	adds	r2, #25
 8005e74:	47b0      	blx	r6
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	d098      	beq.n	8005dac <_printf_i+0x13c>
 8005e7a:	3501      	adds	r5, #1
 8005e7c:	68e3      	ldr	r3, [r4, #12]
 8005e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	42ab      	cmp	r3, r5
 8005e84:	dcf0      	bgt.n	8005e68 <_printf_i+0x1f8>
 8005e86:	e7e9      	b.n	8005e5c <_printf_i+0x1ec>
 8005e88:	2500      	movs	r5, #0
 8005e8a:	e7f7      	b.n	8005e7c <_printf_i+0x20c>
 8005e8c:	0800a172 	.word	0x0800a172
 8005e90:	0800a183 	.word	0x0800a183

08005e94 <_scanf_float>:
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b08b      	sub	sp, #44	; 0x2c
 8005e98:	0015      	movs	r5, r2
 8005e9a:	9001      	str	r0, [sp, #4]
 8005e9c:	22ae      	movs	r2, #174	; 0xae
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	9306      	str	r3, [sp, #24]
 8005ea2:	688b      	ldr	r3, [r1, #8]
 8005ea4:	000e      	movs	r6, r1
 8005ea6:	1e59      	subs	r1, r3, #1
 8005ea8:	0052      	lsls	r2, r2, #1
 8005eaa:	9005      	str	r0, [sp, #20]
 8005eac:	4291      	cmp	r1, r2
 8005eae:	d905      	bls.n	8005ebc <_scanf_float+0x28>
 8005eb0:	3b5e      	subs	r3, #94	; 0x5e
 8005eb2:	3bff      	subs	r3, #255	; 0xff
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	235e      	movs	r3, #94	; 0x5e
 8005eb8:	33ff      	adds	r3, #255	; 0xff
 8005eba:	60b3      	str	r3, [r6, #8]
 8005ebc:	23f0      	movs	r3, #240	; 0xf0
 8005ebe:	6832      	ldr	r2, [r6, #0]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	6033      	str	r3, [r6, #0]
 8005ec6:	0033      	movs	r3, r6
 8005ec8:	2400      	movs	r4, #0
 8005eca:	331c      	adds	r3, #28
 8005ecc:	001f      	movs	r7, r3
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	9402      	str	r4, [sp, #8]
 8005ed2:	9408      	str	r4, [sp, #32]
 8005ed4:	9407      	str	r4, [sp, #28]
 8005ed6:	9400      	str	r4, [sp, #0]
 8005ed8:	9404      	str	r4, [sp, #16]
 8005eda:	68b2      	ldr	r2, [r6, #8]
 8005edc:	2a00      	cmp	r2, #0
 8005ede:	d00a      	beq.n	8005ef6 <_scanf_float+0x62>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b4e      	cmp	r3, #78	; 0x4e
 8005ee6:	d844      	bhi.n	8005f72 <_scanf_float+0xde>
 8005ee8:	0018      	movs	r0, r3
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d82c      	bhi.n	8005f48 <_scanf_float+0xb4>
 8005eee:	382b      	subs	r0, #43	; 0x2b
 8005ef0:	b2c1      	uxtb	r1, r0
 8005ef2:	290e      	cmp	r1, #14
 8005ef4:	d92a      	bls.n	8005f4c <_scanf_float+0xb8>
 8005ef6:	9b00      	ldr	r3, [sp, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <_scanf_float+0x70>
 8005efc:	6832      	ldr	r2, [r6, #0]
 8005efe:	4ba4      	ldr	r3, [pc, #656]	; (8006190 <_scanf_float+0x2fc>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	6033      	str	r3, [r6, #0]
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d900      	bls.n	8005f0e <_scanf_float+0x7a>
 8005f0c:	e0f9      	b.n	8006102 <_scanf_float+0x26e>
 8005f0e:	24be      	movs	r4, #190	; 0xbe
 8005f10:	0064      	lsls	r4, r4, #1
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	429f      	cmp	r7, r3
 8005f16:	d900      	bls.n	8005f1a <_scanf_float+0x86>
 8005f18:	e0e9      	b.n	80060ee <_scanf_float+0x25a>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	9302      	str	r3, [sp, #8]
 8005f1e:	e185      	b.n	800622c <_scanf_float+0x398>
 8005f20:	0018      	movs	r0, r3
 8005f22:	3861      	subs	r0, #97	; 0x61
 8005f24:	280d      	cmp	r0, #13
 8005f26:	d8e6      	bhi.n	8005ef6 <_scanf_float+0x62>
 8005f28:	f7fa f8fe 	bl	8000128 <__gnu_thumb1_case_shi>
 8005f2c:	ffe50083 	.word	0xffe50083
 8005f30:	ffe5ffe5 	.word	0xffe5ffe5
 8005f34:	00a200b6 	.word	0x00a200b6
 8005f38:	ffe5ffe5 	.word	0xffe5ffe5
 8005f3c:	ffe50089 	.word	0xffe50089
 8005f40:	ffe5ffe5 	.word	0xffe5ffe5
 8005f44:	0065ffe5 	.word	0x0065ffe5
 8005f48:	3841      	subs	r0, #65	; 0x41
 8005f4a:	e7eb      	b.n	8005f24 <_scanf_float+0x90>
 8005f4c:	280e      	cmp	r0, #14
 8005f4e:	d8d2      	bhi.n	8005ef6 <_scanf_float+0x62>
 8005f50:	f7fa f8ea 	bl	8000128 <__gnu_thumb1_case_shi>
 8005f54:	ffd1004b 	.word	0xffd1004b
 8005f58:	0098004b 	.word	0x0098004b
 8005f5c:	0020ffd1 	.word	0x0020ffd1
 8005f60:	00400040 	.word	0x00400040
 8005f64:	00400040 	.word	0x00400040
 8005f68:	00400040 	.word	0x00400040
 8005f6c:	00400040 	.word	0x00400040
 8005f70:	0040      	.short	0x0040
 8005f72:	2b6e      	cmp	r3, #110	; 0x6e
 8005f74:	d809      	bhi.n	8005f8a <_scanf_float+0xf6>
 8005f76:	2b60      	cmp	r3, #96	; 0x60
 8005f78:	d8d2      	bhi.n	8005f20 <_scanf_float+0x8c>
 8005f7a:	2b54      	cmp	r3, #84	; 0x54
 8005f7c:	d07d      	beq.n	800607a <_scanf_float+0x1e6>
 8005f7e:	2b59      	cmp	r3, #89	; 0x59
 8005f80:	d1b9      	bne.n	8005ef6 <_scanf_float+0x62>
 8005f82:	2c07      	cmp	r4, #7
 8005f84:	d1b7      	bne.n	8005ef6 <_scanf_float+0x62>
 8005f86:	2408      	movs	r4, #8
 8005f88:	e02c      	b.n	8005fe4 <_scanf_float+0x150>
 8005f8a:	2b74      	cmp	r3, #116	; 0x74
 8005f8c:	d075      	beq.n	800607a <_scanf_float+0x1e6>
 8005f8e:	2b79      	cmp	r3, #121	; 0x79
 8005f90:	d0f7      	beq.n	8005f82 <_scanf_float+0xee>
 8005f92:	e7b0      	b.n	8005ef6 <_scanf_float+0x62>
 8005f94:	6831      	ldr	r1, [r6, #0]
 8005f96:	05c8      	lsls	r0, r1, #23
 8005f98:	d51c      	bpl.n	8005fd4 <_scanf_float+0x140>
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	4399      	bics	r1, r3
 8005f9e:	9b00      	ldr	r3, [sp, #0]
 8005fa0:	6031      	str	r1, [r6, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	9b05      	ldr	r3, [sp, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <_scanf_float+0x120>
 8005fac:	3b01      	subs	r3, #1
 8005fae:	3201      	adds	r2, #1
 8005fb0:	9305      	str	r3, [sp, #20]
 8005fb2:	60b2      	str	r2, [r6, #8]
 8005fb4:	68b3      	ldr	r3, [r6, #8]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	60b3      	str	r3, [r6, #8]
 8005fba:	6933      	ldr	r3, [r6, #16]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	6133      	str	r3, [r6, #16]
 8005fc0:	686b      	ldr	r3, [r5, #4]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	606b      	str	r3, [r5, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dc00      	bgt.n	8005fcc <_scanf_float+0x138>
 8005fca:	e086      	b.n	80060da <_scanf_float+0x246>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	602b      	str	r3, [r5, #0]
 8005fd2:	e782      	b.n	8005eda <_scanf_float+0x46>
 8005fd4:	9a02      	ldr	r2, [sp, #8]
 8005fd6:	1912      	adds	r2, r2, r4
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d18c      	bne.n	8005ef6 <_scanf_float+0x62>
 8005fdc:	4a6d      	ldr	r2, [pc, #436]	; (8006194 <_scanf_float+0x300>)
 8005fde:	6831      	ldr	r1, [r6, #0]
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	6032      	str	r2, [r6, #0]
 8005fe4:	703b      	strb	r3, [r7, #0]
 8005fe6:	3701      	adds	r7, #1
 8005fe8:	e7e4      	b.n	8005fb4 <_scanf_float+0x120>
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	6832      	ldr	r2, [r6, #0]
 8005fee:	420a      	tst	r2, r1
 8005ff0:	d081      	beq.n	8005ef6 <_scanf_float+0x62>
 8005ff2:	438a      	bics	r2, r1
 8005ff4:	e7f5      	b.n	8005fe2 <_scanf_float+0x14e>
 8005ff6:	9a02      	ldr	r2, [sp, #8]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d10f      	bne.n	800601c <_scanf_float+0x188>
 8005ffc:	9a00      	ldr	r2, [sp, #0]
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	d10f      	bne.n	8006022 <_scanf_float+0x18e>
 8006002:	6832      	ldr	r2, [r6, #0]
 8006004:	21e0      	movs	r1, #224	; 0xe0
 8006006:	0010      	movs	r0, r2
 8006008:	00c9      	lsls	r1, r1, #3
 800600a:	4008      	ands	r0, r1
 800600c:	4288      	cmp	r0, r1
 800600e:	d108      	bne.n	8006022 <_scanf_float+0x18e>
 8006010:	4961      	ldr	r1, [pc, #388]	; (8006198 <_scanf_float+0x304>)
 8006012:	400a      	ands	r2, r1
 8006014:	6032      	str	r2, [r6, #0]
 8006016:	2201      	movs	r2, #1
 8006018:	9202      	str	r2, [sp, #8]
 800601a:	e7e3      	b.n	8005fe4 <_scanf_float+0x150>
 800601c:	9a02      	ldr	r2, [sp, #8]
 800601e:	2a02      	cmp	r2, #2
 8006020:	d059      	beq.n	80060d6 <_scanf_float+0x242>
 8006022:	2c01      	cmp	r4, #1
 8006024:	d002      	beq.n	800602c <_scanf_float+0x198>
 8006026:	2c04      	cmp	r4, #4
 8006028:	d000      	beq.n	800602c <_scanf_float+0x198>
 800602a:	e764      	b.n	8005ef6 <_scanf_float+0x62>
 800602c:	3401      	adds	r4, #1
 800602e:	b2e4      	uxtb	r4, r4
 8006030:	e7d8      	b.n	8005fe4 <_scanf_float+0x150>
 8006032:	9a02      	ldr	r2, [sp, #8]
 8006034:	2a01      	cmp	r2, #1
 8006036:	d000      	beq.n	800603a <_scanf_float+0x1a6>
 8006038:	e75d      	b.n	8005ef6 <_scanf_float+0x62>
 800603a:	2202      	movs	r2, #2
 800603c:	e7ec      	b.n	8006018 <_scanf_float+0x184>
 800603e:	2c00      	cmp	r4, #0
 8006040:	d110      	bne.n	8006064 <_scanf_float+0x1d0>
 8006042:	9a00      	ldr	r2, [sp, #0]
 8006044:	2a00      	cmp	r2, #0
 8006046:	d000      	beq.n	800604a <_scanf_float+0x1b6>
 8006048:	e758      	b.n	8005efc <_scanf_float+0x68>
 800604a:	6832      	ldr	r2, [r6, #0]
 800604c:	21e0      	movs	r1, #224	; 0xe0
 800604e:	0010      	movs	r0, r2
 8006050:	00c9      	lsls	r1, r1, #3
 8006052:	4008      	ands	r0, r1
 8006054:	4288      	cmp	r0, r1
 8006056:	d000      	beq.n	800605a <_scanf_float+0x1c6>
 8006058:	e754      	b.n	8005f04 <_scanf_float+0x70>
 800605a:	494f      	ldr	r1, [pc, #316]	; (8006198 <_scanf_float+0x304>)
 800605c:	3401      	adds	r4, #1
 800605e:	400a      	ands	r2, r1
 8006060:	6032      	str	r2, [r6, #0]
 8006062:	e7bf      	b.n	8005fe4 <_scanf_float+0x150>
 8006064:	21fd      	movs	r1, #253	; 0xfd
 8006066:	1ee2      	subs	r2, r4, #3
 8006068:	420a      	tst	r2, r1
 800606a:	d000      	beq.n	800606e <_scanf_float+0x1da>
 800606c:	e743      	b.n	8005ef6 <_scanf_float+0x62>
 800606e:	e7dd      	b.n	800602c <_scanf_float+0x198>
 8006070:	2c02      	cmp	r4, #2
 8006072:	d000      	beq.n	8006076 <_scanf_float+0x1e2>
 8006074:	e73f      	b.n	8005ef6 <_scanf_float+0x62>
 8006076:	2403      	movs	r4, #3
 8006078:	e7b4      	b.n	8005fe4 <_scanf_float+0x150>
 800607a:	2c06      	cmp	r4, #6
 800607c:	d000      	beq.n	8006080 <_scanf_float+0x1ec>
 800607e:	e73a      	b.n	8005ef6 <_scanf_float+0x62>
 8006080:	2407      	movs	r4, #7
 8006082:	e7af      	b.n	8005fe4 <_scanf_float+0x150>
 8006084:	6832      	ldr	r2, [r6, #0]
 8006086:	0591      	lsls	r1, r2, #22
 8006088:	d400      	bmi.n	800608c <_scanf_float+0x1f8>
 800608a:	e734      	b.n	8005ef6 <_scanf_float+0x62>
 800608c:	4943      	ldr	r1, [pc, #268]	; (800619c <_scanf_float+0x308>)
 800608e:	400a      	ands	r2, r1
 8006090:	6032      	str	r2, [r6, #0]
 8006092:	9a00      	ldr	r2, [sp, #0]
 8006094:	9204      	str	r2, [sp, #16]
 8006096:	e7a5      	b.n	8005fe4 <_scanf_float+0x150>
 8006098:	21a0      	movs	r1, #160	; 0xa0
 800609a:	2080      	movs	r0, #128	; 0x80
 800609c:	6832      	ldr	r2, [r6, #0]
 800609e:	00c9      	lsls	r1, r1, #3
 80060a0:	4011      	ands	r1, r2
 80060a2:	00c0      	lsls	r0, r0, #3
 80060a4:	4281      	cmp	r1, r0
 80060a6:	d006      	beq.n	80060b6 <_scanf_float+0x222>
 80060a8:	4202      	tst	r2, r0
 80060aa:	d100      	bne.n	80060ae <_scanf_float+0x21a>
 80060ac:	e723      	b.n	8005ef6 <_scanf_float+0x62>
 80060ae:	9900      	ldr	r1, [sp, #0]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d100      	bne.n	80060b6 <_scanf_float+0x222>
 80060b4:	e726      	b.n	8005f04 <_scanf_float+0x70>
 80060b6:	0591      	lsls	r1, r2, #22
 80060b8:	d404      	bmi.n	80060c4 <_scanf_float+0x230>
 80060ba:	9900      	ldr	r1, [sp, #0]
 80060bc:	9804      	ldr	r0, [sp, #16]
 80060be:	9708      	str	r7, [sp, #32]
 80060c0:	1a09      	subs	r1, r1, r0
 80060c2:	9107      	str	r1, [sp, #28]
 80060c4:	4934      	ldr	r1, [pc, #208]	; (8006198 <_scanf_float+0x304>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	21c0      	movs	r1, #192	; 0xc0
 80060ca:	0049      	lsls	r1, r1, #1
 80060cc:	430a      	orrs	r2, r1
 80060ce:	6032      	str	r2, [r6, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	9200      	str	r2, [sp, #0]
 80060d4:	e786      	b.n	8005fe4 <_scanf_float+0x150>
 80060d6:	2203      	movs	r2, #3
 80060d8:	e79e      	b.n	8006018 <_scanf_float+0x184>
 80060da:	23c0      	movs	r3, #192	; 0xc0
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	0029      	movs	r1, r5
 80060e0:	58f3      	ldr	r3, [r6, r3]
 80060e2:	9801      	ldr	r0, [sp, #4]
 80060e4:	4798      	blx	r3
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d100      	bne.n	80060ec <_scanf_float+0x258>
 80060ea:	e6f6      	b.n	8005eda <_scanf_float+0x46>
 80060ec:	e703      	b.n	8005ef6 <_scanf_float+0x62>
 80060ee:	3f01      	subs	r7, #1
 80060f0:	5933      	ldr	r3, [r6, r4]
 80060f2:	002a      	movs	r2, r5
 80060f4:	7839      	ldrb	r1, [r7, #0]
 80060f6:	9801      	ldr	r0, [sp, #4]
 80060f8:	4798      	blx	r3
 80060fa:	6933      	ldr	r3, [r6, #16]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	6133      	str	r3, [r6, #16]
 8006100:	e707      	b.n	8005f12 <_scanf_float+0x7e>
 8006102:	1e63      	subs	r3, r4, #1
 8006104:	2b06      	cmp	r3, #6
 8006106:	d80e      	bhi.n	8006126 <_scanf_float+0x292>
 8006108:	9702      	str	r7, [sp, #8]
 800610a:	2c02      	cmp	r4, #2
 800610c:	d920      	bls.n	8006150 <_scanf_float+0x2bc>
 800610e:	1be3      	subs	r3, r4, r7
 8006110:	b2db      	uxtb	r3, r3
 8006112:	9305      	str	r3, [sp, #20]
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	9a05      	ldr	r2, [sp, #20]
 8006118:	189b      	adds	r3, r3, r2
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b03      	cmp	r3, #3
 800611e:	d827      	bhi.n	8006170 <_scanf_float+0x2dc>
 8006120:	3c03      	subs	r4, #3
 8006122:	b2e4      	uxtb	r4, r4
 8006124:	1b3f      	subs	r7, r7, r4
 8006126:	6833      	ldr	r3, [r6, #0]
 8006128:	05da      	lsls	r2, r3, #23
 800612a:	d554      	bpl.n	80061d6 <_scanf_float+0x342>
 800612c:	055b      	lsls	r3, r3, #21
 800612e:	d537      	bpl.n	80061a0 <_scanf_float+0x30c>
 8006130:	24be      	movs	r4, #190	; 0xbe
 8006132:	0064      	lsls	r4, r4, #1
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	429f      	cmp	r7, r3
 8006138:	d800      	bhi.n	800613c <_scanf_float+0x2a8>
 800613a:	e6ee      	b.n	8005f1a <_scanf_float+0x86>
 800613c:	3f01      	subs	r7, #1
 800613e:	5933      	ldr	r3, [r6, r4]
 8006140:	002a      	movs	r2, r5
 8006142:	7839      	ldrb	r1, [r7, #0]
 8006144:	9801      	ldr	r0, [sp, #4]
 8006146:	4798      	blx	r3
 8006148:	6933      	ldr	r3, [r6, #16]
 800614a:	3b01      	subs	r3, #1
 800614c:	6133      	str	r3, [r6, #16]
 800614e:	e7f1      	b.n	8006134 <_scanf_float+0x2a0>
 8006150:	24be      	movs	r4, #190	; 0xbe
 8006152:	0064      	lsls	r4, r4, #1
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	429f      	cmp	r7, r3
 8006158:	d800      	bhi.n	800615c <_scanf_float+0x2c8>
 800615a:	e6de      	b.n	8005f1a <_scanf_float+0x86>
 800615c:	3f01      	subs	r7, #1
 800615e:	5933      	ldr	r3, [r6, r4]
 8006160:	002a      	movs	r2, r5
 8006162:	7839      	ldrb	r1, [r7, #0]
 8006164:	9801      	ldr	r0, [sp, #4]
 8006166:	4798      	blx	r3
 8006168:	6933      	ldr	r3, [r6, #16]
 800616a:	3b01      	subs	r3, #1
 800616c:	6133      	str	r3, [r6, #16]
 800616e:	e7f1      	b.n	8006154 <_scanf_float+0x2c0>
 8006170:	9b02      	ldr	r3, [sp, #8]
 8006172:	002a      	movs	r2, r5
 8006174:	3b01      	subs	r3, #1
 8006176:	7819      	ldrb	r1, [r3, #0]
 8006178:	9302      	str	r3, [sp, #8]
 800617a:	23be      	movs	r3, #190	; 0xbe
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	58f3      	ldr	r3, [r6, r3]
 8006180:	9801      	ldr	r0, [sp, #4]
 8006182:	9309      	str	r3, [sp, #36]	; 0x24
 8006184:	4798      	blx	r3
 8006186:	6933      	ldr	r3, [r6, #16]
 8006188:	3b01      	subs	r3, #1
 800618a:	6133      	str	r3, [r6, #16]
 800618c:	e7c2      	b.n	8006114 <_scanf_float+0x280>
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	fffffeff 	.word	0xfffffeff
 8006194:	fffffe7f 	.word	0xfffffe7f
 8006198:	fffff87f 	.word	0xfffff87f
 800619c:	fffffd7f 	.word	0xfffffd7f
 80061a0:	6933      	ldr	r3, [r6, #16]
 80061a2:	1e7c      	subs	r4, r7, #1
 80061a4:	7821      	ldrb	r1, [r4, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	6133      	str	r3, [r6, #16]
 80061aa:	2965      	cmp	r1, #101	; 0x65
 80061ac:	d00c      	beq.n	80061c8 <_scanf_float+0x334>
 80061ae:	2945      	cmp	r1, #69	; 0x45
 80061b0:	d00a      	beq.n	80061c8 <_scanf_float+0x334>
 80061b2:	23be      	movs	r3, #190	; 0xbe
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	58f3      	ldr	r3, [r6, r3]
 80061b8:	002a      	movs	r2, r5
 80061ba:	9801      	ldr	r0, [sp, #4]
 80061bc:	4798      	blx	r3
 80061be:	6933      	ldr	r3, [r6, #16]
 80061c0:	1ebc      	subs	r4, r7, #2
 80061c2:	3b01      	subs	r3, #1
 80061c4:	7821      	ldrb	r1, [r4, #0]
 80061c6:	6133      	str	r3, [r6, #16]
 80061c8:	23be      	movs	r3, #190	; 0xbe
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	002a      	movs	r2, r5
 80061ce:	58f3      	ldr	r3, [r6, r3]
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	4798      	blx	r3
 80061d4:	0027      	movs	r7, r4
 80061d6:	6832      	ldr	r2, [r6, #0]
 80061d8:	2310      	movs	r3, #16
 80061da:	0011      	movs	r1, r2
 80061dc:	4019      	ands	r1, r3
 80061de:	9102      	str	r1, [sp, #8]
 80061e0:	421a      	tst	r2, r3
 80061e2:	d158      	bne.n	8006296 <_scanf_float+0x402>
 80061e4:	23c0      	movs	r3, #192	; 0xc0
 80061e6:	7039      	strb	r1, [r7, #0]
 80061e8:	6832      	ldr	r2, [r6, #0]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4013      	ands	r3, r2
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	00d2      	lsls	r2, r2, #3
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d11d      	bne.n	8006232 <_scanf_float+0x39e>
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	9a00      	ldr	r2, [sp, #0]
 80061fa:	9900      	ldr	r1, [sp, #0]
 80061fc:	1a9a      	subs	r2, r3, r2
 80061fe:	428b      	cmp	r3, r1
 8006200:	d124      	bne.n	800624c <_scanf_float+0x3b8>
 8006202:	2200      	movs	r2, #0
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	9801      	ldr	r0, [sp, #4]
 8006208:	f000 fe9c 	bl	8006f44 <_strtod_r>
 800620c:	9b06      	ldr	r3, [sp, #24]
 800620e:	000d      	movs	r5, r1
 8006210:	6831      	ldr	r1, [r6, #0]
 8006212:	0004      	movs	r4, r0
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	078a      	lsls	r2, r1, #30
 8006218:	d525      	bpl.n	8006266 <_scanf_float+0x3d2>
 800621a:	1d1a      	adds	r2, r3, #4
 800621c:	9906      	ldr	r1, [sp, #24]
 800621e:	600a      	str	r2, [r1, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	601c      	str	r4, [r3, #0]
 8006224:	605d      	str	r5, [r3, #4]
 8006226:	68f3      	ldr	r3, [r6, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60f3      	str	r3, [r6, #12]
 800622c:	9802      	ldr	r0, [sp, #8]
 800622e:	b00b      	add	sp, #44	; 0x2c
 8006230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006232:	9b07      	ldr	r3, [sp, #28]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0e4      	beq.n	8006202 <_scanf_float+0x36e>
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	9a02      	ldr	r2, [sp, #8]
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	9801      	ldr	r0, [sp, #4]
 8006240:	230a      	movs	r3, #10
 8006242:	f000 ff15 	bl	8007070 <_strtol_r>
 8006246:	9b07      	ldr	r3, [sp, #28]
 8006248:	9f08      	ldr	r7, [sp, #32]
 800624a:	1ac2      	subs	r2, r0, r3
 800624c:	0033      	movs	r3, r6
 800624e:	3370      	adds	r3, #112	; 0x70
 8006250:	33ff      	adds	r3, #255	; 0xff
 8006252:	429f      	cmp	r7, r3
 8006254:	d302      	bcc.n	800625c <_scanf_float+0x3c8>
 8006256:	0037      	movs	r7, r6
 8006258:	376f      	adds	r7, #111	; 0x6f
 800625a:	37ff      	adds	r7, #255	; 0xff
 800625c:	0038      	movs	r0, r7
 800625e:	490f      	ldr	r1, [pc, #60]	; (800629c <_scanf_float+0x408>)
 8006260:	f000 f824 	bl	80062ac <siprintf>
 8006264:	e7cd      	b.n	8006202 <_scanf_float+0x36e>
 8006266:	1d1a      	adds	r2, r3, #4
 8006268:	0749      	lsls	r1, r1, #29
 800626a:	d4d7      	bmi.n	800621c <_scanf_float+0x388>
 800626c:	9906      	ldr	r1, [sp, #24]
 800626e:	0020      	movs	r0, r4
 8006270:	600a      	str	r2, [r1, #0]
 8006272:	681f      	ldr	r7, [r3, #0]
 8006274:	0022      	movs	r2, r4
 8006276:	002b      	movs	r3, r5
 8006278:	0029      	movs	r1, r5
 800627a:	f7fb ffab 	bl	80021d4 <__aeabi_dcmpun>
 800627e:	2800      	cmp	r0, #0
 8006280:	d004      	beq.n	800628c <_scanf_float+0x3f8>
 8006282:	4807      	ldr	r0, [pc, #28]	; (80062a0 <_scanf_float+0x40c>)
 8006284:	f000 f80e 	bl	80062a4 <nanf>
 8006288:	6038      	str	r0, [r7, #0]
 800628a:	e7cc      	b.n	8006226 <_scanf_float+0x392>
 800628c:	0020      	movs	r0, r4
 800628e:	0029      	movs	r1, r5
 8006290:	f7fc f892 	bl	80023b8 <__aeabi_d2f>
 8006294:	e7f8      	b.n	8006288 <_scanf_float+0x3f4>
 8006296:	2300      	movs	r3, #0
 8006298:	e640      	b.n	8005f1c <_scanf_float+0x88>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	0800a194 	.word	0x0800a194
 80062a0:	0800a5a0 	.word	0x0800a5a0

080062a4 <nanf>:
 80062a4:	4800      	ldr	r0, [pc, #0]	; (80062a8 <nanf+0x4>)
 80062a6:	4770      	bx	lr
 80062a8:	7fc00000 	.word	0x7fc00000

080062ac <siprintf>:
 80062ac:	b40e      	push	{r1, r2, r3}
 80062ae:	b500      	push	{lr}
 80062b0:	490b      	ldr	r1, [pc, #44]	; (80062e0 <siprintf+0x34>)
 80062b2:	b09c      	sub	sp, #112	; 0x70
 80062b4:	ab1d      	add	r3, sp, #116	; 0x74
 80062b6:	9002      	str	r0, [sp, #8]
 80062b8:	9006      	str	r0, [sp, #24]
 80062ba:	9107      	str	r1, [sp, #28]
 80062bc:	9104      	str	r1, [sp, #16]
 80062be:	4809      	ldr	r0, [pc, #36]	; (80062e4 <siprintf+0x38>)
 80062c0:	4909      	ldr	r1, [pc, #36]	; (80062e8 <siprintf+0x3c>)
 80062c2:	cb04      	ldmia	r3!, {r2}
 80062c4:	9105      	str	r1, [sp, #20]
 80062c6:	6800      	ldr	r0, [r0, #0]
 80062c8:	a902      	add	r1, sp, #8
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	f002 ff5c 	bl	8009188 <_svfiprintf_r>
 80062d0:	2300      	movs	r3, #0
 80062d2:	9a02      	ldr	r2, [sp, #8]
 80062d4:	7013      	strb	r3, [r2, #0]
 80062d6:	b01c      	add	sp, #112	; 0x70
 80062d8:	bc08      	pop	{r3}
 80062da:	b003      	add	sp, #12
 80062dc:	4718      	bx	r3
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	7fffffff 	.word	0x7fffffff
 80062e4:	2000000c 	.word	0x2000000c
 80062e8:	ffff0208 	.word	0xffff0208

080062ec <sulp>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	0016      	movs	r6, r2
 80062f0:	000d      	movs	r5, r1
 80062f2:	f002 fc93 	bl	8008c1c <__ulp>
 80062f6:	2e00      	cmp	r6, #0
 80062f8:	d00d      	beq.n	8006316 <sulp+0x2a>
 80062fa:	236b      	movs	r3, #107	; 0x6b
 80062fc:	006a      	lsls	r2, r5, #1
 80062fe:	0d52      	lsrs	r2, r2, #21
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd07      	ble.n	8006316 <sulp+0x2a>
 8006306:	2400      	movs	r4, #0
 8006308:	4a03      	ldr	r2, [pc, #12]	; (8006318 <sulp+0x2c>)
 800630a:	051b      	lsls	r3, r3, #20
 800630c:	189d      	adds	r5, r3, r2
 800630e:	002b      	movs	r3, r5
 8006310:	0022      	movs	r2, r4
 8006312:	f7fb f961 	bl	80015d8 <__aeabi_dmul>
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	3ff00000 	.word	0x3ff00000

0800631c <_strtod_l>:
 800631c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631e:	001d      	movs	r5, r3
 8006320:	2300      	movs	r3, #0
 8006322:	b0a5      	sub	sp, #148	; 0x94
 8006324:	9320      	str	r3, [sp, #128]	; 0x80
 8006326:	4bac      	ldr	r3, [pc, #688]	; (80065d8 <_strtod_l+0x2bc>)
 8006328:	9005      	str	r0, [sp, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	9108      	str	r1, [sp, #32]
 800632e:	0018      	movs	r0, r3
 8006330:	9307      	str	r3, [sp, #28]
 8006332:	921b      	str	r2, [sp, #108]	; 0x6c
 8006334:	f7f9 fee6 	bl	8000104 <strlen>
 8006338:	2600      	movs	r6, #0
 800633a:	0004      	movs	r4, r0
 800633c:	2700      	movs	r7, #0
 800633e:	9b08      	ldr	r3, [sp, #32]
 8006340:	931f      	str	r3, [sp, #124]	; 0x7c
 8006342:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006344:	7813      	ldrb	r3, [r2, #0]
 8006346:	2b2b      	cmp	r3, #43	; 0x2b
 8006348:	d058      	beq.n	80063fc <_strtod_l+0xe0>
 800634a:	d844      	bhi.n	80063d6 <_strtod_l+0xba>
 800634c:	2b0d      	cmp	r3, #13
 800634e:	d83d      	bhi.n	80063cc <_strtod_l+0xb0>
 8006350:	2b08      	cmp	r3, #8
 8006352:	d83d      	bhi.n	80063d0 <_strtod_l+0xb4>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d047      	beq.n	80063e8 <_strtod_l+0xcc>
 8006358:	2300      	movs	r3, #0
 800635a:	930e      	str	r3, [sp, #56]	; 0x38
 800635c:	2200      	movs	r2, #0
 800635e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006360:	920a      	str	r2, [sp, #40]	; 0x28
 8006362:	9306      	str	r3, [sp, #24]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b30      	cmp	r3, #48	; 0x30
 8006368:	d000      	beq.n	800636c <_strtod_l+0x50>
 800636a:	e07f      	b.n	800646c <_strtod_l+0x150>
 800636c:	9b06      	ldr	r3, [sp, #24]
 800636e:	3220      	adds	r2, #32
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	4393      	bics	r3, r2
 8006374:	2b58      	cmp	r3, #88	; 0x58
 8006376:	d000      	beq.n	800637a <_strtod_l+0x5e>
 8006378:	e06e      	b.n	8006458 <_strtod_l+0x13c>
 800637a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800637c:	9502      	str	r5, [sp, #8]
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	ab20      	add	r3, sp, #128	; 0x80
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4a95      	ldr	r2, [pc, #596]	; (80065dc <_strtod_l+0x2c0>)
 8006386:	ab21      	add	r3, sp, #132	; 0x84
 8006388:	9805      	ldr	r0, [sp, #20]
 800638a:	a91f      	add	r1, sp, #124	; 0x7c
 800638c:	f001 fd84 	bl	8007e98 <__gethex>
 8006390:	2307      	movs	r3, #7
 8006392:	0005      	movs	r5, r0
 8006394:	0004      	movs	r4, r0
 8006396:	401d      	ands	r5, r3
 8006398:	4218      	tst	r0, r3
 800639a:	d006      	beq.n	80063aa <_strtod_l+0x8e>
 800639c:	2d06      	cmp	r5, #6
 800639e:	d12f      	bne.n	8006400 <_strtod_l+0xe4>
 80063a0:	9b06      	ldr	r3, [sp, #24]
 80063a2:	3301      	adds	r3, #1
 80063a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80063a6:	2300      	movs	r3, #0
 80063a8:	930e      	str	r3, [sp, #56]	; 0x38
 80063aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <_strtod_l+0x9a>
 80063b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01c      	beq.n	80063f6 <_strtod_l+0xda>
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	0032      	movs	r2, r6
 80063c0:	061b      	lsls	r3, r3, #24
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	0010      	movs	r0, r2
 80063c6:	0019      	movs	r1, r3
 80063c8:	b025      	add	sp, #148	; 0x94
 80063ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d1c3      	bne.n	8006358 <_strtod_l+0x3c>
 80063d0:	3201      	adds	r2, #1
 80063d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80063d4:	e7b5      	b.n	8006342 <_strtod_l+0x26>
 80063d6:	2b2d      	cmp	r3, #45	; 0x2d
 80063d8:	d1be      	bne.n	8006358 <_strtod_l+0x3c>
 80063da:	3b2c      	subs	r3, #44	; 0x2c
 80063dc:	930e      	str	r3, [sp, #56]	; 0x38
 80063de:	1c53      	adds	r3, r2, #1
 80063e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80063e2:	7853      	ldrb	r3, [r2, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1b9      	bne.n	800635c <_strtod_l+0x40>
 80063e8:	9b08      	ldr	r3, [sp, #32]
 80063ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80063ec:	2300      	movs	r3, #0
 80063ee:	930e      	str	r3, [sp, #56]	; 0x38
 80063f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1dc      	bne.n	80063b0 <_strtod_l+0x94>
 80063f6:	0032      	movs	r2, r6
 80063f8:	003b      	movs	r3, r7
 80063fa:	e7e3      	b.n	80063c4 <_strtod_l+0xa8>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7ed      	b.n	80063dc <_strtod_l+0xc0>
 8006400:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006402:	2a00      	cmp	r2, #0
 8006404:	d007      	beq.n	8006416 <_strtod_l+0xfa>
 8006406:	2135      	movs	r1, #53	; 0x35
 8006408:	a822      	add	r0, sp, #136	; 0x88
 800640a:	f002 fd08 	bl	8008e1e <__copybits>
 800640e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006410:	9805      	ldr	r0, [sp, #20]
 8006412:	f002 f8c3 	bl	800859c <_Bfree>
 8006416:	1e68      	subs	r0, r5, #1
 8006418:	2804      	cmp	r0, #4
 800641a:	d806      	bhi.n	800642a <_strtod_l+0x10e>
 800641c:	f7f9 fe7a 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006420:	1816030b 	.word	0x1816030b
 8006424:	0b          	.byte	0x0b
 8006425:	00          	.byte	0x00
 8006426:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006428:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800642a:	0723      	lsls	r3, r4, #28
 800642c:	d5bd      	bpl.n	80063aa <_strtod_l+0x8e>
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	431f      	orrs	r7, r3
 8006434:	e7b9      	b.n	80063aa <_strtod_l+0x8e>
 8006436:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006438:	4a69      	ldr	r2, [pc, #420]	; (80065e0 <_strtod_l+0x2c4>)
 800643a:	496a      	ldr	r1, [pc, #424]	; (80065e4 <_strtod_l+0x2c8>)
 800643c:	401a      	ands	r2, r3
 800643e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006440:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006442:	185b      	adds	r3, r3, r1
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	431a      	orrs	r2, r3
 8006448:	0017      	movs	r7, r2
 800644a:	e7ee      	b.n	800642a <_strtod_l+0x10e>
 800644c:	4f66      	ldr	r7, [pc, #408]	; (80065e8 <_strtod_l+0x2cc>)
 800644e:	e7ec      	b.n	800642a <_strtod_l+0x10e>
 8006450:	2601      	movs	r6, #1
 8006452:	4f66      	ldr	r7, [pc, #408]	; (80065ec <_strtod_l+0x2d0>)
 8006454:	4276      	negs	r6, r6
 8006456:	e7e8      	b.n	800642a <_strtod_l+0x10e>
 8006458:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	921f      	str	r2, [sp, #124]	; 0x7c
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b30      	cmp	r3, #48	; 0x30
 8006462:	d0f9      	beq.n	8006458 <_strtod_l+0x13c>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0a0      	beq.n	80063aa <_strtod_l+0x8e>
 8006468:	2301      	movs	r3, #1
 800646a:	930a      	str	r3, [sp, #40]	; 0x28
 800646c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800646e:	220a      	movs	r2, #10
 8006470:	9310      	str	r3, [sp, #64]	; 0x40
 8006472:	2300      	movs	r3, #0
 8006474:	930f      	str	r3, [sp, #60]	; 0x3c
 8006476:	930b      	str	r3, [sp, #44]	; 0x2c
 8006478:	9309      	str	r3, [sp, #36]	; 0x24
 800647a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800647c:	7805      	ldrb	r5, [r0, #0]
 800647e:	002b      	movs	r3, r5
 8006480:	3b30      	subs	r3, #48	; 0x30
 8006482:	b2d9      	uxtb	r1, r3
 8006484:	2909      	cmp	r1, #9
 8006486:	d927      	bls.n	80064d8 <_strtod_l+0x1bc>
 8006488:	0022      	movs	r2, r4
 800648a:	9907      	ldr	r1, [sp, #28]
 800648c:	f002 ff94 	bl	80093b8 <strncmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	d033      	beq.n	80064fc <_strtod_l+0x1e0>
 8006494:	2000      	movs	r0, #0
 8006496:	002b      	movs	r3, r5
 8006498:	4684      	mov	ip, r0
 800649a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800649c:	900c      	str	r0, [sp, #48]	; 0x30
 800649e:	9206      	str	r2, [sp, #24]
 80064a0:	2220      	movs	r2, #32
 80064a2:	0019      	movs	r1, r3
 80064a4:	4391      	bics	r1, r2
 80064a6:	000a      	movs	r2, r1
 80064a8:	2100      	movs	r1, #0
 80064aa:	9107      	str	r1, [sp, #28]
 80064ac:	2a45      	cmp	r2, #69	; 0x45
 80064ae:	d000      	beq.n	80064b2 <_strtod_l+0x196>
 80064b0:	e0c5      	b.n	800663e <_strtod_l+0x322>
 80064b2:	9b06      	ldr	r3, [sp, #24]
 80064b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b6:	4303      	orrs	r3, r0
 80064b8:	4313      	orrs	r3, r2
 80064ba:	428b      	cmp	r3, r1
 80064bc:	d094      	beq.n	80063e8 <_strtod_l+0xcc>
 80064be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064c0:	9308      	str	r3, [sp, #32]
 80064c2:	3301      	adds	r3, #1
 80064c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80064c6:	9b08      	ldr	r3, [sp, #32]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b2b      	cmp	r3, #43	; 0x2b
 80064cc:	d076      	beq.n	80065bc <_strtod_l+0x2a0>
 80064ce:	000c      	movs	r4, r1
 80064d0:	2b2d      	cmp	r3, #45	; 0x2d
 80064d2:	d179      	bne.n	80065c8 <_strtod_l+0x2ac>
 80064d4:	2401      	movs	r4, #1
 80064d6:	e072      	b.n	80065be <_strtod_l+0x2a2>
 80064d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064da:	2908      	cmp	r1, #8
 80064dc:	dc09      	bgt.n	80064f2 <_strtod_l+0x1d6>
 80064de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064e0:	4351      	muls	r1, r2
 80064e2:	185b      	adds	r3, r3, r1
 80064e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e8:	3001      	adds	r0, #1
 80064ea:	3301      	adds	r3, #1
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	901f      	str	r0, [sp, #124]	; 0x7c
 80064f0:	e7c3      	b.n	800647a <_strtod_l+0x15e>
 80064f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064f4:	4351      	muls	r1, r2
 80064f6:	185b      	adds	r3, r3, r1
 80064f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064fa:	e7f4      	b.n	80064e6 <_strtod_l+0x1ca>
 80064fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006500:	191c      	adds	r4, r3, r4
 8006502:	941f      	str	r4, [sp, #124]	; 0x7c
 8006504:	7823      	ldrb	r3, [r4, #0]
 8006506:	2a00      	cmp	r2, #0
 8006508:	d039      	beq.n	800657e <_strtod_l+0x262>
 800650a:	900c      	str	r0, [sp, #48]	; 0x30
 800650c:	9206      	str	r2, [sp, #24]
 800650e:	001a      	movs	r2, r3
 8006510:	3a30      	subs	r2, #48	; 0x30
 8006512:	2a09      	cmp	r2, #9
 8006514:	d912      	bls.n	800653c <_strtod_l+0x220>
 8006516:	2201      	movs	r2, #1
 8006518:	4694      	mov	ip, r2
 800651a:	e7c1      	b.n	80064a0 <_strtod_l+0x184>
 800651c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800651e:	3001      	adds	r0, #1
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	921f      	str	r2, [sp, #124]	; 0x7c
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b30      	cmp	r3, #48	; 0x30
 8006528:	d0f8      	beq.n	800651c <_strtod_l+0x200>
 800652a:	001a      	movs	r2, r3
 800652c:	3a31      	subs	r2, #49	; 0x31
 800652e:	2a08      	cmp	r2, #8
 8006530:	d83f      	bhi.n	80065b2 <_strtod_l+0x296>
 8006532:	900c      	str	r0, [sp, #48]	; 0x30
 8006534:	2000      	movs	r0, #0
 8006536:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006538:	9006      	str	r0, [sp, #24]
 800653a:	9210      	str	r2, [sp, #64]	; 0x40
 800653c:	001a      	movs	r2, r3
 800653e:	1c41      	adds	r1, r0, #1
 8006540:	3a30      	subs	r2, #48	; 0x30
 8006542:	2b30      	cmp	r3, #48	; 0x30
 8006544:	d015      	beq.n	8006572 <_strtod_l+0x256>
 8006546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006548:	185b      	adds	r3, r3, r1
 800654a:	210a      	movs	r1, #10
 800654c:	930c      	str	r3, [sp, #48]	; 0x30
 800654e:	9b06      	ldr	r3, [sp, #24]
 8006550:	18c4      	adds	r4, r0, r3
 8006552:	42a3      	cmp	r3, r4
 8006554:	d115      	bne.n	8006582 <_strtod_l+0x266>
 8006556:	9906      	ldr	r1, [sp, #24]
 8006558:	9b06      	ldr	r3, [sp, #24]
 800655a:	3101      	adds	r1, #1
 800655c:	1809      	adds	r1, r1, r0
 800655e:	181b      	adds	r3, r3, r0
 8006560:	9106      	str	r1, [sp, #24]
 8006562:	2b08      	cmp	r3, #8
 8006564:	dc1b      	bgt.n	800659e <_strtod_l+0x282>
 8006566:	230a      	movs	r3, #10
 8006568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800656a:	434b      	muls	r3, r1
 800656c:	2100      	movs	r1, #0
 800656e:	18d3      	adds	r3, r2, r3
 8006570:	930b      	str	r3, [sp, #44]	; 0x2c
 8006572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006574:	0008      	movs	r0, r1
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	921f      	str	r2, [sp, #124]	; 0x7c
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	e7c7      	b.n	800650e <_strtod_l+0x1f2>
 800657e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006580:	e7d1      	b.n	8006526 <_strtod_l+0x20a>
 8006582:	2b08      	cmp	r3, #8
 8006584:	dc04      	bgt.n	8006590 <_strtod_l+0x274>
 8006586:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006588:	434d      	muls	r5, r1
 800658a:	950b      	str	r5, [sp, #44]	; 0x2c
 800658c:	3301      	adds	r3, #1
 800658e:	e7e0      	b.n	8006552 <_strtod_l+0x236>
 8006590:	1c5d      	adds	r5, r3, #1
 8006592:	2d10      	cmp	r5, #16
 8006594:	dcfa      	bgt.n	800658c <_strtod_l+0x270>
 8006596:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006598:	434d      	muls	r5, r1
 800659a:	950f      	str	r5, [sp, #60]	; 0x3c
 800659c:	e7f6      	b.n	800658c <_strtod_l+0x270>
 800659e:	9b06      	ldr	r3, [sp, #24]
 80065a0:	2100      	movs	r1, #0
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	dce5      	bgt.n	8006572 <_strtod_l+0x256>
 80065a6:	230a      	movs	r3, #10
 80065a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80065aa:	4343      	muls	r3, r0
 80065ac:	18d3      	adds	r3, r2, r3
 80065ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b0:	e7df      	b.n	8006572 <_strtod_l+0x256>
 80065b2:	2200      	movs	r2, #0
 80065b4:	920c      	str	r2, [sp, #48]	; 0x30
 80065b6:	9206      	str	r2, [sp, #24]
 80065b8:	3201      	adds	r2, #1
 80065ba:	e7ad      	b.n	8006518 <_strtod_l+0x1fc>
 80065bc:	2400      	movs	r4, #0
 80065be:	9b08      	ldr	r3, [sp, #32]
 80065c0:	3302      	adds	r3, #2
 80065c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80065c4:	9b08      	ldr	r3, [sp, #32]
 80065c6:	789b      	ldrb	r3, [r3, #2]
 80065c8:	001a      	movs	r2, r3
 80065ca:	3a30      	subs	r2, #48	; 0x30
 80065cc:	2a09      	cmp	r2, #9
 80065ce:	d913      	bls.n	80065f8 <_strtod_l+0x2dc>
 80065d0:	9a08      	ldr	r2, [sp, #32]
 80065d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80065d4:	2200      	movs	r2, #0
 80065d6:	e031      	b.n	800663c <_strtod_l+0x320>
 80065d8:	0800a3e8 	.word	0x0800a3e8
 80065dc:	0800a19c 	.word	0x0800a19c
 80065e0:	ffefffff 	.word	0xffefffff
 80065e4:	00000433 	.word	0x00000433
 80065e8:	7ff00000 	.word	0x7ff00000
 80065ec:	7fffffff 	.word	0x7fffffff
 80065f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	d0f9      	beq.n	80065f0 <_strtod_l+0x2d4>
 80065fc:	2200      	movs	r2, #0
 80065fe:	9207      	str	r2, [sp, #28]
 8006600:	001a      	movs	r2, r3
 8006602:	3a31      	subs	r2, #49	; 0x31
 8006604:	2a08      	cmp	r2, #8
 8006606:	d81a      	bhi.n	800663e <_strtod_l+0x322>
 8006608:	3b30      	subs	r3, #48	; 0x30
 800660a:	001a      	movs	r2, r3
 800660c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	911f      	str	r1, [sp, #124]	; 0x7c
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	001d      	movs	r5, r3
 800661a:	3d30      	subs	r5, #48	; 0x30
 800661c:	2d09      	cmp	r5, #9
 800661e:	d939      	bls.n	8006694 <_strtod_l+0x378>
 8006620:	9d07      	ldr	r5, [sp, #28]
 8006622:	1b49      	subs	r1, r1, r5
 8006624:	4db0      	ldr	r5, [pc, #704]	; (80068e8 <_strtod_l+0x5cc>)
 8006626:	9507      	str	r5, [sp, #28]
 8006628:	2908      	cmp	r1, #8
 800662a:	dc03      	bgt.n	8006634 <_strtod_l+0x318>
 800662c:	9207      	str	r2, [sp, #28]
 800662e:	42aa      	cmp	r2, r5
 8006630:	dd00      	ble.n	8006634 <_strtod_l+0x318>
 8006632:	9507      	str	r5, [sp, #28]
 8006634:	2c00      	cmp	r4, #0
 8006636:	d002      	beq.n	800663e <_strtod_l+0x322>
 8006638:	9a07      	ldr	r2, [sp, #28]
 800663a:	4252      	negs	r2, r2
 800663c:	9207      	str	r2, [sp, #28]
 800663e:	9a06      	ldr	r2, [sp, #24]
 8006640:	2a00      	cmp	r2, #0
 8006642:	d14b      	bne.n	80066dc <_strtod_l+0x3c0>
 8006644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006646:	4310      	orrs	r0, r2
 8006648:	d000      	beq.n	800664c <_strtod_l+0x330>
 800664a:	e6ae      	b.n	80063aa <_strtod_l+0x8e>
 800664c:	4662      	mov	r2, ip
 800664e:	2a00      	cmp	r2, #0
 8006650:	d000      	beq.n	8006654 <_strtod_l+0x338>
 8006652:	e6c9      	b.n	80063e8 <_strtod_l+0xcc>
 8006654:	2b69      	cmp	r3, #105	; 0x69
 8006656:	d025      	beq.n	80066a4 <_strtod_l+0x388>
 8006658:	dc21      	bgt.n	800669e <_strtod_l+0x382>
 800665a:	2b49      	cmp	r3, #73	; 0x49
 800665c:	d022      	beq.n	80066a4 <_strtod_l+0x388>
 800665e:	2b4e      	cmp	r3, #78	; 0x4e
 8006660:	d000      	beq.n	8006664 <_strtod_l+0x348>
 8006662:	e6c1      	b.n	80063e8 <_strtod_l+0xcc>
 8006664:	49a1      	ldr	r1, [pc, #644]	; (80068ec <_strtod_l+0x5d0>)
 8006666:	a81f      	add	r0, sp, #124	; 0x7c
 8006668:	f001 fe64 	bl	8008334 <__match>
 800666c:	2800      	cmp	r0, #0
 800666e:	d100      	bne.n	8006672 <_strtod_l+0x356>
 8006670:	e6ba      	b.n	80063e8 <_strtod_l+0xcc>
 8006672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b28      	cmp	r3, #40	; 0x28
 8006678:	d12a      	bne.n	80066d0 <_strtod_l+0x3b4>
 800667a:	499d      	ldr	r1, [pc, #628]	; (80068f0 <_strtod_l+0x5d4>)
 800667c:	aa22      	add	r2, sp, #136	; 0x88
 800667e:	a81f      	add	r0, sp, #124	; 0x7c
 8006680:	f001 fe6c 	bl	800835c <__hexnan>
 8006684:	2805      	cmp	r0, #5
 8006686:	d123      	bne.n	80066d0 <_strtod_l+0x3b4>
 8006688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800668a:	4a9a      	ldr	r2, [pc, #616]	; (80068f4 <_strtod_l+0x5d8>)
 800668c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800668e:	431a      	orrs	r2, r3
 8006690:	0017      	movs	r7, r2
 8006692:	e68a      	b.n	80063aa <_strtod_l+0x8e>
 8006694:	210a      	movs	r1, #10
 8006696:	434a      	muls	r2, r1
 8006698:	18d2      	adds	r2, r2, r3
 800669a:	3a30      	subs	r2, #48	; 0x30
 800669c:	e7b8      	b.n	8006610 <_strtod_l+0x2f4>
 800669e:	2b6e      	cmp	r3, #110	; 0x6e
 80066a0:	d0e0      	beq.n	8006664 <_strtod_l+0x348>
 80066a2:	e6a1      	b.n	80063e8 <_strtod_l+0xcc>
 80066a4:	4994      	ldr	r1, [pc, #592]	; (80068f8 <_strtod_l+0x5dc>)
 80066a6:	a81f      	add	r0, sp, #124	; 0x7c
 80066a8:	f001 fe44 	bl	8008334 <__match>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d100      	bne.n	80066b2 <_strtod_l+0x396>
 80066b0:	e69a      	b.n	80063e8 <_strtod_l+0xcc>
 80066b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066b4:	4991      	ldr	r1, [pc, #580]	; (80068fc <_strtod_l+0x5e0>)
 80066b6:	3b01      	subs	r3, #1
 80066b8:	a81f      	add	r0, sp, #124	; 0x7c
 80066ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80066bc:	f001 fe3a 	bl	8008334 <__match>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d102      	bne.n	80066ca <_strtod_l+0x3ae>
 80066c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066c6:	3301      	adds	r3, #1
 80066c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80066ca:	2600      	movs	r6, #0
 80066cc:	4f89      	ldr	r7, [pc, #548]	; (80068f4 <_strtod_l+0x5d8>)
 80066ce:	e66c      	b.n	80063aa <_strtod_l+0x8e>
 80066d0:	488b      	ldr	r0, [pc, #556]	; (8006900 <_strtod_l+0x5e4>)
 80066d2:	f002 fe59 	bl	8009388 <nan>
 80066d6:	0006      	movs	r6, r0
 80066d8:	000f      	movs	r7, r1
 80066da:	e666      	b.n	80063aa <_strtod_l+0x8e>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	930a      	str	r3, [sp, #40]	; 0x28
 80066e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <_strtod_l+0x3d2>
 80066ea:	9b06      	ldr	r3, [sp, #24]
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	9c06      	ldr	r4, [sp, #24]
 80066f0:	2c10      	cmp	r4, #16
 80066f2:	dd00      	ble.n	80066f6 <_strtod_l+0x3da>
 80066f4:	2410      	movs	r4, #16
 80066f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80066f8:	f7fb fdf0 	bl	80022dc <__aeabi_ui2d>
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	0006      	movs	r6, r0
 8006700:	000f      	movs	r7, r1
 8006702:	2b09      	cmp	r3, #9
 8006704:	dd15      	ble.n	8006732 <_strtod_l+0x416>
 8006706:	0022      	movs	r2, r4
 8006708:	4b7e      	ldr	r3, [pc, #504]	; (8006904 <_strtod_l+0x5e8>)
 800670a:	3a09      	subs	r2, #9
 800670c:	00d2      	lsls	r2, r2, #3
 800670e:	189b      	adds	r3, r3, r2
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f7fa ff60 	bl	80015d8 <__aeabi_dmul>
 8006718:	0006      	movs	r6, r0
 800671a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800671c:	000f      	movs	r7, r1
 800671e:	f7fb fddd 	bl	80022dc <__aeabi_ui2d>
 8006722:	0002      	movs	r2, r0
 8006724:	000b      	movs	r3, r1
 8006726:	0030      	movs	r0, r6
 8006728:	0039      	movs	r1, r7
 800672a:	f7fa f817 	bl	800075c <__aeabi_dadd>
 800672e:	0006      	movs	r6, r0
 8006730:	000f      	movs	r7, r1
 8006732:	9b06      	ldr	r3, [sp, #24]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	dc39      	bgt.n	80067ac <_strtod_l+0x490>
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d100      	bne.n	8006740 <_strtod_l+0x424>
 800673e:	e634      	b.n	80063aa <_strtod_l+0x8e>
 8006740:	dd24      	ble.n	800678c <_strtod_l+0x470>
 8006742:	2b16      	cmp	r3, #22
 8006744:	dc09      	bgt.n	800675a <_strtod_l+0x43e>
 8006746:	496f      	ldr	r1, [pc, #444]	; (8006904 <_strtod_l+0x5e8>)
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	18c9      	adds	r1, r1, r3
 800674c:	0032      	movs	r2, r6
 800674e:	6808      	ldr	r0, [r1, #0]
 8006750:	6849      	ldr	r1, [r1, #4]
 8006752:	003b      	movs	r3, r7
 8006754:	f7fa ff40 	bl	80015d8 <__aeabi_dmul>
 8006758:	e7bd      	b.n	80066d6 <_strtod_l+0x3ba>
 800675a:	2325      	movs	r3, #37	; 0x25
 800675c:	9a06      	ldr	r2, [sp, #24]
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006762:	4293      	cmp	r3, r2
 8006764:	db22      	blt.n	80067ac <_strtod_l+0x490>
 8006766:	240f      	movs	r4, #15
 8006768:	9b06      	ldr	r3, [sp, #24]
 800676a:	4d66      	ldr	r5, [pc, #408]	; (8006904 <_strtod_l+0x5e8>)
 800676c:	1ae4      	subs	r4, r4, r3
 800676e:	00e1      	lsls	r1, r4, #3
 8006770:	1869      	adds	r1, r5, r1
 8006772:	0032      	movs	r2, r6
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	6849      	ldr	r1, [r1, #4]
 8006778:	003b      	movs	r3, r7
 800677a:	f7fa ff2d 	bl	80015d8 <__aeabi_dmul>
 800677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006780:	1b1c      	subs	r4, r3, r4
 8006782:	00e4      	lsls	r4, r4, #3
 8006784:	192c      	adds	r4, r5, r4
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	e7e3      	b.n	8006754 <_strtod_l+0x438>
 800678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678e:	3316      	adds	r3, #22
 8006790:	db0c      	blt.n	80067ac <_strtod_l+0x490>
 8006792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006794:	9a07      	ldr	r2, [sp, #28]
 8006796:	0030      	movs	r0, r6
 8006798:	1a9a      	subs	r2, r3, r2
 800679a:	4b5a      	ldr	r3, [pc, #360]	; (8006904 <_strtod_l+0x5e8>)
 800679c:	00d2      	lsls	r2, r2, #3
 800679e:	189b      	adds	r3, r3, r2
 80067a0:	0039      	movs	r1, r7
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f7fa fb15 	bl	8000dd4 <__aeabi_ddiv>
 80067aa:	e794      	b.n	80066d6 <_strtod_l+0x3ba>
 80067ac:	9b06      	ldr	r3, [sp, #24]
 80067ae:	1b1c      	subs	r4, r3, r4
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	18e4      	adds	r4, r4, r3
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	dd72      	ble.n	800689e <_strtod_l+0x582>
 80067b8:	230f      	movs	r3, #15
 80067ba:	0021      	movs	r1, r4
 80067bc:	4019      	ands	r1, r3
 80067be:	421c      	tst	r4, r3
 80067c0:	d00a      	beq.n	80067d8 <_strtod_l+0x4bc>
 80067c2:	00cb      	lsls	r3, r1, #3
 80067c4:	494f      	ldr	r1, [pc, #316]	; (8006904 <_strtod_l+0x5e8>)
 80067c6:	0032      	movs	r2, r6
 80067c8:	18c9      	adds	r1, r1, r3
 80067ca:	6808      	ldr	r0, [r1, #0]
 80067cc:	6849      	ldr	r1, [r1, #4]
 80067ce:	003b      	movs	r3, r7
 80067d0:	f7fa ff02 	bl	80015d8 <__aeabi_dmul>
 80067d4:	0006      	movs	r6, r0
 80067d6:	000f      	movs	r7, r1
 80067d8:	230f      	movs	r3, #15
 80067da:	439c      	bics	r4, r3
 80067dc:	d04a      	beq.n	8006874 <_strtod_l+0x558>
 80067de:	3326      	adds	r3, #38	; 0x26
 80067e0:	33ff      	adds	r3, #255	; 0xff
 80067e2:	429c      	cmp	r4, r3
 80067e4:	dd22      	ble.n	800682c <_strtod_l+0x510>
 80067e6:	2300      	movs	r3, #0
 80067e8:	9306      	str	r3, [sp, #24]
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	2322      	movs	r3, #34	; 0x22
 80067f2:	2600      	movs	r6, #0
 80067f4:	9a05      	ldr	r2, [sp, #20]
 80067f6:	4f3f      	ldr	r7, [pc, #252]	; (80068f4 <_strtod_l+0x5d8>)
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fc:	42b3      	cmp	r3, r6
 80067fe:	d100      	bne.n	8006802 <_strtod_l+0x4e6>
 8006800:	e5d3      	b.n	80063aa <_strtod_l+0x8e>
 8006802:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006804:	9805      	ldr	r0, [sp, #20]
 8006806:	f001 fec9 	bl	800859c <_Bfree>
 800680a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800680c:	9805      	ldr	r0, [sp, #20]
 800680e:	f001 fec5 	bl	800859c <_Bfree>
 8006812:	9907      	ldr	r1, [sp, #28]
 8006814:	9805      	ldr	r0, [sp, #20]
 8006816:	f001 fec1 	bl	800859c <_Bfree>
 800681a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800681c:	9805      	ldr	r0, [sp, #20]
 800681e:	f001 febd 	bl	800859c <_Bfree>
 8006822:	9906      	ldr	r1, [sp, #24]
 8006824:	9805      	ldr	r0, [sp, #20]
 8006826:	f001 feb9 	bl	800859c <_Bfree>
 800682a:	e5be      	b.n	80063aa <_strtod_l+0x8e>
 800682c:	2300      	movs	r3, #0
 800682e:	0030      	movs	r0, r6
 8006830:	0039      	movs	r1, r7
 8006832:	4d35      	ldr	r5, [pc, #212]	; (8006908 <_strtod_l+0x5ec>)
 8006834:	1124      	asrs	r4, r4, #4
 8006836:	9308      	str	r3, [sp, #32]
 8006838:	2c01      	cmp	r4, #1
 800683a:	dc1e      	bgt.n	800687a <_strtod_l+0x55e>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <_strtod_l+0x528>
 8006840:	0006      	movs	r6, r0
 8006842:	000f      	movs	r7, r1
 8006844:	4b31      	ldr	r3, [pc, #196]	; (800690c <_strtod_l+0x5f0>)
 8006846:	0032      	movs	r2, r6
 8006848:	18ff      	adds	r7, r7, r3
 800684a:	9b08      	ldr	r3, [sp, #32]
 800684c:	00dd      	lsls	r5, r3, #3
 800684e:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <_strtod_l+0x5ec>)
 8006850:	195d      	adds	r5, r3, r5
 8006852:	6828      	ldr	r0, [r5, #0]
 8006854:	6869      	ldr	r1, [r5, #4]
 8006856:	003b      	movs	r3, r7
 8006858:	f7fa febe 	bl	80015d8 <__aeabi_dmul>
 800685c:	4b25      	ldr	r3, [pc, #148]	; (80068f4 <_strtod_l+0x5d8>)
 800685e:	4a2c      	ldr	r2, [pc, #176]	; (8006910 <_strtod_l+0x5f4>)
 8006860:	0006      	movs	r6, r0
 8006862:	400b      	ands	r3, r1
 8006864:	4293      	cmp	r3, r2
 8006866:	d8be      	bhi.n	80067e6 <_strtod_l+0x4ca>
 8006868:	4a2a      	ldr	r2, [pc, #168]	; (8006914 <_strtod_l+0x5f8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d913      	bls.n	8006896 <_strtod_l+0x57a>
 800686e:	2601      	movs	r6, #1
 8006870:	4f29      	ldr	r7, [pc, #164]	; (8006918 <_strtod_l+0x5fc>)
 8006872:	4276      	negs	r6, r6
 8006874:	2300      	movs	r3, #0
 8006876:	9308      	str	r3, [sp, #32]
 8006878:	e087      	b.n	800698a <_strtod_l+0x66e>
 800687a:	2201      	movs	r2, #1
 800687c:	4214      	tst	r4, r2
 800687e:	d004      	beq.n	800688a <_strtod_l+0x56e>
 8006880:	682a      	ldr	r2, [r5, #0]
 8006882:	686b      	ldr	r3, [r5, #4]
 8006884:	f7fa fea8 	bl	80015d8 <__aeabi_dmul>
 8006888:	2301      	movs	r3, #1
 800688a:	9a08      	ldr	r2, [sp, #32]
 800688c:	1064      	asrs	r4, r4, #1
 800688e:	3201      	adds	r2, #1
 8006890:	9208      	str	r2, [sp, #32]
 8006892:	3508      	adds	r5, #8
 8006894:	e7d0      	b.n	8006838 <_strtod_l+0x51c>
 8006896:	23d4      	movs	r3, #212	; 0xd4
 8006898:	049b      	lsls	r3, r3, #18
 800689a:	18cf      	adds	r7, r1, r3
 800689c:	e7ea      	b.n	8006874 <_strtod_l+0x558>
 800689e:	2c00      	cmp	r4, #0
 80068a0:	d0e8      	beq.n	8006874 <_strtod_l+0x558>
 80068a2:	4264      	negs	r4, r4
 80068a4:	220f      	movs	r2, #15
 80068a6:	0023      	movs	r3, r4
 80068a8:	4013      	ands	r3, r2
 80068aa:	4214      	tst	r4, r2
 80068ac:	d00a      	beq.n	80068c4 <_strtod_l+0x5a8>
 80068ae:	00da      	lsls	r2, r3, #3
 80068b0:	4b14      	ldr	r3, [pc, #80]	; (8006904 <_strtod_l+0x5e8>)
 80068b2:	0030      	movs	r0, r6
 80068b4:	189b      	adds	r3, r3, r2
 80068b6:	0039      	movs	r1, r7
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f7fa fa8a 	bl	8000dd4 <__aeabi_ddiv>
 80068c0:	0006      	movs	r6, r0
 80068c2:	000f      	movs	r7, r1
 80068c4:	1124      	asrs	r4, r4, #4
 80068c6:	d0d5      	beq.n	8006874 <_strtod_l+0x558>
 80068c8:	2c1f      	cmp	r4, #31
 80068ca:	dd27      	ble.n	800691c <_strtod_l+0x600>
 80068cc:	2300      	movs	r3, #0
 80068ce:	9306      	str	r3, [sp, #24]
 80068d0:	9307      	str	r3, [sp, #28]
 80068d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80068d4:	9309      	str	r3, [sp, #36]	; 0x24
 80068d6:	2322      	movs	r3, #34	; 0x22
 80068d8:	9a05      	ldr	r2, [sp, #20]
 80068da:	2600      	movs	r6, #0
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e0:	2700      	movs	r7, #0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d18d      	bne.n	8006802 <_strtod_l+0x4e6>
 80068e6:	e560      	b.n	80063aa <_strtod_l+0x8e>
 80068e8:	00004e1f 	.word	0x00004e1f
 80068ec:	0800a16d 	.word	0x0800a16d
 80068f0:	0800a1b0 	.word	0x0800a1b0
 80068f4:	7ff00000 	.word	0x7ff00000
 80068f8:	0800a165 	.word	0x0800a165
 80068fc:	0800a2f4 	.word	0x0800a2f4
 8006900:	0800a5a0 	.word	0x0800a5a0
 8006904:	0800a480 	.word	0x0800a480
 8006908:	0800a458 	.word	0x0800a458
 800690c:	fcb00000 	.word	0xfcb00000
 8006910:	7ca00000 	.word	0x7ca00000
 8006914:	7c900000 	.word	0x7c900000
 8006918:	7fefffff 	.word	0x7fefffff
 800691c:	2310      	movs	r3, #16
 800691e:	0022      	movs	r2, r4
 8006920:	401a      	ands	r2, r3
 8006922:	9208      	str	r2, [sp, #32]
 8006924:	421c      	tst	r4, r3
 8006926:	d001      	beq.n	800692c <_strtod_l+0x610>
 8006928:	335a      	adds	r3, #90	; 0x5a
 800692a:	9308      	str	r3, [sp, #32]
 800692c:	0030      	movs	r0, r6
 800692e:	0039      	movs	r1, r7
 8006930:	2300      	movs	r3, #0
 8006932:	4dc5      	ldr	r5, [pc, #788]	; (8006c48 <_strtod_l+0x92c>)
 8006934:	2201      	movs	r2, #1
 8006936:	4214      	tst	r4, r2
 8006938:	d004      	beq.n	8006944 <_strtod_l+0x628>
 800693a:	682a      	ldr	r2, [r5, #0]
 800693c:	686b      	ldr	r3, [r5, #4]
 800693e:	f7fa fe4b 	bl	80015d8 <__aeabi_dmul>
 8006942:	2301      	movs	r3, #1
 8006944:	1064      	asrs	r4, r4, #1
 8006946:	3508      	adds	r5, #8
 8006948:	2c00      	cmp	r4, #0
 800694a:	d1f3      	bne.n	8006934 <_strtod_l+0x618>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <_strtod_l+0x638>
 8006950:	0006      	movs	r6, r0
 8006952:	000f      	movs	r7, r1
 8006954:	9b08      	ldr	r3, [sp, #32]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00f      	beq.n	800697a <_strtod_l+0x65e>
 800695a:	236b      	movs	r3, #107	; 0x6b
 800695c:	007a      	lsls	r2, r7, #1
 800695e:	0d52      	lsrs	r2, r2, #21
 8006960:	0039      	movs	r1, r7
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd08      	ble.n	800697a <_strtod_l+0x65e>
 8006968:	2b1f      	cmp	r3, #31
 800696a:	dc00      	bgt.n	800696e <_strtod_l+0x652>
 800696c:	e124      	b.n	8006bb8 <_strtod_l+0x89c>
 800696e:	2600      	movs	r6, #0
 8006970:	2b34      	cmp	r3, #52	; 0x34
 8006972:	dc00      	bgt.n	8006976 <_strtod_l+0x65a>
 8006974:	e119      	b.n	8006baa <_strtod_l+0x88e>
 8006976:	27dc      	movs	r7, #220	; 0xdc
 8006978:	04bf      	lsls	r7, r7, #18
 800697a:	2200      	movs	r2, #0
 800697c:	2300      	movs	r3, #0
 800697e:	0030      	movs	r0, r6
 8006980:	0039      	movs	r1, r7
 8006982:	f7f9 fd61 	bl	8000448 <__aeabi_dcmpeq>
 8006986:	2800      	cmp	r0, #0
 8006988:	d1a0      	bne.n	80068cc <_strtod_l+0x5b0>
 800698a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800698c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006992:	9b06      	ldr	r3, [sp, #24]
 8006994:	9805      	ldr	r0, [sp, #20]
 8006996:	f001 fe69 	bl	800866c <__s2b>
 800699a:	900b      	str	r0, [sp, #44]	; 0x2c
 800699c:	2800      	cmp	r0, #0
 800699e:	d100      	bne.n	80069a2 <_strtod_l+0x686>
 80069a0:	e721      	b.n	80067e6 <_strtod_l+0x4ca>
 80069a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a4:	9907      	ldr	r1, [sp, #28]
 80069a6:	17da      	asrs	r2, r3, #31
 80069a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	401a      	ands	r2, r3
 80069ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b0:	9215      	str	r2, [sp, #84]	; 0x54
 80069b2:	43db      	mvns	r3, r3
 80069b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b6:	17db      	asrs	r3, r3, #31
 80069b8:	401a      	ands	r2, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	921a      	str	r2, [sp, #104]	; 0x68
 80069be:	9306      	str	r3, [sp, #24]
 80069c0:	9307      	str	r3, [sp, #28]
 80069c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c4:	9805      	ldr	r0, [sp, #20]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	f001 fda4 	bl	8008514 <_Balloc>
 80069cc:	9009      	str	r0, [sp, #36]	; 0x24
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d100      	bne.n	80069d4 <_strtod_l+0x6b8>
 80069d2:	e70d      	b.n	80067f0 <_strtod_l+0x4d4>
 80069d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	310c      	adds	r1, #12
 80069dc:	1c9a      	adds	r2, r3, #2
 80069de:	0092      	lsls	r2, r2, #2
 80069e0:	300c      	adds	r0, #12
 80069e2:	930c      	str	r3, [sp, #48]	; 0x30
 80069e4:	f001 fd8d 	bl	8008502 <memcpy>
 80069e8:	ab22      	add	r3, sp, #136	; 0x88
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	ab21      	add	r3, sp, #132	; 0x84
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	0032      	movs	r2, r6
 80069f2:	003b      	movs	r3, r7
 80069f4:	9805      	ldr	r0, [sp, #20]
 80069f6:	9612      	str	r6, [sp, #72]	; 0x48
 80069f8:	9713      	str	r7, [sp, #76]	; 0x4c
 80069fa:	f002 f983 	bl	8008d04 <__d2b>
 80069fe:	9020      	str	r0, [sp, #128]	; 0x80
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d100      	bne.n	8006a06 <_strtod_l+0x6ea>
 8006a04:	e6f4      	b.n	80067f0 <_strtod_l+0x4d4>
 8006a06:	2101      	movs	r1, #1
 8006a08:	9805      	ldr	r0, [sp, #20]
 8006a0a:	f001 fec3 	bl	8008794 <__i2b>
 8006a0e:	9007      	str	r0, [sp, #28]
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d100      	bne.n	8006a16 <_strtod_l+0x6fa>
 8006a14:	e6ec      	b.n	80067f0 <_strtod_l+0x4d4>
 8006a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a18:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a1a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a1c:	1ad4      	subs	r4, r2, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	db01      	blt.n	8006a26 <_strtod_l+0x70a>
 8006a22:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8006a24:	195d      	adds	r5, r3, r5
 8006a26:	9908      	ldr	r1, [sp, #32]
 8006a28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a2a:	1a5b      	subs	r3, r3, r1
 8006a2c:	2136      	movs	r1, #54	; 0x36
 8006a2e:	189b      	adds	r3, r3, r2
 8006a30:	1a8a      	subs	r2, r1, r2
 8006a32:	4986      	ldr	r1, [pc, #536]	; (8006c4c <_strtod_l+0x930>)
 8006a34:	2001      	movs	r0, #1
 8006a36:	468c      	mov	ip, r1
 8006a38:	2100      	movs	r1, #0
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	9110      	str	r1, [sp, #64]	; 0x40
 8006a3e:	9014      	str	r0, [sp, #80]	; 0x50
 8006a40:	4563      	cmp	r3, ip
 8006a42:	da07      	bge.n	8006a54 <_strtod_l+0x738>
 8006a44:	4661      	mov	r1, ip
 8006a46:	1ac9      	subs	r1, r1, r3
 8006a48:	1a52      	subs	r2, r2, r1
 8006a4a:	291f      	cmp	r1, #31
 8006a4c:	dd00      	ble.n	8006a50 <_strtod_l+0x734>
 8006a4e:	e0b8      	b.n	8006bc2 <_strtod_l+0x8a6>
 8006a50:	4088      	lsls	r0, r1
 8006a52:	9014      	str	r0, [sp, #80]	; 0x50
 8006a54:	18ab      	adds	r3, r5, r2
 8006a56:	930c      	str	r3, [sp, #48]	; 0x30
 8006a58:	18a4      	adds	r4, r4, r2
 8006a5a:	9b08      	ldr	r3, [sp, #32]
 8006a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a5e:	191c      	adds	r4, r3, r4
 8006a60:	002b      	movs	r3, r5
 8006a62:	4295      	cmp	r5, r2
 8006a64:	dd00      	ble.n	8006a68 <_strtod_l+0x74c>
 8006a66:	0013      	movs	r3, r2
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	dd00      	ble.n	8006a6e <_strtod_l+0x752>
 8006a6c:	0023      	movs	r3, r4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dd04      	ble.n	8006a7c <_strtod_l+0x760>
 8006a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a74:	1ae4      	subs	r4, r4, r3
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	920c      	str	r2, [sp, #48]	; 0x30
 8006a7a:	1aed      	subs	r5, r5, r3
 8006a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dd17      	ble.n	8006ab2 <_strtod_l+0x796>
 8006a82:	001a      	movs	r2, r3
 8006a84:	9907      	ldr	r1, [sp, #28]
 8006a86:	9805      	ldr	r0, [sp, #20]
 8006a88:	f001 ff4a 	bl	8008920 <__pow5mult>
 8006a8c:	9007      	str	r0, [sp, #28]
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d100      	bne.n	8006a94 <_strtod_l+0x778>
 8006a92:	e6ad      	b.n	80067f0 <_strtod_l+0x4d4>
 8006a94:	0001      	movs	r1, r0
 8006a96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a98:	9805      	ldr	r0, [sp, #20]
 8006a9a:	f001 fe91 	bl	80087c0 <__multiply>
 8006a9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d100      	bne.n	8006aa6 <_strtod_l+0x78a>
 8006aa4:	e6a4      	b.n	80067f0 <_strtod_l+0x4d4>
 8006aa6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006aa8:	9805      	ldr	r0, [sp, #20]
 8006aaa:	f001 fd77 	bl	800859c <_Bfree>
 8006aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ab0:	9320      	str	r3, [sp, #128]	; 0x80
 8006ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dd00      	ble.n	8006aba <_strtod_l+0x79e>
 8006ab8:	e089      	b.n	8006bce <_strtod_l+0x8b2>
 8006aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dd08      	ble.n	8006ad2 <_strtod_l+0x7b6>
 8006ac0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac4:	9805      	ldr	r0, [sp, #20]
 8006ac6:	f001 ff2b 	bl	8008920 <__pow5mult>
 8006aca:	9009      	str	r0, [sp, #36]	; 0x24
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d100      	bne.n	8006ad2 <_strtod_l+0x7b6>
 8006ad0:	e68e      	b.n	80067f0 <_strtod_l+0x4d4>
 8006ad2:	2c00      	cmp	r4, #0
 8006ad4:	dd08      	ble.n	8006ae8 <_strtod_l+0x7cc>
 8006ad6:	0022      	movs	r2, r4
 8006ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ada:	9805      	ldr	r0, [sp, #20]
 8006adc:	f001 ff7c 	bl	80089d8 <__lshift>
 8006ae0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d100      	bne.n	8006ae8 <_strtod_l+0x7cc>
 8006ae6:	e683      	b.n	80067f0 <_strtod_l+0x4d4>
 8006ae8:	2d00      	cmp	r5, #0
 8006aea:	dd08      	ble.n	8006afe <_strtod_l+0x7e2>
 8006aec:	002a      	movs	r2, r5
 8006aee:	9907      	ldr	r1, [sp, #28]
 8006af0:	9805      	ldr	r0, [sp, #20]
 8006af2:	f001 ff71 	bl	80089d8 <__lshift>
 8006af6:	9007      	str	r0, [sp, #28]
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d100      	bne.n	8006afe <_strtod_l+0x7e2>
 8006afc:	e678      	b.n	80067f0 <_strtod_l+0x4d4>
 8006afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b00:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006b02:	9805      	ldr	r0, [sp, #20]
 8006b04:	f001 fff2 	bl	8008aec <__mdiff>
 8006b08:	9006      	str	r0, [sp, #24]
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d100      	bne.n	8006b10 <_strtod_l+0x7f4>
 8006b0e:	e66f      	b.n	80067f0 <_strtod_l+0x4d4>
 8006b10:	2200      	movs	r2, #0
 8006b12:	68c3      	ldr	r3, [r0, #12]
 8006b14:	9907      	ldr	r1, [sp, #28]
 8006b16:	60c2      	str	r2, [r0, #12]
 8006b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b1a:	f001 ffcb 	bl	8008ab4 <__mcmp>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	da5f      	bge.n	8006be2 <_strtod_l+0x8c6>
 8006b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b24:	4333      	orrs	r3, r6
 8006b26:	d000      	beq.n	8006b2a <_strtod_l+0x80e>
 8006b28:	e08a      	b.n	8006c40 <_strtod_l+0x924>
 8006b2a:	033b      	lsls	r3, r7, #12
 8006b2c:	d000      	beq.n	8006b30 <_strtod_l+0x814>
 8006b2e:	e087      	b.n	8006c40 <_strtod_l+0x924>
 8006b30:	22d6      	movs	r2, #214	; 0xd6
 8006b32:	4b47      	ldr	r3, [pc, #284]	; (8006c50 <_strtod_l+0x934>)
 8006b34:	04d2      	lsls	r2, r2, #19
 8006b36:	403b      	ands	r3, r7
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d800      	bhi.n	8006b3e <_strtod_l+0x822>
 8006b3c:	e080      	b.n	8006c40 <_strtod_l+0x924>
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	930a      	str	r3, [sp, #40]	; 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <_strtod_l+0x836>
 8006b48:	9b06      	ldr	r3, [sp, #24]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	dd76      	ble.n	8006c40 <_strtod_l+0x924>
 8006b52:	9906      	ldr	r1, [sp, #24]
 8006b54:	2201      	movs	r2, #1
 8006b56:	9805      	ldr	r0, [sp, #20]
 8006b58:	f001 ff3e 	bl	80089d8 <__lshift>
 8006b5c:	9907      	ldr	r1, [sp, #28]
 8006b5e:	9006      	str	r0, [sp, #24]
 8006b60:	f001 ffa8 	bl	8008ab4 <__mcmp>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	dd6b      	ble.n	8006c40 <_strtod_l+0x924>
 8006b68:	9908      	ldr	r1, [sp, #32]
 8006b6a:	003b      	movs	r3, r7
 8006b6c:	4a38      	ldr	r2, [pc, #224]	; (8006c50 <_strtod_l+0x934>)
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	d100      	bne.n	8006b74 <_strtod_l+0x858>
 8006b72:	e092      	b.n	8006c9a <_strtod_l+0x97e>
 8006b74:	0011      	movs	r1, r2
 8006b76:	20d6      	movs	r0, #214	; 0xd6
 8006b78:	4039      	ands	r1, r7
 8006b7a:	04c0      	lsls	r0, r0, #19
 8006b7c:	4281      	cmp	r1, r0
 8006b7e:	dd00      	ble.n	8006b82 <_strtod_l+0x866>
 8006b80:	e08b      	b.n	8006c9a <_strtod_l+0x97e>
 8006b82:	23dc      	movs	r3, #220	; 0xdc
 8006b84:	049b      	lsls	r3, r3, #18
 8006b86:	4299      	cmp	r1, r3
 8006b88:	dc00      	bgt.n	8006b8c <_strtod_l+0x870>
 8006b8a:	e6a4      	b.n	80068d6 <_strtod_l+0x5ba>
 8006b8c:	0030      	movs	r0, r6
 8006b8e:	0039      	movs	r1, r7
 8006b90:	2200      	movs	r2, #0
 8006b92:	4b30      	ldr	r3, [pc, #192]	; (8006c54 <_strtod_l+0x938>)
 8006b94:	f7fa fd20 	bl	80015d8 <__aeabi_dmul>
 8006b98:	0006      	movs	r6, r0
 8006b9a:	000f      	movs	r7, r1
 8006b9c:	4308      	orrs	r0, r1
 8006b9e:	d000      	beq.n	8006ba2 <_strtod_l+0x886>
 8006ba0:	e62f      	b.n	8006802 <_strtod_l+0x4e6>
 8006ba2:	2322      	movs	r3, #34	; 0x22
 8006ba4:	9a05      	ldr	r2, [sp, #20]
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e62b      	b.n	8006802 <_strtod_l+0x4e6>
 8006baa:	234b      	movs	r3, #75	; 0x4b
 8006bac:	1a9a      	subs	r2, r3, r2
 8006bae:	3b4c      	subs	r3, #76	; 0x4c
 8006bb0:	4093      	lsls	r3, r2
 8006bb2:	4019      	ands	r1, r3
 8006bb4:	000f      	movs	r7, r1
 8006bb6:	e6e0      	b.n	800697a <_strtod_l+0x65e>
 8006bb8:	2201      	movs	r2, #1
 8006bba:	4252      	negs	r2, r2
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	4016      	ands	r6, r2
 8006bc0:	e6db      	b.n	800697a <_strtod_l+0x65e>
 8006bc2:	4925      	ldr	r1, [pc, #148]	; (8006c58 <_strtod_l+0x93c>)
 8006bc4:	1acb      	subs	r3, r1, r3
 8006bc6:	0001      	movs	r1, r0
 8006bc8:	4099      	lsls	r1, r3
 8006bca:	9110      	str	r1, [sp, #64]	; 0x40
 8006bcc:	e741      	b.n	8006a52 <_strtod_l+0x736>
 8006bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bd0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006bd2:	9805      	ldr	r0, [sp, #20]
 8006bd4:	f001 ff00 	bl	80089d8 <__lshift>
 8006bd8:	9020      	str	r0, [sp, #128]	; 0x80
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d000      	beq.n	8006be0 <_strtod_l+0x8c4>
 8006bde:	e76c      	b.n	8006aba <_strtod_l+0x79e>
 8006be0:	e606      	b.n	80067f0 <_strtod_l+0x4d4>
 8006be2:	970c      	str	r7, [sp, #48]	; 0x30
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d176      	bne.n	8006cd6 <_strtod_l+0x9ba>
 8006be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bea:	033b      	lsls	r3, r7, #12
 8006bec:	0b1b      	lsrs	r3, r3, #12
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d038      	beq.n	8006c64 <_strtod_l+0x948>
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	; (8006c5c <_strtod_l+0x940>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d138      	bne.n	8006c6a <_strtod_l+0x94e>
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	4252      	negs	r2, r2
 8006bfe:	0031      	movs	r1, r6
 8006c00:	0010      	movs	r0, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <_strtod_l+0x902>
 8006c06:	24d4      	movs	r4, #212	; 0xd4
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <_strtod_l+0x934>)
 8006c0a:	0010      	movs	r0, r2
 8006c0c:	403b      	ands	r3, r7
 8006c0e:	04e4      	lsls	r4, r4, #19
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d804      	bhi.n	8006c1e <_strtod_l+0x902>
 8006c14:	306c      	adds	r0, #108	; 0x6c
 8006c16:	0d1b      	lsrs	r3, r3, #20
 8006c18:	1ac3      	subs	r3, r0, r3
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	0010      	movs	r0, r2
 8006c1e:	4281      	cmp	r1, r0
 8006c20:	d123      	bne.n	8006c6a <_strtod_l+0x94e>
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <_strtod_l+0x944>)
 8006c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d102      	bne.n	8006c30 <_strtod_l+0x914>
 8006c2a:	1c4b      	adds	r3, r1, #1
 8006c2c:	d100      	bne.n	8006c30 <_strtod_l+0x914>
 8006c2e:	e5df      	b.n	80067f0 <_strtod_l+0x4d4>
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <_strtod_l+0x934>)
 8006c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c34:	2600      	movs	r6, #0
 8006c36:	401a      	ands	r2, r3
 8006c38:	0013      	movs	r3, r2
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	0352      	lsls	r2, r2, #13
 8006c3e:	189f      	adds	r7, r3, r2
 8006c40:	9b08      	ldr	r3, [sp, #32]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1a2      	bne.n	8006b8c <_strtod_l+0x870>
 8006c46:	e5dc      	b.n	8006802 <_strtod_l+0x4e6>
 8006c48:	0800a1c8 	.word	0x0800a1c8
 8006c4c:	fffffc02 	.word	0xfffffc02
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	39500000 	.word	0x39500000
 8006c58:	fffffbe2 	.word	0xfffffbe2
 8006c5c:	000fffff 	.word	0x000fffff
 8006c60:	7fefffff 	.word	0x7fefffff
 8006c64:	4333      	orrs	r3, r6
 8006c66:	d100      	bne.n	8006c6a <_strtod_l+0x94e>
 8006c68:	e77e      	b.n	8006b68 <_strtod_l+0x84c>
 8006c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01d      	beq.n	8006cac <_strtod_l+0x990>
 8006c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c74:	4213      	tst	r3, r2
 8006c76:	d0e3      	beq.n	8006c40 <_strtod_l+0x924>
 8006c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c7a:	0030      	movs	r0, r6
 8006c7c:	0039      	movs	r1, r7
 8006c7e:	9a08      	ldr	r2, [sp, #32]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d017      	beq.n	8006cb4 <_strtod_l+0x998>
 8006c84:	f7ff fb32 	bl	80062ec <sulp>
 8006c88:	0002      	movs	r2, r0
 8006c8a:	000b      	movs	r3, r1
 8006c8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006c8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006c90:	f7f9 fd64 	bl	800075c <__aeabi_dadd>
 8006c94:	0006      	movs	r6, r0
 8006c96:	000f      	movs	r7, r1
 8006c98:	e7d2      	b.n	8006c40 <_strtod_l+0x924>
 8006c9a:	2601      	movs	r6, #1
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	4a99      	ldr	r2, [pc, #612]	; (8006f04 <_strtod_l+0xbe8>)
 8006ca0:	4276      	negs	r6, r6
 8006ca2:	189b      	adds	r3, r3, r2
 8006ca4:	4a98      	ldr	r2, [pc, #608]	; (8006f08 <_strtod_l+0xbec>)
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	0017      	movs	r7, r2
 8006caa:	e7c9      	b.n	8006c40 <_strtod_l+0x924>
 8006cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cae:	4233      	tst	r3, r6
 8006cb0:	d0c6      	beq.n	8006c40 <_strtod_l+0x924>
 8006cb2:	e7e1      	b.n	8006c78 <_strtod_l+0x95c>
 8006cb4:	f7ff fb1a 	bl	80062ec <sulp>
 8006cb8:	0002      	movs	r2, r0
 8006cba:	000b      	movs	r3, r1
 8006cbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006cbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006cc0:	f7fa fef6 	bl	8001ab0 <__aeabi_dsub>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	0006      	movs	r6, r0
 8006cca:	000f      	movs	r7, r1
 8006ccc:	f7f9 fbbc 	bl	8000448 <__aeabi_dcmpeq>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d0b5      	beq.n	8006c40 <_strtod_l+0x924>
 8006cd4:	e5ff      	b.n	80068d6 <_strtod_l+0x5ba>
 8006cd6:	9907      	ldr	r1, [sp, #28]
 8006cd8:	9806      	ldr	r0, [sp, #24]
 8006cda:	f002 f877 	bl	8008dcc <__ratio>
 8006cde:	2380      	movs	r3, #128	; 0x80
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	05db      	lsls	r3, r3, #23
 8006ce4:	0004      	movs	r4, r0
 8006ce6:	000d      	movs	r5, r1
 8006ce8:	f7f9 fbbe 	bl	8000468 <__aeabi_dcmple>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d075      	beq.n	8006ddc <_strtod_l+0xac0>
 8006cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d047      	beq.n	8006d86 <_strtod_l+0xa6a>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4c84      	ldr	r4, [pc, #528]	; (8006f0c <_strtod_l+0xbf0>)
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	9310      	str	r3, [sp, #64]	; 0x40
 8006cfe:	9411      	str	r4, [sp, #68]	; 0x44
 8006d00:	4c82      	ldr	r4, [pc, #520]	; (8006f0c <_strtod_l+0xbf0>)
 8006d02:	4a83      	ldr	r2, [pc, #524]	; (8006f10 <_strtod_l+0xbf4>)
 8006d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d06:	4013      	ands	r3, r2
 8006d08:	9314      	str	r3, [sp, #80]	; 0x50
 8006d0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d0c:	4b81      	ldr	r3, [pc, #516]	; (8006f14 <_strtod_l+0xbf8>)
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d000      	beq.n	8006d14 <_strtod_l+0x9f8>
 8006d12:	e0ac      	b.n	8006e6e <_strtod_l+0xb52>
 8006d14:	4a80      	ldr	r2, [pc, #512]	; (8006f18 <_strtod_l+0xbfc>)
 8006d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d18:	4694      	mov	ip, r2
 8006d1a:	4463      	add	r3, ip
 8006d1c:	001f      	movs	r7, r3
 8006d1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d22:	0030      	movs	r0, r6
 8006d24:	0039      	movs	r1, r7
 8006d26:	920c      	str	r2, [sp, #48]	; 0x30
 8006d28:	930d      	str	r3, [sp, #52]	; 0x34
 8006d2a:	f001 ff77 	bl	8008c1c <__ulp>
 8006d2e:	0002      	movs	r2, r0
 8006d30:	000b      	movs	r3, r1
 8006d32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d36:	f7fa fc4f 	bl	80015d8 <__aeabi_dmul>
 8006d3a:	0032      	movs	r2, r6
 8006d3c:	003b      	movs	r3, r7
 8006d3e:	f7f9 fd0d 	bl	800075c <__aeabi_dadd>
 8006d42:	4a73      	ldr	r2, [pc, #460]	; (8006f10 <_strtod_l+0xbf4>)
 8006d44:	4b75      	ldr	r3, [pc, #468]	; (8006f1c <_strtod_l+0xc00>)
 8006d46:	0006      	movs	r6, r0
 8006d48:	400a      	ands	r2, r1
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d95e      	bls.n	8006e0c <_strtod_l+0xaf0>
 8006d4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d50:	4b73      	ldr	r3, [pc, #460]	; (8006f20 <_strtod_l+0xc04>)
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d103      	bne.n	8006d5e <_strtod_l+0xa42>
 8006d56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d58:	3301      	adds	r3, #1
 8006d5a:	d100      	bne.n	8006d5e <_strtod_l+0xa42>
 8006d5c:	e548      	b.n	80067f0 <_strtod_l+0x4d4>
 8006d5e:	2601      	movs	r6, #1
 8006d60:	4f6f      	ldr	r7, [pc, #444]	; (8006f20 <_strtod_l+0xc04>)
 8006d62:	4276      	negs	r6, r6
 8006d64:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006d66:	9805      	ldr	r0, [sp, #20]
 8006d68:	f001 fc18 	bl	800859c <_Bfree>
 8006d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d6e:	9805      	ldr	r0, [sp, #20]
 8006d70:	f001 fc14 	bl	800859c <_Bfree>
 8006d74:	9907      	ldr	r1, [sp, #28]
 8006d76:	9805      	ldr	r0, [sp, #20]
 8006d78:	f001 fc10 	bl	800859c <_Bfree>
 8006d7c:	9906      	ldr	r1, [sp, #24]
 8006d7e:	9805      	ldr	r0, [sp, #20]
 8006d80:	f001 fc0c 	bl	800859c <_Bfree>
 8006d84:	e61d      	b.n	80069c2 <_strtod_l+0x6a6>
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d11c      	bne.n	8006dc4 <_strtod_l+0xaa8>
 8006d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d8c:	031b      	lsls	r3, r3, #12
 8006d8e:	d11f      	bne.n	8006dd0 <_strtod_l+0xab4>
 8006d90:	2200      	movs	r2, #0
 8006d92:	0020      	movs	r0, r4
 8006d94:	0029      	movs	r1, r5
 8006d96:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <_strtod_l+0xbf0>)
 8006d98:	f7f9 fb5c 	bl	8000454 <__aeabi_dcmplt>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d11a      	bne.n	8006dd6 <_strtod_l+0xaba>
 8006da0:	0020      	movs	r0, r4
 8006da2:	0029      	movs	r1, r5
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b5f      	ldr	r3, [pc, #380]	; (8006f24 <_strtod_l+0xc08>)
 8006da8:	f7fa fc16 	bl	80015d8 <__aeabi_dmul>
 8006dac:	0005      	movs	r5, r0
 8006dae:	000c      	movs	r4, r1
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	061b      	lsls	r3, r3, #24
 8006db4:	18e3      	adds	r3, r4, r3
 8006db6:	951c      	str	r5, [sp, #112]	; 0x70
 8006db8:	931d      	str	r3, [sp, #116]	; 0x74
 8006dba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dbe:	9210      	str	r2, [sp, #64]	; 0x40
 8006dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8006dc2:	e79e      	b.n	8006d02 <_strtod_l+0x9e6>
 8006dc4:	2e01      	cmp	r6, #1
 8006dc6:	d103      	bne.n	8006dd0 <_strtod_l+0xab4>
 8006dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d100      	bne.n	8006dd0 <_strtod_l+0xab4>
 8006dce:	e582      	b.n	80068d6 <_strtod_l+0x5ba>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4c55      	ldr	r4, [pc, #340]	; (8006f28 <_strtod_l+0xc0c>)
 8006dd4:	e791      	b.n	8006cfa <_strtod_l+0x9de>
 8006dd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006dd8:	4c52      	ldr	r4, [pc, #328]	; (8006f24 <_strtod_l+0xc08>)
 8006dda:	e7e9      	b.n	8006db0 <_strtod_l+0xa94>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	0020      	movs	r0, r4
 8006de0:	0029      	movs	r1, r5
 8006de2:	4b50      	ldr	r3, [pc, #320]	; (8006f24 <_strtod_l+0xc08>)
 8006de4:	f7fa fbf8 	bl	80015d8 <__aeabi_dmul>
 8006de8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dea:	0005      	movs	r5, r0
 8006dec:	000b      	movs	r3, r1
 8006dee:	000c      	movs	r4, r1
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	d107      	bne.n	8006e04 <_strtod_l+0xae8>
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	0612      	lsls	r2, r2, #24
 8006df8:	188b      	adds	r3, r1, r2
 8006dfa:	9016      	str	r0, [sp, #88]	; 0x58
 8006dfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8006dfe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e02:	e7dc      	b.n	8006dbe <_strtod_l+0xaa2>
 8006e04:	0002      	movs	r2, r0
 8006e06:	9216      	str	r2, [sp, #88]	; 0x58
 8006e08:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e0a:	e7f8      	b.n	8006dfe <_strtod_l+0xae2>
 8006e0c:	23d4      	movs	r3, #212	; 0xd4
 8006e0e:	049b      	lsls	r3, r3, #18
 8006e10:	18cf      	adds	r7, r1, r3
 8006e12:	9b08      	ldr	r3, [sp, #32]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1a5      	bne.n	8006d64 <_strtod_l+0xa48>
 8006e18:	4b3d      	ldr	r3, [pc, #244]	; (8006f10 <_strtod_l+0xbf4>)
 8006e1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e1c:	403b      	ands	r3, r7
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d1a0      	bne.n	8006d64 <_strtod_l+0xa48>
 8006e22:	0028      	movs	r0, r5
 8006e24:	0021      	movs	r1, r4
 8006e26:	f7f9 fb7b 	bl	8000520 <__aeabi_d2lz>
 8006e2a:	f7f9 fbb5 	bl	8000598 <__aeabi_l2d>
 8006e2e:	0002      	movs	r2, r0
 8006e30:	000b      	movs	r3, r1
 8006e32:	0028      	movs	r0, r5
 8006e34:	0021      	movs	r1, r4
 8006e36:	f7fa fe3b 	bl	8001ab0 <__aeabi_dsub>
 8006e3a:	033b      	lsls	r3, r7, #12
 8006e3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e3e:	0b1b      	lsrs	r3, r3, #12
 8006e40:	4333      	orrs	r3, r6
 8006e42:	4313      	orrs	r3, r2
 8006e44:	0004      	movs	r4, r0
 8006e46:	000d      	movs	r5, r1
 8006e48:	4a38      	ldr	r2, [pc, #224]	; (8006f2c <_strtod_l+0xc10>)
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d055      	beq.n	8006efa <_strtod_l+0xbde>
 8006e4e:	4b38      	ldr	r3, [pc, #224]	; (8006f30 <_strtod_l+0xc14>)
 8006e50:	f7f9 fb00 	bl	8000454 <__aeabi_dcmplt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d000      	beq.n	8006e5a <_strtod_l+0xb3e>
 8006e58:	e4d3      	b.n	8006802 <_strtod_l+0x4e6>
 8006e5a:	0020      	movs	r0, r4
 8006e5c:	0029      	movs	r1, r5
 8006e5e:	4a35      	ldr	r2, [pc, #212]	; (8006f34 <_strtod_l+0xc18>)
 8006e60:	4b30      	ldr	r3, [pc, #192]	; (8006f24 <_strtod_l+0xc08>)
 8006e62:	f7f9 fb0b 	bl	800047c <__aeabi_dcmpgt>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d100      	bne.n	8006e6c <_strtod_l+0xb50>
 8006e6a:	e77b      	b.n	8006d64 <_strtod_l+0xa48>
 8006e6c:	e4c9      	b.n	8006802 <_strtod_l+0x4e6>
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02b      	beq.n	8006ecc <_strtod_l+0xbb0>
 8006e74:	23d4      	movs	r3, #212	; 0xd4
 8006e76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e78:	04db      	lsls	r3, r3, #19
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d826      	bhi.n	8006ecc <_strtod_l+0xbb0>
 8006e7e:	0028      	movs	r0, r5
 8006e80:	0021      	movs	r1, r4
 8006e82:	4a2d      	ldr	r2, [pc, #180]	; (8006f38 <_strtod_l+0xc1c>)
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <_strtod_l+0xc20>)
 8006e86:	f7f9 faef 	bl	8000468 <__aeabi_dcmple>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d017      	beq.n	8006ebe <_strtod_l+0xba2>
 8006e8e:	0028      	movs	r0, r5
 8006e90:	0021      	movs	r1, r4
 8006e92:	f7f9 fb27 	bl	80004e4 <__aeabi_d2uiz>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d100      	bne.n	8006e9c <_strtod_l+0xb80>
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f7fb fa1e 	bl	80022dc <__aeabi_ui2d>
 8006ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ea2:	0005      	movs	r5, r0
 8006ea4:	000b      	movs	r3, r1
 8006ea6:	000c      	movs	r4, r1
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	d122      	bne.n	8006ef2 <_strtod_l+0xbd6>
 8006eac:	2280      	movs	r2, #128	; 0x80
 8006eae:	0612      	lsls	r2, r2, #24
 8006eb0:	188b      	adds	r3, r1, r2
 8006eb2:	9018      	str	r0, [sp, #96]	; 0x60
 8006eb4:	9319      	str	r3, [sp, #100]	; 0x64
 8006eb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006eba:	9210      	str	r2, [sp, #64]	; 0x40
 8006ebc:	9311      	str	r3, [sp, #68]	; 0x44
 8006ebe:	22d6      	movs	r2, #214	; 0xd6
 8006ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ec2:	04d2      	lsls	r2, r2, #19
 8006ec4:	189b      	adds	r3, r3, r2
 8006ec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	9311      	str	r3, [sp, #68]	; 0x44
 8006ecc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ece:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ed0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006ed2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8006ed4:	f001 fea2 	bl	8008c1c <__ulp>
 8006ed8:	0002      	movs	r2, r0
 8006eda:	000b      	movs	r3, r1
 8006edc:	0030      	movs	r0, r6
 8006ede:	0039      	movs	r1, r7
 8006ee0:	f7fa fb7a 	bl	80015d8 <__aeabi_dmul>
 8006ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ee8:	f7f9 fc38 	bl	800075c <__aeabi_dadd>
 8006eec:	0006      	movs	r6, r0
 8006eee:	000f      	movs	r7, r1
 8006ef0:	e78f      	b.n	8006e12 <_strtod_l+0xaf6>
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	9218      	str	r2, [sp, #96]	; 0x60
 8006ef6:	9319      	str	r3, [sp, #100]	; 0x64
 8006ef8:	e7dd      	b.n	8006eb6 <_strtod_l+0xb9a>
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <_strtod_l+0xc24>)
 8006efc:	f7f9 faaa 	bl	8000454 <__aeabi_dcmplt>
 8006f00:	e7b1      	b.n	8006e66 <_strtod_l+0xb4a>
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	fff00000 	.word	0xfff00000
 8006f08:	000fffff 	.word	0x000fffff
 8006f0c:	3ff00000 	.word	0x3ff00000
 8006f10:	7ff00000 	.word	0x7ff00000
 8006f14:	7fe00000 	.word	0x7fe00000
 8006f18:	fcb00000 	.word	0xfcb00000
 8006f1c:	7c9fffff 	.word	0x7c9fffff
 8006f20:	7fefffff 	.word	0x7fefffff
 8006f24:	3fe00000 	.word	0x3fe00000
 8006f28:	bff00000 	.word	0xbff00000
 8006f2c:	94a03595 	.word	0x94a03595
 8006f30:	3fdfffff 	.word	0x3fdfffff
 8006f34:	35afe535 	.word	0x35afe535
 8006f38:	ffc00000 	.word	0xffc00000
 8006f3c:	41dfffff 	.word	0x41dfffff
 8006f40:	3fcfffff 	.word	0x3fcfffff

08006f44 <_strtod_r>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <_strtod_r+0xc>)
 8006f48:	f7ff f9e8 	bl	800631c <_strtod_l>
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	20000074 	.word	0x20000074

08006f54 <_strtol_l.constprop.0>:
 8006f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f56:	b087      	sub	sp, #28
 8006f58:	001e      	movs	r6, r3
 8006f5a:	9005      	str	r0, [sp, #20]
 8006f5c:	9101      	str	r1, [sp, #4]
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d045      	beq.n	8006ff0 <_strtol_l.constprop.0+0x9c>
 8006f64:	000b      	movs	r3, r1
 8006f66:	2e24      	cmp	r6, #36	; 0x24
 8006f68:	d842      	bhi.n	8006ff0 <_strtol_l.constprop.0+0x9c>
 8006f6a:	4a3f      	ldr	r2, [pc, #252]	; (8007068 <_strtol_l.constprop.0+0x114>)
 8006f6c:	2108      	movs	r1, #8
 8006f6e:	4694      	mov	ip, r2
 8006f70:	001a      	movs	r2, r3
 8006f72:	4660      	mov	r0, ip
 8006f74:	7814      	ldrb	r4, [r2, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	5d00      	ldrb	r0, [r0, r4]
 8006f7a:	001d      	movs	r5, r3
 8006f7c:	0007      	movs	r7, r0
 8006f7e:	400f      	ands	r7, r1
 8006f80:	4208      	tst	r0, r1
 8006f82:	d1f5      	bne.n	8006f70 <_strtol_l.constprop.0+0x1c>
 8006f84:	2c2d      	cmp	r4, #45	; 0x2d
 8006f86:	d13a      	bne.n	8006ffe <_strtol_l.constprop.0+0xaa>
 8006f88:	2701      	movs	r7, #1
 8006f8a:	781c      	ldrb	r4, [r3, #0]
 8006f8c:	1c95      	adds	r5, r2, #2
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d065      	beq.n	800705e <_strtol_l.constprop.0+0x10a>
 8006f92:	2e10      	cmp	r6, #16
 8006f94:	d109      	bne.n	8006faa <_strtol_l.constprop.0+0x56>
 8006f96:	2c30      	cmp	r4, #48	; 0x30
 8006f98:	d107      	bne.n	8006faa <_strtol_l.constprop.0+0x56>
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	782b      	ldrb	r3, [r5, #0]
 8006f9e:	4393      	bics	r3, r2
 8006fa0:	2b58      	cmp	r3, #88	; 0x58
 8006fa2:	d157      	bne.n	8007054 <_strtol_l.constprop.0+0x100>
 8006fa4:	2610      	movs	r6, #16
 8006fa6:	786c      	ldrb	r4, [r5, #1]
 8006fa8:	3502      	adds	r5, #2
 8006faa:	4b30      	ldr	r3, [pc, #192]	; (800706c <_strtol_l.constprop.0+0x118>)
 8006fac:	0031      	movs	r1, r6
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	f7f9 f948 	bl	8000248 <__aeabi_uidivmod>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4684      	mov	ip, r0
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	9104      	str	r1, [sp, #16]
 8006fc2:	4252      	negs	r2, r2
 8006fc4:	0021      	movs	r1, r4
 8006fc6:	3930      	subs	r1, #48	; 0x30
 8006fc8:	2909      	cmp	r1, #9
 8006fca:	d81d      	bhi.n	8007008 <_strtol_l.constprop.0+0xb4>
 8006fcc:	000c      	movs	r4, r1
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	dd28      	ble.n	8007024 <_strtol_l.constprop.0+0xd0>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db24      	blt.n	8007020 <_strtol_l.constprop.0+0xcc>
 8006fd6:	0013      	movs	r3, r2
 8006fd8:	4584      	cmp	ip, r0
 8006fda:	d306      	bcc.n	8006fea <_strtol_l.constprop.0+0x96>
 8006fdc:	d102      	bne.n	8006fe4 <_strtol_l.constprop.0+0x90>
 8006fde:	9904      	ldr	r1, [sp, #16]
 8006fe0:	42a1      	cmp	r1, r4
 8006fe2:	db02      	blt.n	8006fea <_strtol_l.constprop.0+0x96>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4370      	muls	r0, r6
 8006fe8:	1820      	adds	r0, r4, r0
 8006fea:	782c      	ldrb	r4, [r5, #0]
 8006fec:	3501      	adds	r5, #1
 8006fee:	e7e9      	b.n	8006fc4 <_strtol_l.constprop.0+0x70>
 8006ff0:	f7fe fab0 	bl	8005554 <__errno>
 8006ff4:	2316      	movs	r3, #22
 8006ff6:	6003      	str	r3, [r0, #0]
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	b007      	add	sp, #28
 8006ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffe:	2c2b      	cmp	r4, #43	; 0x2b
 8007000:	d1c5      	bne.n	8006f8e <_strtol_l.constprop.0+0x3a>
 8007002:	781c      	ldrb	r4, [r3, #0]
 8007004:	1c95      	adds	r5, r2, #2
 8007006:	e7c2      	b.n	8006f8e <_strtol_l.constprop.0+0x3a>
 8007008:	0021      	movs	r1, r4
 800700a:	3941      	subs	r1, #65	; 0x41
 800700c:	2919      	cmp	r1, #25
 800700e:	d801      	bhi.n	8007014 <_strtol_l.constprop.0+0xc0>
 8007010:	3c37      	subs	r4, #55	; 0x37
 8007012:	e7dc      	b.n	8006fce <_strtol_l.constprop.0+0x7a>
 8007014:	0021      	movs	r1, r4
 8007016:	3961      	subs	r1, #97	; 0x61
 8007018:	2919      	cmp	r1, #25
 800701a:	d803      	bhi.n	8007024 <_strtol_l.constprop.0+0xd0>
 800701c:	3c57      	subs	r4, #87	; 0x57
 800701e:	e7d6      	b.n	8006fce <_strtol_l.constprop.0+0x7a>
 8007020:	0013      	movs	r3, r2
 8007022:	e7e2      	b.n	8006fea <_strtol_l.constprop.0+0x96>
 8007024:	2b00      	cmp	r3, #0
 8007026:	da09      	bge.n	800703c <_strtol_l.constprop.0+0xe8>
 8007028:	2322      	movs	r3, #34	; 0x22
 800702a:	9a05      	ldr	r2, [sp, #20]
 800702c:	9803      	ldr	r0, [sp, #12]
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0e1      	beq.n	8006ffa <_strtol_l.constprop.0+0xa6>
 8007036:	1e6b      	subs	r3, r5, #1
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	e007      	b.n	800704c <_strtol_l.constprop.0+0xf8>
 800703c:	2f00      	cmp	r7, #0
 800703e:	d000      	beq.n	8007042 <_strtol_l.constprop.0+0xee>
 8007040:	4240      	negs	r0, r0
 8007042:	9a02      	ldr	r2, [sp, #8]
 8007044:	2a00      	cmp	r2, #0
 8007046:	d0d8      	beq.n	8006ffa <_strtol_l.constprop.0+0xa6>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f4      	bne.n	8007036 <_strtol_l.constprop.0+0xe2>
 800704c:	9b02      	ldr	r3, [sp, #8]
 800704e:	9a01      	ldr	r2, [sp, #4]
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e7d2      	b.n	8006ffa <_strtol_l.constprop.0+0xa6>
 8007054:	2430      	movs	r4, #48	; 0x30
 8007056:	2e00      	cmp	r6, #0
 8007058:	d1a7      	bne.n	8006faa <_strtol_l.constprop.0+0x56>
 800705a:	3608      	adds	r6, #8
 800705c:	e7a5      	b.n	8006faa <_strtol_l.constprop.0+0x56>
 800705e:	2c30      	cmp	r4, #48	; 0x30
 8007060:	d09b      	beq.n	8006f9a <_strtol_l.constprop.0+0x46>
 8007062:	260a      	movs	r6, #10
 8007064:	e7a1      	b.n	8006faa <_strtol_l.constprop.0+0x56>
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	0800a1f1 	.word	0x0800a1f1
 800706c:	7fffffff 	.word	0x7fffffff

08007070 <_strtol_r>:
 8007070:	b510      	push	{r4, lr}
 8007072:	f7ff ff6f 	bl	8006f54 <_strtol_l.constprop.0>
 8007076:	bd10      	pop	{r4, pc}

08007078 <quorem>:
 8007078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707a:	0006      	movs	r6, r0
 800707c:	690b      	ldr	r3, [r1, #16]
 800707e:	6932      	ldr	r2, [r6, #16]
 8007080:	b087      	sub	sp, #28
 8007082:	2000      	movs	r0, #0
 8007084:	9103      	str	r1, [sp, #12]
 8007086:	429a      	cmp	r2, r3
 8007088:	db65      	blt.n	8007156 <quorem+0xde>
 800708a:	3b01      	subs	r3, #1
 800708c:	009c      	lsls	r4, r3, #2
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	000b      	movs	r3, r1
 8007092:	3314      	adds	r3, #20
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	191b      	adds	r3, r3, r4
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	0033      	movs	r3, r6
 800709c:	3314      	adds	r3, #20
 800709e:	9302      	str	r3, [sp, #8]
 80070a0:	191c      	adds	r4, r3, r4
 80070a2:	9b04      	ldr	r3, [sp, #16]
 80070a4:	6827      	ldr	r7, [r4, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	0038      	movs	r0, r7
 80070aa:	1c5d      	adds	r5, r3, #1
 80070ac:	0029      	movs	r1, r5
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	f7f9 f844 	bl	800013c <__udivsi3>
 80070b4:	9001      	str	r0, [sp, #4]
 80070b6:	42af      	cmp	r7, r5
 80070b8:	d324      	bcc.n	8007104 <quorem+0x8c>
 80070ba:	2500      	movs	r5, #0
 80070bc:	46ac      	mov	ip, r5
 80070be:	9802      	ldr	r0, [sp, #8]
 80070c0:	9f05      	ldr	r7, [sp, #20]
 80070c2:	cf08      	ldmia	r7!, {r3}
 80070c4:	9a01      	ldr	r2, [sp, #4]
 80070c6:	b299      	uxth	r1, r3
 80070c8:	4351      	muls	r1, r2
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	4353      	muls	r3, r2
 80070ce:	1949      	adds	r1, r1, r5
 80070d0:	0c0a      	lsrs	r2, r1, #16
 80070d2:	189b      	adds	r3, r3, r2
 80070d4:	6802      	ldr	r2, [r0, #0]
 80070d6:	b289      	uxth	r1, r1
 80070d8:	b292      	uxth	r2, r2
 80070da:	4462      	add	r2, ip
 80070dc:	1a52      	subs	r2, r2, r1
 80070de:	6801      	ldr	r1, [r0, #0]
 80070e0:	0c1d      	lsrs	r5, r3, #16
 80070e2:	0c09      	lsrs	r1, r1, #16
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	1acb      	subs	r3, r1, r3
 80070e8:	1411      	asrs	r1, r2, #16
 80070ea:	185b      	adds	r3, r3, r1
 80070ec:	1419      	asrs	r1, r3, #16
 80070ee:	b292      	uxth	r2, r2
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	431a      	orrs	r2, r3
 80070f4:	9b04      	ldr	r3, [sp, #16]
 80070f6:	468c      	mov	ip, r1
 80070f8:	c004      	stmia	r0!, {r2}
 80070fa:	42bb      	cmp	r3, r7
 80070fc:	d2e1      	bcs.n	80070c2 <quorem+0x4a>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d030      	beq.n	8007166 <quorem+0xee>
 8007104:	0030      	movs	r0, r6
 8007106:	9903      	ldr	r1, [sp, #12]
 8007108:	f001 fcd4 	bl	8008ab4 <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	db21      	blt.n	8007154 <quorem+0xdc>
 8007110:	0030      	movs	r0, r6
 8007112:	2400      	movs	r4, #0
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	9903      	ldr	r1, [sp, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	3014      	adds	r0, #20
 800711e:	3114      	adds	r1, #20
 8007120:	6803      	ldr	r3, [r0, #0]
 8007122:	c920      	ldmia	r1!, {r5}
 8007124:	b29a      	uxth	r2, r3
 8007126:	1914      	adds	r4, r2, r4
 8007128:	b2aa      	uxth	r2, r5
 800712a:	1aa2      	subs	r2, r4, r2
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	0c2d      	lsrs	r5, r5, #16
 8007130:	1414      	asrs	r4, r2, #16
 8007132:	1b5b      	subs	r3, r3, r5
 8007134:	191b      	adds	r3, r3, r4
 8007136:	141c      	asrs	r4, r3, #16
 8007138:	b292      	uxth	r2, r2
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	4313      	orrs	r3, r2
 800713e:	c008      	stmia	r0!, {r3}
 8007140:	9b04      	ldr	r3, [sp, #16]
 8007142:	428b      	cmp	r3, r1
 8007144:	d2ec      	bcs.n	8007120 <quorem+0xa8>
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	9a02      	ldr	r2, [sp, #8]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	2a00      	cmp	r2, #0
 8007152:	d015      	beq.n	8007180 <quorem+0x108>
 8007154:	9801      	ldr	r0, [sp, #4]
 8007156:	b007      	add	sp, #28
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <quorem+0xf6>
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	9b02      	ldr	r3, [sp, #8]
 8007168:	3c04      	subs	r4, #4
 800716a:	42a3      	cmp	r3, r4
 800716c:	d3f5      	bcc.n	800715a <quorem+0xe2>
 800716e:	9b00      	ldr	r3, [sp, #0]
 8007170:	6133      	str	r3, [r6, #16]
 8007172:	e7c7      	b.n	8007104 <quorem+0x8c>
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	2a00      	cmp	r2, #0
 8007178:	d106      	bne.n	8007188 <quorem+0x110>
 800717a:	9a00      	ldr	r2, [sp, #0]
 800717c:	3a01      	subs	r2, #1
 800717e:	9200      	str	r2, [sp, #0]
 8007180:	9a02      	ldr	r2, [sp, #8]
 8007182:	3b04      	subs	r3, #4
 8007184:	429a      	cmp	r2, r3
 8007186:	d3f5      	bcc.n	8007174 <quorem+0xfc>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	6133      	str	r3, [r6, #16]
 800718c:	e7e2      	b.n	8007154 <quorem+0xdc>
	...

08007190 <_dtoa_r>:
 8007190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007192:	b09d      	sub	sp, #116	; 0x74
 8007194:	9202      	str	r2, [sp, #8]
 8007196:	9303      	str	r3, [sp, #12]
 8007198:	9b02      	ldr	r3, [sp, #8]
 800719a:	9c03      	ldr	r4, [sp, #12]
 800719c:	9308      	str	r3, [sp, #32]
 800719e:	9409      	str	r4, [sp, #36]	; 0x24
 80071a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071a2:	0007      	movs	r7, r0
 80071a4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80071a6:	2c00      	cmp	r4, #0
 80071a8:	d10e      	bne.n	80071c8 <_dtoa_r+0x38>
 80071aa:	2010      	movs	r0, #16
 80071ac:	f001 f982 	bl	80084b4 <malloc>
 80071b0:	1e02      	subs	r2, r0, #0
 80071b2:	6278      	str	r0, [r7, #36]	; 0x24
 80071b4:	d104      	bne.n	80071c0 <_dtoa_r+0x30>
 80071b6:	21ea      	movs	r1, #234	; 0xea
 80071b8:	4bc7      	ldr	r3, [pc, #796]	; (80074d8 <_dtoa_r+0x348>)
 80071ba:	48c8      	ldr	r0, [pc, #800]	; (80074dc <_dtoa_r+0x34c>)
 80071bc:	f002 f91c 	bl	80093f8 <__assert_func>
 80071c0:	6044      	str	r4, [r0, #4]
 80071c2:	6084      	str	r4, [r0, #8]
 80071c4:	6004      	str	r4, [r0, #0]
 80071c6:	60c4      	str	r4, [r0, #12]
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	6819      	ldr	r1, [r3, #0]
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d00a      	beq.n	80071e6 <_dtoa_r+0x56>
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	2301      	movs	r3, #1
 80071d4:	4093      	lsls	r3, r2
 80071d6:	604a      	str	r2, [r1, #4]
 80071d8:	608b      	str	r3, [r1, #8]
 80071da:	0038      	movs	r0, r7
 80071dc:	f001 f9de 	bl	800859c <_Bfree>
 80071e0:	2200      	movs	r2, #0
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da20      	bge.n	800722e <_dtoa_r+0x9e>
 80071ec:	2301      	movs	r3, #1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	9309      	str	r3, [sp, #36]	; 0x24
 80071f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80071fa:	4bb9      	ldr	r3, [pc, #740]	; (80074e0 <_dtoa_r+0x350>)
 80071fc:	4ab8      	ldr	r2, [pc, #736]	; (80074e0 <_dtoa_r+0x350>)
 80071fe:	402b      	ands	r3, r5
 8007200:	4293      	cmp	r3, r2
 8007202:	d117      	bne.n	8007234 <_dtoa_r+0xa4>
 8007204:	4bb7      	ldr	r3, [pc, #732]	; (80074e4 <_dtoa_r+0x354>)
 8007206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007208:	0328      	lsls	r0, r5, #12
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	9b02      	ldr	r3, [sp, #8]
 800720e:	0b00      	lsrs	r0, r0, #12
 8007210:	4318      	orrs	r0, r3
 8007212:	d101      	bne.n	8007218 <_dtoa_r+0x88>
 8007214:	f000 fdbf 	bl	8007d96 <_dtoa_r+0xc06>
 8007218:	48b3      	ldr	r0, [pc, #716]	; (80074e8 <_dtoa_r+0x358>)
 800721a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800721c:	9006      	str	r0, [sp, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <_dtoa_r+0x98>
 8007222:	4bb2      	ldr	r3, [pc, #712]	; (80074ec <_dtoa_r+0x35c>)
 8007224:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	9806      	ldr	r0, [sp, #24]
 800722a:	b01d      	add	sp, #116	; 0x74
 800722c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722e:	2300      	movs	r3, #0
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	e7e1      	b.n	80071f8 <_dtoa_r+0x68>
 8007234:	9b08      	ldr	r3, [sp, #32]
 8007236:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007238:	9312      	str	r3, [sp, #72]	; 0x48
 800723a:	9413      	str	r4, [sp, #76]	; 0x4c
 800723c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800723e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007240:	2200      	movs	r2, #0
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 f900 	bl	8000448 <__aeabi_dcmpeq>
 8007248:	1e04      	subs	r4, r0, #0
 800724a:	d009      	beq.n	8007260 <_dtoa_r+0xd0>
 800724c:	2301      	movs	r3, #1
 800724e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	4ba7      	ldr	r3, [pc, #668]	; (80074f0 <_dtoa_r+0x360>)
 8007254:	9306      	str	r3, [sp, #24]
 8007256:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0e5      	beq.n	8007228 <_dtoa_r+0x98>
 800725c:	4ba5      	ldr	r3, [pc, #660]	; (80074f4 <_dtoa_r+0x364>)
 800725e:	e7e1      	b.n	8007224 <_dtoa_r+0x94>
 8007260:	ab1a      	add	r3, sp, #104	; 0x68
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	ab1b      	add	r3, sp, #108	; 0x6c
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	0038      	movs	r0, r7
 800726a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800726c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800726e:	f001 fd49 	bl	8008d04 <__d2b>
 8007272:	006e      	lsls	r6, r5, #1
 8007274:	9005      	str	r0, [sp, #20]
 8007276:	0d76      	lsrs	r6, r6, #21
 8007278:	d100      	bne.n	800727c <_dtoa_r+0xec>
 800727a:	e07c      	b.n	8007376 <_dtoa_r+0x1e6>
 800727c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800727e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007282:	4a9d      	ldr	r2, [pc, #628]	; (80074f8 <_dtoa_r+0x368>)
 8007284:	031b      	lsls	r3, r3, #12
 8007286:	0b1b      	lsrs	r3, r3, #12
 8007288:	431a      	orrs	r2, r3
 800728a:	0011      	movs	r1, r2
 800728c:	4b9b      	ldr	r3, [pc, #620]	; (80074fc <_dtoa_r+0x36c>)
 800728e:	9418      	str	r4, [sp, #96]	; 0x60
 8007290:	18f6      	adds	r6, r6, r3
 8007292:	2200      	movs	r2, #0
 8007294:	4b9a      	ldr	r3, [pc, #616]	; (8007500 <_dtoa_r+0x370>)
 8007296:	f7fa fc0b 	bl	8001ab0 <__aeabi_dsub>
 800729a:	4a9a      	ldr	r2, [pc, #616]	; (8007504 <_dtoa_r+0x374>)
 800729c:	4b9a      	ldr	r3, [pc, #616]	; (8007508 <_dtoa_r+0x378>)
 800729e:	f7fa f99b 	bl	80015d8 <__aeabi_dmul>
 80072a2:	4a9a      	ldr	r2, [pc, #616]	; (800750c <_dtoa_r+0x37c>)
 80072a4:	4b9a      	ldr	r3, [pc, #616]	; (8007510 <_dtoa_r+0x380>)
 80072a6:	f7f9 fa59 	bl	800075c <__aeabi_dadd>
 80072aa:	0004      	movs	r4, r0
 80072ac:	0030      	movs	r0, r6
 80072ae:	000d      	movs	r5, r1
 80072b0:	f7fa ffe4 	bl	800227c <__aeabi_i2d>
 80072b4:	4a97      	ldr	r2, [pc, #604]	; (8007514 <_dtoa_r+0x384>)
 80072b6:	4b98      	ldr	r3, [pc, #608]	; (8007518 <_dtoa_r+0x388>)
 80072b8:	f7fa f98e 	bl	80015d8 <__aeabi_dmul>
 80072bc:	0002      	movs	r2, r0
 80072be:	000b      	movs	r3, r1
 80072c0:	0020      	movs	r0, r4
 80072c2:	0029      	movs	r1, r5
 80072c4:	f7f9 fa4a 	bl	800075c <__aeabi_dadd>
 80072c8:	0004      	movs	r4, r0
 80072ca:	000d      	movs	r5, r1
 80072cc:	f7fa ffa0 	bl	8002210 <__aeabi_d2iz>
 80072d0:	2200      	movs	r2, #0
 80072d2:	9002      	str	r0, [sp, #8]
 80072d4:	2300      	movs	r3, #0
 80072d6:	0020      	movs	r0, r4
 80072d8:	0029      	movs	r1, r5
 80072da:	f7f9 f8bb 	bl	8000454 <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d00b      	beq.n	80072fa <_dtoa_r+0x16a>
 80072e2:	9802      	ldr	r0, [sp, #8]
 80072e4:	f7fa ffca 	bl	800227c <__aeabi_i2d>
 80072e8:	002b      	movs	r3, r5
 80072ea:	0022      	movs	r2, r4
 80072ec:	f7f9 f8ac 	bl	8000448 <__aeabi_dcmpeq>
 80072f0:	4243      	negs	r3, r0
 80072f2:	4158      	adcs	r0, r3
 80072f4:	9b02      	ldr	r3, [sp, #8]
 80072f6:	1a1b      	subs	r3, r3, r0
 80072f8:	9302      	str	r3, [sp, #8]
 80072fa:	2301      	movs	r3, #1
 80072fc:	9316      	str	r3, [sp, #88]	; 0x58
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	2b16      	cmp	r3, #22
 8007302:	d80f      	bhi.n	8007324 <_dtoa_r+0x194>
 8007304:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007306:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007308:	00da      	lsls	r2, r3, #3
 800730a:	4b84      	ldr	r3, [pc, #528]	; (800751c <_dtoa_r+0x38c>)
 800730c:	189b      	adds	r3, r3, r2
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f7f9 f89f 	bl	8000454 <__aeabi_dcmplt>
 8007316:	2800      	cmp	r0, #0
 8007318:	d049      	beq.n	80073ae <_dtoa_r+0x21e>
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	3b01      	subs	r3, #1
 800731e:	9302      	str	r3, [sp, #8]
 8007320:	2300      	movs	r3, #0
 8007322:	9316      	str	r3, [sp, #88]	; 0x58
 8007324:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007326:	1b9e      	subs	r6, r3, r6
 8007328:	2300      	movs	r3, #0
 800732a:	930a      	str	r3, [sp, #40]	; 0x28
 800732c:	0033      	movs	r3, r6
 800732e:	3b01      	subs	r3, #1
 8007330:	930d      	str	r3, [sp, #52]	; 0x34
 8007332:	d504      	bpl.n	800733e <_dtoa_r+0x1ae>
 8007334:	2301      	movs	r3, #1
 8007336:	1b9b      	subs	r3, r3, r6
 8007338:	930a      	str	r3, [sp, #40]	; 0x28
 800733a:	2300      	movs	r3, #0
 800733c:	930d      	str	r3, [sp, #52]	; 0x34
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	db36      	blt.n	80073b2 <_dtoa_r+0x222>
 8007344:	9a02      	ldr	r2, [sp, #8]
 8007346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007348:	4694      	mov	ip, r2
 800734a:	4463      	add	r3, ip
 800734c:	930d      	str	r3, [sp, #52]	; 0x34
 800734e:	2300      	movs	r3, #0
 8007350:	9215      	str	r2, [sp, #84]	; 0x54
 8007352:	930e      	str	r3, [sp, #56]	; 0x38
 8007354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007356:	2401      	movs	r4, #1
 8007358:	2b09      	cmp	r3, #9
 800735a:	d864      	bhi.n	8007426 <_dtoa_r+0x296>
 800735c:	2b05      	cmp	r3, #5
 800735e:	dd02      	ble.n	8007366 <_dtoa_r+0x1d6>
 8007360:	2400      	movs	r4, #0
 8007362:	3b04      	subs	r3, #4
 8007364:	9322      	str	r3, [sp, #136]	; 0x88
 8007366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007368:	1e98      	subs	r0, r3, #2
 800736a:	2803      	cmp	r0, #3
 800736c:	d864      	bhi.n	8007438 <_dtoa_r+0x2a8>
 800736e:	f7f8 fed1 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007372:	3829      	.short	0x3829
 8007374:	5836      	.short	0x5836
 8007376:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007378:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800737a:	189e      	adds	r6, r3, r2
 800737c:	4b68      	ldr	r3, [pc, #416]	; (8007520 <_dtoa_r+0x390>)
 800737e:	18f2      	adds	r2, r6, r3
 8007380:	2a20      	cmp	r2, #32
 8007382:	dd0f      	ble.n	80073a4 <_dtoa_r+0x214>
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	409d      	lsls	r5, r3
 800738a:	4b66      	ldr	r3, [pc, #408]	; (8007524 <_dtoa_r+0x394>)
 800738c:	9802      	ldr	r0, [sp, #8]
 800738e:	18f3      	adds	r3, r6, r3
 8007390:	40d8      	lsrs	r0, r3
 8007392:	4328      	orrs	r0, r5
 8007394:	f7fa ffa2 	bl	80022dc <__aeabi_ui2d>
 8007398:	2301      	movs	r3, #1
 800739a:	4c63      	ldr	r4, [pc, #396]	; (8007528 <_dtoa_r+0x398>)
 800739c:	3e01      	subs	r6, #1
 800739e:	1909      	adds	r1, r1, r4
 80073a0:	9318      	str	r3, [sp, #96]	; 0x60
 80073a2:	e776      	b.n	8007292 <_dtoa_r+0x102>
 80073a4:	2320      	movs	r3, #32
 80073a6:	9802      	ldr	r0, [sp, #8]
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	4098      	lsls	r0, r3
 80073ac:	e7f2      	b.n	8007394 <_dtoa_r+0x204>
 80073ae:	9016      	str	r0, [sp, #88]	; 0x58
 80073b0:	e7b8      	b.n	8007324 <_dtoa_r+0x194>
 80073b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b4:	9a02      	ldr	r2, [sp, #8]
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	930a      	str	r3, [sp, #40]	; 0x28
 80073ba:	4253      	negs	r3, r2
 80073bc:	930e      	str	r3, [sp, #56]	; 0x38
 80073be:	2300      	movs	r3, #0
 80073c0:	9315      	str	r3, [sp, #84]	; 0x54
 80073c2:	e7c7      	b.n	8007354 <_dtoa_r+0x1c4>
 80073c4:	2300      	movs	r3, #0
 80073c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073ca:	930c      	str	r3, [sp, #48]	; 0x30
 80073cc:	9307      	str	r3, [sp, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dc13      	bgt.n	80073fa <_dtoa_r+0x26a>
 80073d2:	2301      	movs	r3, #1
 80073d4:	001a      	movs	r2, r3
 80073d6:	930c      	str	r3, [sp, #48]	; 0x30
 80073d8:	9307      	str	r3, [sp, #28]
 80073da:	9223      	str	r2, [sp, #140]	; 0x8c
 80073dc:	e00d      	b.n	80073fa <_dtoa_r+0x26a>
 80073de:	2301      	movs	r3, #1
 80073e0:	e7f1      	b.n	80073c6 <_dtoa_r+0x236>
 80073e2:	2300      	movs	r3, #0
 80073e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80073e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e8:	4694      	mov	ip, r2
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	4463      	add	r3, ip
 80073ee:	930c      	str	r3, [sp, #48]	; 0x30
 80073f0:	3301      	adds	r3, #1
 80073f2:	9307      	str	r3, [sp, #28]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dc00      	bgt.n	80073fa <_dtoa_r+0x26a>
 80073f8:	2301      	movs	r3, #1
 80073fa:	2200      	movs	r2, #0
 80073fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073fe:	6042      	str	r2, [r0, #4]
 8007400:	3204      	adds	r2, #4
 8007402:	0015      	movs	r5, r2
 8007404:	3514      	adds	r5, #20
 8007406:	6841      	ldr	r1, [r0, #4]
 8007408:	429d      	cmp	r5, r3
 800740a:	d919      	bls.n	8007440 <_dtoa_r+0x2b0>
 800740c:	0038      	movs	r0, r7
 800740e:	f001 f881 	bl	8008514 <_Balloc>
 8007412:	9006      	str	r0, [sp, #24]
 8007414:	2800      	cmp	r0, #0
 8007416:	d117      	bne.n	8007448 <_dtoa_r+0x2b8>
 8007418:	21d5      	movs	r1, #213	; 0xd5
 800741a:	0002      	movs	r2, r0
 800741c:	4b43      	ldr	r3, [pc, #268]	; (800752c <_dtoa_r+0x39c>)
 800741e:	0049      	lsls	r1, r1, #1
 8007420:	e6cb      	b.n	80071ba <_dtoa_r+0x2a>
 8007422:	2301      	movs	r3, #1
 8007424:	e7de      	b.n	80073e4 <_dtoa_r+0x254>
 8007426:	2300      	movs	r3, #0
 8007428:	940f      	str	r4, [sp, #60]	; 0x3c
 800742a:	9322      	str	r3, [sp, #136]	; 0x88
 800742c:	3b01      	subs	r3, #1
 800742e:	930c      	str	r3, [sp, #48]	; 0x30
 8007430:	9307      	str	r3, [sp, #28]
 8007432:	2200      	movs	r2, #0
 8007434:	3313      	adds	r3, #19
 8007436:	e7d0      	b.n	80073da <_dtoa_r+0x24a>
 8007438:	2301      	movs	r3, #1
 800743a:	930f      	str	r3, [sp, #60]	; 0x3c
 800743c:	3b02      	subs	r3, #2
 800743e:	e7f6      	b.n	800742e <_dtoa_r+0x29e>
 8007440:	3101      	adds	r1, #1
 8007442:	6041      	str	r1, [r0, #4]
 8007444:	0052      	lsls	r2, r2, #1
 8007446:	e7dc      	b.n	8007402 <_dtoa_r+0x272>
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	9a06      	ldr	r2, [sp, #24]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	9b07      	ldr	r3, [sp, #28]
 8007450:	2b0e      	cmp	r3, #14
 8007452:	d900      	bls.n	8007456 <_dtoa_r+0x2c6>
 8007454:	e0eb      	b.n	800762e <_dtoa_r+0x49e>
 8007456:	2c00      	cmp	r4, #0
 8007458:	d100      	bne.n	800745c <_dtoa_r+0x2cc>
 800745a:	e0e8      	b.n	800762e <_dtoa_r+0x49e>
 800745c:	9b02      	ldr	r3, [sp, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd68      	ble.n	8007534 <_dtoa_r+0x3a4>
 8007462:	001a      	movs	r2, r3
 8007464:	210f      	movs	r1, #15
 8007466:	4b2d      	ldr	r3, [pc, #180]	; (800751c <_dtoa_r+0x38c>)
 8007468:	400a      	ands	r2, r1
 800746a:	00d2      	lsls	r2, r2, #3
 800746c:	189b      	adds	r3, r3, r2
 800746e:	681d      	ldr	r5, [r3, #0]
 8007470:	685e      	ldr	r6, [r3, #4]
 8007472:	9b02      	ldr	r3, [sp, #8]
 8007474:	111c      	asrs	r4, r3, #4
 8007476:	2302      	movs	r3, #2
 8007478:	9310      	str	r3, [sp, #64]	; 0x40
 800747a:	9b02      	ldr	r3, [sp, #8]
 800747c:	05db      	lsls	r3, r3, #23
 800747e:	d50b      	bpl.n	8007498 <_dtoa_r+0x308>
 8007480:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <_dtoa_r+0x3a0>)
 8007482:	400c      	ands	r4, r1
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	9812      	ldr	r0, [sp, #72]	; 0x48
 800748a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800748c:	f7f9 fca2 	bl	8000dd4 <__aeabi_ddiv>
 8007490:	2303      	movs	r3, #3
 8007492:	9008      	str	r0, [sp, #32]
 8007494:	9109      	str	r1, [sp, #36]	; 0x24
 8007496:	9310      	str	r3, [sp, #64]	; 0x40
 8007498:	4b25      	ldr	r3, [pc, #148]	; (8007530 <_dtoa_r+0x3a0>)
 800749a:	9314      	str	r3, [sp, #80]	; 0x50
 800749c:	2c00      	cmp	r4, #0
 800749e:	d108      	bne.n	80074b2 <_dtoa_r+0x322>
 80074a0:	9808      	ldr	r0, [sp, #32]
 80074a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074a4:	002a      	movs	r2, r5
 80074a6:	0033      	movs	r3, r6
 80074a8:	f7f9 fc94 	bl	8000dd4 <__aeabi_ddiv>
 80074ac:	9008      	str	r0, [sp, #32]
 80074ae:	9109      	str	r1, [sp, #36]	; 0x24
 80074b0:	e05c      	b.n	800756c <_dtoa_r+0x3dc>
 80074b2:	2301      	movs	r3, #1
 80074b4:	421c      	tst	r4, r3
 80074b6:	d00b      	beq.n	80074d0 <_dtoa_r+0x340>
 80074b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074ba:	0028      	movs	r0, r5
 80074bc:	3301      	adds	r3, #1
 80074be:	9310      	str	r3, [sp, #64]	; 0x40
 80074c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074c2:	0031      	movs	r1, r6
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f7fa f886 	bl	80015d8 <__aeabi_dmul>
 80074cc:	0005      	movs	r5, r0
 80074ce:	000e      	movs	r6, r1
 80074d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074d2:	1064      	asrs	r4, r4, #1
 80074d4:	3308      	adds	r3, #8
 80074d6:	e7e0      	b.n	800749a <_dtoa_r+0x30a>
 80074d8:	0800a2fe 	.word	0x0800a2fe
 80074dc:	0800a315 	.word	0x0800a315
 80074e0:	7ff00000 	.word	0x7ff00000
 80074e4:	0000270f 	.word	0x0000270f
 80074e8:	0800a2fa 	.word	0x0800a2fa
 80074ec:	0800a2fd 	.word	0x0800a2fd
 80074f0:	0800a170 	.word	0x0800a170
 80074f4:	0800a171 	.word	0x0800a171
 80074f8:	3ff00000 	.word	0x3ff00000
 80074fc:	fffffc01 	.word	0xfffffc01
 8007500:	3ff80000 	.word	0x3ff80000
 8007504:	636f4361 	.word	0x636f4361
 8007508:	3fd287a7 	.word	0x3fd287a7
 800750c:	8b60c8b3 	.word	0x8b60c8b3
 8007510:	3fc68a28 	.word	0x3fc68a28
 8007514:	509f79fb 	.word	0x509f79fb
 8007518:	3fd34413 	.word	0x3fd34413
 800751c:	0800a480 	.word	0x0800a480
 8007520:	00000432 	.word	0x00000432
 8007524:	00000412 	.word	0x00000412
 8007528:	fe100000 	.word	0xfe100000
 800752c:	0800a370 	.word	0x0800a370
 8007530:	0800a458 	.word	0x0800a458
 8007534:	2302      	movs	r3, #2
 8007536:	9310      	str	r3, [sp, #64]	; 0x40
 8007538:	9b02      	ldr	r3, [sp, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d016      	beq.n	800756c <_dtoa_r+0x3dc>
 800753e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007540:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007542:	425c      	negs	r4, r3
 8007544:	230f      	movs	r3, #15
 8007546:	4ab6      	ldr	r2, [pc, #728]	; (8007820 <_dtoa_r+0x690>)
 8007548:	4023      	ands	r3, r4
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	18d3      	adds	r3, r2, r3
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f7fa f841 	bl	80015d8 <__aeabi_dmul>
 8007556:	2601      	movs	r6, #1
 8007558:	2300      	movs	r3, #0
 800755a:	9008      	str	r0, [sp, #32]
 800755c:	9109      	str	r1, [sp, #36]	; 0x24
 800755e:	4db1      	ldr	r5, [pc, #708]	; (8007824 <_dtoa_r+0x694>)
 8007560:	1124      	asrs	r4, r4, #4
 8007562:	2c00      	cmp	r4, #0
 8007564:	d000      	beq.n	8007568 <_dtoa_r+0x3d8>
 8007566:	e094      	b.n	8007692 <_dtoa_r+0x502>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d19f      	bne.n	80074ac <_dtoa_r+0x31c>
 800756c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800756e:	2b00      	cmp	r3, #0
 8007570:	d100      	bne.n	8007574 <_dtoa_r+0x3e4>
 8007572:	e09b      	b.n	80076ac <_dtoa_r+0x51c>
 8007574:	9c08      	ldr	r4, [sp, #32]
 8007576:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007578:	2200      	movs	r2, #0
 800757a:	0020      	movs	r0, r4
 800757c:	0029      	movs	r1, r5
 800757e:	4baa      	ldr	r3, [pc, #680]	; (8007828 <_dtoa_r+0x698>)
 8007580:	f7f8 ff68 	bl	8000454 <__aeabi_dcmplt>
 8007584:	2800      	cmp	r0, #0
 8007586:	d100      	bne.n	800758a <_dtoa_r+0x3fa>
 8007588:	e090      	b.n	80076ac <_dtoa_r+0x51c>
 800758a:	9b07      	ldr	r3, [sp, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d100      	bne.n	8007592 <_dtoa_r+0x402>
 8007590:	e08c      	b.n	80076ac <_dtoa_r+0x51c>
 8007592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007594:	2b00      	cmp	r3, #0
 8007596:	dd46      	ble.n	8007626 <_dtoa_r+0x496>
 8007598:	9b02      	ldr	r3, [sp, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	0020      	movs	r0, r4
 800759e:	0029      	movs	r1, r5
 80075a0:	1e5e      	subs	r6, r3, #1
 80075a2:	4ba2      	ldr	r3, [pc, #648]	; (800782c <_dtoa_r+0x69c>)
 80075a4:	f7fa f818 	bl	80015d8 <__aeabi_dmul>
 80075a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075aa:	9008      	str	r0, [sp, #32]
 80075ac:	9109      	str	r1, [sp, #36]	; 0x24
 80075ae:	3301      	adds	r3, #1
 80075b0:	9310      	str	r3, [sp, #64]	; 0x40
 80075b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075b6:	9c08      	ldr	r4, [sp, #32]
 80075b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075ba:	9314      	str	r3, [sp, #80]	; 0x50
 80075bc:	f7fa fe5e 	bl	800227c <__aeabi_i2d>
 80075c0:	0022      	movs	r2, r4
 80075c2:	002b      	movs	r3, r5
 80075c4:	f7fa f808 	bl	80015d8 <__aeabi_dmul>
 80075c8:	2200      	movs	r2, #0
 80075ca:	4b99      	ldr	r3, [pc, #612]	; (8007830 <_dtoa_r+0x6a0>)
 80075cc:	f7f9 f8c6 	bl	800075c <__aeabi_dadd>
 80075d0:	9010      	str	r0, [sp, #64]	; 0x40
 80075d2:	9111      	str	r1, [sp, #68]	; 0x44
 80075d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075d8:	9208      	str	r2, [sp, #32]
 80075da:	9309      	str	r3, [sp, #36]	; 0x24
 80075dc:	4a95      	ldr	r2, [pc, #596]	; (8007834 <_dtoa_r+0x6a4>)
 80075de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e0:	4694      	mov	ip, r2
 80075e2:	4463      	add	r3, ip
 80075e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80075e6:	9309      	str	r3, [sp, #36]	; 0x24
 80075e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d161      	bne.n	80076b2 <_dtoa_r+0x522>
 80075ee:	2200      	movs	r2, #0
 80075f0:	0020      	movs	r0, r4
 80075f2:	0029      	movs	r1, r5
 80075f4:	4b90      	ldr	r3, [pc, #576]	; (8007838 <_dtoa_r+0x6a8>)
 80075f6:	f7fa fa5b 	bl	8001ab0 <__aeabi_dsub>
 80075fa:	9a08      	ldr	r2, [sp, #32]
 80075fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075fe:	0004      	movs	r4, r0
 8007600:	000d      	movs	r5, r1
 8007602:	f7f8 ff3b 	bl	800047c <__aeabi_dcmpgt>
 8007606:	2800      	cmp	r0, #0
 8007608:	d000      	beq.n	800760c <_dtoa_r+0x47c>
 800760a:	e2af      	b.n	8007b6c <_dtoa_r+0x9dc>
 800760c:	488b      	ldr	r0, [pc, #556]	; (800783c <_dtoa_r+0x6ac>)
 800760e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007610:	4684      	mov	ip, r0
 8007612:	4461      	add	r1, ip
 8007614:	000b      	movs	r3, r1
 8007616:	0020      	movs	r0, r4
 8007618:	0029      	movs	r1, r5
 800761a:	9a08      	ldr	r2, [sp, #32]
 800761c:	f7f8 ff1a 	bl	8000454 <__aeabi_dcmplt>
 8007620:	2800      	cmp	r0, #0
 8007622:	d000      	beq.n	8007626 <_dtoa_r+0x496>
 8007624:	e29f      	b.n	8007b66 <_dtoa_r+0x9d6>
 8007626:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007628:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800762a:	9308      	str	r3, [sp, #32]
 800762c:	9409      	str	r4, [sp, #36]	; 0x24
 800762e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007630:	2b00      	cmp	r3, #0
 8007632:	da00      	bge.n	8007636 <_dtoa_r+0x4a6>
 8007634:	e172      	b.n	800791c <_dtoa_r+0x78c>
 8007636:	9a02      	ldr	r2, [sp, #8]
 8007638:	2a0e      	cmp	r2, #14
 800763a:	dd00      	ble.n	800763e <_dtoa_r+0x4ae>
 800763c:	e16e      	b.n	800791c <_dtoa_r+0x78c>
 800763e:	4b78      	ldr	r3, [pc, #480]	; (8007820 <_dtoa_r+0x690>)
 8007640:	00d2      	lsls	r2, r2, #3
 8007642:	189b      	adds	r3, r3, r2
 8007644:	685c      	ldr	r4, [r3, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	930a      	str	r3, [sp, #40]	; 0x28
 800764a:	940b      	str	r4, [sp, #44]	; 0x2c
 800764c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800764e:	2b00      	cmp	r3, #0
 8007650:	db00      	blt.n	8007654 <_dtoa_r+0x4c4>
 8007652:	e0f7      	b.n	8007844 <_dtoa_r+0x6b4>
 8007654:	9b07      	ldr	r3, [sp, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd00      	ble.n	800765c <_dtoa_r+0x4cc>
 800765a:	e0f3      	b.n	8007844 <_dtoa_r+0x6b4>
 800765c:	d000      	beq.n	8007660 <_dtoa_r+0x4d0>
 800765e:	e282      	b.n	8007b66 <_dtoa_r+0x9d6>
 8007660:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007664:	2200      	movs	r2, #0
 8007666:	4b74      	ldr	r3, [pc, #464]	; (8007838 <_dtoa_r+0x6a8>)
 8007668:	f7f9 ffb6 	bl	80015d8 <__aeabi_dmul>
 800766c:	9a08      	ldr	r2, [sp, #32]
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	f7f8 ff0e 	bl	8000490 <__aeabi_dcmpge>
 8007674:	9e07      	ldr	r6, [sp, #28]
 8007676:	0035      	movs	r5, r6
 8007678:	2800      	cmp	r0, #0
 800767a:	d000      	beq.n	800767e <_dtoa_r+0x4ee>
 800767c:	e259      	b.n	8007b32 <_dtoa_r+0x9a2>
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	9a06      	ldr	r2, [sp, #24]
 8007682:	3301      	adds	r3, #1
 8007684:	9308      	str	r3, [sp, #32]
 8007686:	2331      	movs	r3, #49	; 0x31
 8007688:	7013      	strb	r3, [r2, #0]
 800768a:	9b02      	ldr	r3, [sp, #8]
 800768c:	3301      	adds	r3, #1
 800768e:	9302      	str	r3, [sp, #8]
 8007690:	e254      	b.n	8007b3c <_dtoa_r+0x9ac>
 8007692:	4234      	tst	r4, r6
 8007694:	d007      	beq.n	80076a6 <_dtoa_r+0x516>
 8007696:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007698:	3301      	adds	r3, #1
 800769a:	9310      	str	r3, [sp, #64]	; 0x40
 800769c:	682a      	ldr	r2, [r5, #0]
 800769e:	686b      	ldr	r3, [r5, #4]
 80076a0:	f7f9 ff9a 	bl	80015d8 <__aeabi_dmul>
 80076a4:	0033      	movs	r3, r6
 80076a6:	1064      	asrs	r4, r4, #1
 80076a8:	3508      	adds	r5, #8
 80076aa:	e75a      	b.n	8007562 <_dtoa_r+0x3d2>
 80076ac:	9e02      	ldr	r6, [sp, #8]
 80076ae:	9b07      	ldr	r3, [sp, #28]
 80076b0:	e780      	b.n	80075b4 <_dtoa_r+0x424>
 80076b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	4b59      	ldr	r3, [pc, #356]	; (8007820 <_dtoa_r+0x690>)
 80076ba:	00d2      	lsls	r2, r2, #3
 80076bc:	189b      	adds	r3, r3, r2
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2900      	cmp	r1, #0
 80076c4:	d051      	beq.n	800776a <_dtoa_r+0x5da>
 80076c6:	2000      	movs	r0, #0
 80076c8:	495d      	ldr	r1, [pc, #372]	; (8007840 <_dtoa_r+0x6b0>)
 80076ca:	f7f9 fb83 	bl	8000dd4 <__aeabi_ddiv>
 80076ce:	9a08      	ldr	r2, [sp, #32]
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	f7fa f9ed 	bl	8001ab0 <__aeabi_dsub>
 80076d6:	9a06      	ldr	r2, [sp, #24]
 80076d8:	9b06      	ldr	r3, [sp, #24]
 80076da:	4694      	mov	ip, r2
 80076dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80076de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076e0:	9010      	str	r0, [sp, #64]	; 0x40
 80076e2:	9111      	str	r1, [sp, #68]	; 0x44
 80076e4:	4463      	add	r3, ip
 80076e6:	9319      	str	r3, [sp, #100]	; 0x64
 80076e8:	0029      	movs	r1, r5
 80076ea:	0020      	movs	r0, r4
 80076ec:	f7fa fd90 	bl	8002210 <__aeabi_d2iz>
 80076f0:	9014      	str	r0, [sp, #80]	; 0x50
 80076f2:	f7fa fdc3 	bl	800227c <__aeabi_i2d>
 80076f6:	0002      	movs	r2, r0
 80076f8:	000b      	movs	r3, r1
 80076fa:	0020      	movs	r0, r4
 80076fc:	0029      	movs	r1, r5
 80076fe:	f7fa f9d7 	bl	8001ab0 <__aeabi_dsub>
 8007702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007704:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007706:	3301      	adds	r3, #1
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800770c:	0004      	movs	r4, r0
 800770e:	3330      	adds	r3, #48	; 0x30
 8007710:	7013      	strb	r3, [r2, #0]
 8007712:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007716:	000d      	movs	r5, r1
 8007718:	f7f8 fe9c 	bl	8000454 <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	d175      	bne.n	800780c <_dtoa_r+0x67c>
 8007720:	0022      	movs	r2, r4
 8007722:	002b      	movs	r3, r5
 8007724:	2000      	movs	r0, #0
 8007726:	4940      	ldr	r1, [pc, #256]	; (8007828 <_dtoa_r+0x698>)
 8007728:	f7fa f9c2 	bl	8001ab0 <__aeabi_dsub>
 800772c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800772e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007730:	f7f8 fe90 	bl	8000454 <__aeabi_dcmplt>
 8007734:	2800      	cmp	r0, #0
 8007736:	d000      	beq.n	800773a <_dtoa_r+0x5aa>
 8007738:	e0d2      	b.n	80078e0 <_dtoa_r+0x750>
 800773a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800773c:	9a08      	ldr	r2, [sp, #32]
 800773e:	4293      	cmp	r3, r2
 8007740:	d100      	bne.n	8007744 <_dtoa_r+0x5b4>
 8007742:	e770      	b.n	8007626 <_dtoa_r+0x496>
 8007744:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007746:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007748:	2200      	movs	r2, #0
 800774a:	4b38      	ldr	r3, [pc, #224]	; (800782c <_dtoa_r+0x69c>)
 800774c:	f7f9 ff44 	bl	80015d8 <__aeabi_dmul>
 8007750:	4b36      	ldr	r3, [pc, #216]	; (800782c <_dtoa_r+0x69c>)
 8007752:	9010      	str	r0, [sp, #64]	; 0x40
 8007754:	9111      	str	r1, [sp, #68]	; 0x44
 8007756:	2200      	movs	r2, #0
 8007758:	0020      	movs	r0, r4
 800775a:	0029      	movs	r1, r5
 800775c:	f7f9 ff3c 	bl	80015d8 <__aeabi_dmul>
 8007760:	9b08      	ldr	r3, [sp, #32]
 8007762:	0004      	movs	r4, r0
 8007764:	000d      	movs	r5, r1
 8007766:	9317      	str	r3, [sp, #92]	; 0x5c
 8007768:	e7be      	b.n	80076e8 <_dtoa_r+0x558>
 800776a:	9808      	ldr	r0, [sp, #32]
 800776c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800776e:	f7f9 ff33 	bl	80015d8 <__aeabi_dmul>
 8007772:	9a06      	ldr	r2, [sp, #24]
 8007774:	9b06      	ldr	r3, [sp, #24]
 8007776:	4694      	mov	ip, r2
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800777c:	9010      	str	r0, [sp, #64]	; 0x40
 800777e:	9111      	str	r1, [sp, #68]	; 0x44
 8007780:	4463      	add	r3, ip
 8007782:	9319      	str	r3, [sp, #100]	; 0x64
 8007784:	0029      	movs	r1, r5
 8007786:	0020      	movs	r0, r4
 8007788:	f7fa fd42 	bl	8002210 <__aeabi_d2iz>
 800778c:	9017      	str	r0, [sp, #92]	; 0x5c
 800778e:	f7fa fd75 	bl	800227c <__aeabi_i2d>
 8007792:	0002      	movs	r2, r0
 8007794:	000b      	movs	r3, r1
 8007796:	0020      	movs	r0, r4
 8007798:	0029      	movs	r1, r5
 800779a:	f7fa f989 	bl	8001ab0 <__aeabi_dsub>
 800779e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a0:	9a08      	ldr	r2, [sp, #32]
 80077a2:	3330      	adds	r3, #48	; 0x30
 80077a4:	7013      	strb	r3, [r2, #0]
 80077a6:	0013      	movs	r3, r2
 80077a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077aa:	3301      	adds	r3, #1
 80077ac:	0004      	movs	r4, r0
 80077ae:	000d      	movs	r5, r1
 80077b0:	9308      	str	r3, [sp, #32]
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d12c      	bne.n	8007810 <_dtoa_r+0x680>
 80077b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077ba:	9a06      	ldr	r2, [sp, #24]
 80077bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077be:	4694      	mov	ip, r2
 80077c0:	4463      	add	r3, ip
 80077c2:	2200      	movs	r2, #0
 80077c4:	9308      	str	r3, [sp, #32]
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <_dtoa_r+0x6b0>)
 80077c8:	f7f8 ffc8 	bl	800075c <__aeabi_dadd>
 80077cc:	0002      	movs	r2, r0
 80077ce:	000b      	movs	r3, r1
 80077d0:	0020      	movs	r0, r4
 80077d2:	0029      	movs	r1, r5
 80077d4:	f7f8 fe52 	bl	800047c <__aeabi_dcmpgt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d000      	beq.n	80077de <_dtoa_r+0x64e>
 80077dc:	e080      	b.n	80078e0 <_dtoa_r+0x750>
 80077de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e2:	2000      	movs	r0, #0
 80077e4:	4916      	ldr	r1, [pc, #88]	; (8007840 <_dtoa_r+0x6b0>)
 80077e6:	f7fa f963 	bl	8001ab0 <__aeabi_dsub>
 80077ea:	0002      	movs	r2, r0
 80077ec:	000b      	movs	r3, r1
 80077ee:	0020      	movs	r0, r4
 80077f0:	0029      	movs	r1, r5
 80077f2:	f7f8 fe2f 	bl	8000454 <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d100      	bne.n	80077fc <_dtoa_r+0x66c>
 80077fa:	e714      	b.n	8007626 <_dtoa_r+0x496>
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	001a      	movs	r2, r3
 8007800:	3a01      	subs	r2, #1
 8007802:	9208      	str	r2, [sp, #32]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	2a30      	cmp	r2, #48	; 0x30
 8007808:	d0f8      	beq.n	80077fc <_dtoa_r+0x66c>
 800780a:	9308      	str	r3, [sp, #32]
 800780c:	9602      	str	r6, [sp, #8]
 800780e:	e055      	b.n	80078bc <_dtoa_r+0x72c>
 8007810:	2200      	movs	r2, #0
 8007812:	4b06      	ldr	r3, [pc, #24]	; (800782c <_dtoa_r+0x69c>)
 8007814:	f7f9 fee0 	bl	80015d8 <__aeabi_dmul>
 8007818:	0004      	movs	r4, r0
 800781a:	000d      	movs	r5, r1
 800781c:	e7b2      	b.n	8007784 <_dtoa_r+0x5f4>
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	0800a480 	.word	0x0800a480
 8007824:	0800a458 	.word	0x0800a458
 8007828:	3ff00000 	.word	0x3ff00000
 800782c:	40240000 	.word	0x40240000
 8007830:	401c0000 	.word	0x401c0000
 8007834:	fcc00000 	.word	0xfcc00000
 8007838:	40140000 	.word	0x40140000
 800783c:	7cc00000 	.word	0x7cc00000
 8007840:	3fe00000 	.word	0x3fe00000
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	9e06      	ldr	r6, [sp, #24]
 8007848:	3b01      	subs	r3, #1
 800784a:	199b      	adds	r3, r3, r6
 800784c:	930c      	str	r3, [sp, #48]	; 0x30
 800784e:	9c08      	ldr	r4, [sp, #32]
 8007850:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007856:	0020      	movs	r0, r4
 8007858:	0029      	movs	r1, r5
 800785a:	f7f9 fabb 	bl	8000dd4 <__aeabi_ddiv>
 800785e:	f7fa fcd7 	bl	8002210 <__aeabi_d2iz>
 8007862:	9007      	str	r0, [sp, #28]
 8007864:	f7fa fd0a 	bl	800227c <__aeabi_i2d>
 8007868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800786a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800786c:	f7f9 feb4 	bl	80015d8 <__aeabi_dmul>
 8007870:	0002      	movs	r2, r0
 8007872:	000b      	movs	r3, r1
 8007874:	0020      	movs	r0, r4
 8007876:	0029      	movs	r1, r5
 8007878:	f7fa f91a 	bl	8001ab0 <__aeabi_dsub>
 800787c:	0033      	movs	r3, r6
 800787e:	9a07      	ldr	r2, [sp, #28]
 8007880:	3601      	adds	r6, #1
 8007882:	3230      	adds	r2, #48	; 0x30
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007888:	9608      	str	r6, [sp, #32]
 800788a:	429a      	cmp	r2, r3
 800788c:	d139      	bne.n	8007902 <_dtoa_r+0x772>
 800788e:	0002      	movs	r2, r0
 8007890:	000b      	movs	r3, r1
 8007892:	f7f8 ff63 	bl	800075c <__aeabi_dadd>
 8007896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800789a:	0004      	movs	r4, r0
 800789c:	000d      	movs	r5, r1
 800789e:	f7f8 fded 	bl	800047c <__aeabi_dcmpgt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d11b      	bne.n	80078de <_dtoa_r+0x74e>
 80078a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078aa:	0020      	movs	r0, r4
 80078ac:	0029      	movs	r1, r5
 80078ae:	f7f8 fdcb 	bl	8000448 <__aeabi_dcmpeq>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d002      	beq.n	80078bc <_dtoa_r+0x72c>
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	07db      	lsls	r3, r3, #31
 80078ba:	d410      	bmi.n	80078de <_dtoa_r+0x74e>
 80078bc:	0038      	movs	r0, r7
 80078be:	9905      	ldr	r1, [sp, #20]
 80078c0:	f000 fe6c 	bl	800859c <_Bfree>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9a08      	ldr	r2, [sp, #32]
 80078c8:	9802      	ldr	r0, [sp, #8]
 80078ca:	7013      	strb	r3, [r2, #0]
 80078cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078ce:	3001      	adds	r0, #1
 80078d0:	6018      	str	r0, [r3, #0]
 80078d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d100      	bne.n	80078da <_dtoa_r+0x74a>
 80078d8:	e4a6      	b.n	8007228 <_dtoa_r+0x98>
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e4a4      	b.n	8007228 <_dtoa_r+0x98>
 80078de:	9e02      	ldr	r6, [sp, #8]
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	2a39      	cmp	r2, #57	; 0x39
 80078ea:	d106      	bne.n	80078fa <_dtoa_r+0x76a>
 80078ec:	9a06      	ldr	r2, [sp, #24]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d1f7      	bne.n	80078e2 <_dtoa_r+0x752>
 80078f2:	2230      	movs	r2, #48	; 0x30
 80078f4:	9906      	ldr	r1, [sp, #24]
 80078f6:	3601      	adds	r6, #1
 80078f8:	700a      	strb	r2, [r1, #0]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	3201      	adds	r2, #1
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	e784      	b.n	800780c <_dtoa_r+0x67c>
 8007902:	2200      	movs	r2, #0
 8007904:	4baa      	ldr	r3, [pc, #680]	; (8007bb0 <_dtoa_r+0xa20>)
 8007906:	f7f9 fe67 	bl	80015d8 <__aeabi_dmul>
 800790a:	2200      	movs	r2, #0
 800790c:	2300      	movs	r3, #0
 800790e:	0004      	movs	r4, r0
 8007910:	000d      	movs	r5, r1
 8007912:	f7f8 fd99 	bl	8000448 <__aeabi_dcmpeq>
 8007916:	2800      	cmp	r0, #0
 8007918:	d09b      	beq.n	8007852 <_dtoa_r+0x6c2>
 800791a:	e7cf      	b.n	80078bc <_dtoa_r+0x72c>
 800791c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800791e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007920:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007922:	2d00      	cmp	r5, #0
 8007924:	d012      	beq.n	800794c <_dtoa_r+0x7bc>
 8007926:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007928:	2a01      	cmp	r2, #1
 800792a:	dc66      	bgt.n	80079fa <_dtoa_r+0x86a>
 800792c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800792e:	2a00      	cmp	r2, #0
 8007930:	d05d      	beq.n	80079ee <_dtoa_r+0x85e>
 8007932:	4aa0      	ldr	r2, [pc, #640]	; (8007bb4 <_dtoa_r+0xa24>)
 8007934:	189b      	adds	r3, r3, r2
 8007936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007938:	2101      	movs	r1, #1
 800793a:	18d2      	adds	r2, r2, r3
 800793c:	920a      	str	r2, [sp, #40]	; 0x28
 800793e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007940:	0038      	movs	r0, r7
 8007942:	18d3      	adds	r3, r2, r3
 8007944:	930d      	str	r3, [sp, #52]	; 0x34
 8007946:	f000 ff25 	bl	8008794 <__i2b>
 800794a:	0005      	movs	r5, r0
 800794c:	2c00      	cmp	r4, #0
 800794e:	dd0e      	ble.n	800796e <_dtoa_r+0x7de>
 8007950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007952:	2b00      	cmp	r3, #0
 8007954:	dd0b      	ble.n	800796e <_dtoa_r+0x7de>
 8007956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007958:	0023      	movs	r3, r4
 800795a:	4294      	cmp	r4, r2
 800795c:	dd00      	ble.n	8007960 <_dtoa_r+0x7d0>
 800795e:	0013      	movs	r3, r2
 8007960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007962:	1ae4      	subs	r4, r4, r3
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	920a      	str	r2, [sp, #40]	; 0x28
 8007968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	930d      	str	r3, [sp, #52]	; 0x34
 800796e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007970:	2b00      	cmp	r3, #0
 8007972:	d01f      	beq.n	80079b4 <_dtoa_r+0x824>
 8007974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d054      	beq.n	8007a24 <_dtoa_r+0x894>
 800797a:	2e00      	cmp	r6, #0
 800797c:	dd11      	ble.n	80079a2 <_dtoa_r+0x812>
 800797e:	0029      	movs	r1, r5
 8007980:	0032      	movs	r2, r6
 8007982:	0038      	movs	r0, r7
 8007984:	f000 ffcc 	bl	8008920 <__pow5mult>
 8007988:	9a05      	ldr	r2, [sp, #20]
 800798a:	0001      	movs	r1, r0
 800798c:	0005      	movs	r5, r0
 800798e:	0038      	movs	r0, r7
 8007990:	f000 ff16 	bl	80087c0 <__multiply>
 8007994:	9905      	ldr	r1, [sp, #20]
 8007996:	9014      	str	r0, [sp, #80]	; 0x50
 8007998:	0038      	movs	r0, r7
 800799a:	f000 fdff 	bl	800859c <_Bfree>
 800799e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079a0:	9305      	str	r3, [sp, #20]
 80079a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a4:	1b9a      	subs	r2, r3, r6
 80079a6:	42b3      	cmp	r3, r6
 80079a8:	d004      	beq.n	80079b4 <_dtoa_r+0x824>
 80079aa:	0038      	movs	r0, r7
 80079ac:	9905      	ldr	r1, [sp, #20]
 80079ae:	f000 ffb7 	bl	8008920 <__pow5mult>
 80079b2:	9005      	str	r0, [sp, #20]
 80079b4:	2101      	movs	r1, #1
 80079b6:	0038      	movs	r0, r7
 80079b8:	f000 feec 	bl	8008794 <__i2b>
 80079bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079be:	0006      	movs	r6, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dd31      	ble.n	8007a28 <_dtoa_r+0x898>
 80079c4:	001a      	movs	r2, r3
 80079c6:	0001      	movs	r1, r0
 80079c8:	0038      	movs	r0, r7
 80079ca:	f000 ffa9 	bl	8008920 <__pow5mult>
 80079ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d0:	0006      	movs	r6, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	dd2d      	ble.n	8007a32 <_dtoa_r+0x8a2>
 80079d6:	2300      	movs	r3, #0
 80079d8:	930e      	str	r3, [sp, #56]	; 0x38
 80079da:	6933      	ldr	r3, [r6, #16]
 80079dc:	3303      	adds	r3, #3
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	18f3      	adds	r3, r6, r3
 80079e2:	6858      	ldr	r0, [r3, #4]
 80079e4:	f000 fe8e 	bl	8008704 <__hi0bits>
 80079e8:	2320      	movs	r3, #32
 80079ea:	1a18      	subs	r0, r3, r0
 80079ec:	e039      	b.n	8007a62 <_dtoa_r+0x8d2>
 80079ee:	2336      	movs	r3, #54	; 0x36
 80079f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80079f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	e79d      	b.n	8007936 <_dtoa_r+0x7a6>
 80079fa:	9b07      	ldr	r3, [sp, #28]
 80079fc:	1e5e      	subs	r6, r3, #1
 80079fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a00:	42b3      	cmp	r3, r6
 8007a02:	db07      	blt.n	8007a14 <_dtoa_r+0x884>
 8007a04:	1b9e      	subs	r6, r3, r6
 8007a06:	9b07      	ldr	r3, [sp, #28]
 8007a08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	da93      	bge.n	8007936 <_dtoa_r+0x7a6>
 8007a0e:	1ae4      	subs	r4, r4, r3
 8007a10:	2300      	movs	r3, #0
 8007a12:	e790      	b.n	8007936 <_dtoa_r+0x7a6>
 8007a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a18:	1af3      	subs	r3, r6, r3
 8007a1a:	18d3      	adds	r3, r2, r3
 8007a1c:	960e      	str	r6, [sp, #56]	; 0x38
 8007a1e:	9315      	str	r3, [sp, #84]	; 0x54
 8007a20:	2600      	movs	r6, #0
 8007a22:	e7f0      	b.n	8007a06 <_dtoa_r+0x876>
 8007a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a26:	e7c0      	b.n	80079aa <_dtoa_r+0x81a>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	dc13      	bgt.n	8007a5a <_dtoa_r+0x8ca>
 8007a32:	2300      	movs	r3, #0
 8007a34:	930e      	str	r3, [sp, #56]	; 0x38
 8007a36:	9b08      	ldr	r3, [sp, #32]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10e      	bne.n	8007a5a <_dtoa_r+0x8ca>
 8007a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3e:	031b      	lsls	r3, r3, #12
 8007a40:	d10b      	bne.n	8007a5a <_dtoa_r+0x8ca>
 8007a42:	4b5d      	ldr	r3, [pc, #372]	; (8007bb8 <_dtoa_r+0xa28>)
 8007a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a46:	4213      	tst	r3, r2
 8007a48:	d007      	beq.n	8007a5a <_dtoa_r+0x8ca>
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a52:	3301      	adds	r3, #1
 8007a54:	930d      	str	r3, [sp, #52]	; 0x34
 8007a56:	2301      	movs	r3, #1
 8007a58:	930e      	str	r3, [sp, #56]	; 0x38
 8007a5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1bb      	bne.n	80079da <_dtoa_r+0x84a>
 8007a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a64:	221f      	movs	r2, #31
 8007a66:	1818      	adds	r0, r3, r0
 8007a68:	0003      	movs	r3, r0
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	4210      	tst	r0, r2
 8007a6e:	d046      	beq.n	8007afe <_dtoa_r+0x96e>
 8007a70:	3201      	adds	r2, #1
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	2a04      	cmp	r2, #4
 8007a76:	dd3f      	ble.n	8007af8 <_dtoa_r+0x968>
 8007a78:	221c      	movs	r2, #28
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a7e:	18e4      	adds	r4, r4, r3
 8007a80:	18d2      	adds	r2, r2, r3
 8007a82:	920a      	str	r2, [sp, #40]	; 0x28
 8007a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a86:	18d3      	adds	r3, r2, r3
 8007a88:	930d      	str	r3, [sp, #52]	; 0x34
 8007a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd05      	ble.n	8007a9c <_dtoa_r+0x90c>
 8007a90:	001a      	movs	r2, r3
 8007a92:	0038      	movs	r0, r7
 8007a94:	9905      	ldr	r1, [sp, #20]
 8007a96:	f000 ff9f 	bl	80089d8 <__lshift>
 8007a9a:	9005      	str	r0, [sp, #20]
 8007a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dd05      	ble.n	8007aae <_dtoa_r+0x91e>
 8007aa2:	0031      	movs	r1, r6
 8007aa4:	001a      	movs	r2, r3
 8007aa6:	0038      	movs	r0, r7
 8007aa8:	f000 ff96 	bl	80089d8 <__lshift>
 8007aac:	0006      	movs	r6, r0
 8007aae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d026      	beq.n	8007b02 <_dtoa_r+0x972>
 8007ab4:	0031      	movs	r1, r6
 8007ab6:	9805      	ldr	r0, [sp, #20]
 8007ab8:	f000 fffc 	bl	8008ab4 <__mcmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	da20      	bge.n	8007b02 <_dtoa_r+0x972>
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	9302      	str	r3, [sp, #8]
 8007ac8:	0038      	movs	r0, r7
 8007aca:	2300      	movs	r3, #0
 8007acc:	9905      	ldr	r1, [sp, #20]
 8007ace:	f000 fd89 	bl	80085e4 <__multadd>
 8007ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ad4:	9005      	str	r0, [sp, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d100      	bne.n	8007adc <_dtoa_r+0x94c>
 8007ada:	e166      	b.n	8007daa <_dtoa_r+0xc1a>
 8007adc:	2300      	movs	r3, #0
 8007ade:	0029      	movs	r1, r5
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	0038      	movs	r0, r7
 8007ae4:	f000 fd7e 	bl	80085e4 <__multadd>
 8007ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aea:	0005      	movs	r5, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dc47      	bgt.n	8007b80 <_dtoa_r+0x9f0>
 8007af0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	dc0d      	bgt.n	8007b12 <_dtoa_r+0x982>
 8007af6:	e043      	b.n	8007b80 <_dtoa_r+0x9f0>
 8007af8:	2a04      	cmp	r2, #4
 8007afa:	d0c6      	beq.n	8007a8a <_dtoa_r+0x8fa>
 8007afc:	0013      	movs	r3, r2
 8007afe:	331c      	adds	r3, #28
 8007b00:	e7bc      	b.n	8007a7c <_dtoa_r+0x8ec>
 8007b02:	9b07      	ldr	r3, [sp, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dc35      	bgt.n	8007b74 <_dtoa_r+0x9e4>
 8007b08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	dd32      	ble.n	8007b74 <_dtoa_r+0x9e4>
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	930c      	str	r3, [sp, #48]	; 0x30
 8007b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <_dtoa_r+0x9a2>
 8007b18:	0031      	movs	r1, r6
 8007b1a:	2205      	movs	r2, #5
 8007b1c:	0038      	movs	r0, r7
 8007b1e:	f000 fd61 	bl	80085e4 <__multadd>
 8007b22:	0006      	movs	r6, r0
 8007b24:	0001      	movs	r1, r0
 8007b26:	9805      	ldr	r0, [sp, #20]
 8007b28:	f000 ffc4 	bl	8008ab4 <__mcmp>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	dd00      	ble.n	8007b32 <_dtoa_r+0x9a2>
 8007b30:	e5a5      	b.n	800767e <_dtoa_r+0x4ee>
 8007b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b34:	43db      	mvns	r3, r3
 8007b36:	9302      	str	r3, [sp, #8]
 8007b38:	9b06      	ldr	r3, [sp, #24]
 8007b3a:	9308      	str	r3, [sp, #32]
 8007b3c:	2400      	movs	r4, #0
 8007b3e:	0031      	movs	r1, r6
 8007b40:	0038      	movs	r0, r7
 8007b42:	f000 fd2b 	bl	800859c <_Bfree>
 8007b46:	2d00      	cmp	r5, #0
 8007b48:	d100      	bne.n	8007b4c <_dtoa_r+0x9bc>
 8007b4a:	e6b7      	b.n	80078bc <_dtoa_r+0x72c>
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	d005      	beq.n	8007b5c <_dtoa_r+0x9cc>
 8007b50:	42ac      	cmp	r4, r5
 8007b52:	d003      	beq.n	8007b5c <_dtoa_r+0x9cc>
 8007b54:	0021      	movs	r1, r4
 8007b56:	0038      	movs	r0, r7
 8007b58:	f000 fd20 	bl	800859c <_Bfree>
 8007b5c:	0029      	movs	r1, r5
 8007b5e:	0038      	movs	r0, r7
 8007b60:	f000 fd1c 	bl	800859c <_Bfree>
 8007b64:	e6aa      	b.n	80078bc <_dtoa_r+0x72c>
 8007b66:	2600      	movs	r6, #0
 8007b68:	0035      	movs	r5, r6
 8007b6a:	e7e2      	b.n	8007b32 <_dtoa_r+0x9a2>
 8007b6c:	9602      	str	r6, [sp, #8]
 8007b6e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007b70:	0035      	movs	r5, r6
 8007b72:	e584      	b.n	800767e <_dtoa_r+0x4ee>
 8007b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d100      	bne.n	8007b7c <_dtoa_r+0x9ec>
 8007b7a:	e0ce      	b.n	8007d1a <_dtoa_r+0xb8a>
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b80:	2c00      	cmp	r4, #0
 8007b82:	dd05      	ble.n	8007b90 <_dtoa_r+0xa00>
 8007b84:	0029      	movs	r1, r5
 8007b86:	0022      	movs	r2, r4
 8007b88:	0038      	movs	r0, r7
 8007b8a:	f000 ff25 	bl	80089d8 <__lshift>
 8007b8e:	0005      	movs	r5, r0
 8007b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b92:	0028      	movs	r0, r5
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d022      	beq.n	8007bde <_dtoa_r+0xa4e>
 8007b98:	0038      	movs	r0, r7
 8007b9a:	6869      	ldr	r1, [r5, #4]
 8007b9c:	f000 fcba 	bl	8008514 <_Balloc>
 8007ba0:	1e04      	subs	r4, r0, #0
 8007ba2:	d10f      	bne.n	8007bc4 <_dtoa_r+0xa34>
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <_dtoa_r+0xa2c>)
 8007ba8:	4905      	ldr	r1, [pc, #20]	; (8007bc0 <_dtoa_r+0xa30>)
 8007baa:	f7ff fb06 	bl	80071ba <_dtoa_r+0x2a>
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	40240000 	.word	0x40240000
 8007bb4:	00000433 	.word	0x00000433
 8007bb8:	7ff00000 	.word	0x7ff00000
 8007bbc:	0800a370 	.word	0x0800a370
 8007bc0:	000002ea 	.word	0x000002ea
 8007bc4:	0029      	movs	r1, r5
 8007bc6:	692b      	ldr	r3, [r5, #16]
 8007bc8:	310c      	adds	r1, #12
 8007bca:	1c9a      	adds	r2, r3, #2
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	300c      	adds	r0, #12
 8007bd0:	f000 fc97 	bl	8008502 <memcpy>
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	0021      	movs	r1, r4
 8007bd8:	0038      	movs	r0, r7
 8007bda:	f000 fefd 	bl	80089d8 <__lshift>
 8007bde:	9b06      	ldr	r3, [sp, #24]
 8007be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007be2:	930a      	str	r3, [sp, #40]	; 0x28
 8007be4:	3b01      	subs	r3, #1
 8007be6:	189b      	adds	r3, r3, r2
 8007be8:	2201      	movs	r2, #1
 8007bea:	002c      	movs	r4, r5
 8007bec:	0005      	movs	r5, r0
 8007bee:	9314      	str	r3, [sp, #80]	; 0x50
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf6:	0031      	movs	r1, r6
 8007bf8:	9805      	ldr	r0, [sp, #20]
 8007bfa:	f7ff fa3d 	bl	8007078 <quorem>
 8007bfe:	0003      	movs	r3, r0
 8007c00:	0021      	movs	r1, r4
 8007c02:	3330      	adds	r3, #48	; 0x30
 8007c04:	900d      	str	r0, [sp, #52]	; 0x34
 8007c06:	9805      	ldr	r0, [sp, #20]
 8007c08:	9307      	str	r3, [sp, #28]
 8007c0a:	f000 ff53 	bl	8008ab4 <__mcmp>
 8007c0e:	002a      	movs	r2, r5
 8007c10:	900e      	str	r0, [sp, #56]	; 0x38
 8007c12:	0031      	movs	r1, r6
 8007c14:	0038      	movs	r0, r7
 8007c16:	f000 ff69 	bl	8008aec <__mdiff>
 8007c1a:	68c3      	ldr	r3, [r0, #12]
 8007c1c:	9008      	str	r0, [sp, #32]
 8007c1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007c20:	2301      	movs	r3, #1
 8007c22:	930c      	str	r3, [sp, #48]	; 0x30
 8007c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <_dtoa_r+0xaa4>
 8007c2a:	0001      	movs	r1, r0
 8007c2c:	9805      	ldr	r0, [sp, #20]
 8007c2e:	f000 ff41 	bl	8008ab4 <__mcmp>
 8007c32:	900c      	str	r0, [sp, #48]	; 0x30
 8007c34:	0038      	movs	r0, r7
 8007c36:	9908      	ldr	r1, [sp, #32]
 8007c38:	f000 fcb0 	bl	800859c <_Bfree>
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c40:	3301      	adds	r3, #1
 8007c42:	9308      	str	r3, [sp, #32]
 8007c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c46:	4313      	orrs	r3, r2
 8007c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d10c      	bne.n	8007c68 <_dtoa_r+0xad8>
 8007c4e:	9b07      	ldr	r3, [sp, #28]
 8007c50:	2b39      	cmp	r3, #57	; 0x39
 8007c52:	d026      	beq.n	8007ca2 <_dtoa_r+0xb12>
 8007c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dd02      	ble.n	8007c60 <_dtoa_r+0xad0>
 8007c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5c:	3331      	adds	r3, #49	; 0x31
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	9a07      	ldr	r2, [sp, #28]
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e76a      	b.n	8007b3e <_dtoa_r+0x9ae>
 8007c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db04      	blt.n	8007c78 <_dtoa_r+0xae8>
 8007c6e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c70:	4313      	orrs	r3, r2
 8007c72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c74:	4313      	orrs	r3, r2
 8007c76:	d11f      	bne.n	8007cb8 <_dtoa_r+0xb28>
 8007c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	ddf0      	ble.n	8007c60 <_dtoa_r+0xad0>
 8007c7e:	9905      	ldr	r1, [sp, #20]
 8007c80:	2201      	movs	r2, #1
 8007c82:	0038      	movs	r0, r7
 8007c84:	f000 fea8 	bl	80089d8 <__lshift>
 8007c88:	0031      	movs	r1, r6
 8007c8a:	9005      	str	r0, [sp, #20]
 8007c8c:	f000 ff12 	bl	8008ab4 <__mcmp>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	dc03      	bgt.n	8007c9c <_dtoa_r+0xb0c>
 8007c94:	d1e4      	bne.n	8007c60 <_dtoa_r+0xad0>
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	07db      	lsls	r3, r3, #31
 8007c9a:	d5e1      	bpl.n	8007c60 <_dtoa_r+0xad0>
 8007c9c:	9b07      	ldr	r3, [sp, #28]
 8007c9e:	2b39      	cmp	r3, #57	; 0x39
 8007ca0:	d1db      	bne.n	8007c5a <_dtoa_r+0xaca>
 8007ca2:	2339      	movs	r3, #57	; 0x39
 8007ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca6:	7013      	strb	r3, [r2, #0]
 8007ca8:	9b08      	ldr	r3, [sp, #32]
 8007caa:	9308      	str	r3, [sp, #32]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	781a      	ldrb	r2, [r3, #0]
 8007cb0:	2a39      	cmp	r2, #57	; 0x39
 8007cb2:	d068      	beq.n	8007d86 <_dtoa_r+0xbf6>
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	e7d5      	b.n	8007c64 <_dtoa_r+0xad4>
 8007cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dd07      	ble.n	8007cce <_dtoa_r+0xb3e>
 8007cbe:	9b07      	ldr	r3, [sp, #28]
 8007cc0:	2b39      	cmp	r3, #57	; 0x39
 8007cc2:	d0ee      	beq.n	8007ca2 <_dtoa_r+0xb12>
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cc8:	3301      	adds	r3, #1
 8007cca:	7013      	strb	r3, [r2, #0]
 8007ccc:	e737      	b.n	8007b3e <_dtoa_r+0x9ae>
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	9a07      	ldr	r2, [sp, #28]
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d03e      	beq.n	8007d5a <_dtoa_r+0xbca>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	220a      	movs	r2, #10
 8007ce0:	9905      	ldr	r1, [sp, #20]
 8007ce2:	0038      	movs	r0, r7
 8007ce4:	f000 fc7e 	bl	80085e4 <__multadd>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9005      	str	r0, [sp, #20]
 8007cec:	220a      	movs	r2, #10
 8007cee:	0021      	movs	r1, r4
 8007cf0:	0038      	movs	r0, r7
 8007cf2:	42ac      	cmp	r4, r5
 8007cf4:	d106      	bne.n	8007d04 <_dtoa_r+0xb74>
 8007cf6:	f000 fc75 	bl	80085e4 <__multadd>
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	0005      	movs	r5, r0
 8007cfe:	9b08      	ldr	r3, [sp, #32]
 8007d00:	930a      	str	r3, [sp, #40]	; 0x28
 8007d02:	e778      	b.n	8007bf6 <_dtoa_r+0xa66>
 8007d04:	f000 fc6e 	bl	80085e4 <__multadd>
 8007d08:	0029      	movs	r1, r5
 8007d0a:	0004      	movs	r4, r0
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	220a      	movs	r2, #10
 8007d10:	0038      	movs	r0, r7
 8007d12:	f000 fc67 	bl	80085e4 <__multadd>
 8007d16:	0005      	movs	r5, r0
 8007d18:	e7f1      	b.n	8007cfe <_dtoa_r+0xb6e>
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d1e:	2400      	movs	r4, #0
 8007d20:	0031      	movs	r1, r6
 8007d22:	9805      	ldr	r0, [sp, #20]
 8007d24:	f7ff f9a8 	bl	8007078 <quorem>
 8007d28:	9b06      	ldr	r3, [sp, #24]
 8007d2a:	3030      	adds	r0, #48	; 0x30
 8007d2c:	5518      	strb	r0, [r3, r4]
 8007d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d30:	3401      	adds	r4, #1
 8007d32:	9007      	str	r0, [sp, #28]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	dd07      	ble.n	8007d48 <_dtoa_r+0xbb8>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	220a      	movs	r2, #10
 8007d3c:	0038      	movs	r0, r7
 8007d3e:	9905      	ldr	r1, [sp, #20]
 8007d40:	f000 fc50 	bl	80085e4 <__multadd>
 8007d44:	9005      	str	r0, [sp, #20]
 8007d46:	e7eb      	b.n	8007d20 <_dtoa_r+0xb90>
 8007d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd00      	ble.n	8007d52 <_dtoa_r+0xbc2>
 8007d50:	0018      	movs	r0, r3
 8007d52:	2400      	movs	r4, #0
 8007d54:	9b06      	ldr	r3, [sp, #24]
 8007d56:	181b      	adds	r3, r3, r0
 8007d58:	9308      	str	r3, [sp, #32]
 8007d5a:	9905      	ldr	r1, [sp, #20]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	0038      	movs	r0, r7
 8007d60:	f000 fe3a 	bl	80089d8 <__lshift>
 8007d64:	0031      	movs	r1, r6
 8007d66:	9005      	str	r0, [sp, #20]
 8007d68:	f000 fea4 	bl	8008ab4 <__mcmp>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	dc9b      	bgt.n	8007ca8 <_dtoa_r+0xb18>
 8007d70:	d102      	bne.n	8007d78 <_dtoa_r+0xbe8>
 8007d72:	9b07      	ldr	r3, [sp, #28]
 8007d74:	07db      	lsls	r3, r3, #31
 8007d76:	d497      	bmi.n	8007ca8 <_dtoa_r+0xb18>
 8007d78:	9b08      	ldr	r3, [sp, #32]
 8007d7a:	9308      	str	r3, [sp, #32]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	2a30      	cmp	r2, #48	; 0x30
 8007d82:	d0fa      	beq.n	8007d7a <_dtoa_r+0xbea>
 8007d84:	e6db      	b.n	8007b3e <_dtoa_r+0x9ae>
 8007d86:	9a06      	ldr	r2, [sp, #24]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d18e      	bne.n	8007caa <_dtoa_r+0xb1a>
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	9302      	str	r3, [sp, #8]
 8007d92:	2331      	movs	r3, #49	; 0x31
 8007d94:	e799      	b.n	8007cca <_dtoa_r+0xb3a>
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <_dtoa_r+0xc2c>)
 8007d98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d9a:	9306      	str	r3, [sp, #24]
 8007d9c:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <_dtoa_r+0xc30>)
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d001      	beq.n	8007da6 <_dtoa_r+0xc16>
 8007da2:	f7ff fa3f 	bl	8007224 <_dtoa_r+0x94>
 8007da6:	f7ff fa3f 	bl	8007228 <_dtoa_r+0x98>
 8007daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dcb6      	bgt.n	8007d1e <_dtoa_r+0xb8e>
 8007db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	dd00      	ble.n	8007db8 <_dtoa_r+0xc28>
 8007db6:	e6ac      	b.n	8007b12 <_dtoa_r+0x982>
 8007db8:	e7b1      	b.n	8007d1e <_dtoa_r+0xb8e>
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	0800a2f1 	.word	0x0800a2f1
 8007dc0:	0800a2f9 	.word	0x0800a2f9

08007dc4 <rshift>:
 8007dc4:	0002      	movs	r2, r0
 8007dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc8:	6904      	ldr	r4, [r0, #16]
 8007dca:	3214      	adds	r2, #20
 8007dcc:	0013      	movs	r3, r2
 8007dce:	b085      	sub	sp, #20
 8007dd0:	114f      	asrs	r7, r1, #5
 8007dd2:	42bc      	cmp	r4, r7
 8007dd4:	dd31      	ble.n	8007e3a <rshift+0x76>
 8007dd6:	00bb      	lsls	r3, r7, #2
 8007dd8:	18d3      	adds	r3, r2, r3
 8007dda:	261f      	movs	r6, #31
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	000b      	movs	r3, r1
 8007de0:	00a5      	lsls	r5, r4, #2
 8007de2:	4033      	ands	r3, r6
 8007de4:	1955      	adds	r5, r2, r5
 8007de6:	9302      	str	r3, [sp, #8]
 8007de8:	4231      	tst	r1, r6
 8007dea:	d10c      	bne.n	8007e06 <rshift+0x42>
 8007dec:	0016      	movs	r6, r2
 8007dee:	9901      	ldr	r1, [sp, #4]
 8007df0:	428d      	cmp	r5, r1
 8007df2:	d838      	bhi.n	8007e66 <rshift+0xa2>
 8007df4:	9901      	ldr	r1, [sp, #4]
 8007df6:	2300      	movs	r3, #0
 8007df8:	3903      	subs	r1, #3
 8007dfa:	428d      	cmp	r5, r1
 8007dfc:	d301      	bcc.n	8007e02 <rshift+0x3e>
 8007dfe:	1be3      	subs	r3, r4, r7
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	18d3      	adds	r3, r2, r3
 8007e04:	e019      	b.n	8007e3a <rshift+0x76>
 8007e06:	2120      	movs	r1, #32
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	9e01      	ldr	r6, [sp, #4]
 8007e0c:	1acb      	subs	r3, r1, r3
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	ce02      	ldmia	r6!, {r1}
 8007e12:	9b02      	ldr	r3, [sp, #8]
 8007e14:	4694      	mov	ip, r2
 8007e16:	40d9      	lsrs	r1, r3
 8007e18:	9100      	str	r1, [sp, #0]
 8007e1a:	42b5      	cmp	r5, r6
 8007e1c:	d816      	bhi.n	8007e4c <rshift+0x88>
 8007e1e:	9e01      	ldr	r6, [sp, #4]
 8007e20:	2300      	movs	r3, #0
 8007e22:	3601      	adds	r6, #1
 8007e24:	42b5      	cmp	r5, r6
 8007e26:	d302      	bcc.n	8007e2e <rshift+0x6a>
 8007e28:	1be3      	subs	r3, r4, r7
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3b04      	subs	r3, #4
 8007e2e:	9900      	ldr	r1, [sp, #0]
 8007e30:	18d3      	adds	r3, r2, r3
 8007e32:	6019      	str	r1, [r3, #0]
 8007e34:	2900      	cmp	r1, #0
 8007e36:	d000      	beq.n	8007e3a <rshift+0x76>
 8007e38:	3304      	adds	r3, #4
 8007e3a:	1a99      	subs	r1, r3, r2
 8007e3c:	1089      	asrs	r1, r1, #2
 8007e3e:	6101      	str	r1, [r0, #16]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d101      	bne.n	8007e48 <rshift+0x84>
 8007e44:	2300      	movs	r3, #0
 8007e46:	6143      	str	r3, [r0, #20]
 8007e48:	b005      	add	sp, #20
 8007e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4c:	6833      	ldr	r3, [r6, #0]
 8007e4e:	9903      	ldr	r1, [sp, #12]
 8007e50:	408b      	lsls	r3, r1
 8007e52:	9900      	ldr	r1, [sp, #0]
 8007e54:	4319      	orrs	r1, r3
 8007e56:	4663      	mov	r3, ip
 8007e58:	c302      	stmia	r3!, {r1}
 8007e5a:	469c      	mov	ip, r3
 8007e5c:	ce02      	ldmia	r6!, {r1}
 8007e5e:	9b02      	ldr	r3, [sp, #8]
 8007e60:	40d9      	lsrs	r1, r3
 8007e62:	9100      	str	r1, [sp, #0]
 8007e64:	e7d9      	b.n	8007e1a <rshift+0x56>
 8007e66:	c908      	ldmia	r1!, {r3}
 8007e68:	c608      	stmia	r6!, {r3}
 8007e6a:	e7c1      	b.n	8007df0 <rshift+0x2c>

08007e6c <__hexdig_fun>:
 8007e6c:	0002      	movs	r2, r0
 8007e6e:	3a30      	subs	r2, #48	; 0x30
 8007e70:	0003      	movs	r3, r0
 8007e72:	2a09      	cmp	r2, #9
 8007e74:	d802      	bhi.n	8007e7c <__hexdig_fun+0x10>
 8007e76:	3b20      	subs	r3, #32
 8007e78:	b2d8      	uxtb	r0, r3
 8007e7a:	4770      	bx	lr
 8007e7c:	0002      	movs	r2, r0
 8007e7e:	3a61      	subs	r2, #97	; 0x61
 8007e80:	2a05      	cmp	r2, #5
 8007e82:	d801      	bhi.n	8007e88 <__hexdig_fun+0x1c>
 8007e84:	3b47      	subs	r3, #71	; 0x47
 8007e86:	e7f7      	b.n	8007e78 <__hexdig_fun+0xc>
 8007e88:	001a      	movs	r2, r3
 8007e8a:	3a41      	subs	r2, #65	; 0x41
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	2a05      	cmp	r2, #5
 8007e90:	d8f3      	bhi.n	8007e7a <__hexdig_fun+0xe>
 8007e92:	3b27      	subs	r3, #39	; 0x27
 8007e94:	e7f0      	b.n	8007e78 <__hexdig_fun+0xc>
	...

08007e98 <__gethex>:
 8007e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9a:	b08d      	sub	sp, #52	; 0x34
 8007e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e9e:	4bbf      	ldr	r3, [pc, #764]	; (800819c <__gethex+0x304>)
 8007ea0:	9005      	str	r0, [sp, #20]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	9202      	str	r2, [sp, #8]
 8007eaa:	9307      	str	r3, [sp, #28]
 8007eac:	f7f8 f92a 	bl	8000104 <strlen>
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	9b07      	ldr	r3, [sp, #28]
 8007eb4:	4252      	negs	r2, r2
 8007eb6:	181b      	adds	r3, r3, r0
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	9003      	str	r0, [sp, #12]
 8007ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec2:	6819      	ldr	r1, [r3, #0]
 8007ec4:	1c8b      	adds	r3, r1, #2
 8007ec6:	1a52      	subs	r2, r2, r1
 8007ec8:	18d1      	adds	r1, r2, r3
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	9108      	str	r1, [sp, #32]
 8007ece:	9901      	ldr	r1, [sp, #4]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	7808      	ldrb	r0, [r1, #0]
 8007ed4:	2830      	cmp	r0, #48	; 0x30
 8007ed6:	d0f7      	beq.n	8007ec8 <__gethex+0x30>
 8007ed8:	f7ff ffc8 	bl	8007e6c <__hexdig_fun>
 8007edc:	2300      	movs	r3, #0
 8007ede:	001c      	movs	r4, r3
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	4298      	cmp	r0, r3
 8007ee4:	d11f      	bne.n	8007f26 <__gethex+0x8e>
 8007ee6:	9a03      	ldr	r2, [sp, #12]
 8007ee8:	9907      	ldr	r1, [sp, #28]
 8007eea:	9801      	ldr	r0, [sp, #4]
 8007eec:	f001 fa64 	bl	80093b8 <strncmp>
 8007ef0:	0007      	movs	r7, r0
 8007ef2:	42a0      	cmp	r0, r4
 8007ef4:	d000      	beq.n	8007ef8 <__gethex+0x60>
 8007ef6:	e06b      	b.n	8007fd0 <__gethex+0x138>
 8007ef8:	9b01      	ldr	r3, [sp, #4]
 8007efa:	9a03      	ldr	r2, [sp, #12]
 8007efc:	5c98      	ldrb	r0, [r3, r2]
 8007efe:	189d      	adds	r5, r3, r2
 8007f00:	f7ff ffb4 	bl	8007e6c <__hexdig_fun>
 8007f04:	2301      	movs	r3, #1
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d030      	beq.n	8007f6e <__gethex+0xd6>
 8007f0c:	9501      	str	r5, [sp, #4]
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	7818      	ldrb	r0, [r3, #0]
 8007f12:	2830      	cmp	r0, #48	; 0x30
 8007f14:	d009      	beq.n	8007f2a <__gethex+0x92>
 8007f16:	f7ff ffa9 	bl	8007e6c <__hexdig_fun>
 8007f1a:	4242      	negs	r2, r0
 8007f1c:	4142      	adcs	r2, r0
 8007f1e:	2301      	movs	r3, #1
 8007f20:	002c      	movs	r4, r5
 8007f22:	9204      	str	r2, [sp, #16]
 8007f24:	9308      	str	r3, [sp, #32]
 8007f26:	9d01      	ldr	r5, [sp, #4]
 8007f28:	e004      	b.n	8007f34 <__gethex+0x9c>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	e7ed      	b.n	8007f0e <__gethex+0x76>
 8007f32:	3501      	adds	r5, #1
 8007f34:	7828      	ldrb	r0, [r5, #0]
 8007f36:	f7ff ff99 	bl	8007e6c <__hexdig_fun>
 8007f3a:	1e07      	subs	r7, r0, #0
 8007f3c:	d1f9      	bne.n	8007f32 <__gethex+0x9a>
 8007f3e:	0028      	movs	r0, r5
 8007f40:	9a03      	ldr	r2, [sp, #12]
 8007f42:	9907      	ldr	r1, [sp, #28]
 8007f44:	f001 fa38 	bl	80093b8 <strncmp>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d10e      	bne.n	8007f6a <__gethex+0xd2>
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	d107      	bne.n	8007f60 <__gethex+0xc8>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	18ed      	adds	r5, r5, r3
 8007f54:	002c      	movs	r4, r5
 8007f56:	7828      	ldrb	r0, [r5, #0]
 8007f58:	f7ff ff88 	bl	8007e6c <__hexdig_fun>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d102      	bne.n	8007f66 <__gethex+0xce>
 8007f60:	1b64      	subs	r4, r4, r5
 8007f62:	00a7      	lsls	r7, r4, #2
 8007f64:	e003      	b.n	8007f6e <__gethex+0xd6>
 8007f66:	3501      	adds	r5, #1
 8007f68:	e7f5      	b.n	8007f56 <__gethex+0xbe>
 8007f6a:	2c00      	cmp	r4, #0
 8007f6c:	d1f8      	bne.n	8007f60 <__gethex+0xc8>
 8007f6e:	2220      	movs	r2, #32
 8007f70:	782b      	ldrb	r3, [r5, #0]
 8007f72:	002e      	movs	r6, r5
 8007f74:	4393      	bics	r3, r2
 8007f76:	2b50      	cmp	r3, #80	; 0x50
 8007f78:	d11d      	bne.n	8007fb6 <__gethex+0x11e>
 8007f7a:	786b      	ldrb	r3, [r5, #1]
 8007f7c:	2b2b      	cmp	r3, #43	; 0x2b
 8007f7e:	d02c      	beq.n	8007fda <__gethex+0x142>
 8007f80:	2b2d      	cmp	r3, #45	; 0x2d
 8007f82:	d02e      	beq.n	8007fe2 <__gethex+0x14a>
 8007f84:	2300      	movs	r3, #0
 8007f86:	1c6e      	adds	r6, r5, #1
 8007f88:	9306      	str	r3, [sp, #24]
 8007f8a:	7830      	ldrb	r0, [r6, #0]
 8007f8c:	f7ff ff6e 	bl	8007e6c <__hexdig_fun>
 8007f90:	1e43      	subs	r3, r0, #1
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b18      	cmp	r3, #24
 8007f96:	d82b      	bhi.n	8007ff0 <__gethex+0x158>
 8007f98:	3810      	subs	r0, #16
 8007f9a:	0004      	movs	r4, r0
 8007f9c:	7870      	ldrb	r0, [r6, #1]
 8007f9e:	f7ff ff65 	bl	8007e6c <__hexdig_fun>
 8007fa2:	1e43      	subs	r3, r0, #1
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	2b18      	cmp	r3, #24
 8007faa:	d91c      	bls.n	8007fe6 <__gethex+0x14e>
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d000      	beq.n	8007fb4 <__gethex+0x11c>
 8007fb2:	4264      	negs	r4, r4
 8007fb4:	193f      	adds	r7, r7, r4
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	601e      	str	r6, [r3, #0]
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d019      	beq.n	8007ff4 <__gethex+0x15c>
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	9b08      	ldr	r3, [sp, #32]
 8007fc4:	42b3      	cmp	r3, r6
 8007fc6:	d100      	bne.n	8007fca <__gethex+0x132>
 8007fc8:	3606      	adds	r6, #6
 8007fca:	0030      	movs	r0, r6
 8007fcc:	b00d      	add	sp, #52	; 0x34
 8007fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	2700      	movs	r7, #0
 8007fd4:	9d01      	ldr	r5, [sp, #4]
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	e7c9      	b.n	8007f6e <__gethex+0xd6>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9306      	str	r3, [sp, #24]
 8007fde:	1cae      	adds	r6, r5, #2
 8007fe0:	e7d3      	b.n	8007f8a <__gethex+0xf2>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7fa      	b.n	8007fdc <__gethex+0x144>
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	435c      	muls	r4, r3
 8007fea:	1824      	adds	r4, r4, r0
 8007fec:	3c10      	subs	r4, #16
 8007fee:	e7d5      	b.n	8007f9c <__gethex+0x104>
 8007ff0:	002e      	movs	r6, r5
 8007ff2:	e7e0      	b.n	8007fb6 <__gethex+0x11e>
 8007ff4:	9b01      	ldr	r3, [sp, #4]
 8007ff6:	9904      	ldr	r1, [sp, #16]
 8007ff8:	1aeb      	subs	r3, r5, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	dc0a      	bgt.n	8008016 <__gethex+0x17e>
 8008000:	9805      	ldr	r0, [sp, #20]
 8008002:	f000 fa87 	bl	8008514 <_Balloc>
 8008006:	1e04      	subs	r4, r0, #0
 8008008:	d108      	bne.n	800801c <__gethex+0x184>
 800800a:	0002      	movs	r2, r0
 800800c:	21de      	movs	r1, #222	; 0xde
 800800e:	4b64      	ldr	r3, [pc, #400]	; (80081a0 <__gethex+0x308>)
 8008010:	4864      	ldr	r0, [pc, #400]	; (80081a4 <__gethex+0x30c>)
 8008012:	f001 f9f1 	bl	80093f8 <__assert_func>
 8008016:	3101      	adds	r1, #1
 8008018:	105b      	asrs	r3, r3, #1
 800801a:	e7ef      	b.n	8007ffc <__gethex+0x164>
 800801c:	0003      	movs	r3, r0
 800801e:	3314      	adds	r3, #20
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	9309      	str	r3, [sp, #36]	; 0x24
 8008024:	2300      	movs	r3, #0
 8008026:	001e      	movs	r6, r3
 8008028:	9306      	str	r3, [sp, #24]
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	42ab      	cmp	r3, r5
 800802e:	d340      	bcc.n	80080b2 <__gethex+0x21a>
 8008030:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008032:	9b04      	ldr	r3, [sp, #16]
 8008034:	c540      	stmia	r5!, {r6}
 8008036:	1aed      	subs	r5, r5, r3
 8008038:	10ad      	asrs	r5, r5, #2
 800803a:	0030      	movs	r0, r6
 800803c:	6125      	str	r5, [r4, #16]
 800803e:	f000 fb61 	bl	8008704 <__hi0bits>
 8008042:	9b02      	ldr	r3, [sp, #8]
 8008044:	016d      	lsls	r5, r5, #5
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1a2e      	subs	r6, r5, r0
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	429e      	cmp	r6, r3
 800804e:	dd5a      	ble.n	8008106 <__gethex+0x26e>
 8008050:	1af6      	subs	r6, r6, r3
 8008052:	0031      	movs	r1, r6
 8008054:	0020      	movs	r0, r4
 8008056:	f000 ff03 	bl	8008e60 <__any_on>
 800805a:	1e05      	subs	r5, r0, #0
 800805c:	d016      	beq.n	800808c <__gethex+0x1f4>
 800805e:	2501      	movs	r5, #1
 8008060:	211f      	movs	r1, #31
 8008062:	0028      	movs	r0, r5
 8008064:	1e73      	subs	r3, r6, #1
 8008066:	4019      	ands	r1, r3
 8008068:	4088      	lsls	r0, r1
 800806a:	0001      	movs	r1, r0
 800806c:	115a      	asrs	r2, r3, #5
 800806e:	9804      	ldr	r0, [sp, #16]
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	5812      	ldr	r2, [r2, r0]
 8008074:	420a      	tst	r2, r1
 8008076:	d009      	beq.n	800808c <__gethex+0x1f4>
 8008078:	42ab      	cmp	r3, r5
 800807a:	dd06      	ble.n	800808a <__gethex+0x1f2>
 800807c:	0020      	movs	r0, r4
 800807e:	1eb1      	subs	r1, r6, #2
 8008080:	f000 feee 	bl	8008e60 <__any_on>
 8008084:	3502      	adds	r5, #2
 8008086:	2800      	cmp	r0, #0
 8008088:	d100      	bne.n	800808c <__gethex+0x1f4>
 800808a:	2502      	movs	r5, #2
 800808c:	0031      	movs	r1, r6
 800808e:	0020      	movs	r0, r4
 8008090:	f7ff fe98 	bl	8007dc4 <rshift>
 8008094:	19bf      	adds	r7, r7, r6
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	42bb      	cmp	r3, r7
 800809e:	da42      	bge.n	8008126 <__gethex+0x28e>
 80080a0:	0021      	movs	r1, r4
 80080a2:	9805      	ldr	r0, [sp, #20]
 80080a4:	f000 fa7a 	bl	800859c <_Bfree>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080ac:	26a3      	movs	r6, #163	; 0xa3
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	e78b      	b.n	8007fca <__gethex+0x132>
 80080b2:	1e6b      	subs	r3, r5, #1
 80080b4:	9308      	str	r3, [sp, #32]
 80080b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d014      	beq.n	80080e8 <__gethex+0x250>
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d104      	bne.n	80080ce <__gethex+0x236>
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	c340      	stmia	r3!, {r6}
 80080c8:	2600      	movs	r6, #0
 80080ca:	9309      	str	r3, [sp, #36]	; 0x24
 80080cc:	9606      	str	r6, [sp, #24]
 80080ce:	9b08      	ldr	r3, [sp, #32]
 80080d0:	7818      	ldrb	r0, [r3, #0]
 80080d2:	f7ff fecb 	bl	8007e6c <__hexdig_fun>
 80080d6:	230f      	movs	r3, #15
 80080d8:	4018      	ands	r0, r3
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	9d08      	ldr	r5, [sp, #32]
 80080de:	4098      	lsls	r0, r3
 80080e0:	3304      	adds	r3, #4
 80080e2:	4306      	orrs	r6, r0
 80080e4:	9306      	str	r3, [sp, #24]
 80080e6:	e7a0      	b.n	800802a <__gethex+0x192>
 80080e8:	2301      	movs	r3, #1
 80080ea:	9a03      	ldr	r2, [sp, #12]
 80080ec:	1a9d      	subs	r5, r3, r2
 80080ee:	9b08      	ldr	r3, [sp, #32]
 80080f0:	195d      	adds	r5, r3, r5
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	429d      	cmp	r5, r3
 80080f6:	d3e2      	bcc.n	80080be <__gethex+0x226>
 80080f8:	0028      	movs	r0, r5
 80080fa:	9907      	ldr	r1, [sp, #28]
 80080fc:	f001 f95c 	bl	80093b8 <strncmp>
 8008100:	2800      	cmp	r0, #0
 8008102:	d1dc      	bne.n	80080be <__gethex+0x226>
 8008104:	e791      	b.n	800802a <__gethex+0x192>
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	2500      	movs	r5, #0
 800810a:	429e      	cmp	r6, r3
 800810c:	dac3      	bge.n	8008096 <__gethex+0x1fe>
 800810e:	1b9e      	subs	r6, r3, r6
 8008110:	0021      	movs	r1, r4
 8008112:	0032      	movs	r2, r6
 8008114:	9805      	ldr	r0, [sp, #20]
 8008116:	f000 fc5f 	bl	80089d8 <__lshift>
 800811a:	0003      	movs	r3, r0
 800811c:	3314      	adds	r3, #20
 800811e:	0004      	movs	r4, r0
 8008120:	1bbf      	subs	r7, r7, r6
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	e7b7      	b.n	8008096 <__gethex+0x1fe>
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	685e      	ldr	r6, [r3, #4]
 800812a:	42be      	cmp	r6, r7
 800812c:	dd71      	ble.n	8008212 <__gethex+0x37a>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	1bf6      	subs	r6, r6, r7
 8008132:	42b3      	cmp	r3, r6
 8008134:	dc38      	bgt.n	80081a8 <__gethex+0x310>
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d026      	beq.n	800818c <__gethex+0x2f4>
 800813e:	2b03      	cmp	r3, #3
 8008140:	d028      	beq.n	8008194 <__gethex+0x2fc>
 8008142:	2b01      	cmp	r3, #1
 8008144:	d119      	bne.n	800817a <__gethex+0x2e2>
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	42b3      	cmp	r3, r6
 800814a:	d116      	bne.n	800817a <__gethex+0x2e2>
 800814c:	2b01      	cmp	r3, #1
 800814e:	d10d      	bne.n	800816c <__gethex+0x2d4>
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	2662      	movs	r6, #98	; 0x62
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	9a01      	ldr	r2, [sp, #4]
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	2301      	movs	r3, #1
 8008160:	9a04      	ldr	r2, [sp, #16]
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008168:	601c      	str	r4, [r3, #0]
 800816a:	e72e      	b.n	8007fca <__gethex+0x132>
 800816c:	9901      	ldr	r1, [sp, #4]
 800816e:	0020      	movs	r0, r4
 8008170:	3901      	subs	r1, #1
 8008172:	f000 fe75 	bl	8008e60 <__any_on>
 8008176:	2800      	cmp	r0, #0
 8008178:	d1ea      	bne.n	8008150 <__gethex+0x2b8>
 800817a:	0021      	movs	r1, r4
 800817c:	9805      	ldr	r0, [sp, #20]
 800817e:	f000 fa0d 	bl	800859c <_Bfree>
 8008182:	2300      	movs	r3, #0
 8008184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008186:	2650      	movs	r6, #80	; 0x50
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e71e      	b.n	8007fca <__gethex+0x132>
 800818c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f3      	bne.n	800817a <__gethex+0x2e2>
 8008192:	e7dd      	b.n	8008150 <__gethex+0x2b8>
 8008194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1da      	bne.n	8008150 <__gethex+0x2b8>
 800819a:	e7ee      	b.n	800817a <__gethex+0x2e2>
 800819c:	0800a3e8 	.word	0x0800a3e8
 80081a0:	0800a370 	.word	0x0800a370
 80081a4:	0800a381 	.word	0x0800a381
 80081a8:	1e77      	subs	r7, r6, #1
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	d12f      	bne.n	800820e <__gethex+0x376>
 80081ae:	2f00      	cmp	r7, #0
 80081b0:	d004      	beq.n	80081bc <__gethex+0x324>
 80081b2:	0039      	movs	r1, r7
 80081b4:	0020      	movs	r0, r4
 80081b6:	f000 fe53 	bl	8008e60 <__any_on>
 80081ba:	0005      	movs	r5, r0
 80081bc:	231f      	movs	r3, #31
 80081be:	117a      	asrs	r2, r7, #5
 80081c0:	401f      	ands	r7, r3
 80081c2:	3b1e      	subs	r3, #30
 80081c4:	40bb      	lsls	r3, r7
 80081c6:	9904      	ldr	r1, [sp, #16]
 80081c8:	0092      	lsls	r2, r2, #2
 80081ca:	5852      	ldr	r2, [r2, r1]
 80081cc:	421a      	tst	r2, r3
 80081ce:	d001      	beq.n	80081d4 <__gethex+0x33c>
 80081d0:	2302      	movs	r3, #2
 80081d2:	431d      	orrs	r5, r3
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	0031      	movs	r1, r6
 80081d8:	1b9b      	subs	r3, r3, r6
 80081da:	2602      	movs	r6, #2
 80081dc:	0020      	movs	r0, r4
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	f7ff fdf0 	bl	8007dc4 <rshift>
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	685f      	ldr	r7, [r3, #4]
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	d041      	beq.n	8008270 <__gethex+0x3d8>
 80081ec:	9b02      	ldr	r3, [sp, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d010      	beq.n	8008216 <__gethex+0x37e>
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d012      	beq.n	800821e <__gethex+0x386>
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <__gethex+0x372>
 80081fc:	07aa      	lsls	r2, r5, #30
 80081fe:	d504      	bpl.n	800820a <__gethex+0x372>
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	6810      	ldr	r0, [r2, #0]
 8008204:	4305      	orrs	r5, r0
 8008206:	421d      	tst	r5, r3
 8008208:	d10c      	bne.n	8008224 <__gethex+0x38c>
 800820a:	2310      	movs	r3, #16
 800820c:	e02f      	b.n	800826e <__gethex+0x3d6>
 800820e:	2501      	movs	r5, #1
 8008210:	e7d4      	b.n	80081bc <__gethex+0x324>
 8008212:	2601      	movs	r6, #1
 8008214:	e7e8      	b.n	80081e8 <__gethex+0x350>
 8008216:	2301      	movs	r3, #1
 8008218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	9313      	str	r3, [sp, #76]	; 0x4c
 800821e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0f2      	beq.n	800820a <__gethex+0x372>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	2000      	movs	r0, #0
 8008228:	9303      	str	r3, [sp, #12]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	0023      	movs	r3, r4
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	3314      	adds	r3, #20
 8008234:	1899      	adds	r1, r3, r2
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	1c55      	adds	r5, r2, #1
 800823a:	d01e      	beq.n	800827a <__gethex+0x3e2>
 800823c:	3201      	adds	r2, #1
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	0023      	movs	r3, r4
 8008242:	3314      	adds	r3, #20
 8008244:	2e02      	cmp	r6, #2
 8008246:	d140      	bne.n	80082ca <__gethex+0x432>
 8008248:	9a02      	ldr	r2, [sp, #8]
 800824a:	9901      	ldr	r1, [sp, #4]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	3a01      	subs	r2, #1
 8008250:	428a      	cmp	r2, r1
 8008252:	d10b      	bne.n	800826c <__gethex+0x3d4>
 8008254:	114a      	asrs	r2, r1, #5
 8008256:	211f      	movs	r1, #31
 8008258:	9801      	ldr	r0, [sp, #4]
 800825a:	0092      	lsls	r2, r2, #2
 800825c:	4001      	ands	r1, r0
 800825e:	2001      	movs	r0, #1
 8008260:	0005      	movs	r5, r0
 8008262:	408d      	lsls	r5, r1
 8008264:	58d3      	ldr	r3, [r2, r3]
 8008266:	422b      	tst	r3, r5
 8008268:	d000      	beq.n	800826c <__gethex+0x3d4>
 800826a:	2601      	movs	r6, #1
 800826c:	2320      	movs	r3, #32
 800826e:	431e      	orrs	r6, r3
 8008270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008272:	601c      	str	r4, [r3, #0]
 8008274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008276:	601f      	str	r7, [r3, #0]
 8008278:	e6a7      	b.n	8007fca <__gethex+0x132>
 800827a:	c301      	stmia	r3!, {r0}
 800827c:	4299      	cmp	r1, r3
 800827e:	d8da      	bhi.n	8008236 <__gethex+0x39e>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	68a2      	ldr	r2, [r4, #8]
 8008284:	4293      	cmp	r3, r2
 8008286:	db17      	blt.n	80082b8 <__gethex+0x420>
 8008288:	6863      	ldr	r3, [r4, #4]
 800828a:	9805      	ldr	r0, [sp, #20]
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	f000 f941 	bl	8008514 <_Balloc>
 8008292:	1e05      	subs	r5, r0, #0
 8008294:	d103      	bne.n	800829e <__gethex+0x406>
 8008296:	0002      	movs	r2, r0
 8008298:	2184      	movs	r1, #132	; 0x84
 800829a:	4b1c      	ldr	r3, [pc, #112]	; (800830c <__gethex+0x474>)
 800829c:	e6b8      	b.n	8008010 <__gethex+0x178>
 800829e:	0021      	movs	r1, r4
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	310c      	adds	r1, #12
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	0092      	lsls	r2, r2, #2
 80082a8:	300c      	adds	r0, #12
 80082aa:	f000 f92a 	bl	8008502 <memcpy>
 80082ae:	0021      	movs	r1, r4
 80082b0:	9805      	ldr	r0, [sp, #20]
 80082b2:	f000 f973 	bl	800859c <_Bfree>
 80082b6:	002c      	movs	r4, r5
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	6122      	str	r2, [r4, #16]
 80082be:	2201      	movs	r2, #1
 80082c0:	3304      	adds	r3, #4
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	18e3      	adds	r3, r4, r3
 80082c6:	605a      	str	r2, [r3, #4]
 80082c8:	e7ba      	b.n	8008240 <__gethex+0x3a8>
 80082ca:	6922      	ldr	r2, [r4, #16]
 80082cc:	9903      	ldr	r1, [sp, #12]
 80082ce:	428a      	cmp	r2, r1
 80082d0:	dd09      	ble.n	80082e6 <__gethex+0x44e>
 80082d2:	2101      	movs	r1, #1
 80082d4:	0020      	movs	r0, r4
 80082d6:	f7ff fd75 	bl	8007dc4 <rshift>
 80082da:	9b02      	ldr	r3, [sp, #8]
 80082dc:	3701      	adds	r7, #1
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	42bb      	cmp	r3, r7
 80082e2:	dac2      	bge.n	800826a <__gethex+0x3d2>
 80082e4:	e6dc      	b.n	80080a0 <__gethex+0x208>
 80082e6:	221f      	movs	r2, #31
 80082e8:	9d01      	ldr	r5, [sp, #4]
 80082ea:	9901      	ldr	r1, [sp, #4]
 80082ec:	2601      	movs	r6, #1
 80082ee:	4015      	ands	r5, r2
 80082f0:	4211      	tst	r1, r2
 80082f2:	d0bb      	beq.n	800826c <__gethex+0x3d4>
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	189b      	adds	r3, r3, r2
 80082f8:	3b04      	subs	r3, #4
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	f000 fa02 	bl	8008704 <__hi0bits>
 8008300:	2320      	movs	r3, #32
 8008302:	1b5d      	subs	r5, r3, r5
 8008304:	42a8      	cmp	r0, r5
 8008306:	dbe4      	blt.n	80082d2 <__gethex+0x43a>
 8008308:	e7b0      	b.n	800826c <__gethex+0x3d4>
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	0800a370 	.word	0x0800a370

08008310 <L_shift>:
 8008310:	2308      	movs	r3, #8
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	2520      	movs	r5, #32
 8008316:	1a9a      	subs	r2, r3, r2
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	1aad      	subs	r5, r5, r2
 800831c:	6843      	ldr	r3, [r0, #4]
 800831e:	6806      	ldr	r6, [r0, #0]
 8008320:	001c      	movs	r4, r3
 8008322:	40ac      	lsls	r4, r5
 8008324:	40d3      	lsrs	r3, r2
 8008326:	4334      	orrs	r4, r6
 8008328:	6004      	str	r4, [r0, #0]
 800832a:	6043      	str	r3, [r0, #4]
 800832c:	3004      	adds	r0, #4
 800832e:	4288      	cmp	r0, r1
 8008330:	d3f4      	bcc.n	800831c <L_shift+0xc>
 8008332:	bd70      	pop	{r4, r5, r6, pc}

08008334 <__match>:
 8008334:	b530      	push	{r4, r5, lr}
 8008336:	6803      	ldr	r3, [r0, #0]
 8008338:	780c      	ldrb	r4, [r1, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	2c00      	cmp	r4, #0
 800833e:	d102      	bne.n	8008346 <__match+0x12>
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	2001      	movs	r0, #1
 8008344:	bd30      	pop	{r4, r5, pc}
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	0015      	movs	r5, r2
 800834a:	3d41      	subs	r5, #65	; 0x41
 800834c:	2d19      	cmp	r5, #25
 800834e:	d800      	bhi.n	8008352 <__match+0x1e>
 8008350:	3220      	adds	r2, #32
 8008352:	3101      	adds	r1, #1
 8008354:	42a2      	cmp	r2, r4
 8008356:	d0ef      	beq.n	8008338 <__match+0x4>
 8008358:	2000      	movs	r0, #0
 800835a:	e7f3      	b.n	8008344 <__match+0x10>

0800835c <__hexnan>:
 800835c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800835e:	680b      	ldr	r3, [r1, #0]
 8008360:	b08b      	sub	sp, #44	; 0x2c
 8008362:	9201      	str	r2, [sp, #4]
 8008364:	9901      	ldr	r1, [sp, #4]
 8008366:	115a      	asrs	r2, r3, #5
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	188a      	adds	r2, r1, r2
 800836c:	9202      	str	r2, [sp, #8]
 800836e:	0019      	movs	r1, r3
 8008370:	221f      	movs	r2, #31
 8008372:	4011      	ands	r1, r2
 8008374:	9008      	str	r0, [sp, #32]
 8008376:	9106      	str	r1, [sp, #24]
 8008378:	4213      	tst	r3, r2
 800837a:	d002      	beq.n	8008382 <__hexnan+0x26>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	3304      	adds	r3, #4
 8008380:	9302      	str	r3, [sp, #8]
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	2500      	movs	r5, #0
 8008386:	1f1e      	subs	r6, r3, #4
 8008388:	0037      	movs	r7, r6
 800838a:	0034      	movs	r4, r6
 800838c:	9b08      	ldr	r3, [sp, #32]
 800838e:	6035      	str	r5, [r6, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	9507      	str	r5, [sp, #28]
 8008394:	9305      	str	r3, [sp, #20]
 8008396:	9503      	str	r5, [sp, #12]
 8008398:	9b05      	ldr	r3, [sp, #20]
 800839a:	3301      	adds	r3, #1
 800839c:	9309      	str	r3, [sp, #36]	; 0x24
 800839e:	9b05      	ldr	r3, [sp, #20]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d028      	beq.n	80083fa <__hexnan+0x9e>
 80083a8:	9804      	ldr	r0, [sp, #16]
 80083aa:	f7ff fd5f 	bl	8007e6c <__hexdig_fun>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d154      	bne.n	800845c <__hexnan+0x100>
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d819      	bhi.n	80083ec <__hexnan+0x90>
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	9a07      	ldr	r2, [sp, #28]
 80083bc:	4293      	cmp	r3, r2
 80083be:	dd12      	ble.n	80083e6 <__hexnan+0x8a>
 80083c0:	42bc      	cmp	r4, r7
 80083c2:	d206      	bcs.n	80083d2 <__hexnan+0x76>
 80083c4:	2d07      	cmp	r5, #7
 80083c6:	dc04      	bgt.n	80083d2 <__hexnan+0x76>
 80083c8:	002a      	movs	r2, r5
 80083ca:	0039      	movs	r1, r7
 80083cc:	0020      	movs	r0, r4
 80083ce:	f7ff ff9f 	bl	8008310 <L_shift>
 80083d2:	9b01      	ldr	r3, [sp, #4]
 80083d4:	2508      	movs	r5, #8
 80083d6:	429c      	cmp	r4, r3
 80083d8:	d905      	bls.n	80083e6 <__hexnan+0x8a>
 80083da:	1f27      	subs	r7, r4, #4
 80083dc:	2500      	movs	r5, #0
 80083de:	003c      	movs	r4, r7
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	603d      	str	r5, [r7, #0]
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	e7d5      	b.n	8008398 <__hexnan+0x3c>
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	2b29      	cmp	r3, #41	; 0x29
 80083f0:	d159      	bne.n	80084a6 <__hexnan+0x14a>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	9a08      	ldr	r2, [sp, #32]
 80083f6:	3302      	adds	r3, #2
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d052      	beq.n	80084a6 <__hexnan+0x14a>
 8008400:	42bc      	cmp	r4, r7
 8008402:	d206      	bcs.n	8008412 <__hexnan+0xb6>
 8008404:	2d07      	cmp	r5, #7
 8008406:	dc04      	bgt.n	8008412 <__hexnan+0xb6>
 8008408:	002a      	movs	r2, r5
 800840a:	0039      	movs	r1, r7
 800840c:	0020      	movs	r0, r4
 800840e:	f7ff ff7f 	bl	8008310 <L_shift>
 8008412:	9b01      	ldr	r3, [sp, #4]
 8008414:	429c      	cmp	r4, r3
 8008416:	d935      	bls.n	8008484 <__hexnan+0x128>
 8008418:	001a      	movs	r2, r3
 800841a:	0023      	movs	r3, r4
 800841c:	cb02      	ldmia	r3!, {r1}
 800841e:	c202      	stmia	r2!, {r1}
 8008420:	429e      	cmp	r6, r3
 8008422:	d2fb      	bcs.n	800841c <__hexnan+0xc0>
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	1c61      	adds	r1, r4, #1
 8008428:	1eda      	subs	r2, r3, #3
 800842a:	2304      	movs	r3, #4
 800842c:	4291      	cmp	r1, r2
 800842e:	d805      	bhi.n	800843c <__hexnan+0xe0>
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	3b04      	subs	r3, #4
 8008434:	1b1b      	subs	r3, r3, r4
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	3301      	adds	r3, #1
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	9a01      	ldr	r2, [sp, #4]
 800843e:	18d3      	adds	r3, r2, r3
 8008440:	2200      	movs	r2, #0
 8008442:	c304      	stmia	r3!, {r2}
 8008444:	429e      	cmp	r6, r3
 8008446:	d2fc      	bcs.n	8008442 <__hexnan+0xe6>
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d104      	bne.n	8008458 <__hexnan+0xfc>
 800844e:	9b01      	ldr	r3, [sp, #4]
 8008450:	429e      	cmp	r6, r3
 8008452:	d126      	bne.n	80084a2 <__hexnan+0x146>
 8008454:	2301      	movs	r3, #1
 8008456:	6033      	str	r3, [r6, #0]
 8008458:	2005      	movs	r0, #5
 800845a:	e025      	b.n	80084a8 <__hexnan+0x14c>
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	3501      	adds	r5, #1
 8008460:	3301      	adds	r3, #1
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	2d08      	cmp	r5, #8
 8008466:	dd06      	ble.n	8008476 <__hexnan+0x11a>
 8008468:	9b01      	ldr	r3, [sp, #4]
 800846a:	429c      	cmp	r4, r3
 800846c:	d9bb      	bls.n	80083e6 <__hexnan+0x8a>
 800846e:	2300      	movs	r3, #0
 8008470:	2501      	movs	r5, #1
 8008472:	3c04      	subs	r4, #4
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	220f      	movs	r2, #15
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	4010      	ands	r0, r2
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	4318      	orrs	r0, r3
 8008480:	6020      	str	r0, [r4, #0]
 8008482:	e7b0      	b.n	80083e6 <__hexnan+0x8a>
 8008484:	9b06      	ldr	r3, [sp, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0de      	beq.n	8008448 <__hexnan+0xec>
 800848a:	2120      	movs	r1, #32
 800848c:	9a06      	ldr	r2, [sp, #24]
 800848e:	9b02      	ldr	r3, [sp, #8]
 8008490:	1a89      	subs	r1, r1, r2
 8008492:	2201      	movs	r2, #1
 8008494:	4252      	negs	r2, r2
 8008496:	40ca      	lsrs	r2, r1
 8008498:	3b04      	subs	r3, #4
 800849a:	6819      	ldr	r1, [r3, #0]
 800849c:	400a      	ands	r2, r1
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e7d2      	b.n	8008448 <__hexnan+0xec>
 80084a2:	3e04      	subs	r6, #4
 80084a4:	e7d0      	b.n	8008448 <__hexnan+0xec>
 80084a6:	2004      	movs	r0, #4
 80084a8:	b00b      	add	sp, #44	; 0x2c
 80084aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084ac <_localeconv_r>:
 80084ac:	4800      	ldr	r0, [pc, #0]	; (80084b0 <_localeconv_r+0x4>)
 80084ae:	4770      	bx	lr
 80084b0:	20000164 	.word	0x20000164

080084b4 <malloc>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <malloc+0x10>)
 80084b8:	0001      	movs	r1, r0
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	f000 fd8c 	bl	8008fd8 <_malloc_r>
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	2000000c 	.word	0x2000000c

080084c8 <__ascii_mbtowc>:
 80084c8:	b082      	sub	sp, #8
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d100      	bne.n	80084d0 <__ascii_mbtowc+0x8>
 80084ce:	a901      	add	r1, sp, #4
 80084d0:	1e10      	subs	r0, r2, #0
 80084d2:	d006      	beq.n	80084e2 <__ascii_mbtowc+0x1a>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <__ascii_mbtowc+0x1e>
 80084d8:	7813      	ldrb	r3, [r2, #0]
 80084da:	600b      	str	r3, [r1, #0]
 80084dc:	7810      	ldrb	r0, [r2, #0]
 80084de:	1e43      	subs	r3, r0, #1
 80084e0:	4198      	sbcs	r0, r3
 80084e2:	b002      	add	sp, #8
 80084e4:	4770      	bx	lr
 80084e6:	2002      	movs	r0, #2
 80084e8:	4240      	negs	r0, r0
 80084ea:	e7fa      	b.n	80084e2 <__ascii_mbtowc+0x1a>

080084ec <memchr>:
 80084ec:	b2c9      	uxtb	r1, r1
 80084ee:	1882      	adds	r2, r0, r2
 80084f0:	4290      	cmp	r0, r2
 80084f2:	d101      	bne.n	80084f8 <memchr+0xc>
 80084f4:	2000      	movs	r0, #0
 80084f6:	4770      	bx	lr
 80084f8:	7803      	ldrb	r3, [r0, #0]
 80084fa:	428b      	cmp	r3, r1
 80084fc:	d0fb      	beq.n	80084f6 <memchr+0xa>
 80084fe:	3001      	adds	r0, #1
 8008500:	e7f6      	b.n	80084f0 <memchr+0x4>

08008502 <memcpy>:
 8008502:	2300      	movs	r3, #0
 8008504:	b510      	push	{r4, lr}
 8008506:	429a      	cmp	r2, r3
 8008508:	d100      	bne.n	800850c <memcpy+0xa>
 800850a:	bd10      	pop	{r4, pc}
 800850c:	5ccc      	ldrb	r4, [r1, r3]
 800850e:	54c4      	strb	r4, [r0, r3]
 8008510:	3301      	adds	r3, #1
 8008512:	e7f8      	b.n	8008506 <memcpy+0x4>

08008514 <_Balloc>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008518:	0006      	movs	r6, r0
 800851a:	000c      	movs	r4, r1
 800851c:	2d00      	cmp	r5, #0
 800851e:	d10e      	bne.n	800853e <_Balloc+0x2a>
 8008520:	2010      	movs	r0, #16
 8008522:	f7ff ffc7 	bl	80084b4 <malloc>
 8008526:	1e02      	subs	r2, r0, #0
 8008528:	6270      	str	r0, [r6, #36]	; 0x24
 800852a:	d104      	bne.n	8008536 <_Balloc+0x22>
 800852c:	2166      	movs	r1, #102	; 0x66
 800852e:	4b19      	ldr	r3, [pc, #100]	; (8008594 <_Balloc+0x80>)
 8008530:	4819      	ldr	r0, [pc, #100]	; (8008598 <_Balloc+0x84>)
 8008532:	f000 ff61 	bl	80093f8 <__assert_func>
 8008536:	6045      	str	r5, [r0, #4]
 8008538:	6085      	str	r5, [r0, #8]
 800853a:	6005      	str	r5, [r0, #0]
 800853c:	60c5      	str	r5, [r0, #12]
 800853e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008540:	68eb      	ldr	r3, [r5, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d013      	beq.n	800856e <_Balloc+0x5a>
 8008546:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008548:	00a2      	lsls	r2, r4, #2
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	189b      	adds	r3, r3, r2
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	2800      	cmp	r0, #0
 8008552:	d118      	bne.n	8008586 <_Balloc+0x72>
 8008554:	2101      	movs	r1, #1
 8008556:	000d      	movs	r5, r1
 8008558:	40a5      	lsls	r5, r4
 800855a:	1d6a      	adds	r2, r5, #5
 800855c:	0030      	movs	r0, r6
 800855e:	0092      	lsls	r2, r2, #2
 8008560:	f000 fca1 	bl	8008ea6 <_calloc_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	d00c      	beq.n	8008582 <_Balloc+0x6e>
 8008568:	6044      	str	r4, [r0, #4]
 800856a:	6085      	str	r5, [r0, #8]
 800856c:	e00d      	b.n	800858a <_Balloc+0x76>
 800856e:	2221      	movs	r2, #33	; 0x21
 8008570:	2104      	movs	r1, #4
 8008572:	0030      	movs	r0, r6
 8008574:	f000 fc97 	bl	8008ea6 <_calloc_r>
 8008578:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800857a:	60e8      	str	r0, [r5, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e1      	bne.n	8008546 <_Balloc+0x32>
 8008582:	2000      	movs	r0, #0
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	6802      	ldr	r2, [r0, #0]
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	2300      	movs	r3, #0
 800858c:	6103      	str	r3, [r0, #16]
 800858e:	60c3      	str	r3, [r0, #12]
 8008590:	e7f8      	b.n	8008584 <_Balloc+0x70>
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	0800a2fe 	.word	0x0800a2fe
 8008598:	0800a3fc 	.word	0x0800a3fc

0800859c <_Bfree>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085a0:	0005      	movs	r5, r0
 80085a2:	000c      	movs	r4, r1
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	d10e      	bne.n	80085c6 <_Bfree+0x2a>
 80085a8:	2010      	movs	r0, #16
 80085aa:	f7ff ff83 	bl	80084b4 <malloc>
 80085ae:	1e02      	subs	r2, r0, #0
 80085b0:	6268      	str	r0, [r5, #36]	; 0x24
 80085b2:	d104      	bne.n	80085be <_Bfree+0x22>
 80085b4:	218a      	movs	r1, #138	; 0x8a
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <_Bfree+0x40>)
 80085b8:	4809      	ldr	r0, [pc, #36]	; (80085e0 <_Bfree+0x44>)
 80085ba:	f000 ff1d 	bl	80093f8 <__assert_func>
 80085be:	6046      	str	r6, [r0, #4]
 80085c0:	6086      	str	r6, [r0, #8]
 80085c2:	6006      	str	r6, [r0, #0]
 80085c4:	60c6      	str	r6, [r0, #12]
 80085c6:	2c00      	cmp	r4, #0
 80085c8:	d007      	beq.n	80085da <_Bfree+0x3e>
 80085ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085cc:	6862      	ldr	r2, [r4, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	6022      	str	r2, [r4, #0]
 80085d8:	601c      	str	r4, [r3, #0]
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	0800a2fe 	.word	0x0800a2fe
 80085e0:	0800a3fc 	.word	0x0800a3fc

080085e4 <__multadd>:
 80085e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085e6:	000e      	movs	r6, r1
 80085e8:	9001      	str	r0, [sp, #4]
 80085ea:	000c      	movs	r4, r1
 80085ec:	001d      	movs	r5, r3
 80085ee:	2000      	movs	r0, #0
 80085f0:	690f      	ldr	r7, [r1, #16]
 80085f2:	3614      	adds	r6, #20
 80085f4:	6833      	ldr	r3, [r6, #0]
 80085f6:	3001      	adds	r0, #1
 80085f8:	b299      	uxth	r1, r3
 80085fa:	4351      	muls	r1, r2
 80085fc:	0c1b      	lsrs	r3, r3, #16
 80085fe:	4353      	muls	r3, r2
 8008600:	1949      	adds	r1, r1, r5
 8008602:	0c0d      	lsrs	r5, r1, #16
 8008604:	195b      	adds	r3, r3, r5
 8008606:	0c1d      	lsrs	r5, r3, #16
 8008608:	b289      	uxth	r1, r1
 800860a:	041b      	lsls	r3, r3, #16
 800860c:	185b      	adds	r3, r3, r1
 800860e:	c608      	stmia	r6!, {r3}
 8008610:	4287      	cmp	r7, r0
 8008612:	dcef      	bgt.n	80085f4 <__multadd+0x10>
 8008614:	2d00      	cmp	r5, #0
 8008616:	d022      	beq.n	800865e <__multadd+0x7a>
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	42bb      	cmp	r3, r7
 800861c:	dc19      	bgt.n	8008652 <__multadd+0x6e>
 800861e:	6863      	ldr	r3, [r4, #4]
 8008620:	9801      	ldr	r0, [sp, #4]
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	f7ff ff76 	bl	8008514 <_Balloc>
 8008628:	1e06      	subs	r6, r0, #0
 800862a:	d105      	bne.n	8008638 <__multadd+0x54>
 800862c:	0002      	movs	r2, r0
 800862e:	21b5      	movs	r1, #181	; 0xb5
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <__multadd+0x80>)
 8008632:	480d      	ldr	r0, [pc, #52]	; (8008668 <__multadd+0x84>)
 8008634:	f000 fee0 	bl	80093f8 <__assert_func>
 8008638:	0021      	movs	r1, r4
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	310c      	adds	r1, #12
 800863e:	1c9a      	adds	r2, r3, #2
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	300c      	adds	r0, #12
 8008644:	f7ff ff5d 	bl	8008502 <memcpy>
 8008648:	0021      	movs	r1, r4
 800864a:	9801      	ldr	r0, [sp, #4]
 800864c:	f7ff ffa6 	bl	800859c <_Bfree>
 8008650:	0034      	movs	r4, r6
 8008652:	1d3b      	adds	r3, r7, #4
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	18e3      	adds	r3, r4, r3
 8008658:	605d      	str	r5, [r3, #4]
 800865a:	1c7b      	adds	r3, r7, #1
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	0020      	movs	r0, r4
 8008660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	0800a370 	.word	0x0800a370
 8008668:	0800a3fc 	.word	0x0800a3fc

0800866c <__s2b>:
 800866c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800866e:	0006      	movs	r6, r0
 8008670:	0018      	movs	r0, r3
 8008672:	000c      	movs	r4, r1
 8008674:	3008      	adds	r0, #8
 8008676:	2109      	movs	r1, #9
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	0015      	movs	r5, r2
 800867c:	f7f7 fde8 	bl	8000250 <__divsi3>
 8008680:	2301      	movs	r3, #1
 8008682:	2100      	movs	r1, #0
 8008684:	4283      	cmp	r3, r0
 8008686:	db0a      	blt.n	800869e <__s2b+0x32>
 8008688:	0030      	movs	r0, r6
 800868a:	f7ff ff43 	bl	8008514 <_Balloc>
 800868e:	1e01      	subs	r1, r0, #0
 8008690:	d108      	bne.n	80086a4 <__s2b+0x38>
 8008692:	0002      	movs	r2, r0
 8008694:	4b19      	ldr	r3, [pc, #100]	; (80086fc <__s2b+0x90>)
 8008696:	481a      	ldr	r0, [pc, #104]	; (8008700 <__s2b+0x94>)
 8008698:	31ce      	adds	r1, #206	; 0xce
 800869a:	f000 fead 	bl	80093f8 <__assert_func>
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	3101      	adds	r1, #1
 80086a2:	e7ef      	b.n	8008684 <__s2b+0x18>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	6143      	str	r3, [r0, #20]
 80086a8:	2301      	movs	r3, #1
 80086aa:	6103      	str	r3, [r0, #16]
 80086ac:	2d09      	cmp	r5, #9
 80086ae:	dd18      	ble.n	80086e2 <__s2b+0x76>
 80086b0:	0023      	movs	r3, r4
 80086b2:	3309      	adds	r3, #9
 80086b4:	001f      	movs	r7, r3
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	1964      	adds	r4, r4, r5
 80086ba:	783b      	ldrb	r3, [r7, #0]
 80086bc:	220a      	movs	r2, #10
 80086be:	0030      	movs	r0, r6
 80086c0:	3b30      	subs	r3, #48	; 0x30
 80086c2:	f7ff ff8f 	bl	80085e4 <__multadd>
 80086c6:	3701      	adds	r7, #1
 80086c8:	0001      	movs	r1, r0
 80086ca:	42a7      	cmp	r7, r4
 80086cc:	d1f5      	bne.n	80086ba <__s2b+0x4e>
 80086ce:	002c      	movs	r4, r5
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	3c08      	subs	r4, #8
 80086d4:	191c      	adds	r4, r3, r4
 80086d6:	002f      	movs	r7, r5
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	429f      	cmp	r7, r3
 80086dc:	db04      	blt.n	80086e8 <__s2b+0x7c>
 80086de:	0008      	movs	r0, r1
 80086e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086e2:	2509      	movs	r5, #9
 80086e4:	340a      	adds	r4, #10
 80086e6:	e7f6      	b.n	80086d6 <__s2b+0x6a>
 80086e8:	1b63      	subs	r3, r4, r5
 80086ea:	5ddb      	ldrb	r3, [r3, r7]
 80086ec:	220a      	movs	r2, #10
 80086ee:	0030      	movs	r0, r6
 80086f0:	3b30      	subs	r3, #48	; 0x30
 80086f2:	f7ff ff77 	bl	80085e4 <__multadd>
 80086f6:	3701      	adds	r7, #1
 80086f8:	0001      	movs	r1, r0
 80086fa:	e7ed      	b.n	80086d8 <__s2b+0x6c>
 80086fc:	0800a370 	.word	0x0800a370
 8008700:	0800a3fc 	.word	0x0800a3fc

08008704 <__hi0bits>:
 8008704:	0003      	movs	r3, r0
 8008706:	0c02      	lsrs	r2, r0, #16
 8008708:	2000      	movs	r0, #0
 800870a:	4282      	cmp	r2, r0
 800870c:	d101      	bne.n	8008712 <__hi0bits+0xe>
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	3010      	adds	r0, #16
 8008712:	0e1a      	lsrs	r2, r3, #24
 8008714:	d101      	bne.n	800871a <__hi0bits+0x16>
 8008716:	3008      	adds	r0, #8
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	0f1a      	lsrs	r2, r3, #28
 800871c:	d101      	bne.n	8008722 <__hi0bits+0x1e>
 800871e:	3004      	adds	r0, #4
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	0f9a      	lsrs	r2, r3, #30
 8008724:	d101      	bne.n	800872a <__hi0bits+0x26>
 8008726:	3002      	adds	r0, #2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	db03      	blt.n	8008736 <__hi0bits+0x32>
 800872e:	3001      	adds	r0, #1
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	d400      	bmi.n	8008736 <__hi0bits+0x32>
 8008734:	2020      	movs	r0, #32
 8008736:	4770      	bx	lr

08008738 <__lo0bits>:
 8008738:	6803      	ldr	r3, [r0, #0]
 800873a:	0002      	movs	r2, r0
 800873c:	2107      	movs	r1, #7
 800873e:	0018      	movs	r0, r3
 8008740:	4008      	ands	r0, r1
 8008742:	420b      	tst	r3, r1
 8008744:	d00d      	beq.n	8008762 <__lo0bits+0x2a>
 8008746:	3906      	subs	r1, #6
 8008748:	2000      	movs	r0, #0
 800874a:	420b      	tst	r3, r1
 800874c:	d105      	bne.n	800875a <__lo0bits+0x22>
 800874e:	3002      	adds	r0, #2
 8008750:	4203      	tst	r3, r0
 8008752:	d003      	beq.n	800875c <__lo0bits+0x24>
 8008754:	40cb      	lsrs	r3, r1
 8008756:	0008      	movs	r0, r1
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4770      	bx	lr
 800875c:	089b      	lsrs	r3, r3, #2
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	e7fb      	b.n	800875a <__lo0bits+0x22>
 8008762:	b299      	uxth	r1, r3
 8008764:	2900      	cmp	r1, #0
 8008766:	d101      	bne.n	800876c <__lo0bits+0x34>
 8008768:	2010      	movs	r0, #16
 800876a:	0c1b      	lsrs	r3, r3, #16
 800876c:	b2d9      	uxtb	r1, r3
 800876e:	2900      	cmp	r1, #0
 8008770:	d101      	bne.n	8008776 <__lo0bits+0x3e>
 8008772:	3008      	adds	r0, #8
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	0719      	lsls	r1, r3, #28
 8008778:	d101      	bne.n	800877e <__lo0bits+0x46>
 800877a:	3004      	adds	r0, #4
 800877c:	091b      	lsrs	r3, r3, #4
 800877e:	0799      	lsls	r1, r3, #30
 8008780:	d101      	bne.n	8008786 <__lo0bits+0x4e>
 8008782:	3002      	adds	r0, #2
 8008784:	089b      	lsrs	r3, r3, #2
 8008786:	07d9      	lsls	r1, r3, #31
 8008788:	d4e9      	bmi.n	800875e <__lo0bits+0x26>
 800878a:	3001      	adds	r0, #1
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	d1e6      	bne.n	800875e <__lo0bits+0x26>
 8008790:	2020      	movs	r0, #32
 8008792:	e7e2      	b.n	800875a <__lo0bits+0x22>

08008794 <__i2b>:
 8008794:	b510      	push	{r4, lr}
 8008796:	000c      	movs	r4, r1
 8008798:	2101      	movs	r1, #1
 800879a:	f7ff febb 	bl	8008514 <_Balloc>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d106      	bne.n	80087b0 <__i2b+0x1c>
 80087a2:	21a0      	movs	r1, #160	; 0xa0
 80087a4:	0002      	movs	r2, r0
 80087a6:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <__i2b+0x24>)
 80087a8:	4804      	ldr	r0, [pc, #16]	; (80087bc <__i2b+0x28>)
 80087aa:	0049      	lsls	r1, r1, #1
 80087ac:	f000 fe24 	bl	80093f8 <__assert_func>
 80087b0:	2301      	movs	r3, #1
 80087b2:	6144      	str	r4, [r0, #20]
 80087b4:	6103      	str	r3, [r0, #16]
 80087b6:	bd10      	pop	{r4, pc}
 80087b8:	0800a370 	.word	0x0800a370
 80087bc:	0800a3fc 	.word	0x0800a3fc

080087c0 <__multiply>:
 80087c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c2:	690b      	ldr	r3, [r1, #16]
 80087c4:	0014      	movs	r4, r2
 80087c6:	6912      	ldr	r2, [r2, #16]
 80087c8:	000d      	movs	r5, r1
 80087ca:	b089      	sub	sp, #36	; 0x24
 80087cc:	4293      	cmp	r3, r2
 80087ce:	da01      	bge.n	80087d4 <__multiply+0x14>
 80087d0:	0025      	movs	r5, r4
 80087d2:	000c      	movs	r4, r1
 80087d4:	692f      	ldr	r7, [r5, #16]
 80087d6:	6926      	ldr	r6, [r4, #16]
 80087d8:	6869      	ldr	r1, [r5, #4]
 80087da:	19bb      	adds	r3, r7, r6
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	68ab      	ldr	r3, [r5, #8]
 80087e0:	19ba      	adds	r2, r7, r6
 80087e2:	4293      	cmp	r3, r2
 80087e4:	da00      	bge.n	80087e8 <__multiply+0x28>
 80087e6:	3101      	adds	r1, #1
 80087e8:	f7ff fe94 	bl	8008514 <_Balloc>
 80087ec:	9001      	str	r0, [sp, #4]
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d106      	bne.n	8008800 <__multiply+0x40>
 80087f2:	215e      	movs	r1, #94	; 0x5e
 80087f4:	0002      	movs	r2, r0
 80087f6:	4b48      	ldr	r3, [pc, #288]	; (8008918 <__multiply+0x158>)
 80087f8:	4848      	ldr	r0, [pc, #288]	; (800891c <__multiply+0x15c>)
 80087fa:	31ff      	adds	r1, #255	; 0xff
 80087fc:	f000 fdfc 	bl	80093f8 <__assert_func>
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	3314      	adds	r3, #20
 8008806:	469c      	mov	ip, r3
 8008808:	19bb      	adds	r3, r7, r6
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4463      	add	r3, ip
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	4663      	mov	r3, ip
 8008812:	9903      	ldr	r1, [sp, #12]
 8008814:	428b      	cmp	r3, r1
 8008816:	d32c      	bcc.n	8008872 <__multiply+0xb2>
 8008818:	002b      	movs	r3, r5
 800881a:	0022      	movs	r2, r4
 800881c:	3314      	adds	r3, #20
 800881e:	00bf      	lsls	r7, r7, #2
 8008820:	3214      	adds	r2, #20
 8008822:	9306      	str	r3, [sp, #24]
 8008824:	00b6      	lsls	r6, r6, #2
 8008826:	19db      	adds	r3, r3, r7
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	1993      	adds	r3, r2, r6
 800882c:	9307      	str	r3, [sp, #28]
 800882e:	2304      	movs	r3, #4
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	002b      	movs	r3, r5
 8008834:	9904      	ldr	r1, [sp, #16]
 8008836:	3315      	adds	r3, #21
 8008838:	9200      	str	r2, [sp, #0]
 800883a:	4299      	cmp	r1, r3
 800883c:	d305      	bcc.n	800884a <__multiply+0x8a>
 800883e:	1b4b      	subs	r3, r1, r5
 8008840:	3b15      	subs	r3, #21
 8008842:	089b      	lsrs	r3, r3, #2
 8008844:	3301      	adds	r3, #1
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	9b07      	ldr	r3, [sp, #28]
 800884c:	9a00      	ldr	r2, [sp, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d311      	bcc.n	8008876 <__multiply+0xb6>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd06      	ble.n	8008866 <__multiply+0xa6>
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	3b04      	subs	r3, #4
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d053      	beq.n	800890e <__multiply+0x14e>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	9a02      	ldr	r2, [sp, #8]
 800886a:	0018      	movs	r0, r3
 800886c:	611a      	str	r2, [r3, #16]
 800886e:	b009      	add	sp, #36	; 0x24
 8008870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008872:	c304      	stmia	r3!, {r2}
 8008874:	e7cd      	b.n	8008812 <__multiply+0x52>
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	b298      	uxth	r0, r3
 800887c:	2800      	cmp	r0, #0
 800887e:	d01b      	beq.n	80088b8 <__multiply+0xf8>
 8008880:	4667      	mov	r7, ip
 8008882:	2400      	movs	r4, #0
 8008884:	9e06      	ldr	r6, [sp, #24]
 8008886:	ce02      	ldmia	r6!, {r1}
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	b28b      	uxth	r3, r1
 800888c:	4343      	muls	r3, r0
 800888e:	b292      	uxth	r2, r2
 8008890:	189b      	adds	r3, r3, r2
 8008892:	191b      	adds	r3, r3, r4
 8008894:	0c0c      	lsrs	r4, r1, #16
 8008896:	4344      	muls	r4, r0
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	0c11      	lsrs	r1, r2, #16
 800889c:	1861      	adds	r1, r4, r1
 800889e:	0c1c      	lsrs	r4, r3, #16
 80088a0:	1909      	adds	r1, r1, r4
 80088a2:	0c0c      	lsrs	r4, r1, #16
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	0409      	lsls	r1, r1, #16
 80088a8:	430b      	orrs	r3, r1
 80088aa:	c708      	stmia	r7!, {r3}
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	42b3      	cmp	r3, r6
 80088b0:	d8e9      	bhi.n	8008886 <__multiply+0xc6>
 80088b2:	4663      	mov	r3, ip
 80088b4:	9a05      	ldr	r2, [sp, #20]
 80088b6:	509c      	str	r4, [r3, r2]
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	0c1e      	lsrs	r6, r3, #16
 80088be:	d020      	beq.n	8008902 <__multiply+0x142>
 80088c0:	4663      	mov	r3, ip
 80088c2:	002c      	movs	r4, r5
 80088c4:	4660      	mov	r0, ip
 80088c6:	2700      	movs	r7, #0
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3414      	adds	r4, #20
 80088cc:	6822      	ldr	r2, [r4, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	b291      	uxth	r1, r2
 80088d2:	4371      	muls	r1, r6
 80088d4:	6802      	ldr	r2, [r0, #0]
 80088d6:	0c12      	lsrs	r2, r2, #16
 80088d8:	1889      	adds	r1, r1, r2
 80088da:	19cf      	adds	r7, r1, r7
 80088dc:	0439      	lsls	r1, r7, #16
 80088de:	430b      	orrs	r3, r1
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	cc02      	ldmia	r4!, {r1}
 80088e4:	6843      	ldr	r3, [r0, #4]
 80088e6:	0c09      	lsrs	r1, r1, #16
 80088e8:	4371      	muls	r1, r6
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	0c3f      	lsrs	r7, r7, #16
 80088ee:	18cb      	adds	r3, r1, r3
 80088f0:	9a04      	ldr	r2, [sp, #16]
 80088f2:	19db      	adds	r3, r3, r7
 80088f4:	0c1f      	lsrs	r7, r3, #16
 80088f6:	3004      	adds	r0, #4
 80088f8:	42a2      	cmp	r2, r4
 80088fa:	d8e7      	bhi.n	80088cc <__multiply+0x10c>
 80088fc:	4662      	mov	r2, ip
 80088fe:	9905      	ldr	r1, [sp, #20]
 8008900:	5053      	str	r3, [r2, r1]
 8008902:	9b00      	ldr	r3, [sp, #0]
 8008904:	3304      	adds	r3, #4
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	2304      	movs	r3, #4
 800890a:	449c      	add	ip, r3
 800890c:	e79d      	b.n	800884a <__multiply+0x8a>
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	3b01      	subs	r3, #1
 8008912:	9302      	str	r3, [sp, #8]
 8008914:	e79d      	b.n	8008852 <__multiply+0x92>
 8008916:	46c0      	nop			; (mov r8, r8)
 8008918:	0800a370 	.word	0x0800a370
 800891c:	0800a3fc 	.word	0x0800a3fc

08008920 <__pow5mult>:
 8008920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008922:	2303      	movs	r3, #3
 8008924:	0015      	movs	r5, r2
 8008926:	0007      	movs	r7, r0
 8008928:	000e      	movs	r6, r1
 800892a:	401a      	ands	r2, r3
 800892c:	421d      	tst	r5, r3
 800892e:	d008      	beq.n	8008942 <__pow5mult+0x22>
 8008930:	4925      	ldr	r1, [pc, #148]	; (80089c8 <__pow5mult+0xa8>)
 8008932:	3a01      	subs	r2, #1
 8008934:	0092      	lsls	r2, r2, #2
 8008936:	5852      	ldr	r2, [r2, r1]
 8008938:	2300      	movs	r3, #0
 800893a:	0031      	movs	r1, r6
 800893c:	f7ff fe52 	bl	80085e4 <__multadd>
 8008940:	0006      	movs	r6, r0
 8008942:	10ad      	asrs	r5, r5, #2
 8008944:	d03d      	beq.n	80089c2 <__pow5mult+0xa2>
 8008946:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008948:	2c00      	cmp	r4, #0
 800894a:	d10f      	bne.n	800896c <__pow5mult+0x4c>
 800894c:	2010      	movs	r0, #16
 800894e:	f7ff fdb1 	bl	80084b4 <malloc>
 8008952:	1e02      	subs	r2, r0, #0
 8008954:	6278      	str	r0, [r7, #36]	; 0x24
 8008956:	d105      	bne.n	8008964 <__pow5mult+0x44>
 8008958:	21d7      	movs	r1, #215	; 0xd7
 800895a:	4b1c      	ldr	r3, [pc, #112]	; (80089cc <__pow5mult+0xac>)
 800895c:	481c      	ldr	r0, [pc, #112]	; (80089d0 <__pow5mult+0xb0>)
 800895e:	0049      	lsls	r1, r1, #1
 8008960:	f000 fd4a 	bl	80093f8 <__assert_func>
 8008964:	6044      	str	r4, [r0, #4]
 8008966:	6084      	str	r4, [r0, #8]
 8008968:	6004      	str	r4, [r0, #0]
 800896a:	60c4      	str	r4, [r0, #12]
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	689c      	ldr	r4, [r3, #8]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	2c00      	cmp	r4, #0
 8008974:	d108      	bne.n	8008988 <__pow5mult+0x68>
 8008976:	0038      	movs	r0, r7
 8008978:	4916      	ldr	r1, [pc, #88]	; (80089d4 <__pow5mult+0xb4>)
 800897a:	f7ff ff0b 	bl	8008794 <__i2b>
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	0004      	movs	r4, r0
 8008982:	6098      	str	r0, [r3, #8]
 8008984:	2300      	movs	r3, #0
 8008986:	6003      	str	r3, [r0, #0]
 8008988:	2301      	movs	r3, #1
 800898a:	421d      	tst	r5, r3
 800898c:	d00a      	beq.n	80089a4 <__pow5mult+0x84>
 800898e:	0031      	movs	r1, r6
 8008990:	0022      	movs	r2, r4
 8008992:	0038      	movs	r0, r7
 8008994:	f7ff ff14 	bl	80087c0 <__multiply>
 8008998:	0031      	movs	r1, r6
 800899a:	9001      	str	r0, [sp, #4]
 800899c:	0038      	movs	r0, r7
 800899e:	f7ff fdfd 	bl	800859c <_Bfree>
 80089a2:	9e01      	ldr	r6, [sp, #4]
 80089a4:	106d      	asrs	r5, r5, #1
 80089a6:	d00c      	beq.n	80089c2 <__pow5mult+0xa2>
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d107      	bne.n	80089be <__pow5mult+0x9e>
 80089ae:	0022      	movs	r2, r4
 80089b0:	0021      	movs	r1, r4
 80089b2:	0038      	movs	r0, r7
 80089b4:	f7ff ff04 	bl	80087c0 <__multiply>
 80089b8:	2300      	movs	r3, #0
 80089ba:	6020      	str	r0, [r4, #0]
 80089bc:	6003      	str	r3, [r0, #0]
 80089be:	0004      	movs	r4, r0
 80089c0:	e7e2      	b.n	8008988 <__pow5mult+0x68>
 80089c2:	0030      	movs	r0, r6
 80089c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	0800a548 	.word	0x0800a548
 80089cc:	0800a2fe 	.word	0x0800a2fe
 80089d0:	0800a3fc 	.word	0x0800a3fc
 80089d4:	00000271 	.word	0x00000271

080089d8 <__lshift>:
 80089d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089da:	000c      	movs	r4, r1
 80089dc:	0017      	movs	r7, r2
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	1155      	asrs	r5, r2, #5
 80089e2:	b087      	sub	sp, #28
 80089e4:	18eb      	adds	r3, r5, r3
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	3301      	adds	r3, #1
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	6849      	ldr	r1, [r1, #4]
 80089ee:	68a3      	ldr	r3, [r4, #8]
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	9a01      	ldr	r2, [sp, #4]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	db10      	blt.n	8008a1a <__lshift+0x42>
 80089f8:	9804      	ldr	r0, [sp, #16]
 80089fa:	f7ff fd8b 	bl	8008514 <_Balloc>
 80089fe:	2300      	movs	r3, #0
 8008a00:	0002      	movs	r2, r0
 8008a02:	0006      	movs	r6, r0
 8008a04:	0019      	movs	r1, r3
 8008a06:	3214      	adds	r2, #20
 8008a08:	4298      	cmp	r0, r3
 8008a0a:	d10c      	bne.n	8008a26 <__lshift+0x4e>
 8008a0c:	21da      	movs	r1, #218	; 0xda
 8008a0e:	0002      	movs	r2, r0
 8008a10:	4b26      	ldr	r3, [pc, #152]	; (8008aac <__lshift+0xd4>)
 8008a12:	4827      	ldr	r0, [pc, #156]	; (8008ab0 <__lshift+0xd8>)
 8008a14:	31ff      	adds	r1, #255	; 0xff
 8008a16:	f000 fcef 	bl	80093f8 <__assert_func>
 8008a1a:	3101      	adds	r1, #1
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	e7e8      	b.n	80089f2 <__lshift+0x1a>
 8008a20:	0098      	lsls	r0, r3, #2
 8008a22:	5011      	str	r1, [r2, r0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	42ab      	cmp	r3, r5
 8008a28:	dbfa      	blt.n	8008a20 <__lshift+0x48>
 8008a2a:	43eb      	mvns	r3, r5
 8008a2c:	17db      	asrs	r3, r3, #31
 8008a2e:	401d      	ands	r5, r3
 8008a30:	211f      	movs	r1, #31
 8008a32:	0023      	movs	r3, r4
 8008a34:	0038      	movs	r0, r7
 8008a36:	00ad      	lsls	r5, r5, #2
 8008a38:	1955      	adds	r5, r2, r5
 8008a3a:	6922      	ldr	r2, [r4, #16]
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	0092      	lsls	r2, r2, #2
 8008a40:	4008      	ands	r0, r1
 8008a42:	4684      	mov	ip, r0
 8008a44:	189a      	adds	r2, r3, r2
 8008a46:	420f      	tst	r7, r1
 8008a48:	d02a      	beq.n	8008aa0 <__lshift+0xc8>
 8008a4a:	3101      	adds	r1, #1
 8008a4c:	1a09      	subs	r1, r1, r0
 8008a4e:	9105      	str	r1, [sp, #20]
 8008a50:	2100      	movs	r1, #0
 8008a52:	9503      	str	r5, [sp, #12]
 8008a54:	4667      	mov	r7, ip
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	40b8      	lsls	r0, r7
 8008a5a:	4301      	orrs	r1, r0
 8008a5c:	9803      	ldr	r0, [sp, #12]
 8008a5e:	c002      	stmia	r0!, {r1}
 8008a60:	cb02      	ldmia	r3!, {r1}
 8008a62:	9003      	str	r0, [sp, #12]
 8008a64:	9805      	ldr	r0, [sp, #20]
 8008a66:	40c1      	lsrs	r1, r0
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d8f3      	bhi.n	8008a54 <__lshift+0x7c>
 8008a6c:	0020      	movs	r0, r4
 8008a6e:	3015      	adds	r0, #21
 8008a70:	2304      	movs	r3, #4
 8008a72:	4282      	cmp	r2, r0
 8008a74:	d304      	bcc.n	8008a80 <__lshift+0xa8>
 8008a76:	1b13      	subs	r3, r2, r4
 8008a78:	3b15      	subs	r3, #21
 8008a7a:	089b      	lsrs	r3, r3, #2
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	50e9      	str	r1, [r5, r3]
 8008a82:	2900      	cmp	r1, #0
 8008a84:	d002      	beq.n	8008a8c <__lshift+0xb4>
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	3302      	adds	r3, #2
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	9804      	ldr	r0, [sp, #16]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	0021      	movs	r1, r4
 8008a94:	6133      	str	r3, [r6, #16]
 8008a96:	f7ff fd81 	bl	800859c <_Bfree>
 8008a9a:	0030      	movs	r0, r6
 8008a9c:	b007      	add	sp, #28
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	cb02      	ldmia	r3!, {r1}
 8008aa2:	c502      	stmia	r5!, {r1}
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d8fb      	bhi.n	8008aa0 <__lshift+0xc8>
 8008aa8:	e7f0      	b.n	8008a8c <__lshift+0xb4>
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	0800a370 	.word	0x0800a370
 8008ab0:	0800a3fc 	.word	0x0800a3fc

08008ab4 <__mcmp>:
 8008ab4:	6902      	ldr	r2, [r0, #16]
 8008ab6:	690b      	ldr	r3, [r1, #16]
 8008ab8:	b530      	push	{r4, r5, lr}
 8008aba:	0004      	movs	r4, r0
 8008abc:	1ad0      	subs	r0, r2, r3
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d10d      	bne.n	8008ade <__mcmp+0x2a>
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	3414      	adds	r4, #20
 8008ac6:	3114      	adds	r1, #20
 8008ac8:	18e2      	adds	r2, r4, r3
 8008aca:	18c9      	adds	r1, r1, r3
 8008acc:	3a04      	subs	r2, #4
 8008ace:	3904      	subs	r1, #4
 8008ad0:	6815      	ldr	r5, [r2, #0]
 8008ad2:	680b      	ldr	r3, [r1, #0]
 8008ad4:	429d      	cmp	r5, r3
 8008ad6:	d003      	beq.n	8008ae0 <__mcmp+0x2c>
 8008ad8:	2001      	movs	r0, #1
 8008ada:	429d      	cmp	r5, r3
 8008adc:	d303      	bcc.n	8008ae6 <__mcmp+0x32>
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	4294      	cmp	r4, r2
 8008ae2:	d3f3      	bcc.n	8008acc <__mcmp+0x18>
 8008ae4:	e7fb      	b.n	8008ade <__mcmp+0x2a>
 8008ae6:	4240      	negs	r0, r0
 8008ae8:	e7f9      	b.n	8008ade <__mcmp+0x2a>
	...

08008aec <__mdiff>:
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	000e      	movs	r6, r1
 8008af0:	0007      	movs	r7, r0
 8008af2:	0011      	movs	r1, r2
 8008af4:	0030      	movs	r0, r6
 8008af6:	b087      	sub	sp, #28
 8008af8:	0014      	movs	r4, r2
 8008afa:	f7ff ffdb 	bl	8008ab4 <__mcmp>
 8008afe:	1e05      	subs	r5, r0, #0
 8008b00:	d110      	bne.n	8008b24 <__mdiff+0x38>
 8008b02:	0001      	movs	r1, r0
 8008b04:	0038      	movs	r0, r7
 8008b06:	f7ff fd05 	bl	8008514 <_Balloc>
 8008b0a:	1e02      	subs	r2, r0, #0
 8008b0c:	d104      	bne.n	8008b18 <__mdiff+0x2c>
 8008b0e:	4b40      	ldr	r3, [pc, #256]	; (8008c10 <__mdiff+0x124>)
 8008b10:	4940      	ldr	r1, [pc, #256]	; (8008c14 <__mdiff+0x128>)
 8008b12:	4841      	ldr	r0, [pc, #260]	; (8008c18 <__mdiff+0x12c>)
 8008b14:	f000 fc70 	bl	80093f8 <__assert_func>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	6145      	str	r5, [r0, #20]
 8008b1c:	6103      	str	r3, [r0, #16]
 8008b1e:	0010      	movs	r0, r2
 8008b20:	b007      	add	sp, #28
 8008b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b24:	2301      	movs	r3, #1
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	db04      	blt.n	8008b36 <__mdiff+0x4a>
 8008b2c:	0023      	movs	r3, r4
 8008b2e:	0034      	movs	r4, r6
 8008b30:	001e      	movs	r6, r3
 8008b32:	2300      	movs	r3, #0
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	0038      	movs	r0, r7
 8008b38:	6861      	ldr	r1, [r4, #4]
 8008b3a:	f7ff fceb 	bl	8008514 <_Balloc>
 8008b3e:	1e02      	subs	r2, r0, #0
 8008b40:	d103      	bne.n	8008b4a <__mdiff+0x5e>
 8008b42:	2190      	movs	r1, #144	; 0x90
 8008b44:	4b32      	ldr	r3, [pc, #200]	; (8008c10 <__mdiff+0x124>)
 8008b46:	0089      	lsls	r1, r1, #2
 8008b48:	e7e3      	b.n	8008b12 <__mdiff+0x26>
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	2700      	movs	r7, #0
 8008b4e:	60c3      	str	r3, [r0, #12]
 8008b50:	6920      	ldr	r0, [r4, #16]
 8008b52:	3414      	adds	r4, #20
 8008b54:	9401      	str	r4, [sp, #4]
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	0084      	lsls	r4, r0, #2
 8008b5a:	191b      	adds	r3, r3, r4
 8008b5c:	0034      	movs	r4, r6
 8008b5e:	9302      	str	r3, [sp, #8]
 8008b60:	6933      	ldr	r3, [r6, #16]
 8008b62:	3414      	adds	r4, #20
 8008b64:	0099      	lsls	r1, r3, #2
 8008b66:	1863      	adds	r3, r4, r1
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	0013      	movs	r3, r2
 8008b6c:	3314      	adds	r3, #20
 8008b6e:	469c      	mov	ip, r3
 8008b70:	9305      	str	r3, [sp, #20]
 8008b72:	9b01      	ldr	r3, [sp, #4]
 8008b74:	9304      	str	r3, [sp, #16]
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	cc02      	ldmia	r4!, {r1}
 8008b7a:	cb20      	ldmia	r3!, {r5}
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	b2ab      	uxth	r3, r5
 8008b80:	19df      	adds	r7, r3, r7
 8008b82:	b28b      	uxth	r3, r1
 8008b84:	1afb      	subs	r3, r7, r3
 8008b86:	0c09      	lsrs	r1, r1, #16
 8008b88:	0c2d      	lsrs	r5, r5, #16
 8008b8a:	1a6d      	subs	r5, r5, r1
 8008b8c:	1419      	asrs	r1, r3, #16
 8008b8e:	186d      	adds	r5, r5, r1
 8008b90:	4661      	mov	r1, ip
 8008b92:	142f      	asrs	r7, r5, #16
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	042d      	lsls	r5, r5, #16
 8008b98:	432b      	orrs	r3, r5
 8008b9a:	c108      	stmia	r1!, {r3}
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	468c      	mov	ip, r1
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d8e8      	bhi.n	8008b76 <__mdiff+0x8a>
 8008ba4:	0031      	movs	r1, r6
 8008ba6:	9c03      	ldr	r4, [sp, #12]
 8008ba8:	3115      	adds	r1, #21
 8008baa:	2304      	movs	r3, #4
 8008bac:	428c      	cmp	r4, r1
 8008bae:	d304      	bcc.n	8008bba <__mdiff+0xce>
 8008bb0:	1ba3      	subs	r3, r4, r6
 8008bb2:	3b15      	subs	r3, #21
 8008bb4:	089b      	lsrs	r3, r3, #2
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	9901      	ldr	r1, [sp, #4]
 8008bbc:	18cc      	adds	r4, r1, r3
 8008bbe:	9905      	ldr	r1, [sp, #20]
 8008bc0:	0026      	movs	r6, r4
 8008bc2:	18cb      	adds	r3, r1, r3
 8008bc4:	469c      	mov	ip, r3
 8008bc6:	9902      	ldr	r1, [sp, #8]
 8008bc8:	428e      	cmp	r6, r1
 8008bca:	d310      	bcc.n	8008bee <__mdiff+0x102>
 8008bcc:	9e02      	ldr	r6, [sp, #8]
 8008bce:	1ee1      	subs	r1, r4, #3
 8008bd0:	2500      	movs	r5, #0
 8008bd2:	428e      	cmp	r6, r1
 8008bd4:	d304      	bcc.n	8008be0 <__mdiff+0xf4>
 8008bd6:	0031      	movs	r1, r6
 8008bd8:	3103      	adds	r1, #3
 8008bda:	1b0c      	subs	r4, r1, r4
 8008bdc:	08a4      	lsrs	r4, r4, #2
 8008bde:	00a5      	lsls	r5, r4, #2
 8008be0:	195b      	adds	r3, r3, r5
 8008be2:	3b04      	subs	r3, #4
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	2900      	cmp	r1, #0
 8008be8:	d00f      	beq.n	8008c0a <__mdiff+0x11e>
 8008bea:	6110      	str	r0, [r2, #16]
 8008bec:	e797      	b.n	8008b1e <__mdiff+0x32>
 8008bee:	ce02      	ldmia	r6!, {r1}
 8008bf0:	b28d      	uxth	r5, r1
 8008bf2:	19ed      	adds	r5, r5, r7
 8008bf4:	0c0f      	lsrs	r7, r1, #16
 8008bf6:	1429      	asrs	r1, r5, #16
 8008bf8:	1879      	adds	r1, r7, r1
 8008bfa:	140f      	asrs	r7, r1, #16
 8008bfc:	b2ad      	uxth	r5, r5
 8008bfe:	0409      	lsls	r1, r1, #16
 8008c00:	430d      	orrs	r5, r1
 8008c02:	4661      	mov	r1, ip
 8008c04:	c120      	stmia	r1!, {r5}
 8008c06:	468c      	mov	ip, r1
 8008c08:	e7dd      	b.n	8008bc6 <__mdiff+0xda>
 8008c0a:	3801      	subs	r0, #1
 8008c0c:	e7e9      	b.n	8008be2 <__mdiff+0xf6>
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	0800a370 	.word	0x0800a370
 8008c14:	00000232 	.word	0x00000232
 8008c18:	0800a3fc 	.word	0x0800a3fc

08008c1c <__ulp>:
 8008c1c:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <__ulp+0x40>)
 8008c1e:	4019      	ands	r1, r3
 8008c20:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <__ulp+0x44>)
 8008c22:	18c9      	adds	r1, r1, r3
 8008c24:	2900      	cmp	r1, #0
 8008c26:	dd04      	ble.n	8008c32 <__ulp+0x16>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	000b      	movs	r3, r1
 8008c2c:	0010      	movs	r0, r2
 8008c2e:	0019      	movs	r1, r3
 8008c30:	4770      	bx	lr
 8008c32:	4249      	negs	r1, r1
 8008c34:	2200      	movs	r2, #0
 8008c36:	2300      	movs	r3, #0
 8008c38:	1509      	asrs	r1, r1, #20
 8008c3a:	2913      	cmp	r1, #19
 8008c3c:	dc04      	bgt.n	8008c48 <__ulp+0x2c>
 8008c3e:	2080      	movs	r0, #128	; 0x80
 8008c40:	0300      	lsls	r0, r0, #12
 8008c42:	4108      	asrs	r0, r1
 8008c44:	0003      	movs	r3, r0
 8008c46:	e7f1      	b.n	8008c2c <__ulp+0x10>
 8008c48:	3914      	subs	r1, #20
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	291e      	cmp	r1, #30
 8008c4e:	dc02      	bgt.n	8008c56 <__ulp+0x3a>
 8008c50:	2080      	movs	r0, #128	; 0x80
 8008c52:	0600      	lsls	r0, r0, #24
 8008c54:	40c8      	lsrs	r0, r1
 8008c56:	0002      	movs	r2, r0
 8008c58:	e7e8      	b.n	8008c2c <__ulp+0x10>
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	7ff00000 	.word	0x7ff00000
 8008c60:	fcc00000 	.word	0xfcc00000

08008c64 <__b2d>:
 8008c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c66:	0006      	movs	r6, r0
 8008c68:	6903      	ldr	r3, [r0, #16]
 8008c6a:	3614      	adds	r6, #20
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	18f3      	adds	r3, r6, r3
 8008c70:	1f1d      	subs	r5, r3, #4
 8008c72:	682c      	ldr	r4, [r5, #0]
 8008c74:	000f      	movs	r7, r1
 8008c76:	0020      	movs	r0, r4
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f7ff fd43 	bl	8008704 <__hi0bits>
 8008c7e:	2320      	movs	r3, #32
 8008c80:	1a1b      	subs	r3, r3, r0
 8008c82:	491f      	ldr	r1, [pc, #124]	; (8008d00 <__b2d+0x9c>)
 8008c84:	603b      	str	r3, [r7, #0]
 8008c86:	280a      	cmp	r0, #10
 8008c88:	dc16      	bgt.n	8008cb8 <__b2d+0x54>
 8008c8a:	230b      	movs	r3, #11
 8008c8c:	0027      	movs	r7, r4
 8008c8e:	1a1b      	subs	r3, r3, r0
 8008c90:	40df      	lsrs	r7, r3
 8008c92:	4339      	orrs	r1, r7
 8008c94:	469c      	mov	ip, r3
 8008c96:	000b      	movs	r3, r1
 8008c98:	2100      	movs	r1, #0
 8008c9a:	42ae      	cmp	r6, r5
 8008c9c:	d202      	bcs.n	8008ca4 <__b2d+0x40>
 8008c9e:	9901      	ldr	r1, [sp, #4]
 8008ca0:	3908      	subs	r1, #8
 8008ca2:	6809      	ldr	r1, [r1, #0]
 8008ca4:	3015      	adds	r0, #21
 8008ca6:	4084      	lsls	r4, r0
 8008ca8:	4660      	mov	r0, ip
 8008caa:	40c1      	lsrs	r1, r0
 8008cac:	430c      	orrs	r4, r1
 8008cae:	0022      	movs	r2, r4
 8008cb0:	0010      	movs	r0, r2
 8008cb2:	0019      	movs	r1, r3
 8008cb4:	b003      	add	sp, #12
 8008cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb8:	2700      	movs	r7, #0
 8008cba:	42ae      	cmp	r6, r5
 8008cbc:	d202      	bcs.n	8008cc4 <__b2d+0x60>
 8008cbe:	9d01      	ldr	r5, [sp, #4]
 8008cc0:	3d08      	subs	r5, #8
 8008cc2:	682f      	ldr	r7, [r5, #0]
 8008cc4:	230b      	movs	r3, #11
 8008cc6:	425b      	negs	r3, r3
 8008cc8:	469c      	mov	ip, r3
 8008cca:	4484      	add	ip, r0
 8008ccc:	280b      	cmp	r0, #11
 8008cce:	d013      	beq.n	8008cf8 <__b2d+0x94>
 8008cd0:	4663      	mov	r3, ip
 8008cd2:	2020      	movs	r0, #32
 8008cd4:	409c      	lsls	r4, r3
 8008cd6:	1ac0      	subs	r0, r0, r3
 8008cd8:	003b      	movs	r3, r7
 8008cda:	40c3      	lsrs	r3, r0
 8008cdc:	431c      	orrs	r4, r3
 8008cde:	4321      	orrs	r1, r4
 8008ce0:	000b      	movs	r3, r1
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	42b5      	cmp	r5, r6
 8008ce6:	d901      	bls.n	8008cec <__b2d+0x88>
 8008ce8:	3d04      	subs	r5, #4
 8008cea:	6829      	ldr	r1, [r5, #0]
 8008cec:	4664      	mov	r4, ip
 8008cee:	40c1      	lsrs	r1, r0
 8008cf0:	40a7      	lsls	r7, r4
 8008cf2:	430f      	orrs	r7, r1
 8008cf4:	003a      	movs	r2, r7
 8008cf6:	e7db      	b.n	8008cb0 <__b2d+0x4c>
 8008cf8:	4321      	orrs	r1, r4
 8008cfa:	000b      	movs	r3, r1
 8008cfc:	e7fa      	b.n	8008cf4 <__b2d+0x90>
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	3ff00000 	.word	0x3ff00000

08008d04 <__d2b>:
 8008d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d06:	2101      	movs	r1, #1
 8008d08:	0014      	movs	r4, r2
 8008d0a:	001e      	movs	r6, r3
 8008d0c:	9f08      	ldr	r7, [sp, #32]
 8008d0e:	f7ff fc01 	bl	8008514 <_Balloc>
 8008d12:	1e05      	subs	r5, r0, #0
 8008d14:	d105      	bne.n	8008d22 <__d2b+0x1e>
 8008d16:	0002      	movs	r2, r0
 8008d18:	4b26      	ldr	r3, [pc, #152]	; (8008db4 <__d2b+0xb0>)
 8008d1a:	4927      	ldr	r1, [pc, #156]	; (8008db8 <__d2b+0xb4>)
 8008d1c:	4827      	ldr	r0, [pc, #156]	; (8008dbc <__d2b+0xb8>)
 8008d1e:	f000 fb6b 	bl	80093f8 <__assert_func>
 8008d22:	0333      	lsls	r3, r6, #12
 8008d24:	0076      	lsls	r6, r6, #1
 8008d26:	0b1b      	lsrs	r3, r3, #12
 8008d28:	0d76      	lsrs	r6, r6, #21
 8008d2a:	d124      	bne.n	8008d76 <__d2b+0x72>
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d027      	beq.n	8008d82 <__d2b+0x7e>
 8008d32:	4668      	mov	r0, sp
 8008d34:	9400      	str	r4, [sp, #0]
 8008d36:	f7ff fcff 	bl	8008738 <__lo0bits>
 8008d3a:	9c00      	ldr	r4, [sp, #0]
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d01e      	beq.n	8008d7e <__d2b+0x7a>
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	2120      	movs	r1, #32
 8008d44:	001a      	movs	r2, r3
 8008d46:	1a09      	subs	r1, r1, r0
 8008d48:	408a      	lsls	r2, r1
 8008d4a:	40c3      	lsrs	r3, r0
 8008d4c:	4322      	orrs	r2, r4
 8008d4e:	616a      	str	r2, [r5, #20]
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	9c01      	ldr	r4, [sp, #4]
 8008d54:	61ac      	str	r4, [r5, #24]
 8008d56:	1e63      	subs	r3, r4, #1
 8008d58:	419c      	sbcs	r4, r3
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	612c      	str	r4, [r5, #16]
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d018      	beq.n	8008d94 <__d2b+0x90>
 8008d62:	4b17      	ldr	r3, [pc, #92]	; (8008dc0 <__d2b+0xbc>)
 8008d64:	18f6      	adds	r6, r6, r3
 8008d66:	2335      	movs	r3, #53	; 0x35
 8008d68:	1836      	adds	r6, r6, r0
 8008d6a:	1a18      	subs	r0, r3, r0
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	603e      	str	r6, [r7, #0]
 8008d70:	6018      	str	r0, [r3, #0]
 8008d72:	0028      	movs	r0, r5
 8008d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d76:	2280      	movs	r2, #128	; 0x80
 8008d78:	0352      	lsls	r2, r2, #13
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	e7d6      	b.n	8008d2c <__d2b+0x28>
 8008d7e:	616c      	str	r4, [r5, #20]
 8008d80:	e7e7      	b.n	8008d52 <__d2b+0x4e>
 8008d82:	a801      	add	r0, sp, #4
 8008d84:	f7ff fcd8 	bl	8008738 <__lo0bits>
 8008d88:	2401      	movs	r4, #1
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	612c      	str	r4, [r5, #16]
 8008d8e:	616b      	str	r3, [r5, #20]
 8008d90:	3020      	adds	r0, #32
 8008d92:	e7e4      	b.n	8008d5e <__d2b+0x5a>
 8008d94:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <__d2b+0xc0>)
 8008d96:	18c0      	adds	r0, r0, r3
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <__d2b+0xc4>)
 8008d9a:	6038      	str	r0, [r7, #0]
 8008d9c:	18e3      	adds	r3, r4, r3
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	18eb      	adds	r3, r5, r3
 8008da2:	6958      	ldr	r0, [r3, #20]
 8008da4:	f7ff fcae 	bl	8008704 <__hi0bits>
 8008da8:	0164      	lsls	r4, r4, #5
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	1a24      	subs	r4, r4, r0
 8008dae:	601c      	str	r4, [r3, #0]
 8008db0:	e7df      	b.n	8008d72 <__d2b+0x6e>
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	0800a370 	.word	0x0800a370
 8008db8:	0000030a 	.word	0x0000030a
 8008dbc:	0800a3fc 	.word	0x0800a3fc
 8008dc0:	fffffbcd 	.word	0xfffffbcd
 8008dc4:	fffffbce 	.word	0xfffffbce
 8008dc8:	3fffffff 	.word	0x3fffffff

08008dcc <__ratio>:
 8008dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	000f      	movs	r7, r1
 8008dd2:	a904      	add	r1, sp, #16
 8008dd4:	0006      	movs	r6, r0
 8008dd6:	f7ff ff45 	bl	8008c64 <__b2d>
 8008dda:	9000      	str	r0, [sp, #0]
 8008ddc:	9101      	str	r1, [sp, #4]
 8008dde:	9c00      	ldr	r4, [sp, #0]
 8008de0:	9d01      	ldr	r5, [sp, #4]
 8008de2:	0038      	movs	r0, r7
 8008de4:	a905      	add	r1, sp, #20
 8008de6:	f7ff ff3d 	bl	8008c64 <__b2d>
 8008dea:	9002      	str	r0, [sp, #8]
 8008dec:	9103      	str	r1, [sp, #12]
 8008dee:	9a02      	ldr	r2, [sp, #8]
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	6931      	ldr	r1, [r6, #16]
 8008df4:	6938      	ldr	r0, [r7, #16]
 8008df6:	9e05      	ldr	r6, [sp, #20]
 8008df8:	1a08      	subs	r0, r1, r0
 8008dfa:	9904      	ldr	r1, [sp, #16]
 8008dfc:	0140      	lsls	r0, r0, #5
 8008dfe:	1b89      	subs	r1, r1, r6
 8008e00:	1841      	adds	r1, r0, r1
 8008e02:	0508      	lsls	r0, r1, #20
 8008e04:	2900      	cmp	r1, #0
 8008e06:	dd07      	ble.n	8008e18 <__ratio+0x4c>
 8008e08:	9901      	ldr	r1, [sp, #4]
 8008e0a:	1845      	adds	r5, r0, r1
 8008e0c:	0020      	movs	r0, r4
 8008e0e:	0029      	movs	r1, r5
 8008e10:	f7f7 ffe0 	bl	8000dd4 <__aeabi_ddiv>
 8008e14:	b007      	add	sp, #28
 8008e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e18:	9903      	ldr	r1, [sp, #12]
 8008e1a:	1a0b      	subs	r3, r1, r0
 8008e1c:	e7f6      	b.n	8008e0c <__ratio+0x40>

08008e1e <__copybits>:
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	0014      	movs	r4, r2
 8008e22:	0005      	movs	r5, r0
 8008e24:	3901      	subs	r1, #1
 8008e26:	6913      	ldr	r3, [r2, #16]
 8008e28:	1149      	asrs	r1, r1, #5
 8008e2a:	3101      	adds	r1, #1
 8008e2c:	0089      	lsls	r1, r1, #2
 8008e2e:	3414      	adds	r4, #20
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	1841      	adds	r1, r0, r1
 8008e34:	18e3      	adds	r3, r4, r3
 8008e36:	42a3      	cmp	r3, r4
 8008e38:	d80d      	bhi.n	8008e56 <__copybits+0x38>
 8008e3a:	0014      	movs	r4, r2
 8008e3c:	3411      	adds	r4, #17
 8008e3e:	2500      	movs	r5, #0
 8008e40:	429c      	cmp	r4, r3
 8008e42:	d803      	bhi.n	8008e4c <__copybits+0x2e>
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	3b11      	subs	r3, #17
 8008e48:	089b      	lsrs	r3, r3, #2
 8008e4a:	009d      	lsls	r5, r3, #2
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	1940      	adds	r0, r0, r5
 8008e50:	4281      	cmp	r1, r0
 8008e52:	d803      	bhi.n	8008e5c <__copybits+0x3e>
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
 8008e56:	cc40      	ldmia	r4!, {r6}
 8008e58:	c540      	stmia	r5!, {r6}
 8008e5a:	e7ec      	b.n	8008e36 <__copybits+0x18>
 8008e5c:	c008      	stmia	r0!, {r3}
 8008e5e:	e7f7      	b.n	8008e50 <__copybits+0x32>

08008e60 <__any_on>:
 8008e60:	0002      	movs	r2, r0
 8008e62:	6900      	ldr	r0, [r0, #16]
 8008e64:	b510      	push	{r4, lr}
 8008e66:	3214      	adds	r2, #20
 8008e68:	114b      	asrs	r3, r1, #5
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	db13      	blt.n	8008e96 <__any_on+0x36>
 8008e6e:	dd0c      	ble.n	8008e8a <__any_on+0x2a>
 8008e70:	241f      	movs	r4, #31
 8008e72:	0008      	movs	r0, r1
 8008e74:	4020      	ands	r0, r4
 8008e76:	4221      	tst	r1, r4
 8008e78:	d007      	beq.n	8008e8a <__any_on+0x2a>
 8008e7a:	0099      	lsls	r1, r3, #2
 8008e7c:	588c      	ldr	r4, [r1, r2]
 8008e7e:	0021      	movs	r1, r4
 8008e80:	40c1      	lsrs	r1, r0
 8008e82:	4081      	lsls	r1, r0
 8008e84:	2001      	movs	r0, #1
 8008e86:	428c      	cmp	r4, r1
 8008e88:	d104      	bne.n	8008e94 <__any_on+0x34>
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	18d3      	adds	r3, r2, r3
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d803      	bhi.n	8008e9a <__any_on+0x3a>
 8008e92:	2000      	movs	r0, #0
 8008e94:	bd10      	pop	{r4, pc}
 8008e96:	0003      	movs	r3, r0
 8008e98:	e7f7      	b.n	8008e8a <__any_on+0x2a>
 8008e9a:	3b04      	subs	r3, #4
 8008e9c:	6819      	ldr	r1, [r3, #0]
 8008e9e:	2900      	cmp	r1, #0
 8008ea0:	d0f5      	beq.n	8008e8e <__any_on+0x2e>
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	e7f6      	b.n	8008e94 <__any_on+0x34>

08008ea6 <_calloc_r>:
 8008ea6:	b570      	push	{r4, r5, r6, lr}
 8008ea8:	0c13      	lsrs	r3, r2, #16
 8008eaa:	0c0d      	lsrs	r5, r1, #16
 8008eac:	d11e      	bne.n	8008eec <_calloc_r+0x46>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10c      	bne.n	8008ecc <_calloc_r+0x26>
 8008eb2:	b289      	uxth	r1, r1
 8008eb4:	b294      	uxth	r4, r2
 8008eb6:	434c      	muls	r4, r1
 8008eb8:	0021      	movs	r1, r4
 8008eba:	f000 f88d 	bl	8008fd8 <_malloc_r>
 8008ebe:	1e05      	subs	r5, r0, #0
 8008ec0:	d01b      	beq.n	8008efa <_calloc_r+0x54>
 8008ec2:	0022      	movs	r2, r4
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	f7fc fb6f 	bl	80055a8 <memset>
 8008eca:	e016      	b.n	8008efa <_calloc_r+0x54>
 8008ecc:	1c1d      	adds	r5, r3, #0
 8008ece:	1c0b      	adds	r3, r1, #0
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	b289      	uxth	r1, r1
 8008ed4:	b29c      	uxth	r4, r3
 8008ed6:	4351      	muls	r1, r2
 8008ed8:	b2ab      	uxth	r3, r5
 8008eda:	4363      	muls	r3, r4
 8008edc:	0c0c      	lsrs	r4, r1, #16
 8008ede:	191c      	adds	r4, r3, r4
 8008ee0:	0c22      	lsrs	r2, r4, #16
 8008ee2:	d107      	bne.n	8008ef4 <_calloc_r+0x4e>
 8008ee4:	0424      	lsls	r4, r4, #16
 8008ee6:	b289      	uxth	r1, r1
 8008ee8:	430c      	orrs	r4, r1
 8008eea:	e7e5      	b.n	8008eb8 <_calloc_r+0x12>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <_calloc_r+0x4e>
 8008ef0:	1c13      	adds	r3, r2, #0
 8008ef2:	e7ed      	b.n	8008ed0 <_calloc_r+0x2a>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	6003      	str	r3, [r0, #0]
 8008efa:	0028      	movs	r0, r5
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f00 <_free_r>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	0005      	movs	r5, r0
 8008f04:	2900      	cmp	r1, #0
 8008f06:	d010      	beq.n	8008f2a <_free_r+0x2a>
 8008f08:	1f0c      	subs	r4, r1, #4
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	da00      	bge.n	8008f12 <_free_r+0x12>
 8008f10:	18e4      	adds	r4, r4, r3
 8008f12:	0028      	movs	r0, r5
 8008f14:	f000 fab2 	bl	800947c <__malloc_lock>
 8008f18:	4a1d      	ldr	r2, [pc, #116]	; (8008f90 <_free_r+0x90>)
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d105      	bne.n	8008f2c <_free_r+0x2c>
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	6014      	str	r4, [r2, #0]
 8008f24:	0028      	movs	r0, r5
 8008f26:	f000 fab1 	bl	800948c <__malloc_unlock>
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d908      	bls.n	8008f42 <_free_r+0x42>
 8008f30:	6821      	ldr	r1, [r4, #0]
 8008f32:	1860      	adds	r0, r4, r1
 8008f34:	4283      	cmp	r3, r0
 8008f36:	d1f3      	bne.n	8008f20 <_free_r+0x20>
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	1841      	adds	r1, r0, r1
 8008f3e:	6021      	str	r1, [r4, #0]
 8008f40:	e7ee      	b.n	8008f20 <_free_r+0x20>
 8008f42:	001a      	movs	r2, r3
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <_free_r+0x4e>
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	d9f9      	bls.n	8008f42 <_free_r+0x42>
 8008f4e:	6811      	ldr	r1, [r2, #0]
 8008f50:	1850      	adds	r0, r2, r1
 8008f52:	42a0      	cmp	r0, r4
 8008f54:	d10b      	bne.n	8008f6e <_free_r+0x6e>
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	1809      	adds	r1, r1, r0
 8008f5a:	1850      	adds	r0, r2, r1
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	4283      	cmp	r3, r0
 8008f60:	d1e0      	bne.n	8008f24 <_free_r+0x24>
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	1841      	adds	r1, r0, r1
 8008f68:	6011      	str	r1, [r2, #0]
 8008f6a:	6053      	str	r3, [r2, #4]
 8008f6c:	e7da      	b.n	8008f24 <_free_r+0x24>
 8008f6e:	42a0      	cmp	r0, r4
 8008f70:	d902      	bls.n	8008f78 <_free_r+0x78>
 8008f72:	230c      	movs	r3, #12
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	e7d5      	b.n	8008f24 <_free_r+0x24>
 8008f78:	6821      	ldr	r1, [r4, #0]
 8008f7a:	1860      	adds	r0, r4, r1
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	d103      	bne.n	8008f88 <_free_r+0x88>
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	1841      	adds	r1, r0, r1
 8008f86:	6021      	str	r1, [r4, #0]
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	6054      	str	r4, [r2, #4]
 8008f8c:	e7ca      	b.n	8008f24 <_free_r+0x24>
 8008f8e:	46c0      	nop			; (mov r8, r8)
 8008f90:	200002ec 	.word	0x200002ec

08008f94 <sbrk_aligned>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4e0f      	ldr	r6, [pc, #60]	; (8008fd4 <sbrk_aligned+0x40>)
 8008f98:	000d      	movs	r5, r1
 8008f9a:	6831      	ldr	r1, [r6, #0]
 8008f9c:	0004      	movs	r4, r0
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	d102      	bne.n	8008fa8 <sbrk_aligned+0x14>
 8008fa2:	f000 f9f7 	bl	8009394 <_sbrk_r>
 8008fa6:	6030      	str	r0, [r6, #0]
 8008fa8:	0029      	movs	r1, r5
 8008faa:	0020      	movs	r0, r4
 8008fac:	f000 f9f2 	bl	8009394 <_sbrk_r>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d00a      	beq.n	8008fca <sbrk_aligned+0x36>
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	1cc5      	adds	r5, r0, #3
 8008fb8:	439d      	bics	r5, r3
 8008fba:	42a8      	cmp	r0, r5
 8008fbc:	d007      	beq.n	8008fce <sbrk_aligned+0x3a>
 8008fbe:	1a29      	subs	r1, r5, r0
 8008fc0:	0020      	movs	r0, r4
 8008fc2:	f000 f9e7 	bl	8009394 <_sbrk_r>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d101      	bne.n	8008fce <sbrk_aligned+0x3a>
 8008fca:	2501      	movs	r5, #1
 8008fcc:	426d      	negs	r5, r5
 8008fce:	0028      	movs	r0, r5
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	200002f0 	.word	0x200002f0

08008fd8 <_malloc_r>:
 8008fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fda:	2203      	movs	r2, #3
 8008fdc:	1ccb      	adds	r3, r1, #3
 8008fde:	4393      	bics	r3, r2
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	0006      	movs	r6, r0
 8008fe4:	001f      	movs	r7, r3
 8008fe6:	2b0c      	cmp	r3, #12
 8008fe8:	d232      	bcs.n	8009050 <_malloc_r+0x78>
 8008fea:	270c      	movs	r7, #12
 8008fec:	42b9      	cmp	r1, r7
 8008fee:	d831      	bhi.n	8009054 <_malloc_r+0x7c>
 8008ff0:	0030      	movs	r0, r6
 8008ff2:	f000 fa43 	bl	800947c <__malloc_lock>
 8008ff6:	4d32      	ldr	r5, [pc, #200]	; (80090c0 <_malloc_r+0xe8>)
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	001c      	movs	r4, r3
 8008ffc:	2c00      	cmp	r4, #0
 8008ffe:	d12e      	bne.n	800905e <_malloc_r+0x86>
 8009000:	0039      	movs	r1, r7
 8009002:	0030      	movs	r0, r6
 8009004:	f7ff ffc6 	bl	8008f94 <sbrk_aligned>
 8009008:	0004      	movs	r4, r0
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d11e      	bne.n	800904c <_malloc_r+0x74>
 800900e:	682c      	ldr	r4, [r5, #0]
 8009010:	0025      	movs	r5, r4
 8009012:	2d00      	cmp	r5, #0
 8009014:	d14a      	bne.n	80090ac <_malloc_r+0xd4>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	0029      	movs	r1, r5
 800901a:	18e3      	adds	r3, r4, r3
 800901c:	0030      	movs	r0, r6
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	f000 f9b8 	bl	8009394 <_sbrk_r>
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	4283      	cmp	r3, r0
 8009028:	d143      	bne.n	80090b2 <_malloc_r+0xda>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	3703      	adds	r7, #3
 800902e:	1aff      	subs	r7, r7, r3
 8009030:	2303      	movs	r3, #3
 8009032:	439f      	bics	r7, r3
 8009034:	3708      	adds	r7, #8
 8009036:	2f0c      	cmp	r7, #12
 8009038:	d200      	bcs.n	800903c <_malloc_r+0x64>
 800903a:	270c      	movs	r7, #12
 800903c:	0039      	movs	r1, r7
 800903e:	0030      	movs	r0, r6
 8009040:	f7ff ffa8 	bl	8008f94 <sbrk_aligned>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d034      	beq.n	80090b2 <_malloc_r+0xda>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	19df      	adds	r7, r3, r7
 800904c:	6027      	str	r7, [r4, #0]
 800904e:	e013      	b.n	8009078 <_malloc_r+0xa0>
 8009050:	2b00      	cmp	r3, #0
 8009052:	dacb      	bge.n	8008fec <_malloc_r+0x14>
 8009054:	230c      	movs	r3, #12
 8009056:	2500      	movs	r5, #0
 8009058:	6033      	str	r3, [r6, #0]
 800905a:	0028      	movs	r0, r5
 800905c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	1bd1      	subs	r1, r2, r7
 8009062:	d420      	bmi.n	80090a6 <_malloc_r+0xce>
 8009064:	290b      	cmp	r1, #11
 8009066:	d917      	bls.n	8009098 <_malloc_r+0xc0>
 8009068:	19e2      	adds	r2, r4, r7
 800906a:	6027      	str	r7, [r4, #0]
 800906c:	42a3      	cmp	r3, r4
 800906e:	d111      	bne.n	8009094 <_malloc_r+0xbc>
 8009070:	602a      	str	r2, [r5, #0]
 8009072:	6863      	ldr	r3, [r4, #4]
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	6053      	str	r3, [r2, #4]
 8009078:	0030      	movs	r0, r6
 800907a:	0025      	movs	r5, r4
 800907c:	f000 fa06 	bl	800948c <__malloc_unlock>
 8009080:	2207      	movs	r2, #7
 8009082:	350b      	adds	r5, #11
 8009084:	1d23      	adds	r3, r4, #4
 8009086:	4395      	bics	r5, r2
 8009088:	1aea      	subs	r2, r5, r3
 800908a:	429d      	cmp	r5, r3
 800908c:	d0e5      	beq.n	800905a <_malloc_r+0x82>
 800908e:	1b5b      	subs	r3, r3, r5
 8009090:	50a3      	str	r3, [r4, r2]
 8009092:	e7e2      	b.n	800905a <_malloc_r+0x82>
 8009094:	605a      	str	r2, [r3, #4]
 8009096:	e7ec      	b.n	8009072 <_malloc_r+0x9a>
 8009098:	6862      	ldr	r2, [r4, #4]
 800909a:	42a3      	cmp	r3, r4
 800909c:	d101      	bne.n	80090a2 <_malloc_r+0xca>
 800909e:	602a      	str	r2, [r5, #0]
 80090a0:	e7ea      	b.n	8009078 <_malloc_r+0xa0>
 80090a2:	605a      	str	r2, [r3, #4]
 80090a4:	e7e8      	b.n	8009078 <_malloc_r+0xa0>
 80090a6:	0023      	movs	r3, r4
 80090a8:	6864      	ldr	r4, [r4, #4]
 80090aa:	e7a7      	b.n	8008ffc <_malloc_r+0x24>
 80090ac:	002c      	movs	r4, r5
 80090ae:	686d      	ldr	r5, [r5, #4]
 80090b0:	e7af      	b.n	8009012 <_malloc_r+0x3a>
 80090b2:	230c      	movs	r3, #12
 80090b4:	0030      	movs	r0, r6
 80090b6:	6033      	str	r3, [r6, #0]
 80090b8:	f000 f9e8 	bl	800948c <__malloc_unlock>
 80090bc:	e7cd      	b.n	800905a <_malloc_r+0x82>
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	200002ec 	.word	0x200002ec

080090c4 <__ssputs_r>:
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	688e      	ldr	r6, [r1, #8]
 80090c8:	b085      	sub	sp, #20
 80090ca:	0007      	movs	r7, r0
 80090cc:	000c      	movs	r4, r1
 80090ce:	9203      	str	r2, [sp, #12]
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	429e      	cmp	r6, r3
 80090d4:	d83c      	bhi.n	8009150 <__ssputs_r+0x8c>
 80090d6:	2390      	movs	r3, #144	; 0x90
 80090d8:	898a      	ldrh	r2, [r1, #12]
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	421a      	tst	r2, r3
 80090de:	d034      	beq.n	800914a <__ssputs_r+0x86>
 80090e0:	6909      	ldr	r1, [r1, #16]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	6960      	ldr	r0, [r4, #20]
 80090e6:	1a5b      	subs	r3, r3, r1
 80090e8:	9302      	str	r3, [sp, #8]
 80090ea:	2303      	movs	r3, #3
 80090ec:	4343      	muls	r3, r0
 80090ee:	0fdd      	lsrs	r5, r3, #31
 80090f0:	18ed      	adds	r5, r5, r3
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	9802      	ldr	r0, [sp, #8]
 80090f6:	3301      	adds	r3, #1
 80090f8:	181b      	adds	r3, r3, r0
 80090fa:	106d      	asrs	r5, r5, #1
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	d900      	bls.n	8009102 <__ssputs_r+0x3e>
 8009100:	001d      	movs	r5, r3
 8009102:	0553      	lsls	r3, r2, #21
 8009104:	d532      	bpl.n	800916c <__ssputs_r+0xa8>
 8009106:	0029      	movs	r1, r5
 8009108:	0038      	movs	r0, r7
 800910a:	f7ff ff65 	bl	8008fd8 <_malloc_r>
 800910e:	1e06      	subs	r6, r0, #0
 8009110:	d109      	bne.n	8009126 <__ssputs_r+0x62>
 8009112:	230c      	movs	r3, #12
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	2340      	movs	r3, #64	; 0x40
 8009118:	2001      	movs	r0, #1
 800911a:	89a2      	ldrh	r2, [r4, #12]
 800911c:	4240      	negs	r0, r0
 800911e:	4313      	orrs	r3, r2
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	b005      	add	sp, #20
 8009124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	6921      	ldr	r1, [r4, #16]
 800912a:	f7ff f9ea 	bl	8008502 <memcpy>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	4a14      	ldr	r2, [pc, #80]	; (8009184 <__ssputs_r+0xc0>)
 8009132:	401a      	ands	r2, r3
 8009134:	2380      	movs	r3, #128	; 0x80
 8009136:	4313      	orrs	r3, r2
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	9b02      	ldr	r3, [sp, #8]
 800913c:	6126      	str	r6, [r4, #16]
 800913e:	18f6      	adds	r6, r6, r3
 8009140:	6026      	str	r6, [r4, #0]
 8009142:	6165      	str	r5, [r4, #20]
 8009144:	9e01      	ldr	r6, [sp, #4]
 8009146:	1aed      	subs	r5, r5, r3
 8009148:	60a5      	str	r5, [r4, #8]
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	429e      	cmp	r6, r3
 800914e:	d900      	bls.n	8009152 <__ssputs_r+0x8e>
 8009150:	9e01      	ldr	r6, [sp, #4]
 8009152:	0032      	movs	r2, r6
 8009154:	9903      	ldr	r1, [sp, #12]
 8009156:	6820      	ldr	r0, [r4, #0]
 8009158:	f000 f97c 	bl	8009454 <memmove>
 800915c:	68a3      	ldr	r3, [r4, #8]
 800915e:	2000      	movs	r0, #0
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	199e      	adds	r6, r3, r6
 8009168:	6026      	str	r6, [r4, #0]
 800916a:	e7da      	b.n	8009122 <__ssputs_r+0x5e>
 800916c:	002a      	movs	r2, r5
 800916e:	0038      	movs	r0, r7
 8009170:	f000 f994 	bl	800949c <_realloc_r>
 8009174:	1e06      	subs	r6, r0, #0
 8009176:	d1e0      	bne.n	800913a <__ssputs_r+0x76>
 8009178:	0038      	movs	r0, r7
 800917a:	6921      	ldr	r1, [r4, #16]
 800917c:	f7ff fec0 	bl	8008f00 <_free_r>
 8009180:	e7c7      	b.n	8009112 <__ssputs_r+0x4e>
 8009182:	46c0      	nop			; (mov r8, r8)
 8009184:	fffffb7f 	.word	0xfffffb7f

08009188 <_svfiprintf_r>:
 8009188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800918a:	b0a1      	sub	sp, #132	; 0x84
 800918c:	9003      	str	r0, [sp, #12]
 800918e:	001d      	movs	r5, r3
 8009190:	898b      	ldrh	r3, [r1, #12]
 8009192:	000f      	movs	r7, r1
 8009194:	0016      	movs	r6, r2
 8009196:	061b      	lsls	r3, r3, #24
 8009198:	d511      	bpl.n	80091be <_svfiprintf_r+0x36>
 800919a:	690b      	ldr	r3, [r1, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10e      	bne.n	80091be <_svfiprintf_r+0x36>
 80091a0:	2140      	movs	r1, #64	; 0x40
 80091a2:	f7ff ff19 	bl	8008fd8 <_malloc_r>
 80091a6:	6038      	str	r0, [r7, #0]
 80091a8:	6138      	str	r0, [r7, #16]
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d105      	bne.n	80091ba <_svfiprintf_r+0x32>
 80091ae:	230c      	movs	r3, #12
 80091b0:	9a03      	ldr	r2, [sp, #12]
 80091b2:	3801      	subs	r0, #1
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	b021      	add	sp, #132	; 0x84
 80091b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	2300      	movs	r3, #0
 80091c0:	ac08      	add	r4, sp, #32
 80091c2:	6163      	str	r3, [r4, #20]
 80091c4:	3320      	adds	r3, #32
 80091c6:	7663      	strb	r3, [r4, #25]
 80091c8:	3310      	adds	r3, #16
 80091ca:	76a3      	strb	r3, [r4, #26]
 80091cc:	9507      	str	r5, [sp, #28]
 80091ce:	0035      	movs	r5, r6
 80091d0:	782b      	ldrb	r3, [r5, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <_svfiprintf_r+0x52>
 80091d6:	2b25      	cmp	r3, #37	; 0x25
 80091d8:	d147      	bne.n	800926a <_svfiprintf_r+0xe2>
 80091da:	1bab      	subs	r3, r5, r6
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	42b5      	cmp	r5, r6
 80091e0:	d00c      	beq.n	80091fc <_svfiprintf_r+0x74>
 80091e2:	0032      	movs	r2, r6
 80091e4:	0039      	movs	r1, r7
 80091e6:	9803      	ldr	r0, [sp, #12]
 80091e8:	f7ff ff6c 	bl	80090c4 <__ssputs_r>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d100      	bne.n	80091f2 <_svfiprintf_r+0x6a>
 80091f0:	e0ae      	b.n	8009350 <_svfiprintf_r+0x1c8>
 80091f2:	6962      	ldr	r2, [r4, #20]
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	4694      	mov	ip, r2
 80091f8:	4463      	add	r3, ip
 80091fa:	6163      	str	r3, [r4, #20]
 80091fc:	782b      	ldrb	r3, [r5, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d100      	bne.n	8009204 <_svfiprintf_r+0x7c>
 8009202:	e0a5      	b.n	8009350 <_svfiprintf_r+0x1c8>
 8009204:	2201      	movs	r2, #1
 8009206:	2300      	movs	r3, #0
 8009208:	4252      	negs	r2, r2
 800920a:	6062      	str	r2, [r4, #4]
 800920c:	a904      	add	r1, sp, #16
 800920e:	3254      	adds	r2, #84	; 0x54
 8009210:	1852      	adds	r2, r2, r1
 8009212:	1c6e      	adds	r6, r5, #1
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	60e3      	str	r3, [r4, #12]
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	7013      	strb	r3, [r2, #0]
 800921c:	65a3      	str	r3, [r4, #88]	; 0x58
 800921e:	2205      	movs	r2, #5
 8009220:	7831      	ldrb	r1, [r6, #0]
 8009222:	4854      	ldr	r0, [pc, #336]	; (8009374 <_svfiprintf_r+0x1ec>)
 8009224:	f7ff f962 	bl	80084ec <memchr>
 8009228:	1c75      	adds	r5, r6, #1
 800922a:	2800      	cmp	r0, #0
 800922c:	d11f      	bne.n	800926e <_svfiprintf_r+0xe6>
 800922e:	6822      	ldr	r2, [r4, #0]
 8009230:	06d3      	lsls	r3, r2, #27
 8009232:	d504      	bpl.n	800923e <_svfiprintf_r+0xb6>
 8009234:	2353      	movs	r3, #83	; 0x53
 8009236:	a904      	add	r1, sp, #16
 8009238:	185b      	adds	r3, r3, r1
 800923a:	2120      	movs	r1, #32
 800923c:	7019      	strb	r1, [r3, #0]
 800923e:	0713      	lsls	r3, r2, #28
 8009240:	d504      	bpl.n	800924c <_svfiprintf_r+0xc4>
 8009242:	2353      	movs	r3, #83	; 0x53
 8009244:	a904      	add	r1, sp, #16
 8009246:	185b      	adds	r3, r3, r1
 8009248:	212b      	movs	r1, #43	; 0x2b
 800924a:	7019      	strb	r1, [r3, #0]
 800924c:	7833      	ldrb	r3, [r6, #0]
 800924e:	2b2a      	cmp	r3, #42	; 0x2a
 8009250:	d016      	beq.n	8009280 <_svfiprintf_r+0xf8>
 8009252:	0035      	movs	r5, r6
 8009254:	2100      	movs	r1, #0
 8009256:	200a      	movs	r0, #10
 8009258:	68e3      	ldr	r3, [r4, #12]
 800925a:	782a      	ldrb	r2, [r5, #0]
 800925c:	1c6e      	adds	r6, r5, #1
 800925e:	3a30      	subs	r2, #48	; 0x30
 8009260:	2a09      	cmp	r2, #9
 8009262:	d94e      	bls.n	8009302 <_svfiprintf_r+0x17a>
 8009264:	2900      	cmp	r1, #0
 8009266:	d111      	bne.n	800928c <_svfiprintf_r+0x104>
 8009268:	e017      	b.n	800929a <_svfiprintf_r+0x112>
 800926a:	3501      	adds	r5, #1
 800926c:	e7b0      	b.n	80091d0 <_svfiprintf_r+0x48>
 800926e:	4b41      	ldr	r3, [pc, #260]	; (8009374 <_svfiprintf_r+0x1ec>)
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	1ac0      	subs	r0, r0, r3
 8009274:	2301      	movs	r3, #1
 8009276:	4083      	lsls	r3, r0
 8009278:	4313      	orrs	r3, r2
 800927a:	002e      	movs	r6, r5
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	e7ce      	b.n	800921e <_svfiprintf_r+0x96>
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	1d19      	adds	r1, r3, #4
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	9107      	str	r1, [sp, #28]
 8009288:	2b00      	cmp	r3, #0
 800928a:	db01      	blt.n	8009290 <_svfiprintf_r+0x108>
 800928c:	930b      	str	r3, [sp, #44]	; 0x2c
 800928e:	e004      	b.n	800929a <_svfiprintf_r+0x112>
 8009290:	425b      	negs	r3, r3
 8009292:	60e3      	str	r3, [r4, #12]
 8009294:	2302      	movs	r3, #2
 8009296:	4313      	orrs	r3, r2
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	782b      	ldrb	r3, [r5, #0]
 800929c:	2b2e      	cmp	r3, #46	; 0x2e
 800929e:	d10a      	bne.n	80092b6 <_svfiprintf_r+0x12e>
 80092a0:	786b      	ldrb	r3, [r5, #1]
 80092a2:	2b2a      	cmp	r3, #42	; 0x2a
 80092a4:	d135      	bne.n	8009312 <_svfiprintf_r+0x18a>
 80092a6:	9b07      	ldr	r3, [sp, #28]
 80092a8:	3502      	adds	r5, #2
 80092aa:	1d1a      	adds	r2, r3, #4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	9207      	str	r2, [sp, #28]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	db2b      	blt.n	800930c <_svfiprintf_r+0x184>
 80092b4:	9309      	str	r3, [sp, #36]	; 0x24
 80092b6:	4e30      	ldr	r6, [pc, #192]	; (8009378 <_svfiprintf_r+0x1f0>)
 80092b8:	2203      	movs	r2, #3
 80092ba:	0030      	movs	r0, r6
 80092bc:	7829      	ldrb	r1, [r5, #0]
 80092be:	f7ff f915 	bl	80084ec <memchr>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d006      	beq.n	80092d4 <_svfiprintf_r+0x14c>
 80092c6:	2340      	movs	r3, #64	; 0x40
 80092c8:	1b80      	subs	r0, r0, r6
 80092ca:	4083      	lsls	r3, r0
 80092cc:	6822      	ldr	r2, [r4, #0]
 80092ce:	3501      	adds	r5, #1
 80092d0:	4313      	orrs	r3, r2
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	7829      	ldrb	r1, [r5, #0]
 80092d6:	2206      	movs	r2, #6
 80092d8:	4828      	ldr	r0, [pc, #160]	; (800937c <_svfiprintf_r+0x1f4>)
 80092da:	1c6e      	adds	r6, r5, #1
 80092dc:	7621      	strb	r1, [r4, #24]
 80092de:	f7ff f905 	bl	80084ec <memchr>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d03c      	beq.n	8009360 <_svfiprintf_r+0x1d8>
 80092e6:	4b26      	ldr	r3, [pc, #152]	; (8009380 <_svfiprintf_r+0x1f8>)
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d125      	bne.n	8009338 <_svfiprintf_r+0x1b0>
 80092ec:	2207      	movs	r2, #7
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	3307      	adds	r3, #7
 80092f2:	4393      	bics	r3, r2
 80092f4:	3308      	adds	r3, #8
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	6963      	ldr	r3, [r4, #20]
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	189b      	adds	r3, r3, r2
 80092fe:	6163      	str	r3, [r4, #20]
 8009300:	e765      	b.n	80091ce <_svfiprintf_r+0x46>
 8009302:	4343      	muls	r3, r0
 8009304:	0035      	movs	r5, r6
 8009306:	2101      	movs	r1, #1
 8009308:	189b      	adds	r3, r3, r2
 800930a:	e7a6      	b.n	800925a <_svfiprintf_r+0xd2>
 800930c:	2301      	movs	r3, #1
 800930e:	425b      	negs	r3, r3
 8009310:	e7d0      	b.n	80092b4 <_svfiprintf_r+0x12c>
 8009312:	2300      	movs	r3, #0
 8009314:	200a      	movs	r0, #10
 8009316:	001a      	movs	r2, r3
 8009318:	3501      	adds	r5, #1
 800931a:	6063      	str	r3, [r4, #4]
 800931c:	7829      	ldrb	r1, [r5, #0]
 800931e:	1c6e      	adds	r6, r5, #1
 8009320:	3930      	subs	r1, #48	; 0x30
 8009322:	2909      	cmp	r1, #9
 8009324:	d903      	bls.n	800932e <_svfiprintf_r+0x1a6>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0c5      	beq.n	80092b6 <_svfiprintf_r+0x12e>
 800932a:	9209      	str	r2, [sp, #36]	; 0x24
 800932c:	e7c3      	b.n	80092b6 <_svfiprintf_r+0x12e>
 800932e:	4342      	muls	r2, r0
 8009330:	0035      	movs	r5, r6
 8009332:	2301      	movs	r3, #1
 8009334:	1852      	adds	r2, r2, r1
 8009336:	e7f1      	b.n	800931c <_svfiprintf_r+0x194>
 8009338:	ab07      	add	r3, sp, #28
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	003a      	movs	r2, r7
 800933e:	0021      	movs	r1, r4
 8009340:	4b10      	ldr	r3, [pc, #64]	; (8009384 <_svfiprintf_r+0x1fc>)
 8009342:	9803      	ldr	r0, [sp, #12]
 8009344:	f7fc f9e2 	bl	800570c <_printf_float>
 8009348:	9004      	str	r0, [sp, #16]
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	3301      	adds	r3, #1
 800934e:	d1d3      	bne.n	80092f8 <_svfiprintf_r+0x170>
 8009350:	89bb      	ldrh	r3, [r7, #12]
 8009352:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009354:	065b      	lsls	r3, r3, #25
 8009356:	d400      	bmi.n	800935a <_svfiprintf_r+0x1d2>
 8009358:	e72d      	b.n	80091b6 <_svfiprintf_r+0x2e>
 800935a:	2001      	movs	r0, #1
 800935c:	4240      	negs	r0, r0
 800935e:	e72a      	b.n	80091b6 <_svfiprintf_r+0x2e>
 8009360:	ab07      	add	r3, sp, #28
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	003a      	movs	r2, r7
 8009366:	0021      	movs	r1, r4
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <_svfiprintf_r+0x1fc>)
 800936a:	9803      	ldr	r0, [sp, #12]
 800936c:	f7fc fc80 	bl	8005c70 <_printf_i>
 8009370:	e7ea      	b.n	8009348 <_svfiprintf_r+0x1c0>
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	0800a554 	.word	0x0800a554
 8009378:	0800a55a 	.word	0x0800a55a
 800937c:	0800a55e 	.word	0x0800a55e
 8009380:	0800570d 	.word	0x0800570d
 8009384:	080090c5 	.word	0x080090c5

08009388 <nan>:
 8009388:	2000      	movs	r0, #0
 800938a:	4901      	ldr	r1, [pc, #4]	; (8009390 <nan+0x8>)
 800938c:	4770      	bx	lr
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	7ff80000 	.word	0x7ff80000

08009394 <_sbrk_r>:
 8009394:	2300      	movs	r3, #0
 8009396:	b570      	push	{r4, r5, r6, lr}
 8009398:	4d06      	ldr	r5, [pc, #24]	; (80093b4 <_sbrk_r+0x20>)
 800939a:	0004      	movs	r4, r0
 800939c:	0008      	movs	r0, r1
 800939e:	602b      	str	r3, [r5, #0]
 80093a0:	f7f9 fc06 	bl	8002bb0 <_sbrk>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d103      	bne.n	80093b0 <_sbrk_r+0x1c>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d000      	beq.n	80093b0 <_sbrk_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	200002f4 	.word	0x200002f4

080093b8 <strncmp>:
 80093b8:	b530      	push	{r4, r5, lr}
 80093ba:	0005      	movs	r5, r0
 80093bc:	1e10      	subs	r0, r2, #0
 80093be:	d008      	beq.n	80093d2 <strncmp+0x1a>
 80093c0:	2400      	movs	r4, #0
 80093c2:	3a01      	subs	r2, #1
 80093c4:	5d2b      	ldrb	r3, [r5, r4]
 80093c6:	5d08      	ldrb	r0, [r1, r4]
 80093c8:	4283      	cmp	r3, r0
 80093ca:	d101      	bne.n	80093d0 <strncmp+0x18>
 80093cc:	4294      	cmp	r4, r2
 80093ce:	d101      	bne.n	80093d4 <strncmp+0x1c>
 80093d0:	1a18      	subs	r0, r3, r0
 80093d2:	bd30      	pop	{r4, r5, pc}
 80093d4:	3401      	adds	r4, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1f4      	bne.n	80093c4 <strncmp+0xc>
 80093da:	e7f9      	b.n	80093d0 <strncmp+0x18>

080093dc <__ascii_wctomb>:
 80093dc:	0003      	movs	r3, r0
 80093de:	1e08      	subs	r0, r1, #0
 80093e0:	d005      	beq.n	80093ee <__ascii_wctomb+0x12>
 80093e2:	2aff      	cmp	r2, #255	; 0xff
 80093e4:	d904      	bls.n	80093f0 <__ascii_wctomb+0x14>
 80093e6:	228a      	movs	r2, #138	; 0x8a
 80093e8:	2001      	movs	r0, #1
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	4240      	negs	r0, r0
 80093ee:	4770      	bx	lr
 80093f0:	2001      	movs	r0, #1
 80093f2:	700a      	strb	r2, [r1, #0]
 80093f4:	e7fb      	b.n	80093ee <__ascii_wctomb+0x12>
	...

080093f8 <__assert_func>:
 80093f8:	b530      	push	{r4, r5, lr}
 80093fa:	0014      	movs	r4, r2
 80093fc:	001a      	movs	r2, r3
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <__assert_func+0x2c>)
 8009400:	0005      	movs	r5, r0
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	b085      	sub	sp, #20
 8009406:	68d8      	ldr	r0, [r3, #12]
 8009408:	4b07      	ldr	r3, [pc, #28]	; (8009428 <__assert_func+0x30>)
 800940a:	2c00      	cmp	r4, #0
 800940c:	d101      	bne.n	8009412 <__assert_func+0x1a>
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <__assert_func+0x34>)
 8009410:	001c      	movs	r4, r3
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	9100      	str	r1, [sp, #0]
 8009416:	002b      	movs	r3, r5
 8009418:	4905      	ldr	r1, [pc, #20]	; (8009430 <__assert_func+0x38>)
 800941a:	9402      	str	r4, [sp, #8]
 800941c:	f000 f80a 	bl	8009434 <fiprintf>
 8009420:	f000 fa9a 	bl	8009958 <abort>
 8009424:	2000000c 	.word	0x2000000c
 8009428:	0800a565 	.word	0x0800a565
 800942c:	0800a5a0 	.word	0x0800a5a0
 8009430:	0800a572 	.word	0x0800a572

08009434 <fiprintf>:
 8009434:	b40e      	push	{r1, r2, r3}
 8009436:	b503      	push	{r0, r1, lr}
 8009438:	0001      	movs	r1, r0
 800943a:	ab03      	add	r3, sp, #12
 800943c:	4804      	ldr	r0, [pc, #16]	; (8009450 <fiprintf+0x1c>)
 800943e:	cb04      	ldmia	r3!, {r2}
 8009440:	6800      	ldr	r0, [r0, #0]
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	f000 f880 	bl	8009548 <_vfiprintf_r>
 8009448:	b002      	add	sp, #8
 800944a:	bc08      	pop	{r3}
 800944c:	b003      	add	sp, #12
 800944e:	4718      	bx	r3
 8009450:	2000000c 	.word	0x2000000c

08009454 <memmove>:
 8009454:	b510      	push	{r4, lr}
 8009456:	4288      	cmp	r0, r1
 8009458:	d902      	bls.n	8009460 <memmove+0xc>
 800945a:	188b      	adds	r3, r1, r2
 800945c:	4298      	cmp	r0, r3
 800945e:	d303      	bcc.n	8009468 <memmove+0x14>
 8009460:	2300      	movs	r3, #0
 8009462:	e007      	b.n	8009474 <memmove+0x20>
 8009464:	5c8b      	ldrb	r3, [r1, r2]
 8009466:	5483      	strb	r3, [r0, r2]
 8009468:	3a01      	subs	r2, #1
 800946a:	d2fb      	bcs.n	8009464 <memmove+0x10>
 800946c:	bd10      	pop	{r4, pc}
 800946e:	5ccc      	ldrb	r4, [r1, r3]
 8009470:	54c4      	strb	r4, [r0, r3]
 8009472:	3301      	adds	r3, #1
 8009474:	429a      	cmp	r2, r3
 8009476:	d1fa      	bne.n	800946e <memmove+0x1a>
 8009478:	e7f8      	b.n	800946c <memmove+0x18>
	...

0800947c <__malloc_lock>:
 800947c:	b510      	push	{r4, lr}
 800947e:	4802      	ldr	r0, [pc, #8]	; (8009488 <__malloc_lock+0xc>)
 8009480:	f000 fc41 	bl	8009d06 <__retarget_lock_acquire_recursive>
 8009484:	bd10      	pop	{r4, pc}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	200002f8 	.word	0x200002f8

0800948c <__malloc_unlock>:
 800948c:	b510      	push	{r4, lr}
 800948e:	4802      	ldr	r0, [pc, #8]	; (8009498 <__malloc_unlock+0xc>)
 8009490:	f000 fc3a 	bl	8009d08 <__retarget_lock_release_recursive>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	200002f8 	.word	0x200002f8

0800949c <_realloc_r>:
 800949c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800949e:	0007      	movs	r7, r0
 80094a0:	000e      	movs	r6, r1
 80094a2:	0014      	movs	r4, r2
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d105      	bne.n	80094b4 <_realloc_r+0x18>
 80094a8:	0011      	movs	r1, r2
 80094aa:	f7ff fd95 	bl	8008fd8 <_malloc_r>
 80094ae:	0005      	movs	r5, r0
 80094b0:	0028      	movs	r0, r5
 80094b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d103      	bne.n	80094c0 <_realloc_r+0x24>
 80094b8:	f7ff fd22 	bl	8008f00 <_free_r>
 80094bc:	0025      	movs	r5, r4
 80094be:	e7f7      	b.n	80094b0 <_realloc_r+0x14>
 80094c0:	f000 fc90 	bl	8009de4 <_malloc_usable_size_r>
 80094c4:	9001      	str	r0, [sp, #4]
 80094c6:	4284      	cmp	r4, r0
 80094c8:	d803      	bhi.n	80094d2 <_realloc_r+0x36>
 80094ca:	0035      	movs	r5, r6
 80094cc:	0843      	lsrs	r3, r0, #1
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	d3ee      	bcc.n	80094b0 <_realloc_r+0x14>
 80094d2:	0021      	movs	r1, r4
 80094d4:	0038      	movs	r0, r7
 80094d6:	f7ff fd7f 	bl	8008fd8 <_malloc_r>
 80094da:	1e05      	subs	r5, r0, #0
 80094dc:	d0e8      	beq.n	80094b0 <_realloc_r+0x14>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	0022      	movs	r2, r4
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d900      	bls.n	80094e8 <_realloc_r+0x4c>
 80094e6:	001a      	movs	r2, r3
 80094e8:	0031      	movs	r1, r6
 80094ea:	0028      	movs	r0, r5
 80094ec:	f7ff f809 	bl	8008502 <memcpy>
 80094f0:	0031      	movs	r1, r6
 80094f2:	0038      	movs	r0, r7
 80094f4:	f7ff fd04 	bl	8008f00 <_free_r>
 80094f8:	e7da      	b.n	80094b0 <_realloc_r+0x14>

080094fa <__sfputc_r>:
 80094fa:	6893      	ldr	r3, [r2, #8]
 80094fc:	b510      	push	{r4, lr}
 80094fe:	3b01      	subs	r3, #1
 8009500:	6093      	str	r3, [r2, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	da04      	bge.n	8009510 <__sfputc_r+0x16>
 8009506:	6994      	ldr	r4, [r2, #24]
 8009508:	42a3      	cmp	r3, r4
 800950a:	db07      	blt.n	800951c <__sfputc_r+0x22>
 800950c:	290a      	cmp	r1, #10
 800950e:	d005      	beq.n	800951c <__sfputc_r+0x22>
 8009510:	6813      	ldr	r3, [r2, #0]
 8009512:	1c58      	adds	r0, r3, #1
 8009514:	6010      	str	r0, [r2, #0]
 8009516:	7019      	strb	r1, [r3, #0]
 8009518:	0008      	movs	r0, r1
 800951a:	bd10      	pop	{r4, pc}
 800951c:	f000 f94e 	bl	80097bc <__swbuf_r>
 8009520:	0001      	movs	r1, r0
 8009522:	e7f9      	b.n	8009518 <__sfputc_r+0x1e>

08009524 <__sfputs_r>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	0006      	movs	r6, r0
 8009528:	000f      	movs	r7, r1
 800952a:	0014      	movs	r4, r2
 800952c:	18d5      	adds	r5, r2, r3
 800952e:	42ac      	cmp	r4, r5
 8009530:	d101      	bne.n	8009536 <__sfputs_r+0x12>
 8009532:	2000      	movs	r0, #0
 8009534:	e007      	b.n	8009546 <__sfputs_r+0x22>
 8009536:	7821      	ldrb	r1, [r4, #0]
 8009538:	003a      	movs	r2, r7
 800953a:	0030      	movs	r0, r6
 800953c:	f7ff ffdd 	bl	80094fa <__sfputc_r>
 8009540:	3401      	adds	r4, #1
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	d1f3      	bne.n	800952e <__sfputs_r+0xa>
 8009546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009548 <_vfiprintf_r>:
 8009548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954a:	b0a1      	sub	sp, #132	; 0x84
 800954c:	0006      	movs	r6, r0
 800954e:	000c      	movs	r4, r1
 8009550:	001f      	movs	r7, r3
 8009552:	9203      	str	r2, [sp, #12]
 8009554:	2800      	cmp	r0, #0
 8009556:	d004      	beq.n	8009562 <_vfiprintf_r+0x1a>
 8009558:	6983      	ldr	r3, [r0, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <_vfiprintf_r+0x1a>
 800955e:	f000 fb31 	bl	8009bc4 <__sinit>
 8009562:	4b8e      	ldr	r3, [pc, #568]	; (800979c <_vfiprintf_r+0x254>)
 8009564:	429c      	cmp	r4, r3
 8009566:	d11c      	bne.n	80095a2 <_vfiprintf_r+0x5a>
 8009568:	6874      	ldr	r4, [r6, #4]
 800956a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800956c:	07db      	lsls	r3, r3, #31
 800956e:	d405      	bmi.n	800957c <_vfiprintf_r+0x34>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	059b      	lsls	r3, r3, #22
 8009574:	d402      	bmi.n	800957c <_vfiprintf_r+0x34>
 8009576:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009578:	f000 fbc5 	bl	8009d06 <__retarget_lock_acquire_recursive>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	071b      	lsls	r3, r3, #28
 8009580:	d502      	bpl.n	8009588 <_vfiprintf_r+0x40>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11d      	bne.n	80095c4 <_vfiprintf_r+0x7c>
 8009588:	0021      	movs	r1, r4
 800958a:	0030      	movs	r0, r6
 800958c:	f000 f96c 	bl	8009868 <__swsetup_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	d017      	beq.n	80095c4 <_vfiprintf_r+0x7c>
 8009594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009596:	07db      	lsls	r3, r3, #31
 8009598:	d50d      	bpl.n	80095b6 <_vfiprintf_r+0x6e>
 800959a:	2001      	movs	r0, #1
 800959c:	4240      	negs	r0, r0
 800959e:	b021      	add	sp, #132	; 0x84
 80095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a2:	4b7f      	ldr	r3, [pc, #508]	; (80097a0 <_vfiprintf_r+0x258>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d101      	bne.n	80095ac <_vfiprintf_r+0x64>
 80095a8:	68b4      	ldr	r4, [r6, #8]
 80095aa:	e7de      	b.n	800956a <_vfiprintf_r+0x22>
 80095ac:	4b7d      	ldr	r3, [pc, #500]	; (80097a4 <_vfiprintf_r+0x25c>)
 80095ae:	429c      	cmp	r4, r3
 80095b0:	d1db      	bne.n	800956a <_vfiprintf_r+0x22>
 80095b2:	68f4      	ldr	r4, [r6, #12]
 80095b4:	e7d9      	b.n	800956a <_vfiprintf_r+0x22>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	059b      	lsls	r3, r3, #22
 80095ba:	d4ee      	bmi.n	800959a <_vfiprintf_r+0x52>
 80095bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095be:	f000 fba3 	bl	8009d08 <__retarget_lock_release_recursive>
 80095c2:	e7ea      	b.n	800959a <_vfiprintf_r+0x52>
 80095c4:	2300      	movs	r3, #0
 80095c6:	ad08      	add	r5, sp, #32
 80095c8:	616b      	str	r3, [r5, #20]
 80095ca:	3320      	adds	r3, #32
 80095cc:	766b      	strb	r3, [r5, #25]
 80095ce:	3310      	adds	r3, #16
 80095d0:	76ab      	strb	r3, [r5, #26]
 80095d2:	9707      	str	r7, [sp, #28]
 80095d4:	9f03      	ldr	r7, [sp, #12]
 80095d6:	783b      	ldrb	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <_vfiprintf_r+0x98>
 80095dc:	2b25      	cmp	r3, #37	; 0x25
 80095de:	d14e      	bne.n	800967e <_vfiprintf_r+0x136>
 80095e0:	9b03      	ldr	r3, [sp, #12]
 80095e2:	1afb      	subs	r3, r7, r3
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	429f      	cmp	r7, r3
 80095ea:	d00d      	beq.n	8009608 <_vfiprintf_r+0xc0>
 80095ec:	9b05      	ldr	r3, [sp, #20]
 80095ee:	0021      	movs	r1, r4
 80095f0:	0030      	movs	r0, r6
 80095f2:	9a03      	ldr	r2, [sp, #12]
 80095f4:	f7ff ff96 	bl	8009524 <__sfputs_r>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d100      	bne.n	80095fe <_vfiprintf_r+0xb6>
 80095fc:	e0b5      	b.n	800976a <_vfiprintf_r+0x222>
 80095fe:	696a      	ldr	r2, [r5, #20]
 8009600:	9b05      	ldr	r3, [sp, #20]
 8009602:	4694      	mov	ip, r2
 8009604:	4463      	add	r3, ip
 8009606:	616b      	str	r3, [r5, #20]
 8009608:	783b      	ldrb	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d100      	bne.n	8009610 <_vfiprintf_r+0xc8>
 800960e:	e0ac      	b.n	800976a <_vfiprintf_r+0x222>
 8009610:	2201      	movs	r2, #1
 8009612:	1c7b      	adds	r3, r7, #1
 8009614:	9303      	str	r3, [sp, #12]
 8009616:	2300      	movs	r3, #0
 8009618:	4252      	negs	r2, r2
 800961a:	606a      	str	r2, [r5, #4]
 800961c:	a904      	add	r1, sp, #16
 800961e:	3254      	adds	r2, #84	; 0x54
 8009620:	1852      	adds	r2, r2, r1
 8009622:	602b      	str	r3, [r5, #0]
 8009624:	60eb      	str	r3, [r5, #12]
 8009626:	60ab      	str	r3, [r5, #8]
 8009628:	7013      	strb	r3, [r2, #0]
 800962a:	65ab      	str	r3, [r5, #88]	; 0x58
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	2205      	movs	r2, #5
 8009630:	7819      	ldrb	r1, [r3, #0]
 8009632:	485d      	ldr	r0, [pc, #372]	; (80097a8 <_vfiprintf_r+0x260>)
 8009634:	f7fe ff5a 	bl	80084ec <memchr>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1c5f      	adds	r7, r3, #1
 800963c:	2800      	cmp	r0, #0
 800963e:	d120      	bne.n	8009682 <_vfiprintf_r+0x13a>
 8009640:	682a      	ldr	r2, [r5, #0]
 8009642:	06d3      	lsls	r3, r2, #27
 8009644:	d504      	bpl.n	8009650 <_vfiprintf_r+0x108>
 8009646:	2353      	movs	r3, #83	; 0x53
 8009648:	a904      	add	r1, sp, #16
 800964a:	185b      	adds	r3, r3, r1
 800964c:	2120      	movs	r1, #32
 800964e:	7019      	strb	r1, [r3, #0]
 8009650:	0713      	lsls	r3, r2, #28
 8009652:	d504      	bpl.n	800965e <_vfiprintf_r+0x116>
 8009654:	2353      	movs	r3, #83	; 0x53
 8009656:	a904      	add	r1, sp, #16
 8009658:	185b      	adds	r3, r3, r1
 800965a:	212b      	movs	r1, #43	; 0x2b
 800965c:	7019      	strb	r1, [r3, #0]
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b2a      	cmp	r3, #42	; 0x2a
 8009664:	d016      	beq.n	8009694 <_vfiprintf_r+0x14c>
 8009666:	2100      	movs	r1, #0
 8009668:	68eb      	ldr	r3, [r5, #12]
 800966a:	9f03      	ldr	r7, [sp, #12]
 800966c:	783a      	ldrb	r2, [r7, #0]
 800966e:	1c78      	adds	r0, r7, #1
 8009670:	3a30      	subs	r2, #48	; 0x30
 8009672:	4684      	mov	ip, r0
 8009674:	2a09      	cmp	r2, #9
 8009676:	d94f      	bls.n	8009718 <_vfiprintf_r+0x1d0>
 8009678:	2900      	cmp	r1, #0
 800967a:	d111      	bne.n	80096a0 <_vfiprintf_r+0x158>
 800967c:	e017      	b.n	80096ae <_vfiprintf_r+0x166>
 800967e:	3701      	adds	r7, #1
 8009680:	e7a9      	b.n	80095d6 <_vfiprintf_r+0x8e>
 8009682:	4b49      	ldr	r3, [pc, #292]	; (80097a8 <_vfiprintf_r+0x260>)
 8009684:	682a      	ldr	r2, [r5, #0]
 8009686:	1ac0      	subs	r0, r0, r3
 8009688:	2301      	movs	r3, #1
 800968a:	4083      	lsls	r3, r0
 800968c:	4313      	orrs	r3, r2
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	9703      	str	r7, [sp, #12]
 8009692:	e7cb      	b.n	800962c <_vfiprintf_r+0xe4>
 8009694:	9b07      	ldr	r3, [sp, #28]
 8009696:	1d19      	adds	r1, r3, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	9107      	str	r1, [sp, #28]
 800969c:	2b00      	cmp	r3, #0
 800969e:	db01      	blt.n	80096a4 <_vfiprintf_r+0x15c>
 80096a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80096a2:	e004      	b.n	80096ae <_vfiprintf_r+0x166>
 80096a4:	425b      	negs	r3, r3
 80096a6:	60eb      	str	r3, [r5, #12]
 80096a8:	2302      	movs	r3, #2
 80096aa:	4313      	orrs	r3, r2
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	783b      	ldrb	r3, [r7, #0]
 80096b0:	2b2e      	cmp	r3, #46	; 0x2e
 80096b2:	d10a      	bne.n	80096ca <_vfiprintf_r+0x182>
 80096b4:	787b      	ldrb	r3, [r7, #1]
 80096b6:	2b2a      	cmp	r3, #42	; 0x2a
 80096b8:	d137      	bne.n	800972a <_vfiprintf_r+0x1e2>
 80096ba:	9b07      	ldr	r3, [sp, #28]
 80096bc:	3702      	adds	r7, #2
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	9207      	str	r2, [sp, #28]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	db2d      	blt.n	8009724 <_vfiprintf_r+0x1dc>
 80096c8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ca:	2203      	movs	r2, #3
 80096cc:	7839      	ldrb	r1, [r7, #0]
 80096ce:	4837      	ldr	r0, [pc, #220]	; (80097ac <_vfiprintf_r+0x264>)
 80096d0:	f7fe ff0c 	bl	80084ec <memchr>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d007      	beq.n	80096e8 <_vfiprintf_r+0x1a0>
 80096d8:	4b34      	ldr	r3, [pc, #208]	; (80097ac <_vfiprintf_r+0x264>)
 80096da:	682a      	ldr	r2, [r5, #0]
 80096dc:	1ac0      	subs	r0, r0, r3
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	4083      	lsls	r3, r0
 80096e2:	4313      	orrs	r3, r2
 80096e4:	3701      	adds	r7, #1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	7839      	ldrb	r1, [r7, #0]
 80096ea:	1c7b      	adds	r3, r7, #1
 80096ec:	2206      	movs	r2, #6
 80096ee:	4830      	ldr	r0, [pc, #192]	; (80097b0 <_vfiprintf_r+0x268>)
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	7629      	strb	r1, [r5, #24]
 80096f4:	f7fe fefa 	bl	80084ec <memchr>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d045      	beq.n	8009788 <_vfiprintf_r+0x240>
 80096fc:	4b2d      	ldr	r3, [pc, #180]	; (80097b4 <_vfiprintf_r+0x26c>)
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d127      	bne.n	8009752 <_vfiprintf_r+0x20a>
 8009702:	2207      	movs	r2, #7
 8009704:	9b07      	ldr	r3, [sp, #28]
 8009706:	3307      	adds	r3, #7
 8009708:	4393      	bics	r3, r2
 800970a:	3308      	adds	r3, #8
 800970c:	9307      	str	r3, [sp, #28]
 800970e:	696b      	ldr	r3, [r5, #20]
 8009710:	9a04      	ldr	r2, [sp, #16]
 8009712:	189b      	adds	r3, r3, r2
 8009714:	616b      	str	r3, [r5, #20]
 8009716:	e75d      	b.n	80095d4 <_vfiprintf_r+0x8c>
 8009718:	210a      	movs	r1, #10
 800971a:	434b      	muls	r3, r1
 800971c:	4667      	mov	r7, ip
 800971e:	189b      	adds	r3, r3, r2
 8009720:	3909      	subs	r1, #9
 8009722:	e7a3      	b.n	800966c <_vfiprintf_r+0x124>
 8009724:	2301      	movs	r3, #1
 8009726:	425b      	negs	r3, r3
 8009728:	e7ce      	b.n	80096c8 <_vfiprintf_r+0x180>
 800972a:	2300      	movs	r3, #0
 800972c:	001a      	movs	r2, r3
 800972e:	3701      	adds	r7, #1
 8009730:	606b      	str	r3, [r5, #4]
 8009732:	7839      	ldrb	r1, [r7, #0]
 8009734:	1c78      	adds	r0, r7, #1
 8009736:	3930      	subs	r1, #48	; 0x30
 8009738:	4684      	mov	ip, r0
 800973a:	2909      	cmp	r1, #9
 800973c:	d903      	bls.n	8009746 <_vfiprintf_r+0x1fe>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0c3      	beq.n	80096ca <_vfiprintf_r+0x182>
 8009742:	9209      	str	r2, [sp, #36]	; 0x24
 8009744:	e7c1      	b.n	80096ca <_vfiprintf_r+0x182>
 8009746:	230a      	movs	r3, #10
 8009748:	435a      	muls	r2, r3
 800974a:	4667      	mov	r7, ip
 800974c:	1852      	adds	r2, r2, r1
 800974e:	3b09      	subs	r3, #9
 8009750:	e7ef      	b.n	8009732 <_vfiprintf_r+0x1ea>
 8009752:	ab07      	add	r3, sp, #28
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	0022      	movs	r2, r4
 8009758:	0029      	movs	r1, r5
 800975a:	0030      	movs	r0, r6
 800975c:	4b16      	ldr	r3, [pc, #88]	; (80097b8 <_vfiprintf_r+0x270>)
 800975e:	f7fb ffd5 	bl	800570c <_printf_float>
 8009762:	9004      	str	r0, [sp, #16]
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	3301      	adds	r3, #1
 8009768:	d1d1      	bne.n	800970e <_vfiprintf_r+0x1c6>
 800976a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800976c:	07db      	lsls	r3, r3, #31
 800976e:	d405      	bmi.n	800977c <_vfiprintf_r+0x234>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	059b      	lsls	r3, r3, #22
 8009774:	d402      	bmi.n	800977c <_vfiprintf_r+0x234>
 8009776:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009778:	f000 fac6 	bl	8009d08 <__retarget_lock_release_recursive>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	065b      	lsls	r3, r3, #25
 8009780:	d500      	bpl.n	8009784 <_vfiprintf_r+0x23c>
 8009782:	e70a      	b.n	800959a <_vfiprintf_r+0x52>
 8009784:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009786:	e70a      	b.n	800959e <_vfiprintf_r+0x56>
 8009788:	ab07      	add	r3, sp, #28
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	0022      	movs	r2, r4
 800978e:	0029      	movs	r1, r5
 8009790:	0030      	movs	r0, r6
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <_vfiprintf_r+0x270>)
 8009794:	f7fc fa6c 	bl	8005c70 <_printf_i>
 8009798:	e7e3      	b.n	8009762 <_vfiprintf_r+0x21a>
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	0800a5c4 	.word	0x0800a5c4
 80097a0:	0800a5e4 	.word	0x0800a5e4
 80097a4:	0800a5a4 	.word	0x0800a5a4
 80097a8:	0800a554 	.word	0x0800a554
 80097ac:	0800a55a 	.word	0x0800a55a
 80097b0:	0800a55e 	.word	0x0800a55e
 80097b4:	0800570d 	.word	0x0800570d
 80097b8:	08009525 	.word	0x08009525

080097bc <__swbuf_r>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	0005      	movs	r5, r0
 80097c0:	000e      	movs	r6, r1
 80097c2:	0014      	movs	r4, r2
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d004      	beq.n	80097d2 <__swbuf_r+0x16>
 80097c8:	6983      	ldr	r3, [r0, #24]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <__swbuf_r+0x16>
 80097ce:	f000 f9f9 	bl	8009bc4 <__sinit>
 80097d2:	4b22      	ldr	r3, [pc, #136]	; (800985c <__swbuf_r+0xa0>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	d12e      	bne.n	8009836 <__swbuf_r+0x7a>
 80097d8:	686c      	ldr	r4, [r5, #4]
 80097da:	69a3      	ldr	r3, [r4, #24]
 80097dc:	60a3      	str	r3, [r4, #8]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	071b      	lsls	r3, r3, #28
 80097e2:	d532      	bpl.n	800984a <__swbuf_r+0x8e>
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d02f      	beq.n	800984a <__swbuf_r+0x8e>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	6922      	ldr	r2, [r4, #16]
 80097ee:	b2f7      	uxtb	r7, r6
 80097f0:	1a98      	subs	r0, r3, r2
 80097f2:	6963      	ldr	r3, [r4, #20]
 80097f4:	b2f6      	uxtb	r6, r6
 80097f6:	4283      	cmp	r3, r0
 80097f8:	dc05      	bgt.n	8009806 <__swbuf_r+0x4a>
 80097fa:	0021      	movs	r1, r4
 80097fc:	0028      	movs	r0, r5
 80097fe:	f000 f93f 	bl	8009a80 <_fflush_r>
 8009802:	2800      	cmp	r0, #0
 8009804:	d127      	bne.n	8009856 <__swbuf_r+0x9a>
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	3001      	adds	r0, #1
 800980a:	3b01      	subs	r3, #1
 800980c:	60a3      	str	r3, [r4, #8]
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	6022      	str	r2, [r4, #0]
 8009814:	701f      	strb	r7, [r3, #0]
 8009816:	6963      	ldr	r3, [r4, #20]
 8009818:	4283      	cmp	r3, r0
 800981a:	d004      	beq.n	8009826 <__swbuf_r+0x6a>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	07db      	lsls	r3, r3, #31
 8009820:	d507      	bpl.n	8009832 <__swbuf_r+0x76>
 8009822:	2e0a      	cmp	r6, #10
 8009824:	d105      	bne.n	8009832 <__swbuf_r+0x76>
 8009826:	0021      	movs	r1, r4
 8009828:	0028      	movs	r0, r5
 800982a:	f000 f929 	bl	8009a80 <_fflush_r>
 800982e:	2800      	cmp	r0, #0
 8009830:	d111      	bne.n	8009856 <__swbuf_r+0x9a>
 8009832:	0030      	movs	r0, r6
 8009834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <__swbuf_r+0xa4>)
 8009838:	429c      	cmp	r4, r3
 800983a:	d101      	bne.n	8009840 <__swbuf_r+0x84>
 800983c:	68ac      	ldr	r4, [r5, #8]
 800983e:	e7cc      	b.n	80097da <__swbuf_r+0x1e>
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <__swbuf_r+0xa8>)
 8009842:	429c      	cmp	r4, r3
 8009844:	d1c9      	bne.n	80097da <__swbuf_r+0x1e>
 8009846:	68ec      	ldr	r4, [r5, #12]
 8009848:	e7c7      	b.n	80097da <__swbuf_r+0x1e>
 800984a:	0021      	movs	r1, r4
 800984c:	0028      	movs	r0, r5
 800984e:	f000 f80b 	bl	8009868 <__swsetup_r>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0c9      	beq.n	80097ea <__swbuf_r+0x2e>
 8009856:	2601      	movs	r6, #1
 8009858:	4276      	negs	r6, r6
 800985a:	e7ea      	b.n	8009832 <__swbuf_r+0x76>
 800985c:	0800a5c4 	.word	0x0800a5c4
 8009860:	0800a5e4 	.word	0x0800a5e4
 8009864:	0800a5a4 	.word	0x0800a5a4

08009868 <__swsetup_r>:
 8009868:	4b37      	ldr	r3, [pc, #220]	; (8009948 <__swsetup_r+0xe0>)
 800986a:	b570      	push	{r4, r5, r6, lr}
 800986c:	681d      	ldr	r5, [r3, #0]
 800986e:	0006      	movs	r6, r0
 8009870:	000c      	movs	r4, r1
 8009872:	2d00      	cmp	r5, #0
 8009874:	d005      	beq.n	8009882 <__swsetup_r+0x1a>
 8009876:	69ab      	ldr	r3, [r5, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <__swsetup_r+0x1a>
 800987c:	0028      	movs	r0, r5
 800987e:	f000 f9a1 	bl	8009bc4 <__sinit>
 8009882:	4b32      	ldr	r3, [pc, #200]	; (800994c <__swsetup_r+0xe4>)
 8009884:	429c      	cmp	r4, r3
 8009886:	d10f      	bne.n	80098a8 <__swsetup_r+0x40>
 8009888:	686c      	ldr	r4, [r5, #4]
 800988a:	230c      	movs	r3, #12
 800988c:	5ee2      	ldrsh	r2, [r4, r3]
 800988e:	b293      	uxth	r3, r2
 8009890:	0711      	lsls	r1, r2, #28
 8009892:	d42d      	bmi.n	80098f0 <__swsetup_r+0x88>
 8009894:	06d9      	lsls	r1, r3, #27
 8009896:	d411      	bmi.n	80098bc <__swsetup_r+0x54>
 8009898:	2309      	movs	r3, #9
 800989a:	2001      	movs	r0, #1
 800989c:	6033      	str	r3, [r6, #0]
 800989e:	3337      	adds	r3, #55	; 0x37
 80098a0:	4313      	orrs	r3, r2
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	4240      	negs	r0, r0
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	4b29      	ldr	r3, [pc, #164]	; (8009950 <__swsetup_r+0xe8>)
 80098aa:	429c      	cmp	r4, r3
 80098ac:	d101      	bne.n	80098b2 <__swsetup_r+0x4a>
 80098ae:	68ac      	ldr	r4, [r5, #8]
 80098b0:	e7eb      	b.n	800988a <__swsetup_r+0x22>
 80098b2:	4b28      	ldr	r3, [pc, #160]	; (8009954 <__swsetup_r+0xec>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d1e8      	bne.n	800988a <__swsetup_r+0x22>
 80098b8:	68ec      	ldr	r4, [r5, #12]
 80098ba:	e7e6      	b.n	800988a <__swsetup_r+0x22>
 80098bc:	075b      	lsls	r3, r3, #29
 80098be:	d513      	bpl.n	80098e8 <__swsetup_r+0x80>
 80098c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c2:	2900      	cmp	r1, #0
 80098c4:	d008      	beq.n	80098d8 <__swsetup_r+0x70>
 80098c6:	0023      	movs	r3, r4
 80098c8:	3344      	adds	r3, #68	; 0x44
 80098ca:	4299      	cmp	r1, r3
 80098cc:	d002      	beq.n	80098d4 <__swsetup_r+0x6c>
 80098ce:	0030      	movs	r0, r6
 80098d0:	f7ff fb16 	bl	8008f00 <_free_r>
 80098d4:	2300      	movs	r3, #0
 80098d6:	6363      	str	r3, [r4, #52]	; 0x34
 80098d8:	2224      	movs	r2, #36	; 0x24
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	4393      	bics	r3, r2
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	2300      	movs	r3, #0
 80098e2:	6063      	str	r3, [r4, #4]
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	2308      	movs	r3, #8
 80098ea:	89a2      	ldrh	r2, [r4, #12]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <__swsetup_r+0xa6>
 80098f6:	21a0      	movs	r1, #160	; 0xa0
 80098f8:	2280      	movs	r2, #128	; 0x80
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	0089      	lsls	r1, r1, #2
 80098fe:	0092      	lsls	r2, r2, #2
 8009900:	400b      	ands	r3, r1
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <__swsetup_r+0xa6>
 8009906:	0021      	movs	r1, r4
 8009908:	0030      	movs	r0, r6
 800990a:	f000 fa27 	bl	8009d5c <__smakebuf_r>
 800990e:	220c      	movs	r2, #12
 8009910:	5ea3      	ldrsh	r3, [r4, r2]
 8009912:	2001      	movs	r0, #1
 8009914:	001a      	movs	r2, r3
 8009916:	b299      	uxth	r1, r3
 8009918:	4002      	ands	r2, r0
 800991a:	4203      	tst	r3, r0
 800991c:	d00f      	beq.n	800993e <__swsetup_r+0xd6>
 800991e:	2200      	movs	r2, #0
 8009920:	60a2      	str	r2, [r4, #8]
 8009922:	6962      	ldr	r2, [r4, #20]
 8009924:	4252      	negs	r2, r2
 8009926:	61a2      	str	r2, [r4, #24]
 8009928:	2000      	movs	r0, #0
 800992a:	6922      	ldr	r2, [r4, #16]
 800992c:	4282      	cmp	r2, r0
 800992e:	d1ba      	bne.n	80098a6 <__swsetup_r+0x3e>
 8009930:	060a      	lsls	r2, r1, #24
 8009932:	d5b8      	bpl.n	80098a6 <__swsetup_r+0x3e>
 8009934:	2240      	movs	r2, #64	; 0x40
 8009936:	4313      	orrs	r3, r2
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	3801      	subs	r0, #1
 800993c:	e7b3      	b.n	80098a6 <__swsetup_r+0x3e>
 800993e:	0788      	lsls	r0, r1, #30
 8009940:	d400      	bmi.n	8009944 <__swsetup_r+0xdc>
 8009942:	6962      	ldr	r2, [r4, #20]
 8009944:	60a2      	str	r2, [r4, #8]
 8009946:	e7ef      	b.n	8009928 <__swsetup_r+0xc0>
 8009948:	2000000c 	.word	0x2000000c
 800994c:	0800a5c4 	.word	0x0800a5c4
 8009950:	0800a5e4 	.word	0x0800a5e4
 8009954:	0800a5a4 	.word	0x0800a5a4

08009958 <abort>:
 8009958:	2006      	movs	r0, #6
 800995a:	b510      	push	{r4, lr}
 800995c:	f000 fa74 	bl	8009e48 <raise>
 8009960:	2001      	movs	r0, #1
 8009962:	f7f9 f8b4 	bl	8002ace <_exit>
	...

08009968 <__sflush_r>:
 8009968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996a:	898b      	ldrh	r3, [r1, #12]
 800996c:	0005      	movs	r5, r0
 800996e:	000c      	movs	r4, r1
 8009970:	071a      	lsls	r2, r3, #28
 8009972:	d45f      	bmi.n	8009a34 <__sflush_r+0xcc>
 8009974:	684a      	ldr	r2, [r1, #4]
 8009976:	2a00      	cmp	r2, #0
 8009978:	dc04      	bgt.n	8009984 <__sflush_r+0x1c>
 800997a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800997c:	2a00      	cmp	r2, #0
 800997e:	dc01      	bgt.n	8009984 <__sflush_r+0x1c>
 8009980:	2000      	movs	r0, #0
 8009982:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009984:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009986:	2f00      	cmp	r7, #0
 8009988:	d0fa      	beq.n	8009980 <__sflush_r+0x18>
 800998a:	2200      	movs	r2, #0
 800998c:	2180      	movs	r1, #128	; 0x80
 800998e:	682e      	ldr	r6, [r5, #0]
 8009990:	602a      	str	r2, [r5, #0]
 8009992:	001a      	movs	r2, r3
 8009994:	0149      	lsls	r1, r1, #5
 8009996:	400a      	ands	r2, r1
 8009998:	420b      	tst	r3, r1
 800999a:	d034      	beq.n	8009a06 <__sflush_r+0x9e>
 800999c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	075b      	lsls	r3, r3, #29
 80099a2:	d506      	bpl.n	80099b2 <__sflush_r+0x4a>
 80099a4:	6863      	ldr	r3, [r4, #4]
 80099a6:	1ac0      	subs	r0, r0, r3
 80099a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <__sflush_r+0x4a>
 80099ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099b0:	1ac0      	subs	r0, r0, r3
 80099b2:	0002      	movs	r2, r0
 80099b4:	6a21      	ldr	r1, [r4, #32]
 80099b6:	2300      	movs	r3, #0
 80099b8:	0028      	movs	r0, r5
 80099ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80099bc:	47b8      	blx	r7
 80099be:	89a1      	ldrh	r1, [r4, #12]
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d106      	bne.n	80099d2 <__sflush_r+0x6a>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	2b1d      	cmp	r3, #29
 80099c8:	d831      	bhi.n	8009a2e <__sflush_r+0xc6>
 80099ca:	4a2c      	ldr	r2, [pc, #176]	; (8009a7c <__sflush_r+0x114>)
 80099cc:	40da      	lsrs	r2, r3
 80099ce:	07d3      	lsls	r3, r2, #31
 80099d0:	d52d      	bpl.n	8009a2e <__sflush_r+0xc6>
 80099d2:	2300      	movs	r3, #0
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	04cb      	lsls	r3, r1, #19
 80099dc:	d505      	bpl.n	80099ea <__sflush_r+0x82>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	d102      	bne.n	80099e8 <__sflush_r+0x80>
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d100      	bne.n	80099ea <__sflush_r+0x82>
 80099e8:	6560      	str	r0, [r4, #84]	; 0x54
 80099ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ec:	602e      	str	r6, [r5, #0]
 80099ee:	2900      	cmp	r1, #0
 80099f0:	d0c6      	beq.n	8009980 <__sflush_r+0x18>
 80099f2:	0023      	movs	r3, r4
 80099f4:	3344      	adds	r3, #68	; 0x44
 80099f6:	4299      	cmp	r1, r3
 80099f8:	d002      	beq.n	8009a00 <__sflush_r+0x98>
 80099fa:	0028      	movs	r0, r5
 80099fc:	f7ff fa80 	bl	8008f00 <_free_r>
 8009a00:	2000      	movs	r0, #0
 8009a02:	6360      	str	r0, [r4, #52]	; 0x34
 8009a04:	e7bd      	b.n	8009982 <__sflush_r+0x1a>
 8009a06:	2301      	movs	r3, #1
 8009a08:	0028      	movs	r0, r5
 8009a0a:	6a21      	ldr	r1, [r4, #32]
 8009a0c:	47b8      	blx	r7
 8009a0e:	1c43      	adds	r3, r0, #1
 8009a10:	d1c5      	bne.n	800999e <__sflush_r+0x36>
 8009a12:	682b      	ldr	r3, [r5, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0c2      	beq.n	800999e <__sflush_r+0x36>
 8009a18:	2b1d      	cmp	r3, #29
 8009a1a:	d001      	beq.n	8009a20 <__sflush_r+0xb8>
 8009a1c:	2b16      	cmp	r3, #22
 8009a1e:	d101      	bne.n	8009a24 <__sflush_r+0xbc>
 8009a20:	602e      	str	r6, [r5, #0]
 8009a22:	e7ad      	b.n	8009980 <__sflush_r+0x18>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	89a2      	ldrh	r2, [r4, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	e7a9      	b.n	8009982 <__sflush_r+0x1a>
 8009a2e:	2340      	movs	r3, #64	; 0x40
 8009a30:	430b      	orrs	r3, r1
 8009a32:	e7fa      	b.n	8009a2a <__sflush_r+0xc2>
 8009a34:	690f      	ldr	r7, [r1, #16]
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	d0a2      	beq.n	8009980 <__sflush_r+0x18>
 8009a3a:	680a      	ldr	r2, [r1, #0]
 8009a3c:	600f      	str	r7, [r1, #0]
 8009a3e:	1bd2      	subs	r2, r2, r7
 8009a40:	9201      	str	r2, [sp, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	079b      	lsls	r3, r3, #30
 8009a46:	d100      	bne.n	8009a4a <__sflush_r+0xe2>
 8009a48:	694a      	ldr	r2, [r1, #20]
 8009a4a:	60a2      	str	r2, [r4, #8]
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dc00      	bgt.n	8009a54 <__sflush_r+0xec>
 8009a52:	e795      	b.n	8009980 <__sflush_r+0x18>
 8009a54:	003a      	movs	r2, r7
 8009a56:	0028      	movs	r0, r5
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	6a21      	ldr	r1, [r4, #32]
 8009a5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a5e:	47b0      	blx	r6
 8009a60:	2800      	cmp	r0, #0
 8009a62:	dc06      	bgt.n	8009a72 <__sflush_r+0x10a>
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	2001      	movs	r0, #1
 8009a68:	89a2      	ldrh	r2, [r4, #12]
 8009a6a:	4240      	negs	r0, r0
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	e787      	b.n	8009982 <__sflush_r+0x1a>
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	183f      	adds	r7, r7, r0
 8009a76:	1a1b      	subs	r3, r3, r0
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	e7e7      	b.n	8009a4c <__sflush_r+0xe4>
 8009a7c:	20400001 	.word	0x20400001

08009a80 <_fflush_r>:
 8009a80:	690b      	ldr	r3, [r1, #16]
 8009a82:	b570      	push	{r4, r5, r6, lr}
 8009a84:	0005      	movs	r5, r0
 8009a86:	000c      	movs	r4, r1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d102      	bne.n	8009a92 <_fflush_r+0x12>
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	0028      	movs	r0, r5
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d004      	beq.n	8009aa0 <_fflush_r+0x20>
 8009a96:	6983      	ldr	r3, [r0, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <_fflush_r+0x20>
 8009a9c:	f000 f892 	bl	8009bc4 <__sinit>
 8009aa0:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <_fflush_r+0x74>)
 8009aa2:	429c      	cmp	r4, r3
 8009aa4:	d11b      	bne.n	8009ade <_fflush_r+0x5e>
 8009aa6:	686c      	ldr	r4, [r5, #4]
 8009aa8:	220c      	movs	r2, #12
 8009aaa:	5ea3      	ldrsh	r3, [r4, r2]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0ed      	beq.n	8009a8c <_fflush_r+0xc>
 8009ab0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab2:	07d2      	lsls	r2, r2, #31
 8009ab4:	d404      	bmi.n	8009ac0 <_fflush_r+0x40>
 8009ab6:	059b      	lsls	r3, r3, #22
 8009ab8:	d402      	bmi.n	8009ac0 <_fflush_r+0x40>
 8009aba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009abc:	f000 f923 	bl	8009d06 <__retarget_lock_acquire_recursive>
 8009ac0:	0028      	movs	r0, r5
 8009ac2:	0021      	movs	r1, r4
 8009ac4:	f7ff ff50 	bl	8009968 <__sflush_r>
 8009ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aca:	0005      	movs	r5, r0
 8009acc:	07db      	lsls	r3, r3, #31
 8009ace:	d4de      	bmi.n	8009a8e <_fflush_r+0xe>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	059b      	lsls	r3, r3, #22
 8009ad4:	d4db      	bmi.n	8009a8e <_fflush_r+0xe>
 8009ad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ad8:	f000 f916 	bl	8009d08 <__retarget_lock_release_recursive>
 8009adc:	e7d7      	b.n	8009a8e <_fflush_r+0xe>
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <_fflush_r+0x78>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	d101      	bne.n	8009ae8 <_fflush_r+0x68>
 8009ae4:	68ac      	ldr	r4, [r5, #8]
 8009ae6:	e7df      	b.n	8009aa8 <_fflush_r+0x28>
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <_fflush_r+0x7c>)
 8009aea:	429c      	cmp	r4, r3
 8009aec:	d1dc      	bne.n	8009aa8 <_fflush_r+0x28>
 8009aee:	68ec      	ldr	r4, [r5, #12]
 8009af0:	e7da      	b.n	8009aa8 <_fflush_r+0x28>
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	0800a5c4 	.word	0x0800a5c4
 8009af8:	0800a5e4 	.word	0x0800a5e4
 8009afc:	0800a5a4 	.word	0x0800a5a4

08009b00 <std>:
 8009b00:	2300      	movs	r3, #0
 8009b02:	b510      	push	{r4, lr}
 8009b04:	0004      	movs	r4, r0
 8009b06:	6003      	str	r3, [r0, #0]
 8009b08:	6043      	str	r3, [r0, #4]
 8009b0a:	6083      	str	r3, [r0, #8]
 8009b0c:	8181      	strh	r1, [r0, #12]
 8009b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b10:	0019      	movs	r1, r3
 8009b12:	81c2      	strh	r2, [r0, #14]
 8009b14:	6103      	str	r3, [r0, #16]
 8009b16:	6143      	str	r3, [r0, #20]
 8009b18:	6183      	str	r3, [r0, #24]
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	305c      	adds	r0, #92	; 0x5c
 8009b1e:	f7fb fd43 	bl	80055a8 <memset>
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x38>)
 8009b24:	6224      	str	r4, [r4, #32]
 8009b26:	6263      	str	r3, [r4, #36]	; 0x24
 8009b28:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <std+0x3c>)
 8009b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <std+0x40>)
 8009b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b30:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <std+0x44>)
 8009b32:	6323      	str	r3, [r4, #48]	; 0x30
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	46c0      	nop			; (mov r8, r8)
 8009b38:	08009e89 	.word	0x08009e89
 8009b3c:	08009eb1 	.word	0x08009eb1
 8009b40:	08009ee9 	.word	0x08009ee9
 8009b44:	08009f15 	.word	0x08009f15

08009b48 <_cleanup_r>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	4902      	ldr	r1, [pc, #8]	; (8009b54 <_cleanup_r+0xc>)
 8009b4c:	f000 f8ba 	bl	8009cc4 <_fwalk_reent>
 8009b50:	bd10      	pop	{r4, pc}
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	08009a81 	.word	0x08009a81

08009b58 <__sfmoreglue>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	2568      	movs	r5, #104	; 0x68
 8009b5c:	1e4a      	subs	r2, r1, #1
 8009b5e:	4355      	muls	r5, r2
 8009b60:	000e      	movs	r6, r1
 8009b62:	0029      	movs	r1, r5
 8009b64:	3174      	adds	r1, #116	; 0x74
 8009b66:	f7ff fa37 	bl	8008fd8 <_malloc_r>
 8009b6a:	1e04      	subs	r4, r0, #0
 8009b6c:	d008      	beq.n	8009b80 <__sfmoreglue+0x28>
 8009b6e:	2100      	movs	r1, #0
 8009b70:	002a      	movs	r2, r5
 8009b72:	6001      	str	r1, [r0, #0]
 8009b74:	6046      	str	r6, [r0, #4]
 8009b76:	300c      	adds	r0, #12
 8009b78:	60a0      	str	r0, [r4, #8]
 8009b7a:	3268      	adds	r2, #104	; 0x68
 8009b7c:	f7fb fd14 	bl	80055a8 <memset>
 8009b80:	0020      	movs	r0, r4
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <__sfp_lock_acquire>:
 8009b84:	b510      	push	{r4, lr}
 8009b86:	4802      	ldr	r0, [pc, #8]	; (8009b90 <__sfp_lock_acquire+0xc>)
 8009b88:	f000 f8bd 	bl	8009d06 <__retarget_lock_acquire_recursive>
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	200002f9 	.word	0x200002f9

08009b94 <__sfp_lock_release>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	4802      	ldr	r0, [pc, #8]	; (8009ba0 <__sfp_lock_release+0xc>)
 8009b98:	f000 f8b6 	bl	8009d08 <__retarget_lock_release_recursive>
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	200002f9 	.word	0x200002f9

08009ba4 <__sinit_lock_acquire>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4802      	ldr	r0, [pc, #8]	; (8009bb0 <__sinit_lock_acquire+0xc>)
 8009ba8:	f000 f8ad 	bl	8009d06 <__retarget_lock_acquire_recursive>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	200002fa 	.word	0x200002fa

08009bb4 <__sinit_lock_release>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	4802      	ldr	r0, [pc, #8]	; (8009bc0 <__sinit_lock_release+0xc>)
 8009bb8:	f000 f8a6 	bl	8009d08 <__retarget_lock_release_recursive>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	200002fa 	.word	0x200002fa

08009bc4 <__sinit>:
 8009bc4:	b513      	push	{r0, r1, r4, lr}
 8009bc6:	0004      	movs	r4, r0
 8009bc8:	f7ff ffec 	bl	8009ba4 <__sinit_lock_acquire>
 8009bcc:	69a3      	ldr	r3, [r4, #24]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <__sinit+0x14>
 8009bd2:	f7ff ffef 	bl	8009bb4 <__sinit_lock_release>
 8009bd6:	bd13      	pop	{r0, r1, r4, pc}
 8009bd8:	64a3      	str	r3, [r4, #72]	; 0x48
 8009bda:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <__sinit+0x68>)
 8009be0:	4a13      	ldr	r2, [pc, #76]	; (8009c30 <__sinit+0x6c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d101      	bne.n	8009bf0 <__sinit+0x2c>
 8009bec:	2301      	movs	r3, #1
 8009bee:	61a3      	str	r3, [r4, #24]
 8009bf0:	0020      	movs	r0, r4
 8009bf2:	f000 f81f 	bl	8009c34 <__sfp>
 8009bf6:	6060      	str	r0, [r4, #4]
 8009bf8:	0020      	movs	r0, r4
 8009bfa:	f000 f81b 	bl	8009c34 <__sfp>
 8009bfe:	60a0      	str	r0, [r4, #8]
 8009c00:	0020      	movs	r0, r4
 8009c02:	f000 f817 	bl	8009c34 <__sfp>
 8009c06:	2200      	movs	r2, #0
 8009c08:	2104      	movs	r1, #4
 8009c0a:	60e0      	str	r0, [r4, #12]
 8009c0c:	6860      	ldr	r0, [r4, #4]
 8009c0e:	f7ff ff77 	bl	8009b00 <std>
 8009c12:	2201      	movs	r2, #1
 8009c14:	2109      	movs	r1, #9
 8009c16:	68a0      	ldr	r0, [r4, #8]
 8009c18:	f7ff ff72 	bl	8009b00 <std>
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	2112      	movs	r1, #18
 8009c20:	68e0      	ldr	r0, [r4, #12]
 8009c22:	f7ff ff6d 	bl	8009b00 <std>
 8009c26:	2301      	movs	r3, #1
 8009c28:	61a3      	str	r3, [r4, #24]
 8009c2a:	e7d2      	b.n	8009bd2 <__sinit+0xe>
 8009c2c:	0800a15c 	.word	0x0800a15c
 8009c30:	08009b49 	.word	0x08009b49

08009c34 <__sfp>:
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c36:	0007      	movs	r7, r0
 8009c38:	f7ff ffa4 	bl	8009b84 <__sfp_lock_acquire>
 8009c3c:	4b1f      	ldr	r3, [pc, #124]	; (8009cbc <__sfp+0x88>)
 8009c3e:	681e      	ldr	r6, [r3, #0]
 8009c40:	69b3      	ldr	r3, [r6, #24]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <__sfp+0x18>
 8009c46:	0030      	movs	r0, r6
 8009c48:	f7ff ffbc 	bl	8009bc4 <__sinit>
 8009c4c:	3648      	adds	r6, #72	; 0x48
 8009c4e:	68b4      	ldr	r4, [r6, #8]
 8009c50:	6873      	ldr	r3, [r6, #4]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	d504      	bpl.n	8009c60 <__sfp+0x2c>
 8009c56:	6833      	ldr	r3, [r6, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d022      	beq.n	8009ca2 <__sfp+0x6e>
 8009c5c:	6836      	ldr	r6, [r6, #0]
 8009c5e:	e7f6      	b.n	8009c4e <__sfp+0x1a>
 8009c60:	220c      	movs	r2, #12
 8009c62:	5ea5      	ldrsh	r5, [r4, r2]
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	d11a      	bne.n	8009c9e <__sfp+0x6a>
 8009c68:	0020      	movs	r0, r4
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <__sfp+0x8c>)
 8009c6c:	3058      	adds	r0, #88	; 0x58
 8009c6e:	60e3      	str	r3, [r4, #12]
 8009c70:	6665      	str	r5, [r4, #100]	; 0x64
 8009c72:	f000 f847 	bl	8009d04 <__retarget_lock_init_recursive>
 8009c76:	f7ff ff8d 	bl	8009b94 <__sfp_lock_release>
 8009c7a:	0020      	movs	r0, r4
 8009c7c:	2208      	movs	r2, #8
 8009c7e:	0029      	movs	r1, r5
 8009c80:	6025      	str	r5, [r4, #0]
 8009c82:	60a5      	str	r5, [r4, #8]
 8009c84:	6065      	str	r5, [r4, #4]
 8009c86:	6125      	str	r5, [r4, #16]
 8009c88:	6165      	str	r5, [r4, #20]
 8009c8a:	61a5      	str	r5, [r4, #24]
 8009c8c:	305c      	adds	r0, #92	; 0x5c
 8009c8e:	f7fb fc8b 	bl	80055a8 <memset>
 8009c92:	6365      	str	r5, [r4, #52]	; 0x34
 8009c94:	63a5      	str	r5, [r4, #56]	; 0x38
 8009c96:	64a5      	str	r5, [r4, #72]	; 0x48
 8009c98:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009c9a:	0020      	movs	r0, r4
 8009c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9e:	3468      	adds	r4, #104	; 0x68
 8009ca0:	e7d7      	b.n	8009c52 <__sfp+0x1e>
 8009ca2:	2104      	movs	r1, #4
 8009ca4:	0038      	movs	r0, r7
 8009ca6:	f7ff ff57 	bl	8009b58 <__sfmoreglue>
 8009caa:	1e04      	subs	r4, r0, #0
 8009cac:	6030      	str	r0, [r6, #0]
 8009cae:	d1d5      	bne.n	8009c5c <__sfp+0x28>
 8009cb0:	f7ff ff70 	bl	8009b94 <__sfp_lock_release>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	e7ef      	b.n	8009c9a <__sfp+0x66>
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	0800a15c 	.word	0x0800a15c
 8009cc0:	ffff0001 	.word	0xffff0001

08009cc4 <_fwalk_reent>:
 8009cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc6:	0004      	movs	r4, r0
 8009cc8:	0006      	movs	r6, r0
 8009cca:	2700      	movs	r7, #0
 8009ccc:	9101      	str	r1, [sp, #4]
 8009cce:	3448      	adds	r4, #72	; 0x48
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	68a5      	ldr	r5, [r4, #8]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	d504      	bpl.n	8009ce8 <_fwalk_reent+0x24>
 8009cde:	6824      	ldr	r4, [r4, #0]
 8009ce0:	2c00      	cmp	r4, #0
 8009ce2:	d1f5      	bne.n	8009cd0 <_fwalk_reent+0xc>
 8009ce4:	0038      	movs	r0, r7
 8009ce6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ce8:	89ab      	ldrh	r3, [r5, #12]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d908      	bls.n	8009d00 <_fwalk_reent+0x3c>
 8009cee:	220e      	movs	r2, #14
 8009cf0:	5eab      	ldrsh	r3, [r5, r2]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	d004      	beq.n	8009d00 <_fwalk_reent+0x3c>
 8009cf6:	0029      	movs	r1, r5
 8009cf8:	0030      	movs	r0, r6
 8009cfa:	9b01      	ldr	r3, [sp, #4]
 8009cfc:	4798      	blx	r3
 8009cfe:	4307      	orrs	r7, r0
 8009d00:	3568      	adds	r5, #104	; 0x68
 8009d02:	e7e8      	b.n	8009cd6 <_fwalk_reent+0x12>

08009d04 <__retarget_lock_init_recursive>:
 8009d04:	4770      	bx	lr

08009d06 <__retarget_lock_acquire_recursive>:
 8009d06:	4770      	bx	lr

08009d08 <__retarget_lock_release_recursive>:
 8009d08:	4770      	bx	lr
	...

08009d0c <__swhatbuf_r>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	000e      	movs	r6, r1
 8009d10:	001d      	movs	r5, r3
 8009d12:	230e      	movs	r3, #14
 8009d14:	5ec9      	ldrsh	r1, [r1, r3]
 8009d16:	0014      	movs	r4, r2
 8009d18:	b096      	sub	sp, #88	; 0x58
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	da08      	bge.n	8009d30 <__swhatbuf_r+0x24>
 8009d1e:	220c      	movs	r2, #12
 8009d20:	5eb3      	ldrsh	r3, [r6, r2]
 8009d22:	2200      	movs	r2, #0
 8009d24:	602a      	str	r2, [r5, #0]
 8009d26:	061b      	lsls	r3, r3, #24
 8009d28:	d411      	bmi.n	8009d4e <__swhatbuf_r+0x42>
 8009d2a:	2380      	movs	r3, #128	; 0x80
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	e00f      	b.n	8009d50 <__swhatbuf_r+0x44>
 8009d30:	466a      	mov	r2, sp
 8009d32:	f000 f91b 	bl	8009f6c <_fstat_r>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	dbf1      	blt.n	8009d1e <__swhatbuf_r+0x12>
 8009d3a:	23f0      	movs	r3, #240	; 0xf0
 8009d3c:	9901      	ldr	r1, [sp, #4]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	4019      	ands	r1, r3
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <__swhatbuf_r+0x4c>)
 8009d44:	18c9      	adds	r1, r1, r3
 8009d46:	424b      	negs	r3, r1
 8009d48:	4159      	adcs	r1, r3
 8009d4a:	6029      	str	r1, [r5, #0]
 8009d4c:	e7ed      	b.n	8009d2a <__swhatbuf_r+0x1e>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	2000      	movs	r0, #0
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	b016      	add	sp, #88	; 0x58
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	ffffe000 	.word	0xffffe000

08009d5c <__smakebuf_r>:
 8009d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d5e:	2602      	movs	r6, #2
 8009d60:	898b      	ldrh	r3, [r1, #12]
 8009d62:	0005      	movs	r5, r0
 8009d64:	000c      	movs	r4, r1
 8009d66:	4233      	tst	r3, r6
 8009d68:	d006      	beq.n	8009d78 <__smakebuf_r+0x1c>
 8009d6a:	0023      	movs	r3, r4
 8009d6c:	3347      	adds	r3, #71	; 0x47
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	6123      	str	r3, [r4, #16]
 8009d72:	2301      	movs	r3, #1
 8009d74:	6163      	str	r3, [r4, #20]
 8009d76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009d78:	466a      	mov	r2, sp
 8009d7a:	ab01      	add	r3, sp, #4
 8009d7c:	f7ff ffc6 	bl	8009d0c <__swhatbuf_r>
 8009d80:	9900      	ldr	r1, [sp, #0]
 8009d82:	0007      	movs	r7, r0
 8009d84:	0028      	movs	r0, r5
 8009d86:	f7ff f927 	bl	8008fd8 <_malloc_r>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d108      	bne.n	8009da0 <__smakebuf_r+0x44>
 8009d8e:	220c      	movs	r2, #12
 8009d90:	5ea3      	ldrsh	r3, [r4, r2]
 8009d92:	059a      	lsls	r2, r3, #22
 8009d94:	d4ef      	bmi.n	8009d76 <__smakebuf_r+0x1a>
 8009d96:	2203      	movs	r2, #3
 8009d98:	4393      	bics	r3, r2
 8009d9a:	431e      	orrs	r6, r3
 8009d9c:	81a6      	strh	r6, [r4, #12]
 8009d9e:	e7e4      	b.n	8009d6a <__smakebuf_r+0xe>
 8009da0:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <__smakebuf_r+0x84>)
 8009da2:	62ab      	str	r3, [r5, #40]	; 0x28
 8009da4:	2380      	movs	r3, #128	; 0x80
 8009da6:	89a2      	ldrh	r2, [r4, #12]
 8009da8:	6020      	str	r0, [r4, #0]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	6120      	str	r0, [r4, #16]
 8009db2:	6163      	str	r3, [r4, #20]
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00d      	beq.n	8009dd6 <__smakebuf_r+0x7a>
 8009dba:	0028      	movs	r0, r5
 8009dbc:	230e      	movs	r3, #14
 8009dbe:	5ee1      	ldrsh	r1, [r4, r3]
 8009dc0:	f000 f8e6 	bl	8009f90 <_isatty_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d006      	beq.n	8009dd6 <__smakebuf_r+0x7a>
 8009dc8:	2203      	movs	r2, #3
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	4393      	bics	r3, r2
 8009dce:	001a      	movs	r2, r3
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	89a0      	ldrh	r0, [r4, #12]
 8009dd8:	4307      	orrs	r7, r0
 8009dda:	81a7      	strh	r7, [r4, #12]
 8009ddc:	e7cb      	b.n	8009d76 <__smakebuf_r+0x1a>
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	08009b49 	.word	0x08009b49

08009de4 <_malloc_usable_size_r>:
 8009de4:	1f0b      	subs	r3, r1, #4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	1f18      	subs	r0, r3, #4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da01      	bge.n	8009df2 <_malloc_usable_size_r+0xe>
 8009dee:	580b      	ldr	r3, [r1, r0]
 8009df0:	18c0      	adds	r0, r0, r3
 8009df2:	4770      	bx	lr

08009df4 <_raise_r>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	0004      	movs	r4, r0
 8009df8:	000d      	movs	r5, r1
 8009dfa:	291f      	cmp	r1, #31
 8009dfc:	d904      	bls.n	8009e08 <_raise_r+0x14>
 8009dfe:	2316      	movs	r3, #22
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	2001      	movs	r0, #1
 8009e04:	4240      	negs	r0, r0
 8009e06:	bd70      	pop	{r4, r5, r6, pc}
 8009e08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <_raise_r+0x24>
 8009e0e:	008a      	lsls	r2, r1, #2
 8009e10:	189b      	adds	r3, r3, r2
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	d108      	bne.n	8009e2a <_raise_r+0x36>
 8009e18:	0020      	movs	r0, r4
 8009e1a:	f000 f831 	bl	8009e80 <_getpid_r>
 8009e1e:	002a      	movs	r2, r5
 8009e20:	0001      	movs	r1, r0
 8009e22:	0020      	movs	r0, r4
 8009e24:	f000 f81a 	bl	8009e5c <_kill_r>
 8009e28:	e7ed      	b.n	8009e06 <_raise_r+0x12>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	2a01      	cmp	r2, #1
 8009e2e:	d0ea      	beq.n	8009e06 <_raise_r+0x12>
 8009e30:	1c51      	adds	r1, r2, #1
 8009e32:	d103      	bne.n	8009e3c <_raise_r+0x48>
 8009e34:	2316      	movs	r3, #22
 8009e36:	3001      	adds	r0, #1
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	e7e4      	b.n	8009e06 <_raise_r+0x12>
 8009e3c:	2400      	movs	r4, #0
 8009e3e:	0028      	movs	r0, r5
 8009e40:	601c      	str	r4, [r3, #0]
 8009e42:	4790      	blx	r2
 8009e44:	0020      	movs	r0, r4
 8009e46:	e7de      	b.n	8009e06 <_raise_r+0x12>

08009e48 <raise>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <raise+0x10>)
 8009e4c:	0001      	movs	r1, r0
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	f7ff ffd0 	bl	8009df4 <_raise_r>
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	2000000c 	.word	0x2000000c

08009e5c <_kill_r>:
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	b570      	push	{r4, r5, r6, lr}
 8009e60:	4d06      	ldr	r5, [pc, #24]	; (8009e7c <_kill_r+0x20>)
 8009e62:	0004      	movs	r4, r0
 8009e64:	0008      	movs	r0, r1
 8009e66:	0011      	movs	r1, r2
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	f7f8 fe20 	bl	8002aae <_kill>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d103      	bne.n	8009e7a <_kill_r+0x1e>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d000      	beq.n	8009e7a <_kill_r+0x1e>
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	200002f4 	.word	0x200002f4

08009e80 <_getpid_r>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	f7f8 fe0e 	bl	8002aa2 <_getpid>
 8009e86:	bd10      	pop	{r4, pc}

08009e88 <__sread>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	000c      	movs	r4, r1
 8009e8c:	250e      	movs	r5, #14
 8009e8e:	5f49      	ldrsh	r1, [r1, r5]
 8009e90:	f000 f8a4 	bl	8009fdc <_read_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	db03      	blt.n	8009ea0 <__sread+0x18>
 8009e98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009e9a:	181b      	adds	r3, r3, r0
 8009e9c:	6563      	str	r3, [r4, #84]	; 0x54
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	4a02      	ldr	r2, [pc, #8]	; (8009eac <__sread+0x24>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	e7f9      	b.n	8009e9e <__sread+0x16>
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	ffffefff 	.word	0xffffefff

08009eb0 <__swrite>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	001f      	movs	r7, r3
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	0005      	movs	r5, r0
 8009eb8:	000c      	movs	r4, r1
 8009eba:	0016      	movs	r6, r2
 8009ebc:	05db      	lsls	r3, r3, #23
 8009ebe:	d505      	bpl.n	8009ecc <__swrite+0x1c>
 8009ec0:	230e      	movs	r3, #14
 8009ec2:	5ec9      	ldrsh	r1, [r1, r3]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	f000 f874 	bl	8009fb4 <_lseek_r>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	4a05      	ldr	r2, [pc, #20]	; (8009ee4 <__swrite+0x34>)
 8009ed0:	0028      	movs	r0, r5
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	0032      	movs	r2, r6
 8009ed8:	230e      	movs	r3, #14
 8009eda:	5ee1      	ldrsh	r1, [r4, r3]
 8009edc:	003b      	movs	r3, r7
 8009ede:	f000 f81f 	bl	8009f20 <_write_r>
 8009ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee4:	ffffefff 	.word	0xffffefff

08009ee8 <__sseek>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	000c      	movs	r4, r1
 8009eec:	250e      	movs	r5, #14
 8009eee:	5f49      	ldrsh	r1, [r1, r5]
 8009ef0:	f000 f860 	bl	8009fb4 <_lseek_r>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	1c42      	adds	r2, r0, #1
 8009ef8:	d103      	bne.n	8009f02 <__sseek+0x1a>
 8009efa:	4a05      	ldr	r2, [pc, #20]	; (8009f10 <__sseek+0x28>)
 8009efc:	4013      	ands	r3, r2
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	bd70      	pop	{r4, r5, r6, pc}
 8009f02:	2280      	movs	r2, #128	; 0x80
 8009f04:	0152      	lsls	r2, r2, #5
 8009f06:	4313      	orrs	r3, r2
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f0c:	e7f8      	b.n	8009f00 <__sseek+0x18>
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	ffffefff 	.word	0xffffefff

08009f14 <__sclose>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	230e      	movs	r3, #14
 8009f18:	5ec9      	ldrsh	r1, [r1, r3]
 8009f1a:	f000 f815 	bl	8009f48 <_close_r>
 8009f1e:	bd10      	pop	{r4, pc}

08009f20 <_write_r>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	0004      	movs	r4, r0
 8009f24:	0008      	movs	r0, r1
 8009f26:	0011      	movs	r1, r2
 8009f28:	001a      	movs	r2, r3
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4d05      	ldr	r5, [pc, #20]	; (8009f44 <_write_r+0x24>)
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	f7f8 fdf6 	bl	8002b20 <_write>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d103      	bne.n	8009f40 <_write_r+0x20>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d000      	beq.n	8009f40 <_write_r+0x20>
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	200002f4 	.word	0x200002f4

08009f48 <_close_r>:
 8009f48:	2300      	movs	r3, #0
 8009f4a:	b570      	push	{r4, r5, r6, lr}
 8009f4c:	4d06      	ldr	r5, [pc, #24]	; (8009f68 <_close_r+0x20>)
 8009f4e:	0004      	movs	r4, r0
 8009f50:	0008      	movs	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f7f8 fe00 	bl	8002b58 <_close>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d103      	bne.n	8009f64 <_close_r+0x1c>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d000      	beq.n	8009f64 <_close_r+0x1c>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	200002f4 	.word	0x200002f4

08009f6c <_fstat_r>:
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	4d06      	ldr	r5, [pc, #24]	; (8009f8c <_fstat_r+0x20>)
 8009f72:	0004      	movs	r4, r0
 8009f74:	0008      	movs	r0, r1
 8009f76:	0011      	movs	r1, r2
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	f7f8 fdf7 	bl	8002b6c <_fstat>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d103      	bne.n	8009f8a <_fstat_r+0x1e>
 8009f82:	682b      	ldr	r3, [r5, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d000      	beq.n	8009f8a <_fstat_r+0x1e>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	200002f4 	.word	0x200002f4

08009f90 <_isatty_r>:
 8009f90:	2300      	movs	r3, #0
 8009f92:	b570      	push	{r4, r5, r6, lr}
 8009f94:	4d06      	ldr	r5, [pc, #24]	; (8009fb0 <_isatty_r+0x20>)
 8009f96:	0004      	movs	r4, r0
 8009f98:	0008      	movs	r0, r1
 8009f9a:	602b      	str	r3, [r5, #0]
 8009f9c:	f7f8 fdf4 	bl	8002b88 <_isatty>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d103      	bne.n	8009fac <_isatty_r+0x1c>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d000      	beq.n	8009fac <_isatty_r+0x1c>
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	200002f4 	.word	0x200002f4

08009fb4 <_lseek_r>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	0004      	movs	r4, r0
 8009fb8:	0008      	movs	r0, r1
 8009fba:	0011      	movs	r1, r2
 8009fbc:	001a      	movs	r2, r3
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	4d05      	ldr	r5, [pc, #20]	; (8009fd8 <_lseek_r+0x24>)
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	f7f8 fde9 	bl	8002b9a <_lseek>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d103      	bne.n	8009fd4 <_lseek_r+0x20>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d000      	beq.n	8009fd4 <_lseek_r+0x20>
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	200002f4 	.word	0x200002f4

08009fdc <_read_r>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	0004      	movs	r4, r0
 8009fe0:	0008      	movs	r0, r1
 8009fe2:	0011      	movs	r1, r2
 8009fe4:	001a      	movs	r2, r3
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4d05      	ldr	r5, [pc, #20]	; (800a000 <_read_r+0x24>)
 8009fea:	602b      	str	r3, [r5, #0]
 8009fec:	f7f8 fd7b 	bl	8002ae6 <_read>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d103      	bne.n	8009ffc <_read_r+0x20>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d000      	beq.n	8009ffc <_read_r+0x20>
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	bd70      	pop	{r4, r5, r6, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	200002f4 	.word	0x200002f4

0800a004 <_init>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr

0800a010 <_fini>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr
