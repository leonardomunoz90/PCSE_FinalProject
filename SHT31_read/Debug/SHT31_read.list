
SHT31_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa30  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800aaf0  0800aaf0  0001aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b194  0800b194  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b194  0800b194  0001b194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b19c  0800b19c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1a0  0800b1a0  0001b1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e0  0800b384  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  0800b384  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee8d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002670  00000000  00000000  0002f095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00031708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001784a  00000000  00000000  00032e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011313  00000000  00000000  0004a6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d449  00000000  00000000  0005b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  000e8e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800aad4 	.word	0x0800aad4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800aad4 	.word	0x0800aad4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fc97 	bl	8001d6c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fbe7 	bl	8001c1c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fc89 	bl	8001d6c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7f 	bl	8001d6c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc0f 	bl	8001ca0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc05 	bl	8001ca0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f002 fab7 	bl	8002a6c <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 ff00 	bl	800230c <__aeabi_dsub>
 800050c:	f002 faae 	bl	8002a6c <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 fc65 	bl	8001e34 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f002 fae2 	bl	8002b38 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 fc5c 	bl	8001e34 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fec2 	bl	800230c <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f002 fa9b 	bl	8002ad8 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 fc45 	bl	8001e34 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f002 fac2 	bl	8002b38 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 fcfe 	bl	8000fb8 <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f002 fbbc 	bl	8002d60 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f002 fbb7 	bl	8002d60 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	469b      	mov	fp, r3
 80005fa:	d433      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fc:	465a      	mov	r2, fp
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83a      	bhi.n	8000686 <__udivmoddi4+0xc2>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e078      	b.n	8000708 <__udivmoddi4+0x144>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e075      	b.n	800070e <__udivmoddi4+0x14a>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e028      	b.n	800068e <__udivmoddi4+0xca>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	4652      	mov	r2, sl
 800066c:	40da      	lsrs	r2, r3
 800066e:	4641      	mov	r1, r8
 8000670:	0013      	movs	r3, r2
 8000672:	464a      	mov	r2, r9
 8000674:	408a      	lsls	r2, r1
 8000676:	0017      	movs	r7, r2
 8000678:	4642      	mov	r2, r8
 800067a:	431f      	orrs	r7, r3
 800067c:	4653      	mov	r3, sl
 800067e:	4093      	lsls	r3, r2
 8000680:	001e      	movs	r6, r3
 8000682:	42af      	cmp	r7, r5
 8000684:	d9c4      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4643      	mov	r3, r8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0d9      	beq.n	8000648 <__udivmoddi4+0x84>
 8000694:	07fb      	lsls	r3, r7, #31
 8000696:	0872      	lsrs	r2, r6, #1
 8000698:	431a      	orrs	r2, r3
 800069a:	4646      	mov	r6, r8
 800069c:	087b      	lsrs	r3, r7, #1
 800069e:	e00e      	b.n	80006be <__udivmoddi4+0xfa>
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d101      	bne.n	80006a8 <__udivmoddi4+0xe4>
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	d80c      	bhi.n	80006c2 <__udivmoddi4+0xfe>
 80006a8:	1aa4      	subs	r4, r4, r2
 80006aa:	419d      	sbcs	r5, r3
 80006ac:	2001      	movs	r0, #1
 80006ae:	1924      	adds	r4, r4, r4
 80006b0:	416d      	adcs	r5, r5
 80006b2:	2100      	movs	r1, #0
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1824      	adds	r4, r4, r0
 80006b8:	414d      	adcs	r5, r1
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d006      	beq.n	80006cc <__udivmoddi4+0x108>
 80006be:	42ab      	cmp	r3, r5
 80006c0:	d9ee      	bls.n	80006a0 <__udivmoddi4+0xdc>
 80006c2:	3e01      	subs	r6, #1
 80006c4:	1924      	adds	r4, r4, r4
 80006c6:	416d      	adcs	r5, r5
 80006c8:	2e00      	cmp	r6, #0
 80006ca:	d1f8      	bne.n	80006be <__udivmoddi4+0xfa>
 80006cc:	9800      	ldr	r0, [sp, #0]
 80006ce:	9901      	ldr	r1, [sp, #4]
 80006d0:	465b      	mov	r3, fp
 80006d2:	1900      	adds	r0, r0, r4
 80006d4:	4169      	adcs	r1, r5
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db24      	blt.n	8000724 <__udivmoddi4+0x160>
 80006da:	002b      	movs	r3, r5
 80006dc:	465a      	mov	r2, fp
 80006de:	4644      	mov	r4, r8
 80006e0:	40d3      	lsrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db2a      	blt.n	8000746 <__udivmoddi4+0x182>
 80006f0:	0026      	movs	r6, r4
 80006f2:	409e      	lsls	r6, r3
 80006f4:	0033      	movs	r3, r6
 80006f6:	0026      	movs	r6, r4
 80006f8:	4647      	mov	r7, r8
 80006fa:	40be      	lsls	r6, r7
 80006fc:	0032      	movs	r2, r6
 80006fe:	1a80      	subs	r0, r0, r2
 8000700:	4199      	sbcs	r1, r3
 8000702:	9000      	str	r0, [sp, #0]
 8000704:	9101      	str	r1, [sp, #4]
 8000706:	e79f      	b.n	8000648 <__udivmoddi4+0x84>
 8000708:	42a3      	cmp	r3, r4
 800070a:	d8bc      	bhi.n	8000686 <__udivmoddi4+0xc2>
 800070c:	e783      	b.n	8000616 <__udivmoddi4+0x52>
 800070e:	4642      	mov	r2, r8
 8000710:	2320      	movs	r3, #32
 8000712:	2100      	movs	r1, #0
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	9100      	str	r1, [sp, #0]
 800071a:	9201      	str	r2, [sp, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	40da      	lsrs	r2, r3
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	e786      	b.n	8000632 <__udivmoddi4+0x6e>
 8000724:	4642      	mov	r2, r8
 8000726:	2320      	movs	r3, #32
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	4646      	mov	r6, r8
 800072e:	409a      	lsls	r2, r3
 8000730:	0023      	movs	r3, r4
 8000732:	40f3      	lsrs	r3, r6
 8000734:	4644      	mov	r4, r8
 8000736:	4313      	orrs	r3, r2
 8000738:	002a      	movs	r2, r5
 800073a:	40e2      	lsrs	r2, r4
 800073c:	001c      	movs	r4, r3
 800073e:	465b      	mov	r3, fp
 8000740:	0015      	movs	r5, r2
 8000742:	2b00      	cmp	r3, #0
 8000744:	dad4      	bge.n	80006f0 <__udivmoddi4+0x12c>
 8000746:	4642      	mov	r2, r8
 8000748:	002f      	movs	r7, r5
 800074a:	2320      	movs	r3, #32
 800074c:	0026      	movs	r6, r4
 800074e:	4097      	lsls	r7, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	40de      	lsrs	r6, r3
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7cd      	b.n	80006f6 <__udivmoddi4+0x132>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_fdiv>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0245      	lsls	r5, r0, #9
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	0047      	lsls	r7, r0, #1
 800076a:	1c0c      	adds	r4, r1, #0
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	0e3f      	lsrs	r7, r7, #24
 8000770:	0fc6      	lsrs	r6, r0, #31
 8000772:	2f00      	cmp	r7, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fdiv+0x1c>
 8000776:	e070      	b.n	800085a <__aeabi_fdiv+0xfe>
 8000778:	2fff      	cmp	r7, #255	; 0xff
 800077a:	d100      	bne.n	800077e <__aeabi_fdiv+0x22>
 800077c:	e075      	b.n	800086a <__aeabi_fdiv+0x10e>
 800077e:	00eb      	lsls	r3, r5, #3
 8000780:	2580      	movs	r5, #128	; 0x80
 8000782:	04ed      	lsls	r5, r5, #19
 8000784:	431d      	orrs	r5, r3
 8000786:	2300      	movs	r3, #0
 8000788:	4699      	mov	r9, r3
 800078a:	469a      	mov	sl, r3
 800078c:	3f7f      	subs	r7, #127	; 0x7f
 800078e:	0260      	lsls	r0, r4, #9
 8000790:	0a43      	lsrs	r3, r0, #9
 8000792:	4698      	mov	r8, r3
 8000794:	0063      	lsls	r3, r4, #1
 8000796:	0e1b      	lsrs	r3, r3, #24
 8000798:	0fe4      	lsrs	r4, r4, #31
 800079a:	2b00      	cmp	r3, #0
 800079c:	d04e      	beq.n	800083c <__aeabi_fdiv+0xe0>
 800079e:	2bff      	cmp	r3, #255	; 0xff
 80007a0:	d046      	beq.n	8000830 <__aeabi_fdiv+0xd4>
 80007a2:	4642      	mov	r2, r8
 80007a4:	00d0      	lsls	r0, r2, #3
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	04d2      	lsls	r2, r2, #19
 80007aa:	4302      	orrs	r2, r0
 80007ac:	4690      	mov	r8, r2
 80007ae:	2200      	movs	r2, #0
 80007b0:	3b7f      	subs	r3, #127	; 0x7f
 80007b2:	0031      	movs	r1, r6
 80007b4:	1aff      	subs	r7, r7, r3
 80007b6:	464b      	mov	r3, r9
 80007b8:	4061      	eors	r1, r4
 80007ba:	b2c9      	uxtb	r1, r1
 80007bc:	4313      	orrs	r3, r2
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d900      	bls.n	80007c4 <__aeabi_fdiv+0x68>
 80007c2:	e0b5      	b.n	8000930 <__aeabi_fdiv+0x1d4>
 80007c4:	486e      	ldr	r0, [pc, #440]	; (8000980 <__aeabi_fdiv+0x224>)
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	58c3      	ldr	r3, [r0, r3]
 80007ca:	469f      	mov	pc, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	4698      	mov	r8, r3
 80007d0:	0026      	movs	r6, r4
 80007d2:	4645      	mov	r5, r8
 80007d4:	4692      	mov	sl, r2
 80007d6:	4653      	mov	r3, sl
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x82>
 80007dc:	e089      	b.n	80008f2 <__aeabi_fdiv+0x196>
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fdiv+0x88>
 80007e2:	e09e      	b.n	8000922 <__aeabi_fdiv+0x1c6>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d018      	beq.n	800081a <__aeabi_fdiv+0xbe>
 80007e8:	003b      	movs	r3, r7
 80007ea:	337f      	adds	r3, #127	; 0x7f
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd69      	ble.n	80008c4 <__aeabi_fdiv+0x168>
 80007f0:	076a      	lsls	r2, r5, #29
 80007f2:	d004      	beq.n	80007fe <__aeabi_fdiv+0xa2>
 80007f4:	220f      	movs	r2, #15
 80007f6:	402a      	ands	r2, r5
 80007f8:	2a04      	cmp	r2, #4
 80007fa:	d000      	beq.n	80007fe <__aeabi_fdiv+0xa2>
 80007fc:	3504      	adds	r5, #4
 80007fe:	012a      	lsls	r2, r5, #4
 8000800:	d503      	bpl.n	800080a <__aeabi_fdiv+0xae>
 8000802:	4b60      	ldr	r3, [pc, #384]	; (8000984 <__aeabi_fdiv+0x228>)
 8000804:	401d      	ands	r5, r3
 8000806:	003b      	movs	r3, r7
 8000808:	3380      	adds	r3, #128	; 0x80
 800080a:	2bfe      	cmp	r3, #254	; 0xfe
 800080c:	dd00      	ble.n	8000810 <__aeabi_fdiv+0xb4>
 800080e:	e070      	b.n	80008f2 <__aeabi_fdiv+0x196>
 8000810:	01ad      	lsls	r5, r5, #6
 8000812:	0a6d      	lsrs	r5, r5, #9
 8000814:	b2d8      	uxtb	r0, r3
 8000816:	e002      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000818:	000e      	movs	r6, r1
 800081a:	2000      	movs	r0, #0
 800081c:	2500      	movs	r5, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	4328      	orrs	r0, r5
 8000822:	07f6      	lsls	r6, r6, #31
 8000824:	4330      	orrs	r0, r6
 8000826:	bce0      	pop	{r5, r6, r7}
 8000828:	46ba      	mov	sl, r7
 800082a:	46b1      	mov	r9, r6
 800082c:	46a8      	mov	r8, r5
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000830:	4643      	mov	r3, r8
 8000832:	2b00      	cmp	r3, #0
 8000834:	d13f      	bne.n	80008b6 <__aeabi_fdiv+0x15a>
 8000836:	2202      	movs	r2, #2
 8000838:	3fff      	subs	r7, #255	; 0xff
 800083a:	e003      	b.n	8000844 <__aeabi_fdiv+0xe8>
 800083c:	4643      	mov	r3, r8
 800083e:	2b00      	cmp	r3, #0
 8000840:	d12d      	bne.n	800089e <__aeabi_fdiv+0x142>
 8000842:	2201      	movs	r2, #1
 8000844:	0031      	movs	r1, r6
 8000846:	464b      	mov	r3, r9
 8000848:	4061      	eors	r1, r4
 800084a:	b2c9      	uxtb	r1, r1
 800084c:	4313      	orrs	r3, r2
 800084e:	2b0f      	cmp	r3, #15
 8000850:	d834      	bhi.n	80008bc <__aeabi_fdiv+0x160>
 8000852:	484d      	ldr	r0, [pc, #308]	; (8000988 <__aeabi_fdiv+0x22c>)
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	58c3      	ldr	r3, [r0, r3]
 8000858:	469f      	mov	pc, r3
 800085a:	2d00      	cmp	r5, #0
 800085c:	d113      	bne.n	8000886 <__aeabi_fdiv+0x12a>
 800085e:	2304      	movs	r3, #4
 8000860:	4699      	mov	r9, r3
 8000862:	3b03      	subs	r3, #3
 8000864:	2700      	movs	r7, #0
 8000866:	469a      	mov	sl, r3
 8000868:	e791      	b.n	800078e <__aeabi_fdiv+0x32>
 800086a:	2d00      	cmp	r5, #0
 800086c:	d105      	bne.n	800087a <__aeabi_fdiv+0x11e>
 800086e:	2308      	movs	r3, #8
 8000870:	4699      	mov	r9, r3
 8000872:	3b06      	subs	r3, #6
 8000874:	27ff      	movs	r7, #255	; 0xff
 8000876:	469a      	mov	sl, r3
 8000878:	e789      	b.n	800078e <__aeabi_fdiv+0x32>
 800087a:	230c      	movs	r3, #12
 800087c:	4699      	mov	r9, r3
 800087e:	3b09      	subs	r3, #9
 8000880:	27ff      	movs	r7, #255	; 0xff
 8000882:	469a      	mov	sl, r3
 8000884:	e783      	b.n	800078e <__aeabi_fdiv+0x32>
 8000886:	0028      	movs	r0, r5
 8000888:	f002 fa4c 	bl	8002d24 <__clzsi2>
 800088c:	2776      	movs	r7, #118	; 0x76
 800088e:	1f43      	subs	r3, r0, #5
 8000890:	409d      	lsls	r5, r3
 8000892:	2300      	movs	r3, #0
 8000894:	427f      	negs	r7, r7
 8000896:	4699      	mov	r9, r3
 8000898:	469a      	mov	sl, r3
 800089a:	1a3f      	subs	r7, r7, r0
 800089c:	e777      	b.n	800078e <__aeabi_fdiv+0x32>
 800089e:	4640      	mov	r0, r8
 80008a0:	f002 fa40 	bl	8002d24 <__clzsi2>
 80008a4:	4642      	mov	r2, r8
 80008a6:	1f43      	subs	r3, r0, #5
 80008a8:	409a      	lsls	r2, r3
 80008aa:	2376      	movs	r3, #118	; 0x76
 80008ac:	425b      	negs	r3, r3
 80008ae:	4690      	mov	r8, r2
 80008b0:	1a1b      	subs	r3, r3, r0
 80008b2:	2200      	movs	r2, #0
 80008b4:	e77d      	b.n	80007b2 <__aeabi_fdiv+0x56>
 80008b6:	23ff      	movs	r3, #255	; 0xff
 80008b8:	2203      	movs	r2, #3
 80008ba:	e77a      	b.n	80007b2 <__aeabi_fdiv+0x56>
 80008bc:	000e      	movs	r6, r1
 80008be:	20ff      	movs	r0, #255	; 0xff
 80008c0:	2500      	movs	r5, #0
 80008c2:	e7ac      	b.n	800081e <__aeabi_fdiv+0xc2>
 80008c4:	2001      	movs	r0, #1
 80008c6:	1ac0      	subs	r0, r0, r3
 80008c8:	281b      	cmp	r0, #27
 80008ca:	dca6      	bgt.n	800081a <__aeabi_fdiv+0xbe>
 80008cc:	379e      	adds	r7, #158	; 0x9e
 80008ce:	002a      	movs	r2, r5
 80008d0:	40bd      	lsls	r5, r7
 80008d2:	40c2      	lsrs	r2, r0
 80008d4:	1e6b      	subs	r3, r5, #1
 80008d6:	419d      	sbcs	r5, r3
 80008d8:	4315      	orrs	r5, r2
 80008da:	076b      	lsls	r3, r5, #29
 80008dc:	d004      	beq.n	80008e8 <__aeabi_fdiv+0x18c>
 80008de:	230f      	movs	r3, #15
 80008e0:	402b      	ands	r3, r5
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fdiv+0x18c>
 80008e6:	3504      	adds	r5, #4
 80008e8:	016b      	lsls	r3, r5, #5
 80008ea:	d544      	bpl.n	8000976 <__aeabi_fdiv+0x21a>
 80008ec:	2001      	movs	r0, #1
 80008ee:	2500      	movs	r5, #0
 80008f0:	e795      	b.n	800081e <__aeabi_fdiv+0xc2>
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	2500      	movs	r5, #0
 80008f6:	e792      	b.n	800081e <__aeabi_fdiv+0xc2>
 80008f8:	2580      	movs	r5, #128	; 0x80
 80008fa:	2600      	movs	r6, #0
 80008fc:	20ff      	movs	r0, #255	; 0xff
 80008fe:	03ed      	lsls	r5, r5, #15
 8000900:	e78d      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000902:	2300      	movs	r3, #0
 8000904:	4698      	mov	r8, r3
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	03c0      	lsls	r0, r0, #15
 800090a:	4205      	tst	r5, r0
 800090c:	d009      	beq.n	8000922 <__aeabi_fdiv+0x1c6>
 800090e:	4643      	mov	r3, r8
 8000910:	4203      	tst	r3, r0
 8000912:	d106      	bne.n	8000922 <__aeabi_fdiv+0x1c6>
 8000914:	4645      	mov	r5, r8
 8000916:	4305      	orrs	r5, r0
 8000918:	026d      	lsls	r5, r5, #9
 800091a:	0026      	movs	r6, r4
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	0a6d      	lsrs	r5, r5, #9
 8000920:	e77d      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000922:	2080      	movs	r0, #128	; 0x80
 8000924:	03c0      	lsls	r0, r0, #15
 8000926:	4305      	orrs	r5, r0
 8000928:	026d      	lsls	r5, r5, #9
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a6d      	lsrs	r5, r5, #9
 800092e:	e776      	b.n	800081e <__aeabi_fdiv+0xc2>
 8000930:	4642      	mov	r2, r8
 8000932:	016b      	lsls	r3, r5, #5
 8000934:	0150      	lsls	r0, r2, #5
 8000936:	4283      	cmp	r3, r0
 8000938:	d219      	bcs.n	800096e <__aeabi_fdiv+0x212>
 800093a:	221b      	movs	r2, #27
 800093c:	2500      	movs	r5, #0
 800093e:	3f01      	subs	r7, #1
 8000940:	2601      	movs	r6, #1
 8000942:	001c      	movs	r4, r3
 8000944:	006d      	lsls	r5, r5, #1
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2c00      	cmp	r4, #0
 800094a:	db01      	blt.n	8000950 <__aeabi_fdiv+0x1f4>
 800094c:	4298      	cmp	r0, r3
 800094e:	d801      	bhi.n	8000954 <__aeabi_fdiv+0x1f8>
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	4335      	orrs	r5, r6
 8000954:	3a01      	subs	r2, #1
 8000956:	2a00      	cmp	r2, #0
 8000958:	d1f3      	bne.n	8000942 <__aeabi_fdiv+0x1e6>
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4193      	sbcs	r3, r2
 800095e:	431d      	orrs	r5, r3
 8000960:	003b      	movs	r3, r7
 8000962:	337f      	adds	r3, #127	; 0x7f
 8000964:	000e      	movs	r6, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	dd00      	ble.n	800096c <__aeabi_fdiv+0x210>
 800096a:	e741      	b.n	80007f0 <__aeabi_fdiv+0x94>
 800096c:	e7aa      	b.n	80008c4 <__aeabi_fdiv+0x168>
 800096e:	221a      	movs	r2, #26
 8000970:	2501      	movs	r5, #1
 8000972:	1a1b      	subs	r3, r3, r0
 8000974:	e7e4      	b.n	8000940 <__aeabi_fdiv+0x1e4>
 8000976:	01ad      	lsls	r5, r5, #6
 8000978:	2000      	movs	r0, #0
 800097a:	0a6d      	lsrs	r5, r5, #9
 800097c:	e74f      	b.n	800081e <__aeabi_fdiv+0xc2>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0800ab24 	.word	0x0800ab24
 8000984:	f7ffffff 	.word	0xf7ffffff
 8000988:	0800ab64 	.word	0x0800ab64

0800098c <__aeabi_fmul>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	464f      	mov	r7, r9
 8000990:	4646      	mov	r6, r8
 8000992:	46d6      	mov	lr, sl
 8000994:	0244      	lsls	r4, r0, #9
 8000996:	0045      	lsls	r5, r0, #1
 8000998:	b5c0      	push	{r6, r7, lr}
 800099a:	0a64      	lsrs	r4, r4, #9
 800099c:	1c0f      	adds	r7, r1, #0
 800099e:	0e2d      	lsrs	r5, r5, #24
 80009a0:	0fc6      	lsrs	r6, r0, #31
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fmul+0x1c>
 80009a6:	e08d      	b.n	8000ac4 <__aeabi_fmul+0x138>
 80009a8:	2dff      	cmp	r5, #255	; 0xff
 80009aa:	d100      	bne.n	80009ae <__aeabi_fmul+0x22>
 80009ac:	e092      	b.n	8000ad4 <__aeabi_fmul+0x148>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	4699      	mov	r9, r3
 80009b4:	469a      	mov	sl, r3
 80009b6:	00e4      	lsls	r4, r4, #3
 80009b8:	04c0      	lsls	r0, r0, #19
 80009ba:	4304      	orrs	r4, r0
 80009bc:	3d7f      	subs	r5, #127	; 0x7f
 80009be:	0278      	lsls	r0, r7, #9
 80009c0:	0a43      	lsrs	r3, r0, #9
 80009c2:	4698      	mov	r8, r3
 80009c4:	007b      	lsls	r3, r7, #1
 80009c6:	0e1b      	lsrs	r3, r3, #24
 80009c8:	0fff      	lsrs	r7, r7, #31
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fmul+0x44>
 80009ce:	e070      	b.n	8000ab2 <__aeabi_fmul+0x126>
 80009d0:	2bff      	cmp	r3, #255	; 0xff
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fmul+0x4a>
 80009d4:	e086      	b.n	8000ae4 <__aeabi_fmul+0x158>
 80009d6:	4642      	mov	r2, r8
 80009d8:	00d0      	lsls	r0, r2, #3
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	3b7f      	subs	r3, #127	; 0x7f
 80009de:	18ed      	adds	r5, r5, r3
 80009e0:	2300      	movs	r3, #0
 80009e2:	04d2      	lsls	r2, r2, #19
 80009e4:	4302      	orrs	r2, r0
 80009e6:	4690      	mov	r8, r2
 80009e8:	469c      	mov	ip, r3
 80009ea:	0031      	movs	r1, r6
 80009ec:	464b      	mov	r3, r9
 80009ee:	4079      	eors	r1, r7
 80009f0:	1c68      	adds	r0, r5, #1
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d81c      	bhi.n	8000a30 <__aeabi_fmul+0xa4>
 80009f6:	4a76      	ldr	r2, [pc, #472]	; (8000bd0 <__aeabi_fmul+0x244>)
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	58d3      	ldr	r3, [r2, r3]
 80009fc:	469f      	mov	pc, r3
 80009fe:	0039      	movs	r1, r7
 8000a00:	4644      	mov	r4, r8
 8000a02:	46e2      	mov	sl, ip
 8000a04:	4653      	mov	r3, sl
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d00f      	beq.n	8000a2a <__aeabi_fmul+0x9e>
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x84>
 8000a0e:	e0d7      	b.n	8000bc0 <__aeabi_fmul+0x234>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d137      	bne.n	8000a84 <__aeabi_fmul+0xf8>
 8000a14:	2000      	movs	r0, #0
 8000a16:	2400      	movs	r4, #0
 8000a18:	05c0      	lsls	r0, r0, #23
 8000a1a:	4320      	orrs	r0, r4
 8000a1c:	07c9      	lsls	r1, r1, #31
 8000a1e:	4308      	orrs	r0, r1
 8000a20:	bce0      	pop	{r5, r6, r7}
 8000a22:	46ba      	mov	sl, r7
 8000a24:	46b1      	mov	r9, r6
 8000a26:	46a8      	mov	r8, r5
 8000a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2a:	20ff      	movs	r0, #255	; 0xff
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	e7f3      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000a30:	0c26      	lsrs	r6, r4, #16
 8000a32:	0424      	lsls	r4, r4, #16
 8000a34:	0c22      	lsrs	r2, r4, #16
 8000a36:	4644      	mov	r4, r8
 8000a38:	0424      	lsls	r4, r4, #16
 8000a3a:	0c24      	lsrs	r4, r4, #16
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	0027      	movs	r7, r4
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	4357      	muls	r7, r2
 8000a44:	4374      	muls	r4, r6
 8000a46:	435a      	muls	r2, r3
 8000a48:	435e      	muls	r6, r3
 8000a4a:	1912      	adds	r2, r2, r4
 8000a4c:	0c3b      	lsrs	r3, r7, #16
 8000a4e:	189b      	adds	r3, r3, r2
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d903      	bls.n	8000a5c <__aeabi_fmul+0xd0>
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0252      	lsls	r2, r2, #9
 8000a58:	4694      	mov	ip, r2
 8000a5a:	4466      	add	r6, ip
 8000a5c:	043f      	lsls	r7, r7, #16
 8000a5e:	041a      	lsls	r2, r3, #16
 8000a60:	0c3f      	lsrs	r7, r7, #16
 8000a62:	19d2      	adds	r2, r2, r7
 8000a64:	0194      	lsls	r4, r2, #6
 8000a66:	1e67      	subs	r7, r4, #1
 8000a68:	41bc      	sbcs	r4, r7
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	0e92      	lsrs	r2, r2, #26
 8000a6e:	199b      	adds	r3, r3, r6
 8000a70:	4314      	orrs	r4, r2
 8000a72:	019b      	lsls	r3, r3, #6
 8000a74:	431c      	orrs	r4, r3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	d400      	bmi.n	8000a7c <__aeabi_fmul+0xf0>
 8000a7a:	e09b      	b.n	8000bb4 <__aeabi_fmul+0x228>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	0862      	lsrs	r2, r4, #1
 8000a80:	401c      	ands	r4, r3
 8000a82:	4314      	orrs	r4, r2
 8000a84:	0002      	movs	r2, r0
 8000a86:	327f      	adds	r2, #127	; 0x7f
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	dd64      	ble.n	8000b56 <__aeabi_fmul+0x1ca>
 8000a8c:	0763      	lsls	r3, r4, #29
 8000a8e:	d004      	beq.n	8000a9a <__aeabi_fmul+0x10e>
 8000a90:	230f      	movs	r3, #15
 8000a92:	4023      	ands	r3, r4
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d000      	beq.n	8000a9a <__aeabi_fmul+0x10e>
 8000a98:	3404      	adds	r4, #4
 8000a9a:	0123      	lsls	r3, r4, #4
 8000a9c:	d503      	bpl.n	8000aa6 <__aeabi_fmul+0x11a>
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <__aeabi_fmul+0x248>)
 8000aa2:	3280      	adds	r2, #128	; 0x80
 8000aa4:	401c      	ands	r4, r3
 8000aa6:	2afe      	cmp	r2, #254	; 0xfe
 8000aa8:	dcbf      	bgt.n	8000a2a <__aeabi_fmul+0x9e>
 8000aaa:	01a4      	lsls	r4, r4, #6
 8000aac:	0a64      	lsrs	r4, r4, #9
 8000aae:	b2d0      	uxtb	r0, r2
 8000ab0:	e7b2      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d13d      	bne.n	8000b34 <__aeabi_fmul+0x1a8>
 8000ab8:	464a      	mov	r2, r9
 8000aba:	3301      	adds	r3, #1
 8000abc:	431a      	orrs	r2, r3
 8000abe:	4691      	mov	r9, r2
 8000ac0:	469c      	mov	ip, r3
 8000ac2:	e792      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000ac4:	2c00      	cmp	r4, #0
 8000ac6:	d129      	bne.n	8000b1c <__aeabi_fmul+0x190>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	4699      	mov	r9, r3
 8000acc:	3b03      	subs	r3, #3
 8000ace:	2500      	movs	r5, #0
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	e774      	b.n	80009be <__aeabi_fmul+0x32>
 8000ad4:	2c00      	cmp	r4, #0
 8000ad6:	d11b      	bne.n	8000b10 <__aeabi_fmul+0x184>
 8000ad8:	2308      	movs	r3, #8
 8000ada:	4699      	mov	r9, r3
 8000adc:	3b06      	subs	r3, #6
 8000ade:	25ff      	movs	r5, #255	; 0xff
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e76c      	b.n	80009be <__aeabi_fmul+0x32>
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	35ff      	adds	r5, #255	; 0xff
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10b      	bne.n	8000b04 <__aeabi_fmul+0x178>
 8000aec:	2302      	movs	r3, #2
 8000aee:	464a      	mov	r2, r9
 8000af0:	431a      	orrs	r2, r3
 8000af2:	4691      	mov	r9, r2
 8000af4:	469c      	mov	ip, r3
 8000af6:	e778      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000af8:	4653      	mov	r3, sl
 8000afa:	0031      	movs	r1, r6
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fmul+0x176>
 8000b00:	e783      	b.n	8000a0a <__aeabi_fmul+0x7e>
 8000b02:	e792      	b.n	8000a2a <__aeabi_fmul+0x9e>
 8000b04:	2303      	movs	r3, #3
 8000b06:	464a      	mov	r2, r9
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	469c      	mov	ip, r3
 8000b0e:	e76c      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000b10:	230c      	movs	r3, #12
 8000b12:	4699      	mov	r9, r3
 8000b14:	3b09      	subs	r3, #9
 8000b16:	25ff      	movs	r5, #255	; 0xff
 8000b18:	469a      	mov	sl, r3
 8000b1a:	e750      	b.n	80009be <__aeabi_fmul+0x32>
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f002 f901 	bl	8002d24 <__clzsi2>
 8000b22:	2576      	movs	r5, #118	; 0x76
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409c      	lsls	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	426d      	negs	r5, r5
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	1a2d      	subs	r5, r5, r0
 8000b32:	e744      	b.n	80009be <__aeabi_fmul+0x32>
 8000b34:	4640      	mov	r0, r8
 8000b36:	f002 f8f5 	bl	8002d24 <__clzsi2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	1a2d      	subs	r5, r5, r0
 8000b44:	4690      	mov	r8, r2
 8000b46:	469c      	mov	ip, r3
 8000b48:	3d76      	subs	r5, #118	; 0x76
 8000b4a:	e74e      	b.n	80009ea <__aeabi_fmul+0x5e>
 8000b4c:	2480      	movs	r4, #128	; 0x80
 8000b4e:	2100      	movs	r1, #0
 8000b50:	20ff      	movs	r0, #255	; 0xff
 8000b52:	03e4      	lsls	r4, r4, #15
 8000b54:	e760      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000b56:	2301      	movs	r3, #1
 8000b58:	1a9b      	subs	r3, r3, r2
 8000b5a:	2b1b      	cmp	r3, #27
 8000b5c:	dd00      	ble.n	8000b60 <__aeabi_fmul+0x1d4>
 8000b5e:	e759      	b.n	8000a14 <__aeabi_fmul+0x88>
 8000b60:	0022      	movs	r2, r4
 8000b62:	309e      	adds	r0, #158	; 0x9e
 8000b64:	40da      	lsrs	r2, r3
 8000b66:	4084      	lsls	r4, r0
 8000b68:	0013      	movs	r3, r2
 8000b6a:	1e62      	subs	r2, r4, #1
 8000b6c:	4194      	sbcs	r4, r2
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	0763      	lsls	r3, r4, #29
 8000b72:	d004      	beq.n	8000b7e <__aeabi_fmul+0x1f2>
 8000b74:	230f      	movs	r3, #15
 8000b76:	4023      	ands	r3, r4
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fmul+0x1f2>
 8000b7c:	3404      	adds	r4, #4
 8000b7e:	0163      	lsls	r3, r4, #5
 8000b80:	d51a      	bpl.n	8000bb8 <__aeabi_fmul+0x22c>
 8000b82:	2001      	movs	r0, #1
 8000b84:	2400      	movs	r4, #0
 8000b86:	e747      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000b88:	2080      	movs	r0, #128	; 0x80
 8000b8a:	03c0      	lsls	r0, r0, #15
 8000b8c:	4204      	tst	r4, r0
 8000b8e:	d009      	beq.n	8000ba4 <__aeabi_fmul+0x218>
 8000b90:	4643      	mov	r3, r8
 8000b92:	4203      	tst	r3, r0
 8000b94:	d106      	bne.n	8000ba4 <__aeabi_fmul+0x218>
 8000b96:	4644      	mov	r4, r8
 8000b98:	4304      	orrs	r4, r0
 8000b9a:	0264      	lsls	r4, r4, #9
 8000b9c:	0039      	movs	r1, r7
 8000b9e:	20ff      	movs	r0, #255	; 0xff
 8000ba0:	0a64      	lsrs	r4, r4, #9
 8000ba2:	e739      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000ba4:	2080      	movs	r0, #128	; 0x80
 8000ba6:	03c0      	lsls	r0, r0, #15
 8000ba8:	4304      	orrs	r4, r0
 8000baa:	0264      	lsls	r4, r4, #9
 8000bac:	0031      	movs	r1, r6
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	0a64      	lsrs	r4, r4, #9
 8000bb2:	e731      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000bb4:	0028      	movs	r0, r5
 8000bb6:	e765      	b.n	8000a84 <__aeabi_fmul+0xf8>
 8000bb8:	01a4      	lsls	r4, r4, #6
 8000bba:	2000      	movs	r0, #0
 8000bbc:	0a64      	lsrs	r4, r4, #9
 8000bbe:	e72b      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000bc0:	2080      	movs	r0, #128	; 0x80
 8000bc2:	03c0      	lsls	r0, r0, #15
 8000bc4:	4304      	orrs	r4, r0
 8000bc6:	0264      	lsls	r4, r4, #9
 8000bc8:	20ff      	movs	r0, #255	; 0xff
 8000bca:	0a64      	lsrs	r4, r4, #9
 8000bcc:	e724      	b.n	8000a18 <__aeabi_fmul+0x8c>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	0800aba4 	.word	0x0800aba4
 8000bd4:	f7ffffff 	.word	0xf7ffffff

08000bd8 <__aeabi_fsub>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	46ce      	mov	lr, r9
 8000bdc:	4647      	mov	r7, r8
 8000bde:	0243      	lsls	r3, r0, #9
 8000be0:	0a5b      	lsrs	r3, r3, #9
 8000be2:	024e      	lsls	r6, r1, #9
 8000be4:	00da      	lsls	r2, r3, #3
 8000be6:	4694      	mov	ip, r2
 8000be8:	0a72      	lsrs	r2, r6, #9
 8000bea:	4691      	mov	r9, r2
 8000bec:	0045      	lsls	r5, r0, #1
 8000bee:	004a      	lsls	r2, r1, #1
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	0e2d      	lsrs	r5, r5, #24
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	0fc4      	lsrs	r4, r0, #31
 8000bf8:	0e12      	lsrs	r2, r2, #24
 8000bfa:	0fc9      	lsrs	r1, r1, #31
 8000bfc:	09b6      	lsrs	r6, r6, #6
 8000bfe:	2aff      	cmp	r2, #255	; 0xff
 8000c00:	d05b      	beq.n	8000cba <__aeabi_fsub+0xe2>
 8000c02:	2001      	movs	r0, #1
 8000c04:	4041      	eors	r1, r0
 8000c06:	428c      	cmp	r4, r1
 8000c08:	d039      	beq.n	8000c7e <__aeabi_fsub+0xa6>
 8000c0a:	1aa8      	subs	r0, r5, r2
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	dd5a      	ble.n	8000cc6 <__aeabi_fsub+0xee>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d06a      	beq.n	8000cea <__aeabi_fsub+0x112>
 8000c14:	2dff      	cmp	r5, #255	; 0xff
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x42>
 8000c18:	e0d9      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	04d2      	lsls	r2, r2, #19
 8000c1e:	4316      	orrs	r6, r2
 8000c20:	281b      	cmp	r0, #27
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_fsub+0x4e>
 8000c24:	e0e9      	b.n	8000dfa <__aeabi_fsub+0x222>
 8000c26:	2001      	movs	r0, #1
 8000c28:	4663      	mov	r3, ip
 8000c2a:	1a18      	subs	r0, r3, r0
 8000c2c:	0143      	lsls	r3, r0, #5
 8000c2e:	d400      	bmi.n	8000c32 <__aeabi_fsub+0x5a>
 8000c30:	e0b4      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000c32:	0180      	lsls	r0, r0, #6
 8000c34:	0987      	lsrs	r7, r0, #6
 8000c36:	0038      	movs	r0, r7
 8000c38:	f002 f874 	bl	8002d24 <__clzsi2>
 8000c3c:	3805      	subs	r0, #5
 8000c3e:	4087      	lsls	r7, r0
 8000c40:	4285      	cmp	r5, r0
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_fsub+0x6e>
 8000c44:	e0cc      	b.n	8000de0 <__aeabi_fsub+0x208>
 8000c46:	1a2d      	subs	r5, r5, r0
 8000c48:	48b5      	ldr	r0, [pc, #724]	; (8000f20 <__aeabi_fsub+0x348>)
 8000c4a:	4038      	ands	r0, r7
 8000c4c:	0743      	lsls	r3, r0, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fsub+0x82>
 8000c50:	230f      	movs	r3, #15
 8000c52:	4003      	ands	r3, r0
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0x82>
 8000c58:	3004      	adds	r0, #4
 8000c5a:	0143      	lsls	r3, r0, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0x88>
 8000c5e:	e0a0      	b.n	8000da2 <__aeabi_fsub+0x1ca>
 8000c60:	1c6a      	adds	r2, r5, #1
 8000c62:	2dfe      	cmp	r5, #254	; 0xfe
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x90>
 8000c66:	e08d      	b.n	8000d84 <__aeabi_fsub+0x1ac>
 8000c68:	0180      	lsls	r0, r0, #6
 8000c6a:	0a47      	lsrs	r7, r0, #9
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	05d0      	lsls	r0, r2, #23
 8000c70:	4338      	orrs	r0, r7
 8000c72:	07e4      	lsls	r4, r4, #31
 8000c74:	4320      	orrs	r0, r4
 8000c76:	bcc0      	pop	{r6, r7}
 8000c78:	46b9      	mov	r9, r7
 8000c7a:	46b0      	mov	r8, r6
 8000c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7e:	1aa8      	subs	r0, r5, r2
 8000c80:	4680      	mov	r8, r0
 8000c82:	2800      	cmp	r0, #0
 8000c84:	dd45      	ble.n	8000d12 <__aeabi_fsub+0x13a>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d070      	beq.n	8000d6c <__aeabi_fsub+0x194>
 8000c8a:	2dff      	cmp	r5, #255	; 0xff
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fsub+0xb8>
 8000c8e:	e09e      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	04db      	lsls	r3, r3, #19
 8000c94:	431e      	orrs	r6, r3
 8000c96:	4643      	mov	r3, r8
 8000c98:	2b1b      	cmp	r3, #27
 8000c9a:	dc00      	bgt.n	8000c9e <__aeabi_fsub+0xc6>
 8000c9c:	e0d2      	b.n	8000e44 <__aeabi_fsub+0x26c>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4460      	add	r0, ip
 8000ca2:	0143      	lsls	r3, r0, #5
 8000ca4:	d57a      	bpl.n	8000d9c <__aeabi_fsub+0x1c4>
 8000ca6:	3501      	adds	r5, #1
 8000ca8:	2dff      	cmp	r5, #255	; 0xff
 8000caa:	d06b      	beq.n	8000d84 <__aeabi_fsub+0x1ac>
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a9d      	ldr	r2, [pc, #628]	; (8000f24 <__aeabi_fsub+0x34c>)
 8000cb0:	4003      	ands	r3, r0
 8000cb2:	0840      	lsrs	r0, r0, #1
 8000cb4:	4010      	ands	r0, r2
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	e7c8      	b.n	8000c4c <__aeabi_fsub+0x74>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d020      	beq.n	8000d00 <__aeabi_fsub+0x128>
 8000cbe:	428c      	cmp	r4, r1
 8000cc0:	d023      	beq.n	8000d0a <__aeabi_fsub+0x132>
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	38ff      	subs	r0, #255	; 0xff
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d039      	beq.n	8000d3e <__aeabi_fsub+0x166>
 8000cca:	1b57      	subs	r7, r2, r5
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fsub+0xfa>
 8000cd0:	e09d      	b.n	8000e0e <__aeabi_fsub+0x236>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x102>
 8000cd8:	e0db      	b.n	8000e92 <__aeabi_fsub+0x2ba>
 8000cda:	1e7b      	subs	r3, r7, #1
 8000cdc:	2f01      	cmp	r7, #1
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x10a>
 8000ce0:	e10d      	b.n	8000efe <__aeabi_fsub+0x326>
 8000ce2:	2fff      	cmp	r7, #255	; 0xff
 8000ce4:	d071      	beq.n	8000dca <__aeabi_fsub+0x1f2>
 8000ce6:	001f      	movs	r7, r3
 8000ce8:	e098      	b.n	8000e1c <__aeabi_fsub+0x244>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x118>
 8000cee:	e0a7      	b.n	8000e40 <__aeabi_fsub+0x268>
 8000cf0:	1e42      	subs	r2, r0, #1
 8000cf2:	2801      	cmp	r0, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x120>
 8000cf6:	e0e6      	b.n	8000ec6 <__aeabi_fsub+0x2ee>
 8000cf8:	28ff      	cmp	r0, #255	; 0xff
 8000cfa:	d068      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000cfc:	0010      	movs	r0, r2
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fsub+0x48>
 8000d00:	2001      	movs	r0, #1
 8000d02:	4041      	eors	r1, r0
 8000d04:	42a1      	cmp	r1, r4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_fsub+0x132>
 8000d08:	e77f      	b.n	8000c0a <__aeabi_fsub+0x32>
 8000d0a:	20ff      	movs	r0, #255	; 0xff
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	4680      	mov	r8, r0
 8000d10:	44a8      	add	r8, r5
 8000d12:	4640      	mov	r0, r8
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d038      	beq.n	8000d8a <__aeabi_fsub+0x1b2>
 8000d18:	1b51      	subs	r1, r2, r5
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fsub+0x148>
 8000d1e:	e0ae      	b.n	8000e7e <__aeabi_fsub+0x2a6>
 8000d20:	2aff      	cmp	r2, #255	; 0xff
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x14e>
 8000d24:	e0df      	b.n	8000ee6 <__aeabi_fsub+0x30e>
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	4660      	mov	r0, ip
 8000d2a:	04db      	lsls	r3, r3, #19
 8000d2c:	4318      	orrs	r0, r3
 8000d2e:	4684      	mov	ip, r0
 8000d30:	291b      	cmp	r1, #27
 8000d32:	dc00      	bgt.n	8000d36 <__aeabi_fsub+0x15e>
 8000d34:	e0d9      	b.n	8000eea <__aeabi_fsub+0x312>
 8000d36:	2001      	movs	r0, #1
 8000d38:	0015      	movs	r5, r2
 8000d3a:	1980      	adds	r0, r0, r6
 8000d3c:	e7b1      	b.n	8000ca2 <__aeabi_fsub+0xca>
 8000d3e:	20fe      	movs	r0, #254	; 0xfe
 8000d40:	1c6a      	adds	r2, r5, #1
 8000d42:	4210      	tst	r0, r2
 8000d44:	d171      	bne.n	8000e2a <__aeabi_fsub+0x252>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d000      	beq.n	8000d4c <__aeabi_fsub+0x174>
 8000d4a:	e0a6      	b.n	8000e9a <__aeabi_fsub+0x2c2>
 8000d4c:	4663      	mov	r3, ip
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fsub+0x17c>
 8000d52:	e0d9      	b.n	8000f08 <__aeabi_fsub+0x330>
 8000d54:	2200      	movs	r2, #0
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x184>
 8000d5a:	e788      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000d5c:	1b98      	subs	r0, r3, r6
 8000d5e:	0143      	lsls	r3, r0, #5
 8000d60:	d400      	bmi.n	8000d64 <__aeabi_fsub+0x18c>
 8000d62:	e0e1      	b.n	8000f28 <__aeabi_fsub+0x350>
 8000d64:	4663      	mov	r3, ip
 8000d66:	000c      	movs	r4, r1
 8000d68:	1af0      	subs	r0, r6, r3
 8000d6a:	e76f      	b.n	8000c4c <__aeabi_fsub+0x74>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x19a>
 8000d70:	e0b7      	b.n	8000ee2 <__aeabi_fsub+0x30a>
 8000d72:	0002      	movs	r2, r0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	2801      	cmp	r0, #1
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0x1a4>
 8000d7a:	e09c      	b.n	8000eb6 <__aeabi_fsub+0x2de>
 8000d7c:	28ff      	cmp	r0, #255	; 0xff
 8000d7e:	d026      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000d80:	4690      	mov	r8, r2
 8000d82:	e788      	b.n	8000c96 <__aeabi_fsub+0xbe>
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	2700      	movs	r7, #0
 8000d88:	e771      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000d8a:	20fe      	movs	r0, #254	; 0xfe
 8000d8c:	1c6a      	adds	r2, r5, #1
 8000d8e:	4210      	tst	r0, r2
 8000d90:	d064      	beq.n	8000e5c <__aeabi_fsub+0x284>
 8000d92:	2aff      	cmp	r2, #255	; 0xff
 8000d94:	d0f6      	beq.n	8000d84 <__aeabi_fsub+0x1ac>
 8000d96:	0015      	movs	r5, r2
 8000d98:	4466      	add	r6, ip
 8000d9a:	0870      	lsrs	r0, r6, #1
 8000d9c:	0743      	lsls	r3, r0, #29
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_fsub+0x1ca>
 8000da0:	e756      	b.n	8000c50 <__aeabi_fsub+0x78>
 8000da2:	08c3      	lsrs	r3, r0, #3
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d012      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	0a5f      	lsrs	r7, r3, #9
 8000dac:	b2ea      	uxtb	r2, r5
 8000dae:	e75e      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000db0:	4662      	mov	r2, ip
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x1e0>
 8000db6:	e096      	b.n	8000ee6 <__aeabi_fsub+0x30e>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d008      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	03d2      	lsls	r2, r2, #15
 8000dc0:	4213      	tst	r3, r2
 8000dc2:	d004      	beq.n	8000dce <__aeabi_fsub+0x1f6>
 8000dc4:	4648      	mov	r0, r9
 8000dc6:	4210      	tst	r0, r2
 8000dc8:	d101      	bne.n	8000dce <__aeabi_fsub+0x1f6>
 8000dca:	000c      	movs	r4, r1
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0d8      	beq.n	8000d84 <__aeabi_fsub+0x1ac>
 8000dd2:	2780      	movs	r7, #128	; 0x80
 8000dd4:	03ff      	lsls	r7, r7, #15
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	027f      	lsls	r7, r7, #9
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	0a7f      	lsrs	r7, r7, #9
 8000dde:	e746      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000de0:	2320      	movs	r3, #32
 8000de2:	003a      	movs	r2, r7
 8000de4:	1b45      	subs	r5, r0, r5
 8000de6:	0038      	movs	r0, r7
 8000de8:	3501      	adds	r5, #1
 8000dea:	40ea      	lsrs	r2, r5
 8000dec:	1b5d      	subs	r5, r3, r5
 8000dee:	40a8      	lsls	r0, r5
 8000df0:	1e43      	subs	r3, r0, #1
 8000df2:	4198      	sbcs	r0, r3
 8000df4:	2500      	movs	r5, #0
 8000df6:	4310      	orrs	r0, r2
 8000df8:	e728      	b.n	8000c4c <__aeabi_fsub+0x74>
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	1a1b      	subs	r3, r3, r0
 8000dfe:	0032      	movs	r2, r6
 8000e00:	409e      	lsls	r6, r3
 8000e02:	40c2      	lsrs	r2, r0
 8000e04:	0030      	movs	r0, r6
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
 8000e0a:	4310      	orrs	r0, r2
 8000e0c:	e70c      	b.n	8000c28 <__aeabi_fsub+0x50>
 8000e0e:	2aff      	cmp	r2, #255	; 0xff
 8000e10:	d0db      	beq.n	8000dca <__aeabi_fsub+0x1f2>
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	4660      	mov	r0, ip
 8000e16:	04db      	lsls	r3, r3, #19
 8000e18:	4318      	orrs	r0, r3
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	2f1b      	cmp	r7, #27
 8000e1e:	dd56      	ble.n	8000ece <__aeabi_fsub+0x2f6>
 8000e20:	2001      	movs	r0, #1
 8000e22:	000c      	movs	r4, r1
 8000e24:	0015      	movs	r5, r2
 8000e26:	1a30      	subs	r0, r6, r0
 8000e28:	e700      	b.n	8000c2c <__aeabi_fsub+0x54>
 8000e2a:	4663      	mov	r3, ip
 8000e2c:	1b9f      	subs	r7, r3, r6
 8000e2e:	017b      	lsls	r3, r7, #5
 8000e30:	d43d      	bmi.n	8000eae <__aeabi_fsub+0x2d6>
 8000e32:	2f00      	cmp	r7, #0
 8000e34:	d000      	beq.n	8000e38 <__aeabi_fsub+0x260>
 8000e36:	e6fe      	b.n	8000c36 <__aeabi_fsub+0x5e>
 8000e38:	2400      	movs	r4, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2700      	movs	r7, #0
 8000e3e:	e716      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000e40:	0005      	movs	r5, r0
 8000e42:	e7af      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000e44:	0032      	movs	r2, r6
 8000e46:	4643      	mov	r3, r8
 8000e48:	4641      	mov	r1, r8
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	1a5b      	subs	r3, r3, r1
 8000e50:	409e      	lsls	r6, r3
 8000e52:	0030      	movs	r0, r6
 8000e54:	1e43      	subs	r3, r0, #1
 8000e56:	4198      	sbcs	r0, r3
 8000e58:	4310      	orrs	r0, r2
 8000e5a:	e721      	b.n	8000ca0 <__aeabi_fsub+0xc8>
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	d1a7      	bne.n	8000db0 <__aeabi_fsub+0x1d8>
 8000e60:	4663      	mov	r3, ip
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d059      	beq.n	8000f1a <__aeabi_fsub+0x342>
 8000e66:	2200      	movs	r2, #0
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_fsub+0x296>
 8000e6c:	e6ff      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000e6e:	0030      	movs	r0, r6
 8000e70:	4460      	add	r0, ip
 8000e72:	0143      	lsls	r3, r0, #5
 8000e74:	d592      	bpl.n	8000d9c <__aeabi_fsub+0x1c4>
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <__aeabi_fsub+0x348>)
 8000e78:	3501      	adds	r5, #1
 8000e7a:	4018      	ands	r0, r3
 8000e7c:	e78e      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000e7e:	4663      	mov	r3, ip
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d047      	beq.n	8000f14 <__aeabi_fsub+0x33c>
 8000e84:	1e4b      	subs	r3, r1, #1
 8000e86:	2901      	cmp	r1, #1
 8000e88:	d015      	beq.n	8000eb6 <__aeabi_fsub+0x2de>
 8000e8a:	29ff      	cmp	r1, #255	; 0xff
 8000e8c:	d02b      	beq.n	8000ee6 <__aeabi_fsub+0x30e>
 8000e8e:	0019      	movs	r1, r3
 8000e90:	e74e      	b.n	8000d30 <__aeabi_fsub+0x158>
 8000e92:	000c      	movs	r4, r1
 8000e94:	464b      	mov	r3, r9
 8000e96:	003d      	movs	r5, r7
 8000e98:	e784      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000e9a:	4662      	mov	r2, ip
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d18b      	bne.n	8000db8 <__aeabi_fsub+0x1e0>
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	d192      	bne.n	8000dca <__aeabi_fsub+0x1f2>
 8000ea4:	2780      	movs	r7, #128	; 0x80
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	22ff      	movs	r2, #255	; 0xff
 8000eaa:	03ff      	lsls	r7, r7, #15
 8000eac:	e6df      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	1af7      	subs	r7, r6, r3
 8000eb4:	e6bf      	b.n	8000c36 <__aeabi_fsub+0x5e>
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	4460      	add	r0, ip
 8000eba:	2501      	movs	r5, #1
 8000ebc:	0143      	lsls	r3, r0, #5
 8000ebe:	d400      	bmi.n	8000ec2 <__aeabi_fsub+0x2ea>
 8000ec0:	e76c      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000ec2:	2502      	movs	r5, #2
 8000ec4:	e6f2      	b.n	8000cac <__aeabi_fsub+0xd4>
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	2501      	movs	r5, #1
 8000eca:	1b98      	subs	r0, r3, r6
 8000ecc:	e6ae      	b.n	8000c2c <__aeabi_fsub+0x54>
 8000ece:	2320      	movs	r3, #32
 8000ed0:	4664      	mov	r4, ip
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	40fc      	lsrs	r4, r7
 8000ed6:	1bdf      	subs	r7, r3, r7
 8000ed8:	40b8      	lsls	r0, r7
 8000eda:	1e43      	subs	r3, r0, #1
 8000edc:	4198      	sbcs	r0, r3
 8000ede:	4320      	orrs	r0, r4
 8000ee0:	e79f      	b.n	8000e22 <__aeabi_fsub+0x24a>
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	e75e      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e771      	b.n	8000dce <__aeabi_fsub+0x1f6>
 8000eea:	2320      	movs	r3, #32
 8000eec:	4665      	mov	r5, ip
 8000eee:	4660      	mov	r0, ip
 8000ef0:	40cd      	lsrs	r5, r1
 8000ef2:	1a59      	subs	r1, r3, r1
 8000ef4:	4088      	lsls	r0, r1
 8000ef6:	1e43      	subs	r3, r0, #1
 8000ef8:	4198      	sbcs	r0, r3
 8000efa:	4328      	orrs	r0, r5
 8000efc:	e71c      	b.n	8000d38 <__aeabi_fsub+0x160>
 8000efe:	4663      	mov	r3, ip
 8000f00:	000c      	movs	r4, r1
 8000f02:	2501      	movs	r5, #1
 8000f04:	1af0      	subs	r0, r6, r3
 8000f06:	e691      	b.n	8000c2c <__aeabi_fsub+0x54>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d095      	beq.n	8000e38 <__aeabi_fsub+0x260>
 8000f0c:	000c      	movs	r4, r1
 8000f0e:	464f      	mov	r7, r9
 8000f10:	2200      	movs	r2, #0
 8000f12:	e6ac      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000f14:	464b      	mov	r3, r9
 8000f16:	000d      	movs	r5, r1
 8000f18:	e744      	b.n	8000da4 <__aeabi_fsub+0x1cc>
 8000f1a:	464f      	mov	r7, r9
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e6a6      	b.n	8000c6e <__aeabi_fsub+0x96>
 8000f20:	fbffffff 	.word	0xfbffffff
 8000f24:	7dffffff 	.word	0x7dffffff
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x356>
 8000f2c:	e736      	b.n	8000d9c <__aeabi_fsub+0x1c4>
 8000f2e:	2400      	movs	r4, #0
 8000f30:	2700      	movs	r7, #0
 8000f32:	e69c      	b.n	8000c6e <__aeabi_fsub+0x96>

08000f34 <__aeabi_ui2f>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	1e05      	subs	r5, r0, #0
 8000f38:	d00e      	beq.n	8000f58 <__aeabi_ui2f+0x24>
 8000f3a:	f001 fef3 	bl	8002d24 <__clzsi2>
 8000f3e:	239e      	movs	r3, #158	; 0x9e
 8000f40:	0004      	movs	r4, r0
 8000f42:	1a1b      	subs	r3, r3, r0
 8000f44:	2b96      	cmp	r3, #150	; 0x96
 8000f46:	dc0c      	bgt.n	8000f62 <__aeabi_ui2f+0x2e>
 8000f48:	2808      	cmp	r0, #8
 8000f4a:	dd01      	ble.n	8000f50 <__aeabi_ui2f+0x1c>
 8000f4c:	3c08      	subs	r4, #8
 8000f4e:	40a5      	lsls	r5, r4
 8000f50:	026d      	lsls	r5, r5, #9
 8000f52:	0a6d      	lsrs	r5, r5, #9
 8000f54:	b2d8      	uxtb	r0, r3
 8000f56:	e001      	b.n	8000f5c <__aeabi_ui2f+0x28>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	05c0      	lsls	r0, r0, #23
 8000f5e:	4328      	orrs	r0, r5
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	2b99      	cmp	r3, #153	; 0x99
 8000f64:	dd09      	ble.n	8000f7a <__aeabi_ui2f+0x46>
 8000f66:	0002      	movs	r2, r0
 8000f68:	0029      	movs	r1, r5
 8000f6a:	321b      	adds	r2, #27
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	1e4a      	subs	r2, r1, #1
 8000f70:	4191      	sbcs	r1, r2
 8000f72:	2205      	movs	r2, #5
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	40d5      	lsrs	r5, r2
 8000f78:	430d      	orrs	r5, r1
 8000f7a:	2c05      	cmp	r4, #5
 8000f7c:	dc12      	bgt.n	8000fa4 <__aeabi_ui2f+0x70>
 8000f7e:	0029      	movs	r1, r5
 8000f80:	4e0c      	ldr	r6, [pc, #48]	; (8000fb4 <__aeabi_ui2f+0x80>)
 8000f82:	4031      	ands	r1, r6
 8000f84:	076a      	lsls	r2, r5, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000f88:	200f      	movs	r0, #15
 8000f8a:	4028      	ands	r0, r5
 8000f8c:	2804      	cmp	r0, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000f90:	3104      	adds	r1, #4
 8000f92:	014a      	lsls	r2, r1, #5
 8000f94:	d502      	bpl.n	8000f9c <__aeabi_ui2f+0x68>
 8000f96:	239f      	movs	r3, #159	; 0x9f
 8000f98:	4031      	ands	r1, r6
 8000f9a:	1b1b      	subs	r3, r3, r4
 8000f9c:	0189      	lsls	r1, r1, #6
 8000f9e:	0a4d      	lsrs	r5, r1, #9
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	e7db      	b.n	8000f5c <__aeabi_ui2f+0x28>
 8000fa4:	1f62      	subs	r2, r4, #5
 8000fa6:	4095      	lsls	r5, r2
 8000fa8:	0029      	movs	r1, r5
 8000faa:	4e02      	ldr	r6, [pc, #8]	; (8000fb4 <__aeabi_ui2f+0x80>)
 8000fac:	4031      	ands	r1, r6
 8000fae:	076a      	lsls	r2, r5, #29
 8000fb0:	d0f4      	beq.n	8000f9c <__aeabi_ui2f+0x68>
 8000fb2:	e7e9      	b.n	8000f88 <__aeabi_ui2f+0x54>
 8000fb4:	fbffffff 	.word	0xfbffffff

08000fb8 <__aeabi_dadd>:
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	464f      	mov	r7, r9
 8000fbc:	4646      	mov	r6, r8
 8000fbe:	46d6      	mov	lr, sl
 8000fc0:	000d      	movs	r5, r1
 8000fc2:	0004      	movs	r4, r0
 8000fc4:	b5c0      	push	{r6, r7, lr}
 8000fc6:	001f      	movs	r7, r3
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0328      	lsls	r0, r5, #12
 8000fcc:	0f62      	lsrs	r2, r4, #29
 8000fce:	0a40      	lsrs	r0, r0, #9
 8000fd0:	4310      	orrs	r0, r2
 8000fd2:	007a      	lsls	r2, r7, #1
 8000fd4:	0d52      	lsrs	r2, r2, #21
 8000fd6:	00e3      	lsls	r3, r4, #3
 8000fd8:	033c      	lsls	r4, r7, #12
 8000fda:	4691      	mov	r9, r2
 8000fdc:	0a64      	lsrs	r4, r4, #9
 8000fde:	0ffa      	lsrs	r2, r7, #31
 8000fe0:	0f4f      	lsrs	r7, r1, #29
 8000fe2:	006e      	lsls	r6, r5, #1
 8000fe4:	4327      	orrs	r7, r4
 8000fe6:	4692      	mov	sl, r2
 8000fe8:	46b8      	mov	r8, r7
 8000fea:	0d76      	lsrs	r6, r6, #21
 8000fec:	0fed      	lsrs	r5, r5, #31
 8000fee:	00c9      	lsls	r1, r1, #3
 8000ff0:	4295      	cmp	r5, r2
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x3e>
 8000ff4:	e099      	b.n	800112a <__aeabi_dadd+0x172>
 8000ff6:	464c      	mov	r4, r9
 8000ff8:	1b34      	subs	r4, r6, r4
 8000ffa:	46a4      	mov	ip, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	dc00      	bgt.n	8001002 <__aeabi_dadd+0x4a>
 8001000:	e07c      	b.n	80010fc <__aeabi_dadd+0x144>
 8001002:	464a      	mov	r2, r9
 8001004:	2a00      	cmp	r2, #0
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x52>
 8001008:	e0b8      	b.n	800117c <__aeabi_dadd+0x1c4>
 800100a:	4ac5      	ldr	r2, [pc, #788]	; (8001320 <__aeabi_dadd+0x368>)
 800100c:	4296      	cmp	r6, r2
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0x5a>
 8001010:	e11c      	b.n	800124c <__aeabi_dadd+0x294>
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	003c      	movs	r4, r7
 8001016:	0412      	lsls	r2, r2, #16
 8001018:	4314      	orrs	r4, r2
 800101a:	46a0      	mov	r8, r4
 800101c:	4662      	mov	r2, ip
 800101e:	2a38      	cmp	r2, #56	; 0x38
 8001020:	dd00      	ble.n	8001024 <__aeabi_dadd+0x6c>
 8001022:	e161      	b.n	80012e8 <__aeabi_dadd+0x330>
 8001024:	2a1f      	cmp	r2, #31
 8001026:	dd00      	ble.n	800102a <__aeabi_dadd+0x72>
 8001028:	e1cc      	b.n	80013c4 <__aeabi_dadd+0x40c>
 800102a:	4664      	mov	r4, ip
 800102c:	2220      	movs	r2, #32
 800102e:	1b12      	subs	r2, r2, r4
 8001030:	4644      	mov	r4, r8
 8001032:	4094      	lsls	r4, r2
 8001034:	000f      	movs	r7, r1
 8001036:	46a1      	mov	r9, r4
 8001038:	4664      	mov	r4, ip
 800103a:	4091      	lsls	r1, r2
 800103c:	40e7      	lsrs	r7, r4
 800103e:	464c      	mov	r4, r9
 8001040:	1e4a      	subs	r2, r1, #1
 8001042:	4191      	sbcs	r1, r2
 8001044:	433c      	orrs	r4, r7
 8001046:	4642      	mov	r2, r8
 8001048:	4321      	orrs	r1, r4
 800104a:	4664      	mov	r4, ip
 800104c:	40e2      	lsrs	r2, r4
 800104e:	1a80      	subs	r0, r0, r2
 8001050:	1a5c      	subs	r4, r3, r1
 8001052:	42a3      	cmp	r3, r4
 8001054:	419b      	sbcs	r3, r3
 8001056:	425f      	negs	r7, r3
 8001058:	1bc7      	subs	r7, r0, r7
 800105a:	023b      	lsls	r3, r7, #8
 800105c:	d400      	bmi.n	8001060 <__aeabi_dadd+0xa8>
 800105e:	e0d0      	b.n	8001202 <__aeabi_dadd+0x24a>
 8001060:	027f      	lsls	r7, r7, #9
 8001062:	0a7f      	lsrs	r7, r7, #9
 8001064:	2f00      	cmp	r7, #0
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0xb2>
 8001068:	e0ff      	b.n	800126a <__aeabi_dadd+0x2b2>
 800106a:	0038      	movs	r0, r7
 800106c:	f001 fe5a 	bl	8002d24 <__clzsi2>
 8001070:	0001      	movs	r1, r0
 8001072:	3908      	subs	r1, #8
 8001074:	2320      	movs	r3, #32
 8001076:	0022      	movs	r2, r4
 8001078:	1a5b      	subs	r3, r3, r1
 800107a:	408f      	lsls	r7, r1
 800107c:	40da      	lsrs	r2, r3
 800107e:	408c      	lsls	r4, r1
 8001080:	4317      	orrs	r7, r2
 8001082:	42b1      	cmp	r1, r6
 8001084:	da00      	bge.n	8001088 <__aeabi_dadd+0xd0>
 8001086:	e0ff      	b.n	8001288 <__aeabi_dadd+0x2d0>
 8001088:	1b89      	subs	r1, r1, r6
 800108a:	1c4b      	adds	r3, r1, #1
 800108c:	2b1f      	cmp	r3, #31
 800108e:	dd00      	ble.n	8001092 <__aeabi_dadd+0xda>
 8001090:	e0a8      	b.n	80011e4 <__aeabi_dadd+0x22c>
 8001092:	2220      	movs	r2, #32
 8001094:	0039      	movs	r1, r7
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	0020      	movs	r0, r4
 800109a:	4094      	lsls	r4, r2
 800109c:	4091      	lsls	r1, r2
 800109e:	40d8      	lsrs	r0, r3
 80010a0:	1e62      	subs	r2, r4, #1
 80010a2:	4194      	sbcs	r4, r2
 80010a4:	40df      	lsrs	r7, r3
 80010a6:	2600      	movs	r6, #0
 80010a8:	4301      	orrs	r1, r0
 80010aa:	430c      	orrs	r4, r1
 80010ac:	0763      	lsls	r3, r4, #29
 80010ae:	d009      	beq.n	80010c4 <__aeabi_dadd+0x10c>
 80010b0:	230f      	movs	r3, #15
 80010b2:	4023      	ands	r3, r4
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d005      	beq.n	80010c4 <__aeabi_dadd+0x10c>
 80010b8:	1d23      	adds	r3, r4, #4
 80010ba:	42a3      	cmp	r3, r4
 80010bc:	41a4      	sbcs	r4, r4
 80010be:	4264      	negs	r4, r4
 80010c0:	193f      	adds	r7, r7, r4
 80010c2:	001c      	movs	r4, r3
 80010c4:	023b      	lsls	r3, r7, #8
 80010c6:	d400      	bmi.n	80010ca <__aeabi_dadd+0x112>
 80010c8:	e09e      	b.n	8001208 <__aeabi_dadd+0x250>
 80010ca:	4b95      	ldr	r3, [pc, #596]	; (8001320 <__aeabi_dadd+0x368>)
 80010cc:	3601      	adds	r6, #1
 80010ce:	429e      	cmp	r6, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0x11c>
 80010d2:	e0b7      	b.n	8001244 <__aeabi_dadd+0x28c>
 80010d4:	4a93      	ldr	r2, [pc, #588]	; (8001324 <__aeabi_dadd+0x36c>)
 80010d6:	08e4      	lsrs	r4, r4, #3
 80010d8:	4017      	ands	r7, r2
 80010da:	077b      	lsls	r3, r7, #29
 80010dc:	0571      	lsls	r1, r6, #21
 80010de:	027f      	lsls	r7, r7, #9
 80010e0:	4323      	orrs	r3, r4
 80010e2:	0b3f      	lsrs	r7, r7, #12
 80010e4:	0d4a      	lsrs	r2, r1, #21
 80010e6:	0512      	lsls	r2, r2, #20
 80010e8:	433a      	orrs	r2, r7
 80010ea:	07ed      	lsls	r5, r5, #31
 80010ec:	432a      	orrs	r2, r5
 80010ee:	0018      	movs	r0, r3
 80010f0:	0011      	movs	r1, r2
 80010f2:	bce0      	pop	{r5, r6, r7}
 80010f4:	46ba      	mov	sl, r7
 80010f6:	46b1      	mov	r9, r6
 80010f8:	46a8      	mov	r8, r5
 80010fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fc:	2c00      	cmp	r4, #0
 80010fe:	d04b      	beq.n	8001198 <__aeabi_dadd+0x1e0>
 8001100:	464c      	mov	r4, r9
 8001102:	1ba4      	subs	r4, r4, r6
 8001104:	46a4      	mov	ip, r4
 8001106:	2e00      	cmp	r6, #0
 8001108:	d000      	beq.n	800110c <__aeabi_dadd+0x154>
 800110a:	e123      	b.n	8001354 <__aeabi_dadd+0x39c>
 800110c:	0004      	movs	r4, r0
 800110e:	431c      	orrs	r4, r3
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x15c>
 8001112:	e1af      	b.n	8001474 <__aeabi_dadd+0x4bc>
 8001114:	4662      	mov	r2, ip
 8001116:	1e54      	subs	r4, r2, #1
 8001118:	2a01      	cmp	r2, #1
 800111a:	d100      	bne.n	800111e <__aeabi_dadd+0x166>
 800111c:	e215      	b.n	800154a <__aeabi_dadd+0x592>
 800111e:	4d80      	ldr	r5, [pc, #512]	; (8001320 <__aeabi_dadd+0x368>)
 8001120:	45ac      	cmp	ip, r5
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x16e>
 8001124:	e1c8      	b.n	80014b8 <__aeabi_dadd+0x500>
 8001126:	46a4      	mov	ip, r4
 8001128:	e11b      	b.n	8001362 <__aeabi_dadd+0x3aa>
 800112a:	464a      	mov	r2, r9
 800112c:	1ab2      	subs	r2, r6, r2
 800112e:	4694      	mov	ip, r2
 8001130:	2a00      	cmp	r2, #0
 8001132:	dc00      	bgt.n	8001136 <__aeabi_dadd+0x17e>
 8001134:	e0ac      	b.n	8001290 <__aeabi_dadd+0x2d8>
 8001136:	464a      	mov	r2, r9
 8001138:	2a00      	cmp	r2, #0
 800113a:	d043      	beq.n	80011c4 <__aeabi_dadd+0x20c>
 800113c:	4a78      	ldr	r2, [pc, #480]	; (8001320 <__aeabi_dadd+0x368>)
 800113e:	4296      	cmp	r6, r2
 8001140:	d100      	bne.n	8001144 <__aeabi_dadd+0x18c>
 8001142:	e1af      	b.n	80014a4 <__aeabi_dadd+0x4ec>
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	003c      	movs	r4, r7
 8001148:	0412      	lsls	r2, r2, #16
 800114a:	4314      	orrs	r4, r2
 800114c:	46a0      	mov	r8, r4
 800114e:	4662      	mov	r2, ip
 8001150:	2a38      	cmp	r2, #56	; 0x38
 8001152:	dc67      	bgt.n	8001224 <__aeabi_dadd+0x26c>
 8001154:	2a1f      	cmp	r2, #31
 8001156:	dc00      	bgt.n	800115a <__aeabi_dadd+0x1a2>
 8001158:	e15f      	b.n	800141a <__aeabi_dadd+0x462>
 800115a:	4647      	mov	r7, r8
 800115c:	3a20      	subs	r2, #32
 800115e:	40d7      	lsrs	r7, r2
 8001160:	4662      	mov	r2, ip
 8001162:	2a20      	cmp	r2, #32
 8001164:	d005      	beq.n	8001172 <__aeabi_dadd+0x1ba>
 8001166:	4664      	mov	r4, ip
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	1b12      	subs	r2, r2, r4
 800116c:	4644      	mov	r4, r8
 800116e:	4094      	lsls	r4, r2
 8001170:	4321      	orrs	r1, r4
 8001172:	1e4a      	subs	r2, r1, #1
 8001174:	4191      	sbcs	r1, r2
 8001176:	000c      	movs	r4, r1
 8001178:	433c      	orrs	r4, r7
 800117a:	e057      	b.n	800122c <__aeabi_dadd+0x274>
 800117c:	003a      	movs	r2, r7
 800117e:	430a      	orrs	r2, r1
 8001180:	d100      	bne.n	8001184 <__aeabi_dadd+0x1cc>
 8001182:	e105      	b.n	8001390 <__aeabi_dadd+0x3d8>
 8001184:	0022      	movs	r2, r4
 8001186:	3a01      	subs	r2, #1
 8001188:	2c01      	cmp	r4, #1
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x1d6>
 800118c:	e182      	b.n	8001494 <__aeabi_dadd+0x4dc>
 800118e:	4c64      	ldr	r4, [pc, #400]	; (8001320 <__aeabi_dadd+0x368>)
 8001190:	45a4      	cmp	ip, r4
 8001192:	d05b      	beq.n	800124c <__aeabi_dadd+0x294>
 8001194:	4694      	mov	ip, r2
 8001196:	e741      	b.n	800101c <__aeabi_dadd+0x64>
 8001198:	4c63      	ldr	r4, [pc, #396]	; (8001328 <__aeabi_dadd+0x370>)
 800119a:	1c77      	adds	r7, r6, #1
 800119c:	4227      	tst	r7, r4
 800119e:	d000      	beq.n	80011a2 <__aeabi_dadd+0x1ea>
 80011a0:	e0c4      	b.n	800132c <__aeabi_dadd+0x374>
 80011a2:	0004      	movs	r4, r0
 80011a4:	431c      	orrs	r4, r3
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	d000      	beq.n	80011ac <__aeabi_dadd+0x1f4>
 80011aa:	e169      	b.n	8001480 <__aeabi_dadd+0x4c8>
 80011ac:	2c00      	cmp	r4, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x1fa>
 80011b0:	e1bf      	b.n	8001532 <__aeabi_dadd+0x57a>
 80011b2:	4644      	mov	r4, r8
 80011b4:	430c      	orrs	r4, r1
 80011b6:	d000      	beq.n	80011ba <__aeabi_dadd+0x202>
 80011b8:	e1d0      	b.n	800155c <__aeabi_dadd+0x5a4>
 80011ba:	0742      	lsls	r2, r0, #29
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	4313      	orrs	r3, r2
 80011c0:	08c0      	lsrs	r0, r0, #3
 80011c2:	e029      	b.n	8001218 <__aeabi_dadd+0x260>
 80011c4:	003a      	movs	r2, r7
 80011c6:	430a      	orrs	r2, r1
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0x214>
 80011ca:	e170      	b.n	80014ae <__aeabi_dadd+0x4f6>
 80011cc:	4662      	mov	r2, ip
 80011ce:	4664      	mov	r4, ip
 80011d0:	3a01      	subs	r2, #1
 80011d2:	2c01      	cmp	r4, #1
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x220>
 80011d6:	e0e0      	b.n	800139a <__aeabi_dadd+0x3e2>
 80011d8:	4c51      	ldr	r4, [pc, #324]	; (8001320 <__aeabi_dadd+0x368>)
 80011da:	45a4      	cmp	ip, r4
 80011dc:	d100      	bne.n	80011e0 <__aeabi_dadd+0x228>
 80011de:	e161      	b.n	80014a4 <__aeabi_dadd+0x4ec>
 80011e0:	4694      	mov	ip, r2
 80011e2:	e7b4      	b.n	800114e <__aeabi_dadd+0x196>
 80011e4:	003a      	movs	r2, r7
 80011e6:	391f      	subs	r1, #31
 80011e8:	40ca      	lsrs	r2, r1
 80011ea:	0011      	movs	r1, r2
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d003      	beq.n	80011f8 <__aeabi_dadd+0x240>
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	409f      	lsls	r7, r3
 80011f6:	433c      	orrs	r4, r7
 80011f8:	1e63      	subs	r3, r4, #1
 80011fa:	419c      	sbcs	r4, r3
 80011fc:	2700      	movs	r7, #0
 80011fe:	2600      	movs	r6, #0
 8001200:	430c      	orrs	r4, r1
 8001202:	0763      	lsls	r3, r4, #29
 8001204:	d000      	beq.n	8001208 <__aeabi_dadd+0x250>
 8001206:	e753      	b.n	80010b0 <__aeabi_dadd+0xf8>
 8001208:	46b4      	mov	ip, r6
 800120a:	08e4      	lsrs	r4, r4, #3
 800120c:	077b      	lsls	r3, r7, #29
 800120e:	4323      	orrs	r3, r4
 8001210:	08f8      	lsrs	r0, r7, #3
 8001212:	4a43      	ldr	r2, [pc, #268]	; (8001320 <__aeabi_dadd+0x368>)
 8001214:	4594      	cmp	ip, r2
 8001216:	d01d      	beq.n	8001254 <__aeabi_dadd+0x29c>
 8001218:	4662      	mov	r2, ip
 800121a:	0307      	lsls	r7, r0, #12
 800121c:	0552      	lsls	r2, r2, #21
 800121e:	0b3f      	lsrs	r7, r7, #12
 8001220:	0d52      	lsrs	r2, r2, #21
 8001222:	e760      	b.n	80010e6 <__aeabi_dadd+0x12e>
 8001224:	4644      	mov	r4, r8
 8001226:	430c      	orrs	r4, r1
 8001228:	1e62      	subs	r2, r4, #1
 800122a:	4194      	sbcs	r4, r2
 800122c:	18e4      	adds	r4, r4, r3
 800122e:	429c      	cmp	r4, r3
 8001230:	419b      	sbcs	r3, r3
 8001232:	425f      	negs	r7, r3
 8001234:	183f      	adds	r7, r7, r0
 8001236:	023b      	lsls	r3, r7, #8
 8001238:	d5e3      	bpl.n	8001202 <__aeabi_dadd+0x24a>
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <__aeabi_dadd+0x368>)
 800123c:	3601      	adds	r6, #1
 800123e:	429e      	cmp	r6, r3
 8001240:	d000      	beq.n	8001244 <__aeabi_dadd+0x28c>
 8001242:	e0b5      	b.n	80013b0 <__aeabi_dadd+0x3f8>
 8001244:	0032      	movs	r2, r6
 8001246:	2700      	movs	r7, #0
 8001248:	2300      	movs	r3, #0
 800124a:	e74c      	b.n	80010e6 <__aeabi_dadd+0x12e>
 800124c:	0742      	lsls	r2, r0, #29
 800124e:	08db      	lsrs	r3, r3, #3
 8001250:	4313      	orrs	r3, r2
 8001252:	08c0      	lsrs	r0, r0, #3
 8001254:	001a      	movs	r2, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x2a4>
 800125a:	e1e1      	b.n	8001620 <__aeabi_dadd+0x668>
 800125c:	2780      	movs	r7, #128	; 0x80
 800125e:	033f      	lsls	r7, r7, #12
 8001260:	4307      	orrs	r7, r0
 8001262:	033f      	lsls	r7, r7, #12
 8001264:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <__aeabi_dadd+0x368>)
 8001266:	0b3f      	lsrs	r7, r7, #12
 8001268:	e73d      	b.n	80010e6 <__aeabi_dadd+0x12e>
 800126a:	0020      	movs	r0, r4
 800126c:	f001 fd5a 	bl	8002d24 <__clzsi2>
 8001270:	0001      	movs	r1, r0
 8001272:	3118      	adds	r1, #24
 8001274:	291f      	cmp	r1, #31
 8001276:	dc00      	bgt.n	800127a <__aeabi_dadd+0x2c2>
 8001278:	e6fc      	b.n	8001074 <__aeabi_dadd+0xbc>
 800127a:	3808      	subs	r0, #8
 800127c:	4084      	lsls	r4, r0
 800127e:	0027      	movs	r7, r4
 8001280:	2400      	movs	r4, #0
 8001282:	42b1      	cmp	r1, r6
 8001284:	db00      	blt.n	8001288 <__aeabi_dadd+0x2d0>
 8001286:	e6ff      	b.n	8001088 <__aeabi_dadd+0xd0>
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <__aeabi_dadd+0x36c>)
 800128a:	1a76      	subs	r6, r6, r1
 800128c:	4017      	ands	r7, r2
 800128e:	e70d      	b.n	80010ac <__aeabi_dadd+0xf4>
 8001290:	2a00      	cmp	r2, #0
 8001292:	d02f      	beq.n	80012f4 <__aeabi_dadd+0x33c>
 8001294:	464a      	mov	r2, r9
 8001296:	1b92      	subs	r2, r2, r6
 8001298:	4694      	mov	ip, r2
 800129a:	2e00      	cmp	r6, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x2e8>
 800129e:	e0ad      	b.n	80013fc <__aeabi_dadd+0x444>
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <__aeabi_dadd+0x368>)
 80012a2:	4591      	cmp	r9, r2
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dadd+0x2f0>
 80012a6:	e10f      	b.n	80014c8 <__aeabi_dadd+0x510>
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	4310      	orrs	r0, r2
 80012ae:	4662      	mov	r2, ip
 80012b0:	2a38      	cmp	r2, #56	; 0x38
 80012b2:	dd00      	ble.n	80012b6 <__aeabi_dadd+0x2fe>
 80012b4:	e10f      	b.n	80014d6 <__aeabi_dadd+0x51e>
 80012b6:	2a1f      	cmp	r2, #31
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dadd+0x304>
 80012ba:	e180      	b.n	80015be <__aeabi_dadd+0x606>
 80012bc:	4664      	mov	r4, ip
 80012be:	2220      	movs	r2, #32
 80012c0:	001e      	movs	r6, r3
 80012c2:	1b12      	subs	r2, r2, r4
 80012c4:	4667      	mov	r7, ip
 80012c6:	0004      	movs	r4, r0
 80012c8:	4093      	lsls	r3, r2
 80012ca:	4094      	lsls	r4, r2
 80012cc:	40fe      	lsrs	r6, r7
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	4193      	sbcs	r3, r2
 80012d2:	40f8      	lsrs	r0, r7
 80012d4:	4334      	orrs	r4, r6
 80012d6:	431c      	orrs	r4, r3
 80012d8:	4480      	add	r8, r0
 80012da:	1864      	adds	r4, r4, r1
 80012dc:	428c      	cmp	r4, r1
 80012de:	41bf      	sbcs	r7, r7
 80012e0:	427f      	negs	r7, r7
 80012e2:	464e      	mov	r6, r9
 80012e4:	4447      	add	r7, r8
 80012e6:	e7a6      	b.n	8001236 <__aeabi_dadd+0x27e>
 80012e8:	4642      	mov	r2, r8
 80012ea:	430a      	orrs	r2, r1
 80012ec:	0011      	movs	r1, r2
 80012ee:	1e4a      	subs	r2, r1, #1
 80012f0:	4191      	sbcs	r1, r2
 80012f2:	e6ad      	b.n	8001050 <__aeabi_dadd+0x98>
 80012f4:	4c0c      	ldr	r4, [pc, #48]	; (8001328 <__aeabi_dadd+0x370>)
 80012f6:	1c72      	adds	r2, r6, #1
 80012f8:	4222      	tst	r2, r4
 80012fa:	d000      	beq.n	80012fe <__aeabi_dadd+0x346>
 80012fc:	e0a1      	b.n	8001442 <__aeabi_dadd+0x48a>
 80012fe:	0002      	movs	r2, r0
 8001300:	431a      	orrs	r2, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_dadd+0x350>
 8001306:	e0fa      	b.n	80014fe <__aeabi_dadd+0x546>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x356>
 800130c:	e145      	b.n	800159a <__aeabi_dadd+0x5e2>
 800130e:	003a      	movs	r2, r7
 8001310:	430a      	orrs	r2, r1
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x35e>
 8001314:	e146      	b.n	80015a4 <__aeabi_dadd+0x5ec>
 8001316:	0742      	lsls	r2, r0, #29
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	4313      	orrs	r3, r2
 800131c:	08c0      	lsrs	r0, r0, #3
 800131e:	e77b      	b.n	8001218 <__aeabi_dadd+0x260>
 8001320:	000007ff 	.word	0x000007ff
 8001324:	ff7fffff 	.word	0xff7fffff
 8001328:	000007fe 	.word	0x000007fe
 800132c:	4647      	mov	r7, r8
 800132e:	1a5c      	subs	r4, r3, r1
 8001330:	1bc2      	subs	r2, r0, r7
 8001332:	42a3      	cmp	r3, r4
 8001334:	41bf      	sbcs	r7, r7
 8001336:	427f      	negs	r7, r7
 8001338:	46b9      	mov	r9, r7
 800133a:	0017      	movs	r7, r2
 800133c:	464a      	mov	r2, r9
 800133e:	1abf      	subs	r7, r7, r2
 8001340:	023a      	lsls	r2, r7, #8
 8001342:	d500      	bpl.n	8001346 <__aeabi_dadd+0x38e>
 8001344:	e08d      	b.n	8001462 <__aeabi_dadd+0x4aa>
 8001346:	0023      	movs	r3, r4
 8001348:	433b      	orrs	r3, r7
 800134a:	d000      	beq.n	800134e <__aeabi_dadd+0x396>
 800134c:	e68a      	b.n	8001064 <__aeabi_dadd+0xac>
 800134e:	2000      	movs	r0, #0
 8001350:	2500      	movs	r5, #0
 8001352:	e761      	b.n	8001218 <__aeabi_dadd+0x260>
 8001354:	4cb4      	ldr	r4, [pc, #720]	; (8001628 <__aeabi_dadd+0x670>)
 8001356:	45a1      	cmp	r9, r4
 8001358:	d100      	bne.n	800135c <__aeabi_dadd+0x3a4>
 800135a:	e0ad      	b.n	80014b8 <__aeabi_dadd+0x500>
 800135c:	2480      	movs	r4, #128	; 0x80
 800135e:	0424      	lsls	r4, r4, #16
 8001360:	4320      	orrs	r0, r4
 8001362:	4664      	mov	r4, ip
 8001364:	2c38      	cmp	r4, #56	; 0x38
 8001366:	dc3d      	bgt.n	80013e4 <__aeabi_dadd+0x42c>
 8001368:	4662      	mov	r2, ip
 800136a:	2c1f      	cmp	r4, #31
 800136c:	dd00      	ble.n	8001370 <__aeabi_dadd+0x3b8>
 800136e:	e0b7      	b.n	80014e0 <__aeabi_dadd+0x528>
 8001370:	2520      	movs	r5, #32
 8001372:	001e      	movs	r6, r3
 8001374:	1b2d      	subs	r5, r5, r4
 8001376:	0004      	movs	r4, r0
 8001378:	40ab      	lsls	r3, r5
 800137a:	40ac      	lsls	r4, r5
 800137c:	40d6      	lsrs	r6, r2
 800137e:	40d0      	lsrs	r0, r2
 8001380:	4642      	mov	r2, r8
 8001382:	1e5d      	subs	r5, r3, #1
 8001384:	41ab      	sbcs	r3, r5
 8001386:	4334      	orrs	r4, r6
 8001388:	1a12      	subs	r2, r2, r0
 800138a:	4690      	mov	r8, r2
 800138c:	4323      	orrs	r3, r4
 800138e:	e02c      	b.n	80013ea <__aeabi_dadd+0x432>
 8001390:	0742      	lsls	r2, r0, #29
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	4313      	orrs	r3, r2
 8001396:	08c0      	lsrs	r0, r0, #3
 8001398:	e73b      	b.n	8001212 <__aeabi_dadd+0x25a>
 800139a:	185c      	adds	r4, r3, r1
 800139c:	429c      	cmp	r4, r3
 800139e:	419b      	sbcs	r3, r3
 80013a0:	4440      	add	r0, r8
 80013a2:	425b      	negs	r3, r3
 80013a4:	18c7      	adds	r7, r0, r3
 80013a6:	2601      	movs	r6, #1
 80013a8:	023b      	lsls	r3, r7, #8
 80013aa:	d400      	bmi.n	80013ae <__aeabi_dadd+0x3f6>
 80013ac:	e729      	b.n	8001202 <__aeabi_dadd+0x24a>
 80013ae:	2602      	movs	r6, #2
 80013b0:	4a9e      	ldr	r2, [pc, #632]	; (800162c <__aeabi_dadd+0x674>)
 80013b2:	0863      	lsrs	r3, r4, #1
 80013b4:	4017      	ands	r7, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	4014      	ands	r4, r2
 80013ba:	431c      	orrs	r4, r3
 80013bc:	07fb      	lsls	r3, r7, #31
 80013be:	431c      	orrs	r4, r3
 80013c0:	087f      	lsrs	r7, r7, #1
 80013c2:	e673      	b.n	80010ac <__aeabi_dadd+0xf4>
 80013c4:	4644      	mov	r4, r8
 80013c6:	3a20      	subs	r2, #32
 80013c8:	40d4      	lsrs	r4, r2
 80013ca:	4662      	mov	r2, ip
 80013cc:	2a20      	cmp	r2, #32
 80013ce:	d005      	beq.n	80013dc <__aeabi_dadd+0x424>
 80013d0:	4667      	mov	r7, ip
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	1bd2      	subs	r2, r2, r7
 80013d6:	4647      	mov	r7, r8
 80013d8:	4097      	lsls	r7, r2
 80013da:	4339      	orrs	r1, r7
 80013dc:	1e4a      	subs	r2, r1, #1
 80013de:	4191      	sbcs	r1, r2
 80013e0:	4321      	orrs	r1, r4
 80013e2:	e635      	b.n	8001050 <__aeabi_dadd+0x98>
 80013e4:	4303      	orrs	r3, r0
 80013e6:	1e58      	subs	r0, r3, #1
 80013e8:	4183      	sbcs	r3, r0
 80013ea:	1acc      	subs	r4, r1, r3
 80013ec:	42a1      	cmp	r1, r4
 80013ee:	41bf      	sbcs	r7, r7
 80013f0:	4643      	mov	r3, r8
 80013f2:	427f      	negs	r7, r7
 80013f4:	4655      	mov	r5, sl
 80013f6:	464e      	mov	r6, r9
 80013f8:	1bdf      	subs	r7, r3, r7
 80013fa:	e62e      	b.n	800105a <__aeabi_dadd+0xa2>
 80013fc:	0002      	movs	r2, r0
 80013fe:	431a      	orrs	r2, r3
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x44c>
 8001402:	e0bd      	b.n	8001580 <__aeabi_dadd+0x5c8>
 8001404:	4662      	mov	r2, ip
 8001406:	4664      	mov	r4, ip
 8001408:	3a01      	subs	r2, #1
 800140a:	2c01      	cmp	r4, #1
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x458>
 800140e:	e0e5      	b.n	80015dc <__aeabi_dadd+0x624>
 8001410:	4c85      	ldr	r4, [pc, #532]	; (8001628 <__aeabi_dadd+0x670>)
 8001412:	45a4      	cmp	ip, r4
 8001414:	d058      	beq.n	80014c8 <__aeabi_dadd+0x510>
 8001416:	4694      	mov	ip, r2
 8001418:	e749      	b.n	80012ae <__aeabi_dadd+0x2f6>
 800141a:	4664      	mov	r4, ip
 800141c:	2220      	movs	r2, #32
 800141e:	1b12      	subs	r2, r2, r4
 8001420:	4644      	mov	r4, r8
 8001422:	4094      	lsls	r4, r2
 8001424:	000f      	movs	r7, r1
 8001426:	46a1      	mov	r9, r4
 8001428:	4664      	mov	r4, ip
 800142a:	4091      	lsls	r1, r2
 800142c:	40e7      	lsrs	r7, r4
 800142e:	464c      	mov	r4, r9
 8001430:	1e4a      	subs	r2, r1, #1
 8001432:	4191      	sbcs	r1, r2
 8001434:	433c      	orrs	r4, r7
 8001436:	4642      	mov	r2, r8
 8001438:	430c      	orrs	r4, r1
 800143a:	4661      	mov	r1, ip
 800143c:	40ca      	lsrs	r2, r1
 800143e:	1880      	adds	r0, r0, r2
 8001440:	e6f4      	b.n	800122c <__aeabi_dadd+0x274>
 8001442:	4c79      	ldr	r4, [pc, #484]	; (8001628 <__aeabi_dadd+0x670>)
 8001444:	42a2      	cmp	r2, r4
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x492>
 8001448:	e6fd      	b.n	8001246 <__aeabi_dadd+0x28e>
 800144a:	1859      	adds	r1, r3, r1
 800144c:	4299      	cmp	r1, r3
 800144e:	419b      	sbcs	r3, r3
 8001450:	4440      	add	r0, r8
 8001452:	425f      	negs	r7, r3
 8001454:	19c7      	adds	r7, r0, r7
 8001456:	07fc      	lsls	r4, r7, #31
 8001458:	0849      	lsrs	r1, r1, #1
 800145a:	0016      	movs	r6, r2
 800145c:	430c      	orrs	r4, r1
 800145e:	087f      	lsrs	r7, r7, #1
 8001460:	e6cf      	b.n	8001202 <__aeabi_dadd+0x24a>
 8001462:	1acc      	subs	r4, r1, r3
 8001464:	42a1      	cmp	r1, r4
 8001466:	41bf      	sbcs	r7, r7
 8001468:	4643      	mov	r3, r8
 800146a:	427f      	negs	r7, r7
 800146c:	1a18      	subs	r0, r3, r0
 800146e:	4655      	mov	r5, sl
 8001470:	1bc7      	subs	r7, r0, r7
 8001472:	e5f7      	b.n	8001064 <__aeabi_dadd+0xac>
 8001474:	08c9      	lsrs	r1, r1, #3
 8001476:	077b      	lsls	r3, r7, #29
 8001478:	4655      	mov	r5, sl
 800147a:	430b      	orrs	r3, r1
 800147c:	08f8      	lsrs	r0, r7, #3
 800147e:	e6c8      	b.n	8001212 <__aeabi_dadd+0x25a>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x4ce>
 8001484:	e081      	b.n	800158a <__aeabi_dadd+0x5d2>
 8001486:	4643      	mov	r3, r8
 8001488:	430b      	orrs	r3, r1
 800148a:	d115      	bne.n	80014b8 <__aeabi_dadd+0x500>
 800148c:	2080      	movs	r0, #128	; 0x80
 800148e:	2500      	movs	r5, #0
 8001490:	0300      	lsls	r0, r0, #12
 8001492:	e6e3      	b.n	800125c <__aeabi_dadd+0x2a4>
 8001494:	1a5c      	subs	r4, r3, r1
 8001496:	42a3      	cmp	r3, r4
 8001498:	419b      	sbcs	r3, r3
 800149a:	1bc7      	subs	r7, r0, r7
 800149c:	425b      	negs	r3, r3
 800149e:	2601      	movs	r6, #1
 80014a0:	1aff      	subs	r7, r7, r3
 80014a2:	e5da      	b.n	800105a <__aeabi_dadd+0xa2>
 80014a4:	0742      	lsls	r2, r0, #29
 80014a6:	08db      	lsrs	r3, r3, #3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	08c0      	lsrs	r0, r0, #3
 80014ac:	e6d2      	b.n	8001254 <__aeabi_dadd+0x29c>
 80014ae:	0742      	lsls	r2, r0, #29
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	08c0      	lsrs	r0, r0, #3
 80014b6:	e6ac      	b.n	8001212 <__aeabi_dadd+0x25a>
 80014b8:	4643      	mov	r3, r8
 80014ba:	4642      	mov	r2, r8
 80014bc:	08c9      	lsrs	r1, r1, #3
 80014be:	075b      	lsls	r3, r3, #29
 80014c0:	4655      	mov	r5, sl
 80014c2:	430b      	orrs	r3, r1
 80014c4:	08d0      	lsrs	r0, r2, #3
 80014c6:	e6c5      	b.n	8001254 <__aeabi_dadd+0x29c>
 80014c8:	4643      	mov	r3, r8
 80014ca:	4642      	mov	r2, r8
 80014cc:	075b      	lsls	r3, r3, #29
 80014ce:	08c9      	lsrs	r1, r1, #3
 80014d0:	430b      	orrs	r3, r1
 80014d2:	08d0      	lsrs	r0, r2, #3
 80014d4:	e6be      	b.n	8001254 <__aeabi_dadd+0x29c>
 80014d6:	4303      	orrs	r3, r0
 80014d8:	001c      	movs	r4, r3
 80014da:	1e63      	subs	r3, r4, #1
 80014dc:	419c      	sbcs	r4, r3
 80014de:	e6fc      	b.n	80012da <__aeabi_dadd+0x322>
 80014e0:	0002      	movs	r2, r0
 80014e2:	3c20      	subs	r4, #32
 80014e4:	40e2      	lsrs	r2, r4
 80014e6:	0014      	movs	r4, r2
 80014e8:	4662      	mov	r2, ip
 80014ea:	2a20      	cmp	r2, #32
 80014ec:	d003      	beq.n	80014f6 <__aeabi_dadd+0x53e>
 80014ee:	2540      	movs	r5, #64	; 0x40
 80014f0:	1aad      	subs	r5, r5, r2
 80014f2:	40a8      	lsls	r0, r5
 80014f4:	4303      	orrs	r3, r0
 80014f6:	1e58      	subs	r0, r3, #1
 80014f8:	4183      	sbcs	r3, r0
 80014fa:	4323      	orrs	r3, r4
 80014fc:	e775      	b.n	80013ea <__aeabi_dadd+0x432>
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d0e2      	beq.n	80014c8 <__aeabi_dadd+0x510>
 8001502:	003a      	movs	r2, r7
 8001504:	430a      	orrs	r2, r1
 8001506:	d0cd      	beq.n	80014a4 <__aeabi_dadd+0x4ec>
 8001508:	0742      	lsls	r2, r0, #29
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	08c0      	lsrs	r0, r0, #3
 8001512:	0312      	lsls	r2, r2, #12
 8001514:	4210      	tst	r0, r2
 8001516:	d006      	beq.n	8001526 <__aeabi_dadd+0x56e>
 8001518:	08fc      	lsrs	r4, r7, #3
 800151a:	4214      	tst	r4, r2
 800151c:	d103      	bne.n	8001526 <__aeabi_dadd+0x56e>
 800151e:	0020      	movs	r0, r4
 8001520:	08cb      	lsrs	r3, r1, #3
 8001522:	077a      	lsls	r2, r7, #29
 8001524:	4313      	orrs	r3, r2
 8001526:	0f5a      	lsrs	r2, r3, #29
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	0752      	lsls	r2, r2, #29
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	4313      	orrs	r3, r2
 8001530:	e690      	b.n	8001254 <__aeabi_dadd+0x29c>
 8001532:	4643      	mov	r3, r8
 8001534:	430b      	orrs	r3, r1
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x582>
 8001538:	e709      	b.n	800134e <__aeabi_dadd+0x396>
 800153a:	4643      	mov	r3, r8
 800153c:	4642      	mov	r2, r8
 800153e:	08c9      	lsrs	r1, r1, #3
 8001540:	075b      	lsls	r3, r3, #29
 8001542:	4655      	mov	r5, sl
 8001544:	430b      	orrs	r3, r1
 8001546:	08d0      	lsrs	r0, r2, #3
 8001548:	e666      	b.n	8001218 <__aeabi_dadd+0x260>
 800154a:	1acc      	subs	r4, r1, r3
 800154c:	42a1      	cmp	r1, r4
 800154e:	4189      	sbcs	r1, r1
 8001550:	1a3f      	subs	r7, r7, r0
 8001552:	4249      	negs	r1, r1
 8001554:	4655      	mov	r5, sl
 8001556:	2601      	movs	r6, #1
 8001558:	1a7f      	subs	r7, r7, r1
 800155a:	e57e      	b.n	800105a <__aeabi_dadd+0xa2>
 800155c:	4642      	mov	r2, r8
 800155e:	1a5c      	subs	r4, r3, r1
 8001560:	1a87      	subs	r7, r0, r2
 8001562:	42a3      	cmp	r3, r4
 8001564:	4192      	sbcs	r2, r2
 8001566:	4252      	negs	r2, r2
 8001568:	1abf      	subs	r7, r7, r2
 800156a:	023a      	lsls	r2, r7, #8
 800156c:	d53d      	bpl.n	80015ea <__aeabi_dadd+0x632>
 800156e:	1acc      	subs	r4, r1, r3
 8001570:	42a1      	cmp	r1, r4
 8001572:	4189      	sbcs	r1, r1
 8001574:	4643      	mov	r3, r8
 8001576:	4249      	negs	r1, r1
 8001578:	1a1f      	subs	r7, r3, r0
 800157a:	4655      	mov	r5, sl
 800157c:	1a7f      	subs	r7, r7, r1
 800157e:	e595      	b.n	80010ac <__aeabi_dadd+0xf4>
 8001580:	077b      	lsls	r3, r7, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	430b      	orrs	r3, r1
 8001586:	08f8      	lsrs	r0, r7, #3
 8001588:	e643      	b.n	8001212 <__aeabi_dadd+0x25a>
 800158a:	4644      	mov	r4, r8
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	430c      	orrs	r4, r1
 8001590:	d130      	bne.n	80015f4 <__aeabi_dadd+0x63c>
 8001592:	0742      	lsls	r2, r0, #29
 8001594:	4313      	orrs	r3, r2
 8001596:	08c0      	lsrs	r0, r0, #3
 8001598:	e65c      	b.n	8001254 <__aeabi_dadd+0x29c>
 800159a:	077b      	lsls	r3, r7, #29
 800159c:	08c9      	lsrs	r1, r1, #3
 800159e:	430b      	orrs	r3, r1
 80015a0:	08f8      	lsrs	r0, r7, #3
 80015a2:	e639      	b.n	8001218 <__aeabi_dadd+0x260>
 80015a4:	185c      	adds	r4, r3, r1
 80015a6:	429c      	cmp	r4, r3
 80015a8:	419b      	sbcs	r3, r3
 80015aa:	4440      	add	r0, r8
 80015ac:	425b      	negs	r3, r3
 80015ae:	18c7      	adds	r7, r0, r3
 80015b0:	023b      	lsls	r3, r7, #8
 80015b2:	d400      	bmi.n	80015b6 <__aeabi_dadd+0x5fe>
 80015b4:	e625      	b.n	8001202 <__aeabi_dadd+0x24a>
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <__aeabi_dadd+0x674>)
 80015b8:	2601      	movs	r6, #1
 80015ba:	401f      	ands	r7, r3
 80015bc:	e621      	b.n	8001202 <__aeabi_dadd+0x24a>
 80015be:	0004      	movs	r4, r0
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d4      	lsrs	r4, r2
 80015c4:	4662      	mov	r2, ip
 80015c6:	2a20      	cmp	r2, #32
 80015c8:	d004      	beq.n	80015d4 <__aeabi_dadd+0x61c>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4666      	mov	r6, ip
 80015ce:	1b92      	subs	r2, r2, r6
 80015d0:	4090      	lsls	r0, r2
 80015d2:	4303      	orrs	r3, r0
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	4193      	sbcs	r3, r2
 80015d8:	431c      	orrs	r4, r3
 80015da:	e67e      	b.n	80012da <__aeabi_dadd+0x322>
 80015dc:	185c      	adds	r4, r3, r1
 80015de:	428c      	cmp	r4, r1
 80015e0:	4189      	sbcs	r1, r1
 80015e2:	4440      	add	r0, r8
 80015e4:	4249      	negs	r1, r1
 80015e6:	1847      	adds	r7, r0, r1
 80015e8:	e6dd      	b.n	80013a6 <__aeabi_dadd+0x3ee>
 80015ea:	0023      	movs	r3, r4
 80015ec:	433b      	orrs	r3, r7
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x63a>
 80015f0:	e6ad      	b.n	800134e <__aeabi_dadd+0x396>
 80015f2:	e606      	b.n	8001202 <__aeabi_dadd+0x24a>
 80015f4:	0744      	lsls	r4, r0, #29
 80015f6:	4323      	orrs	r3, r4
 80015f8:	2480      	movs	r4, #128	; 0x80
 80015fa:	08c0      	lsrs	r0, r0, #3
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	4220      	tst	r0, r4
 8001600:	d008      	beq.n	8001614 <__aeabi_dadd+0x65c>
 8001602:	4642      	mov	r2, r8
 8001604:	08d6      	lsrs	r6, r2, #3
 8001606:	4226      	tst	r6, r4
 8001608:	d104      	bne.n	8001614 <__aeabi_dadd+0x65c>
 800160a:	4655      	mov	r5, sl
 800160c:	0030      	movs	r0, r6
 800160e:	08cb      	lsrs	r3, r1, #3
 8001610:	0751      	lsls	r1, r2, #29
 8001612:	430b      	orrs	r3, r1
 8001614:	0f5a      	lsrs	r2, r3, #29
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	0752      	lsls	r2, r2, #29
 800161c:	4313      	orrs	r3, r2
 800161e:	e619      	b.n	8001254 <__aeabi_dadd+0x29c>
 8001620:	2300      	movs	r3, #0
 8001622:	4a01      	ldr	r2, [pc, #4]	; (8001628 <__aeabi_dadd+0x670>)
 8001624:	001f      	movs	r7, r3
 8001626:	e55e      	b.n	80010e6 <__aeabi_dadd+0x12e>
 8001628:	000007ff 	.word	0x000007ff
 800162c:	ff7fffff 	.word	0xff7fffff

08001630 <__aeabi_ddiv>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	4657      	mov	r7, sl
 8001634:	464e      	mov	r6, r9
 8001636:	4645      	mov	r5, r8
 8001638:	46de      	mov	lr, fp
 800163a:	b5e0      	push	{r5, r6, r7, lr}
 800163c:	4681      	mov	r9, r0
 800163e:	0005      	movs	r5, r0
 8001640:	030c      	lsls	r4, r1, #12
 8001642:	0048      	lsls	r0, r1, #1
 8001644:	4692      	mov	sl, r2
 8001646:	001f      	movs	r7, r3
 8001648:	b085      	sub	sp, #20
 800164a:	0b24      	lsrs	r4, r4, #12
 800164c:	0d40      	lsrs	r0, r0, #21
 800164e:	0fce      	lsrs	r6, r1, #31
 8001650:	2800      	cmp	r0, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_ddiv+0x26>
 8001654:	e156      	b.n	8001904 <__aeabi_ddiv+0x2d4>
 8001656:	4bd4      	ldr	r3, [pc, #848]	; (80019a8 <__aeabi_ddiv+0x378>)
 8001658:	4298      	cmp	r0, r3
 800165a:	d100      	bne.n	800165e <__aeabi_ddiv+0x2e>
 800165c:	e172      	b.n	8001944 <__aeabi_ddiv+0x314>
 800165e:	0f6b      	lsrs	r3, r5, #29
 8001660:	00e4      	lsls	r4, r4, #3
 8001662:	431c      	orrs	r4, r3
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	4323      	orrs	r3, r4
 800166a:	4698      	mov	r8, r3
 800166c:	4bcf      	ldr	r3, [pc, #828]	; (80019ac <__aeabi_ddiv+0x37c>)
 800166e:	00ed      	lsls	r5, r5, #3
 8001670:	469b      	mov	fp, r3
 8001672:	2300      	movs	r3, #0
 8001674:	4699      	mov	r9, r3
 8001676:	4483      	add	fp, r0
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	033c      	lsls	r4, r7, #12
 800167c:	007b      	lsls	r3, r7, #1
 800167e:	4650      	mov	r0, sl
 8001680:	0b24      	lsrs	r4, r4, #12
 8001682:	0d5b      	lsrs	r3, r3, #21
 8001684:	0fff      	lsrs	r7, r7, #31
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x5c>
 800168a:	e11f      	b.n	80018cc <__aeabi_ddiv+0x29c>
 800168c:	4ac6      	ldr	r2, [pc, #792]	; (80019a8 <__aeabi_ddiv+0x378>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d100      	bne.n	8001694 <__aeabi_ddiv+0x64>
 8001692:	e162      	b.n	800195a <__aeabi_ddiv+0x32a>
 8001694:	49c5      	ldr	r1, [pc, #788]	; (80019ac <__aeabi_ddiv+0x37c>)
 8001696:	0f42      	lsrs	r2, r0, #29
 8001698:	468c      	mov	ip, r1
 800169a:	00e4      	lsls	r4, r4, #3
 800169c:	4659      	mov	r1, fp
 800169e:	4314      	orrs	r4, r2
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	4463      	add	r3, ip
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	1acb      	subs	r3, r1, r3
 80016a8:	4314      	orrs	r4, r2
 80016aa:	469b      	mov	fp, r3
 80016ac:	00c2      	lsls	r2, r0, #3
 80016ae:	2000      	movs	r0, #0
 80016b0:	0033      	movs	r3, r6
 80016b2:	407b      	eors	r3, r7
 80016b4:	469a      	mov	sl, r3
 80016b6:	464b      	mov	r3, r9
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d827      	bhi.n	800170c <__aeabi_ddiv+0xdc>
 80016bc:	49bc      	ldr	r1, [pc, #752]	; (80019b0 <__aeabi_ddiv+0x380>)
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	58cb      	ldr	r3, [r1, r3]
 80016c2:	469f      	mov	pc, r3
 80016c4:	46b2      	mov	sl, r6
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d016      	beq.n	80016fa <__aeabi_ddiv+0xca>
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d100      	bne.n	80016d2 <__aeabi_ddiv+0xa2>
 80016d0:	e28e      	b.n	8001bf0 <__aeabi_ddiv+0x5c0>
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d000      	beq.n	80016d8 <__aeabi_ddiv+0xa8>
 80016d6:	e0d9      	b.n	800188c <__aeabi_ddiv+0x25c>
 80016d8:	2300      	movs	r3, #0
 80016da:	2400      	movs	r4, #0
 80016dc:	2500      	movs	r5, #0
 80016de:	4652      	mov	r2, sl
 80016e0:	051b      	lsls	r3, r3, #20
 80016e2:	4323      	orrs	r3, r4
 80016e4:	07d2      	lsls	r2, r2, #31
 80016e6:	4313      	orrs	r3, r2
 80016e8:	0028      	movs	r0, r5
 80016ea:	0019      	movs	r1, r3
 80016ec:	b005      	add	sp, #20
 80016ee:	bcf0      	pop	{r4, r5, r6, r7}
 80016f0:	46bb      	mov	fp, r7
 80016f2:	46b2      	mov	sl, r6
 80016f4:	46a9      	mov	r9, r5
 80016f6:	46a0      	mov	r8, r4
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fa:	2400      	movs	r4, #0
 80016fc:	2500      	movs	r5, #0
 80016fe:	4baa      	ldr	r3, [pc, #680]	; (80019a8 <__aeabi_ddiv+0x378>)
 8001700:	e7ed      	b.n	80016de <__aeabi_ddiv+0xae>
 8001702:	46ba      	mov	sl, r7
 8001704:	46a0      	mov	r8, r4
 8001706:	0015      	movs	r5, r2
 8001708:	9000      	str	r0, [sp, #0]
 800170a:	e7dc      	b.n	80016c6 <__aeabi_ddiv+0x96>
 800170c:	4544      	cmp	r4, r8
 800170e:	d200      	bcs.n	8001712 <__aeabi_ddiv+0xe2>
 8001710:	e1c7      	b.n	8001aa2 <__aeabi_ddiv+0x472>
 8001712:	d100      	bne.n	8001716 <__aeabi_ddiv+0xe6>
 8001714:	e1c2      	b.n	8001a9c <__aeabi_ddiv+0x46c>
 8001716:	2301      	movs	r3, #1
 8001718:	425b      	negs	r3, r3
 800171a:	469c      	mov	ip, r3
 800171c:	002e      	movs	r6, r5
 800171e:	4640      	mov	r0, r8
 8001720:	2500      	movs	r5, #0
 8001722:	44e3      	add	fp, ip
 8001724:	0223      	lsls	r3, r4, #8
 8001726:	0e14      	lsrs	r4, r2, #24
 8001728:	431c      	orrs	r4, r3
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	4699      	mov	r9, r3
 800172e:	0423      	lsls	r3, r4, #16
 8001730:	0c1f      	lsrs	r7, r3, #16
 8001732:	0212      	lsls	r2, r2, #8
 8001734:	4649      	mov	r1, r9
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	9701      	str	r7, [sp, #4]
 800173a:	f7fe fd85 	bl	8000248 <__aeabi_uidivmod>
 800173e:	0002      	movs	r2, r0
 8001740:	437a      	muls	r2, r7
 8001742:	040b      	lsls	r3, r1, #16
 8001744:	0c31      	lsrs	r1, r6, #16
 8001746:	4680      	mov	r8, r0
 8001748:	4319      	orrs	r1, r3
 800174a:	428a      	cmp	r2, r1
 800174c:	d907      	bls.n	800175e <__aeabi_ddiv+0x12e>
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	1909      	adds	r1, r1, r4
 8001756:	44e0      	add	r8, ip
 8001758:	428c      	cmp	r4, r1
 800175a:	d800      	bhi.n	800175e <__aeabi_ddiv+0x12e>
 800175c:	e207      	b.n	8001b6e <__aeabi_ddiv+0x53e>
 800175e:	1a88      	subs	r0, r1, r2
 8001760:	4649      	mov	r1, r9
 8001762:	f7fe fd71 	bl	8000248 <__aeabi_uidivmod>
 8001766:	0409      	lsls	r1, r1, #16
 8001768:	468c      	mov	ip, r1
 800176a:	0431      	lsls	r1, r6, #16
 800176c:	4666      	mov	r6, ip
 800176e:	9a01      	ldr	r2, [sp, #4]
 8001770:	0c09      	lsrs	r1, r1, #16
 8001772:	4342      	muls	r2, r0
 8001774:	0003      	movs	r3, r0
 8001776:	4331      	orrs	r1, r6
 8001778:	428a      	cmp	r2, r1
 800177a:	d904      	bls.n	8001786 <__aeabi_ddiv+0x156>
 800177c:	1909      	adds	r1, r1, r4
 800177e:	3b01      	subs	r3, #1
 8001780:	428c      	cmp	r4, r1
 8001782:	d800      	bhi.n	8001786 <__aeabi_ddiv+0x156>
 8001784:	e1ed      	b.n	8001b62 <__aeabi_ddiv+0x532>
 8001786:	1a88      	subs	r0, r1, r2
 8001788:	4642      	mov	r2, r8
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	431a      	orrs	r2, r3
 800178e:	4690      	mov	r8, r2
 8001790:	4641      	mov	r1, r8
 8001792:	9b00      	ldr	r3, [sp, #0]
 8001794:	040e      	lsls	r6, r1, #16
 8001796:	0c1b      	lsrs	r3, r3, #16
 8001798:	001f      	movs	r7, r3
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	0c36      	lsrs	r6, r6, #16
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	0c19      	lsrs	r1, r3, #16
 80017a4:	000b      	movs	r3, r1
 80017a6:	4373      	muls	r3, r6
 80017a8:	0c12      	lsrs	r2, r2, #16
 80017aa:	437e      	muls	r6, r7
 80017ac:	9103      	str	r1, [sp, #12]
 80017ae:	4351      	muls	r1, r2
 80017b0:	437a      	muls	r2, r7
 80017b2:	0c1f      	lsrs	r7, r3, #16
 80017b4:	46bc      	mov	ip, r7
 80017b6:	1876      	adds	r6, r6, r1
 80017b8:	4466      	add	r6, ip
 80017ba:	42b1      	cmp	r1, r6
 80017bc:	d903      	bls.n	80017c6 <__aeabi_ddiv+0x196>
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	468c      	mov	ip, r1
 80017c4:	4462      	add	r2, ip
 80017c6:	0c31      	lsrs	r1, r6, #16
 80017c8:	188a      	adds	r2, r1, r2
 80017ca:	0431      	lsls	r1, r6, #16
 80017cc:	041e      	lsls	r6, r3, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	198e      	adds	r6, r1, r6
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d302      	bcc.n	80017dc <__aeabi_ddiv+0x1ac>
 80017d6:	d112      	bne.n	80017fe <__aeabi_ddiv+0x1ce>
 80017d8:	42b5      	cmp	r5, r6
 80017da:	d210      	bcs.n	80017fe <__aeabi_ddiv+0x1ce>
 80017dc:	4643      	mov	r3, r8
 80017de:	1e59      	subs	r1, r3, #1
 80017e0:	9b00      	ldr	r3, [sp, #0]
 80017e2:	469c      	mov	ip, r3
 80017e4:	4465      	add	r5, ip
 80017e6:	001f      	movs	r7, r3
 80017e8:	429d      	cmp	r5, r3
 80017ea:	419b      	sbcs	r3, r3
 80017ec:	425b      	negs	r3, r3
 80017ee:	191b      	adds	r3, r3, r4
 80017f0:	18c0      	adds	r0, r0, r3
 80017f2:	4284      	cmp	r4, r0
 80017f4:	d200      	bcs.n	80017f8 <__aeabi_ddiv+0x1c8>
 80017f6:	e1a0      	b.n	8001b3a <__aeabi_ddiv+0x50a>
 80017f8:	d100      	bne.n	80017fc <__aeabi_ddiv+0x1cc>
 80017fa:	e19b      	b.n	8001b34 <__aeabi_ddiv+0x504>
 80017fc:	4688      	mov	r8, r1
 80017fe:	1bae      	subs	r6, r5, r6
 8001800:	42b5      	cmp	r5, r6
 8001802:	41ad      	sbcs	r5, r5
 8001804:	1a80      	subs	r0, r0, r2
 8001806:	426d      	negs	r5, r5
 8001808:	1b40      	subs	r0, r0, r5
 800180a:	4284      	cmp	r4, r0
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x1e0>
 800180e:	e1d5      	b.n	8001bbc <__aeabi_ddiv+0x58c>
 8001810:	4649      	mov	r1, r9
 8001812:	f7fe fd19 	bl	8000248 <__aeabi_uidivmod>
 8001816:	9a01      	ldr	r2, [sp, #4]
 8001818:	040b      	lsls	r3, r1, #16
 800181a:	4342      	muls	r2, r0
 800181c:	0c31      	lsrs	r1, r6, #16
 800181e:	0005      	movs	r5, r0
 8001820:	4319      	orrs	r1, r3
 8001822:	428a      	cmp	r2, r1
 8001824:	d900      	bls.n	8001828 <__aeabi_ddiv+0x1f8>
 8001826:	e16c      	b.n	8001b02 <__aeabi_ddiv+0x4d2>
 8001828:	1a88      	subs	r0, r1, r2
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fd0c 	bl	8000248 <__aeabi_uidivmod>
 8001830:	9a01      	ldr	r2, [sp, #4]
 8001832:	0436      	lsls	r6, r6, #16
 8001834:	4342      	muls	r2, r0
 8001836:	0409      	lsls	r1, r1, #16
 8001838:	0c36      	lsrs	r6, r6, #16
 800183a:	0003      	movs	r3, r0
 800183c:	430e      	orrs	r6, r1
 800183e:	42b2      	cmp	r2, r6
 8001840:	d900      	bls.n	8001844 <__aeabi_ddiv+0x214>
 8001842:	e153      	b.n	8001aec <__aeabi_ddiv+0x4bc>
 8001844:	9803      	ldr	r0, [sp, #12]
 8001846:	1ab6      	subs	r6, r6, r2
 8001848:	0002      	movs	r2, r0
 800184a:	042d      	lsls	r5, r5, #16
 800184c:	431d      	orrs	r5, r3
 800184e:	9f02      	ldr	r7, [sp, #8]
 8001850:	042b      	lsls	r3, r5, #16
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	435a      	muls	r2, r3
 8001856:	437b      	muls	r3, r7
 8001858:	469c      	mov	ip, r3
 800185a:	0c29      	lsrs	r1, r5, #16
 800185c:	4348      	muls	r0, r1
 800185e:	0c13      	lsrs	r3, r2, #16
 8001860:	4484      	add	ip, r0
 8001862:	4463      	add	r3, ip
 8001864:	4379      	muls	r1, r7
 8001866:	4298      	cmp	r0, r3
 8001868:	d903      	bls.n	8001872 <__aeabi_ddiv+0x242>
 800186a:	2080      	movs	r0, #128	; 0x80
 800186c:	0240      	lsls	r0, r0, #9
 800186e:	4684      	mov	ip, r0
 8001870:	4461      	add	r1, ip
 8001872:	0c18      	lsrs	r0, r3, #16
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	0c12      	lsrs	r2, r2, #16
 800187a:	1841      	adds	r1, r0, r1
 800187c:	189b      	adds	r3, r3, r2
 800187e:	428e      	cmp	r6, r1
 8001880:	d200      	bcs.n	8001884 <__aeabi_ddiv+0x254>
 8001882:	e0ff      	b.n	8001a84 <__aeabi_ddiv+0x454>
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x258>
 8001886:	e0fa      	b.n	8001a7e <__aeabi_ddiv+0x44e>
 8001888:	2301      	movs	r3, #1
 800188a:	431d      	orrs	r5, r3
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <__aeabi_ddiv+0x384>)
 800188e:	445a      	add	r2, fp
 8001890:	2a00      	cmp	r2, #0
 8001892:	dc00      	bgt.n	8001896 <__aeabi_ddiv+0x266>
 8001894:	e0aa      	b.n	80019ec <__aeabi_ddiv+0x3bc>
 8001896:	076b      	lsls	r3, r5, #29
 8001898:	d000      	beq.n	800189c <__aeabi_ddiv+0x26c>
 800189a:	e13d      	b.n	8001b18 <__aeabi_ddiv+0x4e8>
 800189c:	08ed      	lsrs	r5, r5, #3
 800189e:	4643      	mov	r3, r8
 80018a0:	01db      	lsls	r3, r3, #7
 80018a2:	d506      	bpl.n	80018b2 <__aeabi_ddiv+0x282>
 80018a4:	4642      	mov	r2, r8
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <__aeabi_ddiv+0x388>)
 80018a8:	401a      	ands	r2, r3
 80018aa:	4690      	mov	r8, r2
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	00d2      	lsls	r2, r2, #3
 80018b0:	445a      	add	r2, fp
 80018b2:	4b42      	ldr	r3, [pc, #264]	; (80019bc <__aeabi_ddiv+0x38c>)
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dd00      	ble.n	80018ba <__aeabi_ddiv+0x28a>
 80018b8:	e71f      	b.n	80016fa <__aeabi_ddiv+0xca>
 80018ba:	4643      	mov	r3, r8
 80018bc:	075b      	lsls	r3, r3, #29
 80018be:	431d      	orrs	r5, r3
 80018c0:	4643      	mov	r3, r8
 80018c2:	0552      	lsls	r2, r2, #21
 80018c4:	025c      	lsls	r4, r3, #9
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	0d53      	lsrs	r3, r2, #21
 80018ca:	e708      	b.n	80016de <__aeabi_ddiv+0xae>
 80018cc:	4652      	mov	r2, sl
 80018ce:	4322      	orrs	r2, r4
 80018d0:	d100      	bne.n	80018d4 <__aeabi_ddiv+0x2a4>
 80018d2:	e07b      	b.n	80019cc <__aeabi_ddiv+0x39c>
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_ddiv+0x2aa>
 80018d8:	e0fa      	b.n	8001ad0 <__aeabi_ddiv+0x4a0>
 80018da:	0020      	movs	r0, r4
 80018dc:	f001 fa22 	bl	8002d24 <__clzsi2>
 80018e0:	0002      	movs	r2, r0
 80018e2:	3a0b      	subs	r2, #11
 80018e4:	231d      	movs	r3, #29
 80018e6:	0001      	movs	r1, r0
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	4652      	mov	r2, sl
 80018ec:	3908      	subs	r1, #8
 80018ee:	40da      	lsrs	r2, r3
 80018f0:	408c      	lsls	r4, r1
 80018f2:	4314      	orrs	r4, r2
 80018f4:	4652      	mov	r2, sl
 80018f6:	408a      	lsls	r2, r1
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <__aeabi_ddiv+0x390>)
 80018fa:	4458      	add	r0, fp
 80018fc:	469b      	mov	fp, r3
 80018fe:	4483      	add	fp, r0
 8001900:	2000      	movs	r0, #0
 8001902:	e6d5      	b.n	80016b0 <__aeabi_ddiv+0x80>
 8001904:	464b      	mov	r3, r9
 8001906:	4323      	orrs	r3, r4
 8001908:	4698      	mov	r8, r3
 800190a:	d044      	beq.n	8001996 <__aeabi_ddiv+0x366>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_ddiv+0x2e2>
 8001910:	e0ce      	b.n	8001ab0 <__aeabi_ddiv+0x480>
 8001912:	0020      	movs	r0, r4
 8001914:	f001 fa06 	bl	8002d24 <__clzsi2>
 8001918:	0001      	movs	r1, r0
 800191a:	0002      	movs	r2, r0
 800191c:	390b      	subs	r1, #11
 800191e:	231d      	movs	r3, #29
 8001920:	1a5b      	subs	r3, r3, r1
 8001922:	4649      	mov	r1, r9
 8001924:	0010      	movs	r0, r2
 8001926:	40d9      	lsrs	r1, r3
 8001928:	3808      	subs	r0, #8
 800192a:	4084      	lsls	r4, r0
 800192c:	000b      	movs	r3, r1
 800192e:	464d      	mov	r5, r9
 8001930:	4323      	orrs	r3, r4
 8001932:	4698      	mov	r8, r3
 8001934:	4085      	lsls	r5, r0
 8001936:	4823      	ldr	r0, [pc, #140]	; (80019c4 <__aeabi_ddiv+0x394>)
 8001938:	1a83      	subs	r3, r0, r2
 800193a:	469b      	mov	fp, r3
 800193c:	2300      	movs	r3, #0
 800193e:	4699      	mov	r9, r3
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	e69a      	b.n	800167a <__aeabi_ddiv+0x4a>
 8001944:	464b      	mov	r3, r9
 8001946:	4323      	orrs	r3, r4
 8001948:	4698      	mov	r8, r3
 800194a:	d11d      	bne.n	8001988 <__aeabi_ddiv+0x358>
 800194c:	2308      	movs	r3, #8
 800194e:	4699      	mov	r9, r3
 8001950:	3b06      	subs	r3, #6
 8001952:	2500      	movs	r5, #0
 8001954:	4683      	mov	fp, r0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	e68f      	b.n	800167a <__aeabi_ddiv+0x4a>
 800195a:	4652      	mov	r2, sl
 800195c:	4322      	orrs	r2, r4
 800195e:	d109      	bne.n	8001974 <__aeabi_ddiv+0x344>
 8001960:	2302      	movs	r3, #2
 8001962:	4649      	mov	r1, r9
 8001964:	4319      	orrs	r1, r3
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <__aeabi_ddiv+0x398>)
 8001968:	4689      	mov	r9, r1
 800196a:	469c      	mov	ip, r3
 800196c:	2400      	movs	r4, #0
 800196e:	2002      	movs	r0, #2
 8001970:	44e3      	add	fp, ip
 8001972:	e69d      	b.n	80016b0 <__aeabi_ddiv+0x80>
 8001974:	2303      	movs	r3, #3
 8001976:	464a      	mov	r2, r9
 8001978:	431a      	orrs	r2, r3
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <__aeabi_ddiv+0x398>)
 800197c:	4691      	mov	r9, r2
 800197e:	469c      	mov	ip, r3
 8001980:	4652      	mov	r2, sl
 8001982:	2003      	movs	r0, #3
 8001984:	44e3      	add	fp, ip
 8001986:	e693      	b.n	80016b0 <__aeabi_ddiv+0x80>
 8001988:	230c      	movs	r3, #12
 800198a:	4699      	mov	r9, r3
 800198c:	3b09      	subs	r3, #9
 800198e:	46a0      	mov	r8, r4
 8001990:	4683      	mov	fp, r0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	e671      	b.n	800167a <__aeabi_ddiv+0x4a>
 8001996:	2304      	movs	r3, #4
 8001998:	4699      	mov	r9, r3
 800199a:	2300      	movs	r3, #0
 800199c:	469b      	mov	fp, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	2500      	movs	r5, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	e669      	b.n	800167a <__aeabi_ddiv+0x4a>
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	000007ff 	.word	0x000007ff
 80019ac:	fffffc01 	.word	0xfffffc01
 80019b0:	0800abe4 	.word	0x0800abe4
 80019b4:	000003ff 	.word	0x000003ff
 80019b8:	feffffff 	.word	0xfeffffff
 80019bc:	000007fe 	.word	0x000007fe
 80019c0:	000003f3 	.word	0x000003f3
 80019c4:	fffffc0d 	.word	0xfffffc0d
 80019c8:	fffff801 	.word	0xfffff801
 80019cc:	4649      	mov	r1, r9
 80019ce:	2301      	movs	r3, #1
 80019d0:	4319      	orrs	r1, r3
 80019d2:	4689      	mov	r9, r1
 80019d4:	2400      	movs	r4, #0
 80019d6:	2001      	movs	r0, #1
 80019d8:	e66a      	b.n	80016b0 <__aeabi_ddiv+0x80>
 80019da:	2300      	movs	r3, #0
 80019dc:	2480      	movs	r4, #128	; 0x80
 80019de:	469a      	mov	sl, r3
 80019e0:	2500      	movs	r5, #0
 80019e2:	4b8a      	ldr	r3, [pc, #552]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 80019e4:	0324      	lsls	r4, r4, #12
 80019e6:	e67a      	b.n	80016de <__aeabi_ddiv+0xae>
 80019e8:	2501      	movs	r5, #1
 80019ea:	426d      	negs	r5, r5
 80019ec:	2301      	movs	r3, #1
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	2b38      	cmp	r3, #56	; 0x38
 80019f2:	dd00      	ble.n	80019f6 <__aeabi_ddiv+0x3c6>
 80019f4:	e670      	b.n	80016d8 <__aeabi_ddiv+0xa8>
 80019f6:	2b1f      	cmp	r3, #31
 80019f8:	dc00      	bgt.n	80019fc <__aeabi_ddiv+0x3cc>
 80019fa:	e0bf      	b.n	8001b7c <__aeabi_ddiv+0x54c>
 80019fc:	211f      	movs	r1, #31
 80019fe:	4249      	negs	r1, r1
 8001a00:	1a8a      	subs	r2, r1, r2
 8001a02:	4641      	mov	r1, r8
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d004      	beq.n	8001a16 <__aeabi_ddiv+0x3e6>
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <__aeabi_ddiv+0x5e0>)
 8001a10:	445b      	add	r3, fp
 8001a12:	4099      	lsls	r1, r3
 8001a14:	430d      	orrs	r5, r1
 8001a16:	1e6b      	subs	r3, r5, #1
 8001a18:	419d      	sbcs	r5, r3
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	432a      	orrs	r2, r5
 8001a1e:	001d      	movs	r5, r3
 8001a20:	2400      	movs	r4, #0
 8001a22:	4015      	ands	r5, r2
 8001a24:	4213      	tst	r3, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x3fa>
 8001a28:	e0d4      	b.n	8001bd4 <__aeabi_ddiv+0x5a4>
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4011      	ands	r1, r2
 8001a30:	2904      	cmp	r1, #4
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0x406>
 8001a34:	e0cb      	b.n	8001bce <__aeabi_ddiv+0x59e>
 8001a36:	1d11      	adds	r1, r2, #4
 8001a38:	4291      	cmp	r1, r2
 8001a3a:	4192      	sbcs	r2, r2
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	189b      	adds	r3, r3, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	0219      	lsls	r1, r3, #8
 8001a44:	d400      	bmi.n	8001a48 <__aeabi_ddiv+0x418>
 8001a46:	e0c2      	b.n	8001bce <__aeabi_ddiv+0x59e>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	e646      	b.n	80016de <__aeabi_ddiv+0xae>
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	4641      	mov	r1, r8
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4219      	tst	r1, r3
 8001a58:	d008      	beq.n	8001a6c <__aeabi_ddiv+0x43c>
 8001a5a:	421c      	tst	r4, r3
 8001a5c:	d106      	bne.n	8001a6c <__aeabi_ddiv+0x43c>
 8001a5e:	431c      	orrs	r4, r3
 8001a60:	0324      	lsls	r4, r4, #12
 8001a62:	46ba      	mov	sl, r7
 8001a64:	0015      	movs	r5, r2
 8001a66:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 8001a68:	0b24      	lsrs	r4, r4, #12
 8001a6a:	e638      	b.n	80016de <__aeabi_ddiv+0xae>
 8001a6c:	2480      	movs	r4, #128	; 0x80
 8001a6e:	4643      	mov	r3, r8
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	431c      	orrs	r4, r3
 8001a74:	0324      	lsls	r4, r4, #12
 8001a76:	46b2      	mov	sl, r6
 8001a78:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 8001a7a:	0b24      	lsrs	r4, r4, #12
 8001a7c:	e62f      	b.n	80016de <__aeabi_ddiv+0xae>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_ddiv+0x454>
 8001a82:	e703      	b.n	800188c <__aeabi_ddiv+0x25c>
 8001a84:	19a6      	adds	r6, r4, r6
 8001a86:	1e68      	subs	r0, r5, #1
 8001a88:	42a6      	cmp	r6, r4
 8001a8a:	d200      	bcs.n	8001a8e <__aeabi_ddiv+0x45e>
 8001a8c:	e08d      	b.n	8001baa <__aeabi_ddiv+0x57a>
 8001a8e:	428e      	cmp	r6, r1
 8001a90:	d200      	bcs.n	8001a94 <__aeabi_ddiv+0x464>
 8001a92:	e0a3      	b.n	8001bdc <__aeabi_ddiv+0x5ac>
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x468>
 8001a96:	e0b3      	b.n	8001c00 <__aeabi_ddiv+0x5d0>
 8001a98:	0005      	movs	r5, r0
 8001a9a:	e6f5      	b.n	8001888 <__aeabi_ddiv+0x258>
 8001a9c:	42aa      	cmp	r2, r5
 8001a9e:	d900      	bls.n	8001aa2 <__aeabi_ddiv+0x472>
 8001aa0:	e639      	b.n	8001716 <__aeabi_ddiv+0xe6>
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	07de      	lsls	r6, r3, #31
 8001aa6:	0858      	lsrs	r0, r3, #1
 8001aa8:	086b      	lsrs	r3, r5, #1
 8001aaa:	431e      	orrs	r6, r3
 8001aac:	07ed      	lsls	r5, r5, #31
 8001aae:	e639      	b.n	8001724 <__aeabi_ddiv+0xf4>
 8001ab0:	4648      	mov	r0, r9
 8001ab2:	f001 f937 	bl	8002d24 <__clzsi2>
 8001ab6:	0001      	movs	r1, r0
 8001ab8:	0002      	movs	r2, r0
 8001aba:	3115      	adds	r1, #21
 8001abc:	3220      	adds	r2, #32
 8001abe:	291c      	cmp	r1, #28
 8001ac0:	dc00      	bgt.n	8001ac4 <__aeabi_ddiv+0x494>
 8001ac2:	e72c      	b.n	800191e <__aeabi_ddiv+0x2ee>
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	3808      	subs	r0, #8
 8001ac8:	4083      	lsls	r3, r0
 8001aca:	2500      	movs	r5, #0
 8001acc:	4698      	mov	r8, r3
 8001ace:	e732      	b.n	8001936 <__aeabi_ddiv+0x306>
 8001ad0:	f001 f928 	bl	8002d24 <__clzsi2>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	3215      	adds	r2, #21
 8001ada:	3020      	adds	r0, #32
 8001adc:	2a1c      	cmp	r2, #28
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_ddiv+0x4b2>
 8001ae0:	e700      	b.n	80018e4 <__aeabi_ddiv+0x2b4>
 8001ae2:	4654      	mov	r4, sl
 8001ae4:	3b08      	subs	r3, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	409c      	lsls	r4, r3
 8001aea:	e705      	b.n	80018f8 <__aeabi_ddiv+0x2c8>
 8001aec:	1936      	adds	r6, r6, r4
 8001aee:	3b01      	subs	r3, #1
 8001af0:	42b4      	cmp	r4, r6
 8001af2:	d900      	bls.n	8001af6 <__aeabi_ddiv+0x4c6>
 8001af4:	e6a6      	b.n	8001844 <__aeabi_ddiv+0x214>
 8001af6:	42b2      	cmp	r2, r6
 8001af8:	d800      	bhi.n	8001afc <__aeabi_ddiv+0x4cc>
 8001afa:	e6a3      	b.n	8001844 <__aeabi_ddiv+0x214>
 8001afc:	1e83      	subs	r3, r0, #2
 8001afe:	1936      	adds	r6, r6, r4
 8001b00:	e6a0      	b.n	8001844 <__aeabi_ddiv+0x214>
 8001b02:	1909      	adds	r1, r1, r4
 8001b04:	3d01      	subs	r5, #1
 8001b06:	428c      	cmp	r4, r1
 8001b08:	d900      	bls.n	8001b0c <__aeabi_ddiv+0x4dc>
 8001b0a:	e68d      	b.n	8001828 <__aeabi_ddiv+0x1f8>
 8001b0c:	428a      	cmp	r2, r1
 8001b0e:	d800      	bhi.n	8001b12 <__aeabi_ddiv+0x4e2>
 8001b10:	e68a      	b.n	8001828 <__aeabi_ddiv+0x1f8>
 8001b12:	1e85      	subs	r5, r0, #2
 8001b14:	1909      	adds	r1, r1, r4
 8001b16:	e687      	b.n	8001828 <__aeabi_ddiv+0x1f8>
 8001b18:	230f      	movs	r3, #15
 8001b1a:	402b      	ands	r3, r5
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_ddiv+0x4f2>
 8001b20:	e6bc      	b.n	800189c <__aeabi_ddiv+0x26c>
 8001b22:	2305      	movs	r3, #5
 8001b24:	425b      	negs	r3, r3
 8001b26:	42ab      	cmp	r3, r5
 8001b28:	419b      	sbcs	r3, r3
 8001b2a:	3504      	adds	r5, #4
 8001b2c:	425b      	negs	r3, r3
 8001b2e:	08ed      	lsrs	r5, r5, #3
 8001b30:	4498      	add	r8, r3
 8001b32:	e6b4      	b.n	800189e <__aeabi_ddiv+0x26e>
 8001b34:	42af      	cmp	r7, r5
 8001b36:	d900      	bls.n	8001b3a <__aeabi_ddiv+0x50a>
 8001b38:	e660      	b.n	80017fc <__aeabi_ddiv+0x1cc>
 8001b3a:	4282      	cmp	r2, r0
 8001b3c:	d804      	bhi.n	8001b48 <__aeabi_ddiv+0x518>
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_ddiv+0x512>
 8001b40:	e65c      	b.n	80017fc <__aeabi_ddiv+0x1cc>
 8001b42:	42ae      	cmp	r6, r5
 8001b44:	d800      	bhi.n	8001b48 <__aeabi_ddiv+0x518>
 8001b46:	e659      	b.n	80017fc <__aeabi_ddiv+0x1cc>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	469c      	mov	ip, r3
 8001b4e:	9b00      	ldr	r3, [sp, #0]
 8001b50:	44e0      	add	r8, ip
 8001b52:	469c      	mov	ip, r3
 8001b54:	4465      	add	r5, ip
 8001b56:	429d      	cmp	r5, r3
 8001b58:	419b      	sbcs	r3, r3
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	191b      	adds	r3, r3, r4
 8001b5e:	18c0      	adds	r0, r0, r3
 8001b60:	e64d      	b.n	80017fe <__aeabi_ddiv+0x1ce>
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d800      	bhi.n	8001b68 <__aeabi_ddiv+0x538>
 8001b66:	e60e      	b.n	8001786 <__aeabi_ddiv+0x156>
 8001b68:	1e83      	subs	r3, r0, #2
 8001b6a:	1909      	adds	r1, r1, r4
 8001b6c:	e60b      	b.n	8001786 <__aeabi_ddiv+0x156>
 8001b6e:	428a      	cmp	r2, r1
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x544>
 8001b72:	e5f4      	b.n	800175e <__aeabi_ddiv+0x12e>
 8001b74:	1e83      	subs	r3, r0, #2
 8001b76:	4698      	mov	r8, r3
 8001b78:	1909      	adds	r1, r1, r4
 8001b7a:	e5f0      	b.n	800175e <__aeabi_ddiv+0x12e>
 8001b7c:	4925      	ldr	r1, [pc, #148]	; (8001c14 <__aeabi_ddiv+0x5e4>)
 8001b7e:	0028      	movs	r0, r5
 8001b80:	4459      	add	r1, fp
 8001b82:	408d      	lsls	r5, r1
 8001b84:	4642      	mov	r2, r8
 8001b86:	408a      	lsls	r2, r1
 8001b88:	1e69      	subs	r1, r5, #1
 8001b8a:	418d      	sbcs	r5, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	40d8      	lsrs	r0, r3
 8001b90:	40d9      	lsrs	r1, r3
 8001b92:	4302      	orrs	r2, r0
 8001b94:	432a      	orrs	r2, r5
 8001b96:	000b      	movs	r3, r1
 8001b98:	0751      	lsls	r1, r2, #29
 8001b9a:	d100      	bne.n	8001b9e <__aeabi_ddiv+0x56e>
 8001b9c:	e751      	b.n	8001a42 <__aeabi_ddiv+0x412>
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	4011      	ands	r1, r2
 8001ba2:	2904      	cmp	r1, #4
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_ddiv+0x578>
 8001ba6:	e746      	b.n	8001a36 <__aeabi_ddiv+0x406>
 8001ba8:	e74b      	b.n	8001a42 <__aeabi_ddiv+0x412>
 8001baa:	0005      	movs	r5, r0
 8001bac:	428e      	cmp	r6, r1
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_ddiv+0x582>
 8001bb0:	e66a      	b.n	8001888 <__aeabi_ddiv+0x258>
 8001bb2:	9a00      	ldr	r2, [sp, #0]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d000      	beq.n	8001bba <__aeabi_ddiv+0x58a>
 8001bb8:	e666      	b.n	8001888 <__aeabi_ddiv+0x258>
 8001bba:	e667      	b.n	800188c <__aeabi_ddiv+0x25c>
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <__aeabi_ddiv+0x5e8>)
 8001bbe:	445a      	add	r2, fp
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x596>
 8001bc4:	e710      	b.n	80019e8 <__aeabi_ddiv+0x3b8>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2500      	movs	r5, #0
 8001bca:	4498      	add	r8, r3
 8001bcc:	e667      	b.n	800189e <__aeabi_ddiv+0x26e>
 8001bce:	075d      	lsls	r5, r3, #29
 8001bd0:	025b      	lsls	r3, r3, #9
 8001bd2:	0b1c      	lsrs	r4, r3, #12
 8001bd4:	08d2      	lsrs	r2, r2, #3
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4315      	orrs	r5, r2
 8001bda:	e580      	b.n	80016de <__aeabi_ddiv+0xae>
 8001bdc:	9800      	ldr	r0, [sp, #0]
 8001bde:	3d02      	subs	r5, #2
 8001be0:	0042      	lsls	r2, r0, #1
 8001be2:	4282      	cmp	r2, r0
 8001be4:	41bf      	sbcs	r7, r7
 8001be6:	427f      	negs	r7, r7
 8001be8:	193c      	adds	r4, r7, r4
 8001bea:	1936      	adds	r6, r6, r4
 8001bec:	9200      	str	r2, [sp, #0]
 8001bee:	e7dd      	b.n	8001bac <__aeabi_ddiv+0x57c>
 8001bf0:	2480      	movs	r4, #128	; 0x80
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	0324      	lsls	r4, r4, #12
 8001bf6:	431c      	orrs	r4, r3
 8001bf8:	0324      	lsls	r4, r4, #12
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__aeabi_ddiv+0x5dc>)
 8001bfc:	0b24      	lsrs	r4, r4, #12
 8001bfe:	e56e      	b.n	80016de <__aeabi_ddiv+0xae>
 8001c00:	9a00      	ldr	r2, [sp, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3ea      	bcc.n	8001bdc <__aeabi_ddiv+0x5ac>
 8001c06:	0005      	movs	r5, r0
 8001c08:	e7d3      	b.n	8001bb2 <__aeabi_ddiv+0x582>
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	000007ff 	.word	0x000007ff
 8001c10:	0000043e 	.word	0x0000043e
 8001c14:	0000041e 	.word	0x0000041e
 8001c18:	000003ff 	.word	0x000003ff

08001c1c <__eqdf2>:
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	464e      	mov	r6, r9
 8001c20:	4645      	mov	r5, r8
 8001c22:	46de      	mov	lr, fp
 8001c24:	4657      	mov	r7, sl
 8001c26:	4690      	mov	r8, r2
 8001c28:	b5e0      	push	{r5, r6, r7, lr}
 8001c2a:	0017      	movs	r7, r2
 8001c2c:	031a      	lsls	r2, r3, #12
 8001c2e:	0b12      	lsrs	r2, r2, #12
 8001c30:	0005      	movs	r5, r0
 8001c32:	4684      	mov	ip, r0
 8001c34:	4819      	ldr	r0, [pc, #100]	; (8001c9c <__eqdf2+0x80>)
 8001c36:	030e      	lsls	r6, r1, #12
 8001c38:	004c      	lsls	r4, r1, #1
 8001c3a:	4691      	mov	r9, r2
 8001c3c:	005a      	lsls	r2, r3, #1
 8001c3e:	0fdb      	lsrs	r3, r3, #31
 8001c40:	469b      	mov	fp, r3
 8001c42:	0b36      	lsrs	r6, r6, #12
 8001c44:	0d64      	lsrs	r4, r4, #21
 8001c46:	0fc9      	lsrs	r1, r1, #31
 8001c48:	0d52      	lsrs	r2, r2, #21
 8001c4a:	4284      	cmp	r4, r0
 8001c4c:	d019      	beq.n	8001c82 <__eqdf2+0x66>
 8001c4e:	4282      	cmp	r2, r0
 8001c50:	d010      	beq.n	8001c74 <__eqdf2+0x58>
 8001c52:	2001      	movs	r0, #1
 8001c54:	4294      	cmp	r4, r2
 8001c56:	d10e      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c58:	454e      	cmp	r6, r9
 8001c5a:	d10c      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	45c4      	cmp	ip, r8
 8001c60:	d109      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c62:	4559      	cmp	r1, fp
 8001c64:	d017      	beq.n	8001c96 <__eqdf2+0x7a>
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	d105      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c6a:	0030      	movs	r0, r6
 8001c6c:	4328      	orrs	r0, r5
 8001c6e:	1e43      	subs	r3, r0, #1
 8001c70:	4198      	sbcs	r0, r3
 8001c72:	e000      	b.n	8001c76 <__eqdf2+0x5a>
 8001c74:	2001      	movs	r0, #1
 8001c76:	bcf0      	pop	{r4, r5, r6, r7}
 8001c78:	46bb      	mov	fp, r7
 8001c7a:	46b2      	mov	sl, r6
 8001c7c:	46a9      	mov	r9, r5
 8001c7e:	46a0      	mov	r8, r4
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	0033      	movs	r3, r6
 8001c84:	2001      	movs	r0, #1
 8001c86:	432b      	orrs	r3, r5
 8001c88:	d1f5      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c8a:	42a2      	cmp	r2, r4
 8001c8c:	d1f3      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c8e:	464b      	mov	r3, r9
 8001c90:	433b      	orrs	r3, r7
 8001c92:	d1f0      	bne.n	8001c76 <__eqdf2+0x5a>
 8001c94:	e7e2      	b.n	8001c5c <__eqdf2+0x40>
 8001c96:	2000      	movs	r0, #0
 8001c98:	e7ed      	b.n	8001c76 <__eqdf2+0x5a>
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	000007ff 	.word	0x000007ff

08001ca0 <__gedf2>:
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	4647      	mov	r7, r8
 8001ca4:	46ce      	mov	lr, r9
 8001ca6:	0004      	movs	r4, r0
 8001ca8:	0018      	movs	r0, r3
 8001caa:	0016      	movs	r6, r2
 8001cac:	031b      	lsls	r3, r3, #12
 8001cae:	0b1b      	lsrs	r3, r3, #12
 8001cb0:	4d2d      	ldr	r5, [pc, #180]	; (8001d68 <__gedf2+0xc8>)
 8001cb2:	004a      	lsls	r2, r1, #1
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	0043      	lsls	r3, r0, #1
 8001cba:	030f      	lsls	r7, r1, #12
 8001cbc:	46a4      	mov	ip, r4
 8001cbe:	46b0      	mov	r8, r6
 8001cc0:	0b3f      	lsrs	r7, r7, #12
 8001cc2:	0d52      	lsrs	r2, r2, #21
 8001cc4:	0fc9      	lsrs	r1, r1, #31
 8001cc6:	0d5b      	lsrs	r3, r3, #21
 8001cc8:	0fc0      	lsrs	r0, r0, #31
 8001cca:	42aa      	cmp	r2, r5
 8001ccc:	d021      	beq.n	8001d12 <__gedf2+0x72>
 8001cce:	42ab      	cmp	r3, r5
 8001cd0:	d013      	beq.n	8001cfa <__gedf2+0x5a>
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d122      	bne.n	8001d1c <__gedf2+0x7c>
 8001cd6:	433c      	orrs	r4, r7
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <__gedf2+0x42>
 8001cdc:	464d      	mov	r5, r9
 8001cde:	432e      	orrs	r6, r5
 8001ce0:	d022      	beq.n	8001d28 <__gedf2+0x88>
 8001ce2:	2c00      	cmp	r4, #0
 8001ce4:	d010      	beq.n	8001d08 <__gedf2+0x68>
 8001ce6:	4281      	cmp	r1, r0
 8001ce8:	d022      	beq.n	8001d30 <__gedf2+0x90>
 8001cea:	2002      	movs	r0, #2
 8001cec:	3901      	subs	r1, #1
 8001cee:	4008      	ands	r0, r1
 8001cf0:	3801      	subs	r0, #1
 8001cf2:	bcc0      	pop	{r6, r7}
 8001cf4:	46b9      	mov	r9, r7
 8001cf6:	46b0      	mov	r8, r6
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfa:	464d      	mov	r5, r9
 8001cfc:	432e      	orrs	r6, r5
 8001cfe:	d129      	bne.n	8001d54 <__gedf2+0xb4>
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d1f0      	bne.n	8001ce6 <__gedf2+0x46>
 8001d04:	433c      	orrs	r4, r7
 8001d06:	d1ee      	bne.n	8001ce6 <__gedf2+0x46>
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d1f2      	bne.n	8001cf2 <__gedf2+0x52>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	4240      	negs	r0, r0
 8001d10:	e7ef      	b.n	8001cf2 <__gedf2+0x52>
 8001d12:	003d      	movs	r5, r7
 8001d14:	4325      	orrs	r5, r4
 8001d16:	d11d      	bne.n	8001d54 <__gedf2+0xb4>
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d0ee      	beq.n	8001cfa <__gedf2+0x5a>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e2      	bne.n	8001ce6 <__gedf2+0x46>
 8001d20:	464c      	mov	r4, r9
 8001d22:	4326      	orrs	r6, r4
 8001d24:	d1df      	bne.n	8001ce6 <__gedf2+0x46>
 8001d26:	e7e0      	b.n	8001cea <__gedf2+0x4a>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d0e1      	beq.n	8001cf2 <__gedf2+0x52>
 8001d2e:	e7dc      	b.n	8001cea <__gedf2+0x4a>
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dc0a      	bgt.n	8001d4a <__gedf2+0xaa>
 8001d34:	dbe8      	blt.n	8001d08 <__gedf2+0x68>
 8001d36:	454f      	cmp	r7, r9
 8001d38:	d8d7      	bhi.n	8001cea <__gedf2+0x4a>
 8001d3a:	d00e      	beq.n	8001d5a <__gedf2+0xba>
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	454f      	cmp	r7, r9
 8001d40:	d2d7      	bcs.n	8001cf2 <__gedf2+0x52>
 8001d42:	2900      	cmp	r1, #0
 8001d44:	d0e2      	beq.n	8001d0c <__gedf2+0x6c>
 8001d46:	0008      	movs	r0, r1
 8001d48:	e7d3      	b.n	8001cf2 <__gedf2+0x52>
 8001d4a:	4243      	negs	r3, r0
 8001d4c:	4158      	adcs	r0, r3
 8001d4e:	0040      	lsls	r0, r0, #1
 8001d50:	3801      	subs	r0, #1
 8001d52:	e7ce      	b.n	8001cf2 <__gedf2+0x52>
 8001d54:	2002      	movs	r0, #2
 8001d56:	4240      	negs	r0, r0
 8001d58:	e7cb      	b.n	8001cf2 <__gedf2+0x52>
 8001d5a:	45c4      	cmp	ip, r8
 8001d5c:	d8c5      	bhi.n	8001cea <__gedf2+0x4a>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	45c4      	cmp	ip, r8
 8001d62:	d2c6      	bcs.n	8001cf2 <__gedf2+0x52>
 8001d64:	e7ed      	b.n	8001d42 <__gedf2+0xa2>
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	000007ff 	.word	0x000007ff

08001d6c <__ledf2>:
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	4647      	mov	r7, r8
 8001d70:	46ce      	mov	lr, r9
 8001d72:	0004      	movs	r4, r0
 8001d74:	0018      	movs	r0, r3
 8001d76:	0016      	movs	r6, r2
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	0b1b      	lsrs	r3, r3, #12
 8001d7c:	4d2c      	ldr	r5, [pc, #176]	; (8001e30 <__ledf2+0xc4>)
 8001d7e:	004a      	lsls	r2, r1, #1
 8001d80:	4699      	mov	r9, r3
 8001d82:	b580      	push	{r7, lr}
 8001d84:	0043      	lsls	r3, r0, #1
 8001d86:	030f      	lsls	r7, r1, #12
 8001d88:	46a4      	mov	ip, r4
 8001d8a:	46b0      	mov	r8, r6
 8001d8c:	0b3f      	lsrs	r7, r7, #12
 8001d8e:	0d52      	lsrs	r2, r2, #21
 8001d90:	0fc9      	lsrs	r1, r1, #31
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0fc0      	lsrs	r0, r0, #31
 8001d96:	42aa      	cmp	r2, r5
 8001d98:	d00d      	beq.n	8001db6 <__ledf2+0x4a>
 8001d9a:	42ab      	cmp	r3, r5
 8001d9c:	d010      	beq.n	8001dc0 <__ledf2+0x54>
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d127      	bne.n	8001df2 <__ledf2+0x86>
 8001da2:	433c      	orrs	r4, r7
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d111      	bne.n	8001dcc <__ledf2+0x60>
 8001da8:	464d      	mov	r5, r9
 8001daa:	432e      	orrs	r6, r5
 8001dac:	d10e      	bne.n	8001dcc <__ledf2+0x60>
 8001dae:	2000      	movs	r0, #0
 8001db0:	2c00      	cmp	r4, #0
 8001db2:	d015      	beq.n	8001de0 <__ledf2+0x74>
 8001db4:	e00e      	b.n	8001dd4 <__ledf2+0x68>
 8001db6:	003d      	movs	r5, r7
 8001db8:	4325      	orrs	r5, r4
 8001dba:	d110      	bne.n	8001dde <__ledf2+0x72>
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d118      	bne.n	8001df2 <__ledf2+0x86>
 8001dc0:	464d      	mov	r5, r9
 8001dc2:	432e      	orrs	r6, r5
 8001dc4:	d10b      	bne.n	8001dde <__ledf2+0x72>
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d102      	bne.n	8001dd0 <__ledf2+0x64>
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	d00b      	beq.n	8001de8 <__ledf2+0x7c>
 8001dd0:	4281      	cmp	r1, r0
 8001dd2:	d014      	beq.n	8001dfe <__ledf2+0x92>
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	3901      	subs	r1, #1
 8001dd8:	4008      	ands	r0, r1
 8001dda:	3801      	subs	r0, #1
 8001ddc:	e000      	b.n	8001de0 <__ledf2+0x74>
 8001dde:	2002      	movs	r0, #2
 8001de0:	bcc0      	pop	{r6, r7}
 8001de2:	46b9      	mov	r9, r7
 8001de4:	46b0      	mov	r8, r6
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d1f9      	bne.n	8001de0 <__ledf2+0x74>
 8001dec:	2001      	movs	r0, #1
 8001dee:	4240      	negs	r0, r0
 8001df0:	e7f6      	b.n	8001de0 <__ledf2+0x74>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ec      	bne.n	8001dd0 <__ledf2+0x64>
 8001df6:	464c      	mov	r4, r9
 8001df8:	4326      	orrs	r6, r4
 8001dfa:	d1e9      	bne.n	8001dd0 <__ledf2+0x64>
 8001dfc:	e7ea      	b.n	8001dd4 <__ledf2+0x68>
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dd04      	ble.n	8001e0c <__ledf2+0xa0>
 8001e02:	4243      	negs	r3, r0
 8001e04:	4158      	adcs	r0, r3
 8001e06:	0040      	lsls	r0, r0, #1
 8001e08:	3801      	subs	r0, #1
 8001e0a:	e7e9      	b.n	8001de0 <__ledf2+0x74>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbeb      	blt.n	8001de8 <__ledf2+0x7c>
 8001e10:	454f      	cmp	r7, r9
 8001e12:	d8df      	bhi.n	8001dd4 <__ledf2+0x68>
 8001e14:	d006      	beq.n	8001e24 <__ledf2+0xb8>
 8001e16:	2000      	movs	r0, #0
 8001e18:	454f      	cmp	r7, r9
 8001e1a:	d2e1      	bcs.n	8001de0 <__ledf2+0x74>
 8001e1c:	2900      	cmp	r1, #0
 8001e1e:	d0e5      	beq.n	8001dec <__ledf2+0x80>
 8001e20:	0008      	movs	r0, r1
 8001e22:	e7dd      	b.n	8001de0 <__ledf2+0x74>
 8001e24:	45c4      	cmp	ip, r8
 8001e26:	d8d5      	bhi.n	8001dd4 <__ledf2+0x68>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c4      	cmp	ip, r8
 8001e2c:	d2d8      	bcs.n	8001de0 <__ledf2+0x74>
 8001e2e:	e7f5      	b.n	8001e1c <__ledf2+0xb0>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	464e      	mov	r6, r9
 8001e3a:	4645      	mov	r5, r8
 8001e3c:	46de      	mov	lr, fp
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4698      	mov	r8, r3
 8001e42:	030c      	lsls	r4, r1, #12
 8001e44:	004b      	lsls	r3, r1, #1
 8001e46:	0006      	movs	r6, r0
 8001e48:	4692      	mov	sl, r2
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	0b24      	lsrs	r4, r4, #12
 8001e4e:	0d5b      	lsrs	r3, r3, #21
 8001e50:	0fcf      	lsrs	r7, r1, #31
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dmul+0x24>
 8001e56:	e15c      	b.n	8002112 <__aeabi_dmul+0x2de>
 8001e58:	4ad9      	ldr	r2, [pc, #868]	; (80021c0 <__aeabi_dmul+0x38c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dmul+0x2c>
 8001e5e:	e175      	b.n	800214c <__aeabi_dmul+0x318>
 8001e60:	0f42      	lsrs	r2, r0, #29
 8001e62:	00e4      	lsls	r4, r4, #3
 8001e64:	4314      	orrs	r4, r2
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0412      	lsls	r2, r2, #16
 8001e6a:	4314      	orrs	r4, r2
 8001e6c:	4ad5      	ldr	r2, [pc, #852]	; (80021c4 <__aeabi_dmul+0x390>)
 8001e6e:	00c5      	lsls	r5, r0, #3
 8001e70:	4694      	mov	ip, r2
 8001e72:	4463      	add	r3, ip
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2300      	movs	r3, #0
 8001e78:	4699      	mov	r9, r3
 8001e7a:	469b      	mov	fp, r3
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	4642      	mov	r2, r8
 8001e80:	031e      	lsls	r6, r3, #12
 8001e82:	0fd2      	lsrs	r2, r2, #31
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4650      	mov	r0, sl
 8001e88:	4690      	mov	r8, r2
 8001e8a:	0b36      	lsrs	r6, r6, #12
 8001e8c:	0d5b      	lsrs	r3, r3, #21
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dmul+0x5e>
 8001e90:	e120      	b.n	80020d4 <__aeabi_dmul+0x2a0>
 8001e92:	4acb      	ldr	r2, [pc, #812]	; (80021c0 <__aeabi_dmul+0x38c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dmul+0x66>
 8001e98:	e162      	b.n	8002160 <__aeabi_dmul+0x32c>
 8001e9a:	49ca      	ldr	r1, [pc, #808]	; (80021c4 <__aeabi_dmul+0x390>)
 8001e9c:	0f42      	lsrs	r2, r0, #29
 8001e9e:	468c      	mov	ip, r1
 8001ea0:	9900      	ldr	r1, [sp, #0]
 8001ea2:	4463      	add	r3, ip
 8001ea4:	00f6      	lsls	r6, r6, #3
 8001ea6:	468c      	mov	ip, r1
 8001ea8:	4316      	orrs	r6, r2
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	449c      	add	ip, r3
 8001eae:	0412      	lsls	r2, r2, #16
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	4316      	orrs	r6, r2
 8001eb4:	00c2      	lsls	r2, r0, #3
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	9900      	ldr	r1, [sp, #0]
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	3101      	adds	r1, #1
 8001ec0:	468c      	mov	ip, r1
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	407b      	eors	r3, r7
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	290f      	cmp	r1, #15
 8001eca:	d826      	bhi.n	8001f1a <__aeabi_dmul+0xe6>
 8001ecc:	4bbe      	ldr	r3, [pc, #760]	; (80021c8 <__aeabi_dmul+0x394>)
 8001ece:	0089      	lsls	r1, r1, #2
 8001ed0:	5859      	ldr	r1, [r3, r1]
 8001ed2:	468f      	mov	pc, r1
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	0034      	movs	r4, r6
 8001eda:	0015      	movs	r5, r2
 8001edc:	4683      	mov	fp, r0
 8001ede:	465b      	mov	r3, fp
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d016      	beq.n	8001f12 <__aeabi_dmul+0xde>
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dmul+0xb6>
 8001ee8:	e203      	b.n	80022f2 <__aeabi_dmul+0x4be>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dmul+0xbc>
 8001eee:	e0cd      	b.n	800208c <__aeabi_dmul+0x258>
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2400      	movs	r4, #0
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	0512      	lsls	r2, r2, #20
 8001efa:	4322      	orrs	r2, r4
 8001efc:	07db      	lsls	r3, r3, #31
 8001efe:	431a      	orrs	r2, r3
 8001f00:	0028      	movs	r0, r5
 8001f02:	0011      	movs	r1, r2
 8001f04:	b007      	add	sp, #28
 8001f06:	bcf0      	pop	{r4, r5, r6, r7}
 8001f08:	46bb      	mov	fp, r7
 8001f0a:	46b2      	mov	sl, r6
 8001f0c:	46a9      	mov	r9, r5
 8001f0e:	46a0      	mov	r8, r4
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f12:	2400      	movs	r4, #0
 8001f14:	2500      	movs	r5, #0
 8001f16:	4aaa      	ldr	r2, [pc, #680]	; (80021c0 <__aeabi_dmul+0x38c>)
 8001f18:	e7ed      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8001f1a:	0c28      	lsrs	r0, r5, #16
 8001f1c:	042d      	lsls	r5, r5, #16
 8001f1e:	0c2d      	lsrs	r5, r5, #16
 8001f20:	002b      	movs	r3, r5
 8001f22:	0c11      	lsrs	r1, r2, #16
 8001f24:	0412      	lsls	r2, r2, #16
 8001f26:	0c12      	lsrs	r2, r2, #16
 8001f28:	4353      	muls	r3, r2
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	002f      	movs	r7, r5
 8001f30:	4343      	muls	r3, r0
 8001f32:	4699      	mov	r9, r3
 8001f34:	434f      	muls	r7, r1
 8001f36:	444f      	add	r7, r9
 8001f38:	46bb      	mov	fp, r7
 8001f3a:	4647      	mov	r7, r8
 8001f3c:	000b      	movs	r3, r1
 8001f3e:	0c3f      	lsrs	r7, r7, #16
 8001f40:	46ba      	mov	sl, r7
 8001f42:	4343      	muls	r3, r0
 8001f44:	44da      	add	sl, fp
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	45d1      	cmp	r9, sl
 8001f4a:	d904      	bls.n	8001f56 <__aeabi_dmul+0x122>
 8001f4c:	2780      	movs	r7, #128	; 0x80
 8001f4e:	027f      	lsls	r7, r7, #9
 8001f50:	46b9      	mov	r9, r7
 8001f52:	444b      	add	r3, r9
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	4653      	mov	r3, sl
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	469b      	mov	fp, r3
 8001f5c:	4653      	mov	r3, sl
 8001f5e:	041f      	lsls	r7, r3, #16
 8001f60:	4643      	mov	r3, r8
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	4698      	mov	r8, r3
 8001f68:	003b      	movs	r3, r7
 8001f6a:	4443      	add	r3, r8
 8001f6c:	9304      	str	r3, [sp, #16]
 8001f6e:	0c33      	lsrs	r3, r6, #16
 8001f70:	0436      	lsls	r6, r6, #16
 8001f72:	0c36      	lsrs	r6, r6, #16
 8001f74:	4698      	mov	r8, r3
 8001f76:	0033      	movs	r3, r6
 8001f78:	4343      	muls	r3, r0
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	4343      	muls	r3, r0
 8001f80:	002f      	movs	r7, r5
 8001f82:	469a      	mov	sl, r3
 8001f84:	4643      	mov	r3, r8
 8001f86:	4377      	muls	r7, r6
 8001f88:	435d      	muls	r5, r3
 8001f8a:	0c38      	lsrs	r0, r7, #16
 8001f8c:	444d      	add	r5, r9
 8001f8e:	1945      	adds	r5, r0, r5
 8001f90:	45a9      	cmp	r9, r5
 8001f92:	d903      	bls.n	8001f9c <__aeabi_dmul+0x168>
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	025b      	lsls	r3, r3, #9
 8001f98:	4699      	mov	r9, r3
 8001f9a:	44ca      	add	sl, r9
 8001f9c:	043f      	lsls	r7, r7, #16
 8001f9e:	0c28      	lsrs	r0, r5, #16
 8001fa0:	0c3f      	lsrs	r7, r7, #16
 8001fa2:	042d      	lsls	r5, r5, #16
 8001fa4:	19ed      	adds	r5, r5, r7
 8001fa6:	0c27      	lsrs	r7, r4, #16
 8001fa8:	0424      	lsls	r4, r4, #16
 8001faa:	0c24      	lsrs	r4, r4, #16
 8001fac:	0003      	movs	r3, r0
 8001fae:	0020      	movs	r0, r4
 8001fb0:	4350      	muls	r0, r2
 8001fb2:	437a      	muls	r2, r7
 8001fb4:	4691      	mov	r9, r2
 8001fb6:	003a      	movs	r2, r7
 8001fb8:	4453      	add	r3, sl
 8001fba:	9305      	str	r3, [sp, #20]
 8001fbc:	0c03      	lsrs	r3, r0, #16
 8001fbe:	469a      	mov	sl, r3
 8001fc0:	434a      	muls	r2, r1
 8001fc2:	4361      	muls	r1, r4
 8001fc4:	4449      	add	r1, r9
 8001fc6:	4451      	add	r1, sl
 8001fc8:	44ab      	add	fp, r5
 8001fca:	4589      	cmp	r9, r1
 8001fcc:	d903      	bls.n	8001fd6 <__aeabi_dmul+0x1a2>
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	025b      	lsls	r3, r3, #9
 8001fd2:	4699      	mov	r9, r3
 8001fd4:	444a      	add	r2, r9
 8001fd6:	0400      	lsls	r0, r0, #16
 8001fd8:	0c0b      	lsrs	r3, r1, #16
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	0409      	lsls	r1, r1, #16
 8001fde:	1809      	adds	r1, r1, r0
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	4370      	muls	r0, r6
 8001fe8:	435c      	muls	r4, r3
 8001fea:	437e      	muls	r6, r7
 8001fec:	435f      	muls	r7, r3
 8001fee:	0c03      	lsrs	r3, r0, #16
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	19a4      	adds	r4, r4, r6
 8001ff4:	4444      	add	r4, r8
 8001ff6:	444a      	add	r2, r9
 8001ff8:	9703      	str	r7, [sp, #12]
 8001ffa:	42a6      	cmp	r6, r4
 8001ffc:	d904      	bls.n	8002008 <__aeabi_dmul+0x1d4>
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	025b      	lsls	r3, r3, #9
 8002002:	4698      	mov	r8, r3
 8002004:	4447      	add	r7, r8
 8002006:	9703      	str	r7, [sp, #12]
 8002008:	0423      	lsls	r3, r4, #16
 800200a:	9e02      	ldr	r6, [sp, #8]
 800200c:	469a      	mov	sl, r3
 800200e:	9b05      	ldr	r3, [sp, #20]
 8002010:	445e      	add	r6, fp
 8002012:	4698      	mov	r8, r3
 8002014:	42ae      	cmp	r6, r5
 8002016:	41ad      	sbcs	r5, r5
 8002018:	1876      	adds	r6, r6, r1
 800201a:	428e      	cmp	r6, r1
 800201c:	4189      	sbcs	r1, r1
 800201e:	0400      	lsls	r0, r0, #16
 8002020:	0c00      	lsrs	r0, r0, #16
 8002022:	4450      	add	r0, sl
 8002024:	4440      	add	r0, r8
 8002026:	426d      	negs	r5, r5
 8002028:	1947      	adds	r7, r0, r5
 800202a:	46b8      	mov	r8, r7
 800202c:	4693      	mov	fp, r2
 800202e:	4249      	negs	r1, r1
 8002030:	4689      	mov	r9, r1
 8002032:	44c3      	add	fp, r8
 8002034:	44d9      	add	r9, fp
 8002036:	4298      	cmp	r0, r3
 8002038:	4180      	sbcs	r0, r0
 800203a:	45a8      	cmp	r8, r5
 800203c:	41ad      	sbcs	r5, r5
 800203e:	4593      	cmp	fp, r2
 8002040:	4192      	sbcs	r2, r2
 8002042:	4589      	cmp	r9, r1
 8002044:	4189      	sbcs	r1, r1
 8002046:	426d      	negs	r5, r5
 8002048:	4240      	negs	r0, r0
 800204a:	4328      	orrs	r0, r5
 800204c:	0c24      	lsrs	r4, r4, #16
 800204e:	4252      	negs	r2, r2
 8002050:	4249      	negs	r1, r1
 8002052:	430a      	orrs	r2, r1
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	1900      	adds	r0, r0, r4
 8002058:	1880      	adds	r0, r0, r2
 800205a:	18c7      	adds	r7, r0, r3
 800205c:	464b      	mov	r3, r9
 800205e:	0ddc      	lsrs	r4, r3, #23
 8002060:	9b04      	ldr	r3, [sp, #16]
 8002062:	0275      	lsls	r5, r6, #9
 8002064:	431d      	orrs	r5, r3
 8002066:	1e6a      	subs	r2, r5, #1
 8002068:	4195      	sbcs	r5, r2
 800206a:	464b      	mov	r3, r9
 800206c:	0df6      	lsrs	r6, r6, #23
 800206e:	027f      	lsls	r7, r7, #9
 8002070:	4335      	orrs	r5, r6
 8002072:	025a      	lsls	r2, r3, #9
 8002074:	433c      	orrs	r4, r7
 8002076:	4315      	orrs	r5, r2
 8002078:	01fb      	lsls	r3, r7, #7
 800207a:	d400      	bmi.n	800207e <__aeabi_dmul+0x24a>
 800207c:	e11c      	b.n	80022b8 <__aeabi_dmul+0x484>
 800207e:	2101      	movs	r1, #1
 8002080:	086a      	lsrs	r2, r5, #1
 8002082:	400d      	ands	r5, r1
 8002084:	4315      	orrs	r5, r2
 8002086:	07e2      	lsls	r2, r4, #31
 8002088:	4315      	orrs	r5, r2
 800208a:	0864      	lsrs	r4, r4, #1
 800208c:	494f      	ldr	r1, [pc, #316]	; (80021cc <__aeabi_dmul+0x398>)
 800208e:	4461      	add	r1, ip
 8002090:	2900      	cmp	r1, #0
 8002092:	dc00      	bgt.n	8002096 <__aeabi_dmul+0x262>
 8002094:	e0b0      	b.n	80021f8 <__aeabi_dmul+0x3c4>
 8002096:	076b      	lsls	r3, r5, #29
 8002098:	d009      	beq.n	80020ae <__aeabi_dmul+0x27a>
 800209a:	220f      	movs	r2, #15
 800209c:	402a      	ands	r2, r5
 800209e:	2a04      	cmp	r2, #4
 80020a0:	d005      	beq.n	80020ae <__aeabi_dmul+0x27a>
 80020a2:	1d2a      	adds	r2, r5, #4
 80020a4:	42aa      	cmp	r2, r5
 80020a6:	41ad      	sbcs	r5, r5
 80020a8:	426d      	negs	r5, r5
 80020aa:	1964      	adds	r4, r4, r5
 80020ac:	0015      	movs	r5, r2
 80020ae:	01e3      	lsls	r3, r4, #7
 80020b0:	d504      	bpl.n	80020bc <__aeabi_dmul+0x288>
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	4a46      	ldr	r2, [pc, #280]	; (80021d0 <__aeabi_dmul+0x39c>)
 80020b6:	00c9      	lsls	r1, r1, #3
 80020b8:	4014      	ands	r4, r2
 80020ba:	4461      	add	r1, ip
 80020bc:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <__aeabi_dmul+0x3a0>)
 80020be:	4291      	cmp	r1, r2
 80020c0:	dd00      	ble.n	80020c4 <__aeabi_dmul+0x290>
 80020c2:	e726      	b.n	8001f12 <__aeabi_dmul+0xde>
 80020c4:	0762      	lsls	r2, r4, #29
 80020c6:	08ed      	lsrs	r5, r5, #3
 80020c8:	0264      	lsls	r4, r4, #9
 80020ca:	0549      	lsls	r1, r1, #21
 80020cc:	4315      	orrs	r5, r2
 80020ce:	0b24      	lsrs	r4, r4, #12
 80020d0:	0d4a      	lsrs	r2, r1, #21
 80020d2:	e710      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 80020d4:	4652      	mov	r2, sl
 80020d6:	4332      	orrs	r2, r6
 80020d8:	d100      	bne.n	80020dc <__aeabi_dmul+0x2a8>
 80020da:	e07f      	b.n	80021dc <__aeabi_dmul+0x3a8>
 80020dc:	2e00      	cmp	r6, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dmul+0x2ae>
 80020e0:	e0dc      	b.n	800229c <__aeabi_dmul+0x468>
 80020e2:	0030      	movs	r0, r6
 80020e4:	f000 fe1e 	bl	8002d24 <__clzsi2>
 80020e8:	0002      	movs	r2, r0
 80020ea:	3a0b      	subs	r2, #11
 80020ec:	231d      	movs	r3, #29
 80020ee:	0001      	movs	r1, r0
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	4652      	mov	r2, sl
 80020f4:	3908      	subs	r1, #8
 80020f6:	40da      	lsrs	r2, r3
 80020f8:	408e      	lsls	r6, r1
 80020fa:	4316      	orrs	r6, r2
 80020fc:	4652      	mov	r2, sl
 80020fe:	408a      	lsls	r2, r1
 8002100:	9b00      	ldr	r3, [sp, #0]
 8002102:	4935      	ldr	r1, [pc, #212]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8002104:	1a18      	subs	r0, r3, r0
 8002106:	0003      	movs	r3, r0
 8002108:	468c      	mov	ip, r1
 800210a:	4463      	add	r3, ip
 800210c:	2000      	movs	r0, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	e6d3      	b.n	8001eba <__aeabi_dmul+0x86>
 8002112:	0025      	movs	r5, r4
 8002114:	4305      	orrs	r5, r0
 8002116:	d04a      	beq.n	80021ae <__aeabi_dmul+0x37a>
 8002118:	2c00      	cmp	r4, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dmul+0x2ea>
 800211c:	e0b0      	b.n	8002280 <__aeabi_dmul+0x44c>
 800211e:	0020      	movs	r0, r4
 8002120:	f000 fe00 	bl	8002d24 <__clzsi2>
 8002124:	0001      	movs	r1, r0
 8002126:	0002      	movs	r2, r0
 8002128:	390b      	subs	r1, #11
 800212a:	231d      	movs	r3, #29
 800212c:	0010      	movs	r0, r2
 800212e:	1a5b      	subs	r3, r3, r1
 8002130:	0031      	movs	r1, r6
 8002132:	0035      	movs	r5, r6
 8002134:	3808      	subs	r0, #8
 8002136:	4084      	lsls	r4, r0
 8002138:	40d9      	lsrs	r1, r3
 800213a:	4085      	lsls	r5, r0
 800213c:	430c      	orrs	r4, r1
 800213e:	4826      	ldr	r0, [pc, #152]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8002140:	1a83      	subs	r3, r0, r2
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	4699      	mov	r9, r3
 8002148:	469b      	mov	fp, r3
 800214a:	e697      	b.n	8001e7c <__aeabi_dmul+0x48>
 800214c:	0005      	movs	r5, r0
 800214e:	4325      	orrs	r5, r4
 8002150:	d126      	bne.n	80021a0 <__aeabi_dmul+0x36c>
 8002152:	2208      	movs	r2, #8
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2302      	movs	r3, #2
 8002158:	2400      	movs	r4, #0
 800215a:	4691      	mov	r9, r2
 800215c:	469b      	mov	fp, r3
 800215e:	e68d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8002160:	4652      	mov	r2, sl
 8002162:	9b00      	ldr	r3, [sp, #0]
 8002164:	4332      	orrs	r2, r6
 8002166:	d110      	bne.n	800218a <__aeabi_dmul+0x356>
 8002168:	4915      	ldr	r1, [pc, #84]	; (80021c0 <__aeabi_dmul+0x38c>)
 800216a:	2600      	movs	r6, #0
 800216c:	468c      	mov	ip, r1
 800216e:	4463      	add	r3, ip
 8002170:	4649      	mov	r1, r9
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2302      	movs	r3, #2
 8002176:	4319      	orrs	r1, r3
 8002178:	4689      	mov	r9, r1
 800217a:	2002      	movs	r0, #2
 800217c:	e69d      	b.n	8001eba <__aeabi_dmul+0x86>
 800217e:	465b      	mov	r3, fp
 8002180:	9701      	str	r7, [sp, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d000      	beq.n	8002188 <__aeabi_dmul+0x354>
 8002186:	e6ad      	b.n	8001ee4 <__aeabi_dmul+0xb0>
 8002188:	e6c3      	b.n	8001f12 <__aeabi_dmul+0xde>
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <__aeabi_dmul+0x38c>)
 800218c:	2003      	movs	r0, #3
 800218e:	4694      	mov	ip, r2
 8002190:	4463      	add	r3, ip
 8002192:	464a      	mov	r2, r9
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2303      	movs	r3, #3
 8002198:	431a      	orrs	r2, r3
 800219a:	4691      	mov	r9, r2
 800219c:	4652      	mov	r2, sl
 800219e:	e68c      	b.n	8001eba <__aeabi_dmul+0x86>
 80021a0:	220c      	movs	r2, #12
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2303      	movs	r3, #3
 80021a6:	0005      	movs	r5, r0
 80021a8:	4691      	mov	r9, r2
 80021aa:	469b      	mov	fp, r3
 80021ac:	e666      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021ae:	2304      	movs	r3, #4
 80021b0:	4699      	mov	r9, r3
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	2400      	movs	r4, #0
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	000007ff 	.word	0x000007ff
 80021c4:	fffffc01 	.word	0xfffffc01
 80021c8:	0800ac24 	.word	0x0800ac24
 80021cc:	000003ff 	.word	0x000003ff
 80021d0:	feffffff 	.word	0xfeffffff
 80021d4:	000007fe 	.word	0x000007fe
 80021d8:	fffffc0d 	.word	0xfffffc0d
 80021dc:	4649      	mov	r1, r9
 80021de:	2301      	movs	r3, #1
 80021e0:	4319      	orrs	r1, r3
 80021e2:	4689      	mov	r9, r1
 80021e4:	2600      	movs	r6, #0
 80021e6:	2001      	movs	r0, #1
 80021e8:	e667      	b.n	8001eba <__aeabi_dmul+0x86>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2480      	movs	r4, #128	; 0x80
 80021ee:	2500      	movs	r5, #0
 80021f0:	4a43      	ldr	r2, [pc, #268]	; (8002300 <__aeabi_dmul+0x4cc>)
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	e67e      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 80021f8:	2001      	movs	r0, #1
 80021fa:	1a40      	subs	r0, r0, r1
 80021fc:	2838      	cmp	r0, #56	; 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dmul+0x3ce>
 8002200:	e676      	b.n	8001ef0 <__aeabi_dmul+0xbc>
 8002202:	281f      	cmp	r0, #31
 8002204:	dd5b      	ble.n	80022be <__aeabi_dmul+0x48a>
 8002206:	221f      	movs	r2, #31
 8002208:	0023      	movs	r3, r4
 800220a:	4252      	negs	r2, r2
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	40cb      	lsrs	r3, r1
 8002210:	0019      	movs	r1, r3
 8002212:	2820      	cmp	r0, #32
 8002214:	d003      	beq.n	800221e <__aeabi_dmul+0x3ea>
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <__aeabi_dmul+0x4d0>)
 8002218:	4462      	add	r2, ip
 800221a:	4094      	lsls	r4, r2
 800221c:	4325      	orrs	r5, r4
 800221e:	1e6a      	subs	r2, r5, #1
 8002220:	4195      	sbcs	r5, r2
 8002222:	002a      	movs	r2, r5
 8002224:	430a      	orrs	r2, r1
 8002226:	2107      	movs	r1, #7
 8002228:	000d      	movs	r5, r1
 800222a:	2400      	movs	r4, #0
 800222c:	4015      	ands	r5, r2
 800222e:	4211      	tst	r1, r2
 8002230:	d05b      	beq.n	80022ea <__aeabi_dmul+0x4b6>
 8002232:	210f      	movs	r1, #15
 8002234:	2400      	movs	r4, #0
 8002236:	4011      	ands	r1, r2
 8002238:	2904      	cmp	r1, #4
 800223a:	d053      	beq.n	80022e4 <__aeabi_dmul+0x4b0>
 800223c:	1d11      	adds	r1, r2, #4
 800223e:	4291      	cmp	r1, r2
 8002240:	4192      	sbcs	r2, r2
 8002242:	4252      	negs	r2, r2
 8002244:	18a4      	adds	r4, r4, r2
 8002246:	000a      	movs	r2, r1
 8002248:	0223      	lsls	r3, r4, #8
 800224a:	d54b      	bpl.n	80022e4 <__aeabi_dmul+0x4b0>
 800224c:	2201      	movs	r2, #1
 800224e:	2400      	movs	r4, #0
 8002250:	2500      	movs	r5, #0
 8002252:	e650      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	031b      	lsls	r3, r3, #12
 8002258:	421c      	tst	r4, r3
 800225a:	d009      	beq.n	8002270 <__aeabi_dmul+0x43c>
 800225c:	421e      	tst	r6, r3
 800225e:	d107      	bne.n	8002270 <__aeabi_dmul+0x43c>
 8002260:	4333      	orrs	r3, r6
 8002262:	031c      	lsls	r4, r3, #12
 8002264:	4643      	mov	r3, r8
 8002266:	0015      	movs	r5, r2
 8002268:	0b24      	lsrs	r4, r4, #12
 800226a:	4a25      	ldr	r2, [pc, #148]	; (8002300 <__aeabi_dmul+0x4cc>)
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	e642      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0312      	lsls	r2, r2, #12
 8002274:	4314      	orrs	r4, r2
 8002276:	0324      	lsls	r4, r4, #12
 8002278:	4a21      	ldr	r2, [pc, #132]	; (8002300 <__aeabi_dmul+0x4cc>)
 800227a:	0b24      	lsrs	r4, r4, #12
 800227c:	9701      	str	r7, [sp, #4]
 800227e:	e63a      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002280:	f000 fd50 	bl	8002d24 <__clzsi2>
 8002284:	0001      	movs	r1, r0
 8002286:	0002      	movs	r2, r0
 8002288:	3115      	adds	r1, #21
 800228a:	3220      	adds	r2, #32
 800228c:	291c      	cmp	r1, #28
 800228e:	dc00      	bgt.n	8002292 <__aeabi_dmul+0x45e>
 8002290:	e74b      	b.n	800212a <__aeabi_dmul+0x2f6>
 8002292:	0034      	movs	r4, r6
 8002294:	3808      	subs	r0, #8
 8002296:	2500      	movs	r5, #0
 8002298:	4084      	lsls	r4, r0
 800229a:	e750      	b.n	800213e <__aeabi_dmul+0x30a>
 800229c:	f000 fd42 	bl	8002d24 <__clzsi2>
 80022a0:	0003      	movs	r3, r0
 80022a2:	001a      	movs	r2, r3
 80022a4:	3215      	adds	r2, #21
 80022a6:	3020      	adds	r0, #32
 80022a8:	2a1c      	cmp	r2, #28
 80022aa:	dc00      	bgt.n	80022ae <__aeabi_dmul+0x47a>
 80022ac:	e71e      	b.n	80020ec <__aeabi_dmul+0x2b8>
 80022ae:	4656      	mov	r6, sl
 80022b0:	3b08      	subs	r3, #8
 80022b2:	2200      	movs	r2, #0
 80022b4:	409e      	lsls	r6, r3
 80022b6:	e723      	b.n	8002100 <__aeabi_dmul+0x2cc>
 80022b8:	9b00      	ldr	r3, [sp, #0]
 80022ba:	469c      	mov	ip, r3
 80022bc:	e6e6      	b.n	800208c <__aeabi_dmul+0x258>
 80022be:	4912      	ldr	r1, [pc, #72]	; (8002308 <__aeabi_dmul+0x4d4>)
 80022c0:	0022      	movs	r2, r4
 80022c2:	4461      	add	r1, ip
 80022c4:	002e      	movs	r6, r5
 80022c6:	408d      	lsls	r5, r1
 80022c8:	408a      	lsls	r2, r1
 80022ca:	40c6      	lsrs	r6, r0
 80022cc:	1e69      	subs	r1, r5, #1
 80022ce:	418d      	sbcs	r5, r1
 80022d0:	4332      	orrs	r2, r6
 80022d2:	432a      	orrs	r2, r5
 80022d4:	40c4      	lsrs	r4, r0
 80022d6:	0753      	lsls	r3, r2, #29
 80022d8:	d0b6      	beq.n	8002248 <__aeabi_dmul+0x414>
 80022da:	210f      	movs	r1, #15
 80022dc:	4011      	ands	r1, r2
 80022de:	2904      	cmp	r1, #4
 80022e0:	d1ac      	bne.n	800223c <__aeabi_dmul+0x408>
 80022e2:	e7b1      	b.n	8002248 <__aeabi_dmul+0x414>
 80022e4:	0765      	lsls	r5, r4, #29
 80022e6:	0264      	lsls	r4, r4, #9
 80022e8:	0b24      	lsrs	r4, r4, #12
 80022ea:	08d2      	lsrs	r2, r2, #3
 80022ec:	4315      	orrs	r5, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	e601      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	0312      	lsls	r2, r2, #12
 80022f6:	4314      	orrs	r4, r2
 80022f8:	0324      	lsls	r4, r4, #12
 80022fa:	4a01      	ldr	r2, [pc, #4]	; (8002300 <__aeabi_dmul+0x4cc>)
 80022fc:	0b24      	lsrs	r4, r4, #12
 80022fe:	e5fa      	b.n	8001ef6 <__aeabi_dmul+0xc2>
 8002300:	000007ff 	.word	0x000007ff
 8002304:	0000043e 	.word	0x0000043e
 8002308:	0000041e 	.word	0x0000041e

0800230c <__aeabi_dsub>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	4657      	mov	r7, sl
 8002310:	464e      	mov	r6, r9
 8002312:	4645      	mov	r5, r8
 8002314:	46de      	mov	lr, fp
 8002316:	b5e0      	push	{r5, r6, r7, lr}
 8002318:	001e      	movs	r6, r3
 800231a:	0017      	movs	r7, r2
 800231c:	004a      	lsls	r2, r1, #1
 800231e:	030b      	lsls	r3, r1, #12
 8002320:	0d52      	lsrs	r2, r2, #21
 8002322:	0a5b      	lsrs	r3, r3, #9
 8002324:	4690      	mov	r8, r2
 8002326:	0f42      	lsrs	r2, r0, #29
 8002328:	431a      	orrs	r2, r3
 800232a:	0fcd      	lsrs	r5, r1, #31
 800232c:	4ccd      	ldr	r4, [pc, #820]	; (8002664 <__aeabi_dsub+0x358>)
 800232e:	0331      	lsls	r1, r6, #12
 8002330:	00c3      	lsls	r3, r0, #3
 8002332:	4694      	mov	ip, r2
 8002334:	0070      	lsls	r0, r6, #1
 8002336:	0f7a      	lsrs	r2, r7, #29
 8002338:	0a49      	lsrs	r1, r1, #9
 800233a:	00ff      	lsls	r7, r7, #3
 800233c:	469a      	mov	sl, r3
 800233e:	46b9      	mov	r9, r7
 8002340:	0d40      	lsrs	r0, r0, #21
 8002342:	0ff6      	lsrs	r6, r6, #31
 8002344:	4311      	orrs	r1, r2
 8002346:	42a0      	cmp	r0, r4
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x40>
 800234a:	e0b1      	b.n	80024b0 <__aeabi_dsub+0x1a4>
 800234c:	2201      	movs	r2, #1
 800234e:	4056      	eors	r6, r2
 8002350:	46b3      	mov	fp, r6
 8002352:	42b5      	cmp	r5, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x4c>
 8002356:	e088      	b.n	800246a <__aeabi_dsub+0x15e>
 8002358:	4642      	mov	r2, r8
 800235a:	1a12      	subs	r2, r2, r0
 800235c:	2a00      	cmp	r2, #0
 800235e:	dc00      	bgt.n	8002362 <__aeabi_dsub+0x56>
 8002360:	e0ae      	b.n	80024c0 <__aeabi_dsub+0x1b4>
 8002362:	2800      	cmp	r0, #0
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x5c>
 8002366:	e0c1      	b.n	80024ec <__aeabi_dsub+0x1e0>
 8002368:	48be      	ldr	r0, [pc, #760]	; (8002664 <__aeabi_dsub+0x358>)
 800236a:	4580      	cmp	r8, r0
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x64>
 800236e:	e151      	b.n	8002614 <__aeabi_dsub+0x308>
 8002370:	2080      	movs	r0, #128	; 0x80
 8002372:	0400      	lsls	r0, r0, #16
 8002374:	4301      	orrs	r1, r0
 8002376:	2a38      	cmp	r2, #56	; 0x38
 8002378:	dd00      	ble.n	800237c <__aeabi_dsub+0x70>
 800237a:	e17b      	b.n	8002674 <__aeabi_dsub+0x368>
 800237c:	2a1f      	cmp	r2, #31
 800237e:	dd00      	ble.n	8002382 <__aeabi_dsub+0x76>
 8002380:	e1ee      	b.n	8002760 <__aeabi_dsub+0x454>
 8002382:	2020      	movs	r0, #32
 8002384:	003e      	movs	r6, r7
 8002386:	1a80      	subs	r0, r0, r2
 8002388:	000c      	movs	r4, r1
 800238a:	40d6      	lsrs	r6, r2
 800238c:	40d1      	lsrs	r1, r2
 800238e:	4087      	lsls	r7, r0
 8002390:	4662      	mov	r2, ip
 8002392:	4084      	lsls	r4, r0
 8002394:	1a52      	subs	r2, r2, r1
 8002396:	1e78      	subs	r0, r7, #1
 8002398:	4187      	sbcs	r7, r0
 800239a:	4694      	mov	ip, r2
 800239c:	4334      	orrs	r4, r6
 800239e:	4327      	orrs	r7, r4
 80023a0:	1bdc      	subs	r4, r3, r7
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	419b      	sbcs	r3, r3
 80023a6:	4662      	mov	r2, ip
 80023a8:	425b      	negs	r3, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4699      	mov	r9, r3
 80023ae:	464b      	mov	r3, r9
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	d400      	bmi.n	80023b6 <__aeabi_dsub+0xaa>
 80023b4:	e118      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 80023b6:	464b      	mov	r3, r9
 80023b8:	0258      	lsls	r0, r3, #9
 80023ba:	0a43      	lsrs	r3, r0, #9
 80023bc:	4699      	mov	r9, r3
 80023be:	464b      	mov	r3, r9
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0xba>
 80023c4:	e137      	b.n	8002636 <__aeabi_dsub+0x32a>
 80023c6:	4648      	mov	r0, r9
 80023c8:	f000 fcac 	bl	8002d24 <__clzsi2>
 80023cc:	0001      	movs	r1, r0
 80023ce:	3908      	subs	r1, #8
 80023d0:	2320      	movs	r3, #32
 80023d2:	0022      	movs	r2, r4
 80023d4:	4648      	mov	r0, r9
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	40da      	lsrs	r2, r3
 80023da:	4088      	lsls	r0, r1
 80023dc:	408c      	lsls	r4, r1
 80023de:	4643      	mov	r3, r8
 80023e0:	4310      	orrs	r0, r2
 80023e2:	4588      	cmp	r8, r1
 80023e4:	dd00      	ble.n	80023e8 <__aeabi_dsub+0xdc>
 80023e6:	e136      	b.n	8002656 <__aeabi_dsub+0x34a>
 80023e8:	1ac9      	subs	r1, r1, r3
 80023ea:	1c4b      	adds	r3, r1, #1
 80023ec:	2b1f      	cmp	r3, #31
 80023ee:	dd00      	ble.n	80023f2 <__aeabi_dsub+0xe6>
 80023f0:	e0ea      	b.n	80025c8 <__aeabi_dsub+0x2bc>
 80023f2:	2220      	movs	r2, #32
 80023f4:	0026      	movs	r6, r4
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	0001      	movs	r1, r0
 80023fa:	4094      	lsls	r4, r2
 80023fc:	40de      	lsrs	r6, r3
 80023fe:	40d8      	lsrs	r0, r3
 8002400:	2300      	movs	r3, #0
 8002402:	4091      	lsls	r1, r2
 8002404:	1e62      	subs	r2, r4, #1
 8002406:	4194      	sbcs	r4, r2
 8002408:	4681      	mov	r9, r0
 800240a:	4698      	mov	r8, r3
 800240c:	4331      	orrs	r1, r6
 800240e:	430c      	orrs	r4, r1
 8002410:	0763      	lsls	r3, r4, #29
 8002412:	d009      	beq.n	8002428 <__aeabi_dsub+0x11c>
 8002414:	230f      	movs	r3, #15
 8002416:	4023      	ands	r3, r4
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <__aeabi_dsub+0x11c>
 800241c:	1d23      	adds	r3, r4, #4
 800241e:	42a3      	cmp	r3, r4
 8002420:	41a4      	sbcs	r4, r4
 8002422:	4264      	negs	r4, r4
 8002424:	44a1      	add	r9, r4
 8002426:	001c      	movs	r4, r3
 8002428:	464b      	mov	r3, r9
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	d400      	bmi.n	8002430 <__aeabi_dsub+0x124>
 800242e:	e0de      	b.n	80025ee <__aeabi_dsub+0x2e2>
 8002430:	4641      	mov	r1, r8
 8002432:	4b8c      	ldr	r3, [pc, #560]	; (8002664 <__aeabi_dsub+0x358>)
 8002434:	3101      	adds	r1, #1
 8002436:	4299      	cmp	r1, r3
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x130>
 800243a:	e0e7      	b.n	800260c <__aeabi_dsub+0x300>
 800243c:	464b      	mov	r3, r9
 800243e:	488a      	ldr	r0, [pc, #552]	; (8002668 <__aeabi_dsub+0x35c>)
 8002440:	08e4      	lsrs	r4, r4, #3
 8002442:	4003      	ands	r3, r0
 8002444:	0018      	movs	r0, r3
 8002446:	0549      	lsls	r1, r1, #21
 8002448:	075b      	lsls	r3, r3, #29
 800244a:	0240      	lsls	r0, r0, #9
 800244c:	4323      	orrs	r3, r4
 800244e:	0d4a      	lsrs	r2, r1, #21
 8002450:	0b04      	lsrs	r4, r0, #12
 8002452:	0512      	lsls	r2, r2, #20
 8002454:	07ed      	lsls	r5, r5, #31
 8002456:	4322      	orrs	r2, r4
 8002458:	432a      	orrs	r2, r5
 800245a:	0018      	movs	r0, r3
 800245c:	0011      	movs	r1, r2
 800245e:	bcf0      	pop	{r4, r5, r6, r7}
 8002460:	46bb      	mov	fp, r7
 8002462:	46b2      	mov	sl, r6
 8002464:	46a9      	mov	r9, r5
 8002466:	46a0      	mov	r8, r4
 8002468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800246a:	4642      	mov	r2, r8
 800246c:	1a12      	subs	r2, r2, r0
 800246e:	2a00      	cmp	r2, #0
 8002470:	dd52      	ble.n	8002518 <__aeabi_dsub+0x20c>
 8002472:	2800      	cmp	r0, #0
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x16c>
 8002476:	e09c      	b.n	80025b2 <__aeabi_dsub+0x2a6>
 8002478:	45a0      	cmp	r8, r4
 800247a:	d100      	bne.n	800247e <__aeabi_dsub+0x172>
 800247c:	e0ca      	b.n	8002614 <__aeabi_dsub+0x308>
 800247e:	2080      	movs	r0, #128	; 0x80
 8002480:	0400      	lsls	r0, r0, #16
 8002482:	4301      	orrs	r1, r0
 8002484:	2a38      	cmp	r2, #56	; 0x38
 8002486:	dd00      	ble.n	800248a <__aeabi_dsub+0x17e>
 8002488:	e149      	b.n	800271e <__aeabi_dsub+0x412>
 800248a:	2a1f      	cmp	r2, #31
 800248c:	dc00      	bgt.n	8002490 <__aeabi_dsub+0x184>
 800248e:	e197      	b.n	80027c0 <__aeabi_dsub+0x4b4>
 8002490:	0010      	movs	r0, r2
 8002492:	000e      	movs	r6, r1
 8002494:	3820      	subs	r0, #32
 8002496:	40c6      	lsrs	r6, r0
 8002498:	2a20      	cmp	r2, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_dsub+0x19a>
 800249c:	2040      	movs	r0, #64	; 0x40
 800249e:	1a82      	subs	r2, r0, r2
 80024a0:	4091      	lsls	r1, r2
 80024a2:	430f      	orrs	r7, r1
 80024a4:	46b9      	mov	r9, r7
 80024a6:	464c      	mov	r4, r9
 80024a8:	1e62      	subs	r2, r4, #1
 80024aa:	4194      	sbcs	r4, r2
 80024ac:	4334      	orrs	r4, r6
 80024ae:	e13a      	b.n	8002726 <__aeabi_dsub+0x41a>
 80024b0:	000a      	movs	r2, r1
 80024b2:	433a      	orrs	r2, r7
 80024b4:	d028      	beq.n	8002508 <__aeabi_dsub+0x1fc>
 80024b6:	46b3      	mov	fp, r6
 80024b8:	42b5      	cmp	r5, r6
 80024ba:	d02b      	beq.n	8002514 <__aeabi_dsub+0x208>
 80024bc:	4a6b      	ldr	r2, [pc, #428]	; (800266c <__aeabi_dsub+0x360>)
 80024be:	4442      	add	r2, r8
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d05d      	beq.n	8002580 <__aeabi_dsub+0x274>
 80024c4:	4642      	mov	r2, r8
 80024c6:	4644      	mov	r4, r8
 80024c8:	1a82      	subs	r2, r0, r2
 80024ca:	2c00      	cmp	r4, #0
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dsub+0x1c4>
 80024ce:	e0f5      	b.n	80026bc <__aeabi_dsub+0x3b0>
 80024d0:	4665      	mov	r5, ip
 80024d2:	431d      	orrs	r5, r3
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x1cc>
 80024d6:	e19c      	b.n	8002812 <__aeabi_dsub+0x506>
 80024d8:	1e55      	subs	r5, r2, #1
 80024da:	2a01      	cmp	r2, #1
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x1d4>
 80024de:	e1fb      	b.n	80028d8 <__aeabi_dsub+0x5cc>
 80024e0:	4c60      	ldr	r4, [pc, #384]	; (8002664 <__aeabi_dsub+0x358>)
 80024e2:	42a2      	cmp	r2, r4
 80024e4:	d100      	bne.n	80024e8 <__aeabi_dsub+0x1dc>
 80024e6:	e1bd      	b.n	8002864 <__aeabi_dsub+0x558>
 80024e8:	002a      	movs	r2, r5
 80024ea:	e0f0      	b.n	80026ce <__aeabi_dsub+0x3c2>
 80024ec:	0008      	movs	r0, r1
 80024ee:	4338      	orrs	r0, r7
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x1e8>
 80024f2:	e0c3      	b.n	800267c <__aeabi_dsub+0x370>
 80024f4:	1e50      	subs	r0, r2, #1
 80024f6:	2a01      	cmp	r2, #1
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x1f0>
 80024fa:	e1a8      	b.n	800284e <__aeabi_dsub+0x542>
 80024fc:	4c59      	ldr	r4, [pc, #356]	; (8002664 <__aeabi_dsub+0x358>)
 80024fe:	42a2      	cmp	r2, r4
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x1f8>
 8002502:	e087      	b.n	8002614 <__aeabi_dsub+0x308>
 8002504:	0002      	movs	r2, r0
 8002506:	e736      	b.n	8002376 <__aeabi_dsub+0x6a>
 8002508:	2201      	movs	r2, #1
 800250a:	4056      	eors	r6, r2
 800250c:	46b3      	mov	fp, r6
 800250e:	42b5      	cmp	r5, r6
 8002510:	d000      	beq.n	8002514 <__aeabi_dsub+0x208>
 8002512:	e721      	b.n	8002358 <__aeabi_dsub+0x4c>
 8002514:	4a55      	ldr	r2, [pc, #340]	; (800266c <__aeabi_dsub+0x360>)
 8002516:	4442      	add	r2, r8
 8002518:	2a00      	cmp	r2, #0
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x212>
 800251c:	e0b5      	b.n	800268a <__aeabi_dsub+0x37e>
 800251e:	4642      	mov	r2, r8
 8002520:	4644      	mov	r4, r8
 8002522:	1a82      	subs	r2, r0, r2
 8002524:	2c00      	cmp	r4, #0
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x21e>
 8002528:	e138      	b.n	800279c <__aeabi_dsub+0x490>
 800252a:	4e4e      	ldr	r6, [pc, #312]	; (8002664 <__aeabi_dsub+0x358>)
 800252c:	42b0      	cmp	r0, r6
 800252e:	d100      	bne.n	8002532 <__aeabi_dsub+0x226>
 8002530:	e1de      	b.n	80028f0 <__aeabi_dsub+0x5e4>
 8002532:	2680      	movs	r6, #128	; 0x80
 8002534:	4664      	mov	r4, ip
 8002536:	0436      	lsls	r6, r6, #16
 8002538:	4334      	orrs	r4, r6
 800253a:	46a4      	mov	ip, r4
 800253c:	2a38      	cmp	r2, #56	; 0x38
 800253e:	dd00      	ble.n	8002542 <__aeabi_dsub+0x236>
 8002540:	e196      	b.n	8002870 <__aeabi_dsub+0x564>
 8002542:	2a1f      	cmp	r2, #31
 8002544:	dd00      	ble.n	8002548 <__aeabi_dsub+0x23c>
 8002546:	e224      	b.n	8002992 <__aeabi_dsub+0x686>
 8002548:	2620      	movs	r6, #32
 800254a:	1ab4      	subs	r4, r6, r2
 800254c:	46a2      	mov	sl, r4
 800254e:	4664      	mov	r4, ip
 8002550:	4656      	mov	r6, sl
 8002552:	40b4      	lsls	r4, r6
 8002554:	46a1      	mov	r9, r4
 8002556:	001c      	movs	r4, r3
 8002558:	464e      	mov	r6, r9
 800255a:	40d4      	lsrs	r4, r2
 800255c:	4326      	orrs	r6, r4
 800255e:	0034      	movs	r4, r6
 8002560:	4656      	mov	r6, sl
 8002562:	40b3      	lsls	r3, r6
 8002564:	1e5e      	subs	r6, r3, #1
 8002566:	41b3      	sbcs	r3, r6
 8002568:	431c      	orrs	r4, r3
 800256a:	4663      	mov	r3, ip
 800256c:	40d3      	lsrs	r3, r2
 800256e:	18c9      	adds	r1, r1, r3
 8002570:	19e4      	adds	r4, r4, r7
 8002572:	42bc      	cmp	r4, r7
 8002574:	41bf      	sbcs	r7, r7
 8002576:	427f      	negs	r7, r7
 8002578:	46b9      	mov	r9, r7
 800257a:	4680      	mov	r8, r0
 800257c:	4489      	add	r9, r1
 800257e:	e0d8      	b.n	8002732 <__aeabi_dsub+0x426>
 8002580:	4640      	mov	r0, r8
 8002582:	4c3b      	ldr	r4, [pc, #236]	; (8002670 <__aeabi_dsub+0x364>)
 8002584:	3001      	adds	r0, #1
 8002586:	4220      	tst	r0, r4
 8002588:	d000      	beq.n	800258c <__aeabi_dsub+0x280>
 800258a:	e0b4      	b.n	80026f6 <__aeabi_dsub+0x3ea>
 800258c:	4640      	mov	r0, r8
 800258e:	2800      	cmp	r0, #0
 8002590:	d000      	beq.n	8002594 <__aeabi_dsub+0x288>
 8002592:	e144      	b.n	800281e <__aeabi_dsub+0x512>
 8002594:	4660      	mov	r0, ip
 8002596:	4318      	orrs	r0, r3
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x290>
 800259a:	e190      	b.n	80028be <__aeabi_dsub+0x5b2>
 800259c:	0008      	movs	r0, r1
 800259e:	4338      	orrs	r0, r7
 80025a0:	d000      	beq.n	80025a4 <__aeabi_dsub+0x298>
 80025a2:	e1aa      	b.n	80028fa <__aeabi_dsub+0x5ee>
 80025a4:	4661      	mov	r1, ip
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	0749      	lsls	r1, r1, #29
 80025aa:	430b      	orrs	r3, r1
 80025ac:	4661      	mov	r1, ip
 80025ae:	08cc      	lsrs	r4, r1, #3
 80025b0:	e027      	b.n	8002602 <__aeabi_dsub+0x2f6>
 80025b2:	0008      	movs	r0, r1
 80025b4:	4338      	orrs	r0, r7
 80025b6:	d061      	beq.n	800267c <__aeabi_dsub+0x370>
 80025b8:	1e50      	subs	r0, r2, #1
 80025ba:	2a01      	cmp	r2, #1
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x2b4>
 80025be:	e139      	b.n	8002834 <__aeabi_dsub+0x528>
 80025c0:	42a2      	cmp	r2, r4
 80025c2:	d027      	beq.n	8002614 <__aeabi_dsub+0x308>
 80025c4:	0002      	movs	r2, r0
 80025c6:	e75d      	b.n	8002484 <__aeabi_dsub+0x178>
 80025c8:	0002      	movs	r2, r0
 80025ca:	391f      	subs	r1, #31
 80025cc:	40ca      	lsrs	r2, r1
 80025ce:	0011      	movs	r1, r2
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d003      	beq.n	80025dc <__aeabi_dsub+0x2d0>
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4098      	lsls	r0, r3
 80025da:	4304      	orrs	r4, r0
 80025dc:	1e63      	subs	r3, r4, #1
 80025de:	419c      	sbcs	r4, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	4699      	mov	r9, r3
 80025e4:	4698      	mov	r8, r3
 80025e6:	430c      	orrs	r4, r1
 80025e8:	0763      	lsls	r3, r4, #29
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x2e2>
 80025ec:	e712      	b.n	8002414 <__aeabi_dsub+0x108>
 80025ee:	464b      	mov	r3, r9
 80025f0:	464a      	mov	r2, r9
 80025f2:	08e4      	lsrs	r4, r4, #3
 80025f4:	075b      	lsls	r3, r3, #29
 80025f6:	4323      	orrs	r3, r4
 80025f8:	08d4      	lsrs	r4, r2, #3
 80025fa:	4642      	mov	r2, r8
 80025fc:	4919      	ldr	r1, [pc, #100]	; (8002664 <__aeabi_dsub+0x358>)
 80025fe:	428a      	cmp	r2, r1
 8002600:	d00e      	beq.n	8002620 <__aeabi_dsub+0x314>
 8002602:	0324      	lsls	r4, r4, #12
 8002604:	0552      	lsls	r2, r2, #21
 8002606:	0b24      	lsrs	r4, r4, #12
 8002608:	0d52      	lsrs	r2, r2, #21
 800260a:	e722      	b.n	8002452 <__aeabi_dsub+0x146>
 800260c:	000a      	movs	r2, r1
 800260e:	2400      	movs	r4, #0
 8002610:	2300      	movs	r3, #0
 8002612:	e71e      	b.n	8002452 <__aeabi_dsub+0x146>
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	4662      	mov	r2, ip
 8002618:	0752      	lsls	r2, r2, #29
 800261a:	4313      	orrs	r3, r2
 800261c:	4662      	mov	r2, ip
 800261e:	08d4      	lsrs	r4, r2, #3
 8002620:	001a      	movs	r2, r3
 8002622:	4322      	orrs	r2, r4
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x31c>
 8002626:	e1fc      	b.n	8002a22 <__aeabi_dsub+0x716>
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	0312      	lsls	r2, r2, #12
 800262c:	4314      	orrs	r4, r2
 800262e:	0324      	lsls	r4, r4, #12
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <__aeabi_dsub+0x358>)
 8002632:	0b24      	lsrs	r4, r4, #12
 8002634:	e70d      	b.n	8002452 <__aeabi_dsub+0x146>
 8002636:	0020      	movs	r0, r4
 8002638:	f000 fb74 	bl	8002d24 <__clzsi2>
 800263c:	0001      	movs	r1, r0
 800263e:	3118      	adds	r1, #24
 8002640:	291f      	cmp	r1, #31
 8002642:	dc00      	bgt.n	8002646 <__aeabi_dsub+0x33a>
 8002644:	e6c4      	b.n	80023d0 <__aeabi_dsub+0xc4>
 8002646:	3808      	subs	r0, #8
 8002648:	4084      	lsls	r4, r0
 800264a:	4643      	mov	r3, r8
 800264c:	0020      	movs	r0, r4
 800264e:	2400      	movs	r4, #0
 8002650:	4588      	cmp	r8, r1
 8002652:	dc00      	bgt.n	8002656 <__aeabi_dsub+0x34a>
 8002654:	e6c8      	b.n	80023e8 <__aeabi_dsub+0xdc>
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__aeabi_dsub+0x35c>)
 8002658:	1a5b      	subs	r3, r3, r1
 800265a:	4010      	ands	r0, r2
 800265c:	4698      	mov	r8, r3
 800265e:	4681      	mov	r9, r0
 8002660:	e6d6      	b.n	8002410 <__aeabi_dsub+0x104>
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	000007ff 	.word	0x000007ff
 8002668:	ff7fffff 	.word	0xff7fffff
 800266c:	fffff801 	.word	0xfffff801
 8002670:	000007fe 	.word	0x000007fe
 8002674:	430f      	orrs	r7, r1
 8002676:	1e7a      	subs	r2, r7, #1
 8002678:	4197      	sbcs	r7, r2
 800267a:	e691      	b.n	80023a0 <__aeabi_dsub+0x94>
 800267c:	4661      	mov	r1, ip
 800267e:	08db      	lsrs	r3, r3, #3
 8002680:	0749      	lsls	r1, r1, #29
 8002682:	430b      	orrs	r3, r1
 8002684:	4661      	mov	r1, ip
 8002686:	08cc      	lsrs	r4, r1, #3
 8002688:	e7b8      	b.n	80025fc <__aeabi_dsub+0x2f0>
 800268a:	4640      	mov	r0, r8
 800268c:	4cd3      	ldr	r4, [pc, #844]	; (80029dc <__aeabi_dsub+0x6d0>)
 800268e:	3001      	adds	r0, #1
 8002690:	4220      	tst	r0, r4
 8002692:	d000      	beq.n	8002696 <__aeabi_dsub+0x38a>
 8002694:	e0a2      	b.n	80027dc <__aeabi_dsub+0x4d0>
 8002696:	4640      	mov	r0, r8
 8002698:	2800      	cmp	r0, #0
 800269a:	d000      	beq.n	800269e <__aeabi_dsub+0x392>
 800269c:	e101      	b.n	80028a2 <__aeabi_dsub+0x596>
 800269e:	4660      	mov	r0, ip
 80026a0:	4318      	orrs	r0, r3
 80026a2:	d100      	bne.n	80026a6 <__aeabi_dsub+0x39a>
 80026a4:	e15e      	b.n	8002964 <__aeabi_dsub+0x658>
 80026a6:	0008      	movs	r0, r1
 80026a8:	4338      	orrs	r0, r7
 80026aa:	d000      	beq.n	80026ae <__aeabi_dsub+0x3a2>
 80026ac:	e15f      	b.n	800296e <__aeabi_dsub+0x662>
 80026ae:	4661      	mov	r1, ip
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	0749      	lsls	r1, r1, #29
 80026b4:	430b      	orrs	r3, r1
 80026b6:	4661      	mov	r1, ip
 80026b8:	08cc      	lsrs	r4, r1, #3
 80026ba:	e7a2      	b.n	8002602 <__aeabi_dsub+0x2f6>
 80026bc:	4dc8      	ldr	r5, [pc, #800]	; (80029e0 <__aeabi_dsub+0x6d4>)
 80026be:	42a8      	cmp	r0, r5
 80026c0:	d100      	bne.n	80026c4 <__aeabi_dsub+0x3b8>
 80026c2:	e0cf      	b.n	8002864 <__aeabi_dsub+0x558>
 80026c4:	2580      	movs	r5, #128	; 0x80
 80026c6:	4664      	mov	r4, ip
 80026c8:	042d      	lsls	r5, r5, #16
 80026ca:	432c      	orrs	r4, r5
 80026cc:	46a4      	mov	ip, r4
 80026ce:	2a38      	cmp	r2, #56	; 0x38
 80026d0:	dc56      	bgt.n	8002780 <__aeabi_dsub+0x474>
 80026d2:	2a1f      	cmp	r2, #31
 80026d4:	dd00      	ble.n	80026d8 <__aeabi_dsub+0x3cc>
 80026d6:	e0d1      	b.n	800287c <__aeabi_dsub+0x570>
 80026d8:	2520      	movs	r5, #32
 80026da:	001e      	movs	r6, r3
 80026dc:	1aad      	subs	r5, r5, r2
 80026de:	4664      	mov	r4, ip
 80026e0:	40ab      	lsls	r3, r5
 80026e2:	40ac      	lsls	r4, r5
 80026e4:	40d6      	lsrs	r6, r2
 80026e6:	1e5d      	subs	r5, r3, #1
 80026e8:	41ab      	sbcs	r3, r5
 80026ea:	4334      	orrs	r4, r6
 80026ec:	4323      	orrs	r3, r4
 80026ee:	4664      	mov	r4, ip
 80026f0:	40d4      	lsrs	r4, r2
 80026f2:	1b09      	subs	r1, r1, r4
 80026f4:	e049      	b.n	800278a <__aeabi_dsub+0x47e>
 80026f6:	4660      	mov	r0, ip
 80026f8:	1bdc      	subs	r4, r3, r7
 80026fa:	1a46      	subs	r6, r0, r1
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	4180      	sbcs	r0, r0
 8002700:	4240      	negs	r0, r0
 8002702:	4681      	mov	r9, r0
 8002704:	0030      	movs	r0, r6
 8002706:	464e      	mov	r6, r9
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	4681      	mov	r9, r0
 800270c:	0200      	lsls	r0, r0, #8
 800270e:	d476      	bmi.n	80027fe <__aeabi_dsub+0x4f2>
 8002710:	464b      	mov	r3, r9
 8002712:	4323      	orrs	r3, r4
 8002714:	d000      	beq.n	8002718 <__aeabi_dsub+0x40c>
 8002716:	e652      	b.n	80023be <__aeabi_dsub+0xb2>
 8002718:	2400      	movs	r4, #0
 800271a:	2500      	movs	r5, #0
 800271c:	e771      	b.n	8002602 <__aeabi_dsub+0x2f6>
 800271e:	4339      	orrs	r1, r7
 8002720:	000c      	movs	r4, r1
 8002722:	1e62      	subs	r2, r4, #1
 8002724:	4194      	sbcs	r4, r2
 8002726:	18e4      	adds	r4, r4, r3
 8002728:	429c      	cmp	r4, r3
 800272a:	419b      	sbcs	r3, r3
 800272c:	425b      	negs	r3, r3
 800272e:	4463      	add	r3, ip
 8002730:	4699      	mov	r9, r3
 8002732:	464b      	mov	r3, r9
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0x42e>
 8002738:	e756      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 800273a:	2301      	movs	r3, #1
 800273c:	469c      	mov	ip, r3
 800273e:	4ba8      	ldr	r3, [pc, #672]	; (80029e0 <__aeabi_dsub+0x6d4>)
 8002740:	44e0      	add	r8, ip
 8002742:	4598      	cmp	r8, r3
 8002744:	d038      	beq.n	80027b8 <__aeabi_dsub+0x4ac>
 8002746:	464b      	mov	r3, r9
 8002748:	48a6      	ldr	r0, [pc, #664]	; (80029e4 <__aeabi_dsub+0x6d8>)
 800274a:	2201      	movs	r2, #1
 800274c:	4003      	ands	r3, r0
 800274e:	0018      	movs	r0, r3
 8002750:	0863      	lsrs	r3, r4, #1
 8002752:	4014      	ands	r4, r2
 8002754:	431c      	orrs	r4, r3
 8002756:	07c3      	lsls	r3, r0, #31
 8002758:	431c      	orrs	r4, r3
 800275a:	0843      	lsrs	r3, r0, #1
 800275c:	4699      	mov	r9, r3
 800275e:	e657      	b.n	8002410 <__aeabi_dsub+0x104>
 8002760:	0010      	movs	r0, r2
 8002762:	000e      	movs	r6, r1
 8002764:	3820      	subs	r0, #32
 8002766:	40c6      	lsrs	r6, r0
 8002768:	2a20      	cmp	r2, #32
 800276a:	d004      	beq.n	8002776 <__aeabi_dsub+0x46a>
 800276c:	2040      	movs	r0, #64	; 0x40
 800276e:	1a82      	subs	r2, r0, r2
 8002770:	4091      	lsls	r1, r2
 8002772:	430f      	orrs	r7, r1
 8002774:	46b9      	mov	r9, r7
 8002776:	464f      	mov	r7, r9
 8002778:	1e7a      	subs	r2, r7, #1
 800277a:	4197      	sbcs	r7, r2
 800277c:	4337      	orrs	r7, r6
 800277e:	e60f      	b.n	80023a0 <__aeabi_dsub+0x94>
 8002780:	4662      	mov	r2, ip
 8002782:	431a      	orrs	r2, r3
 8002784:	0013      	movs	r3, r2
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4193      	sbcs	r3, r2
 800278a:	1afc      	subs	r4, r7, r3
 800278c:	42a7      	cmp	r7, r4
 800278e:	41bf      	sbcs	r7, r7
 8002790:	427f      	negs	r7, r7
 8002792:	1bcb      	subs	r3, r1, r7
 8002794:	4699      	mov	r9, r3
 8002796:	465d      	mov	r5, fp
 8002798:	4680      	mov	r8, r0
 800279a:	e608      	b.n	80023ae <__aeabi_dsub+0xa2>
 800279c:	4666      	mov	r6, ip
 800279e:	431e      	orrs	r6, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x498>
 80027a2:	e0be      	b.n	8002922 <__aeabi_dsub+0x616>
 80027a4:	1e56      	subs	r6, r2, #1
 80027a6:	2a01      	cmp	r2, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x4a0>
 80027aa:	e109      	b.n	80029c0 <__aeabi_dsub+0x6b4>
 80027ac:	4c8c      	ldr	r4, [pc, #560]	; (80029e0 <__aeabi_dsub+0x6d4>)
 80027ae:	42a2      	cmp	r2, r4
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x4a8>
 80027b2:	e119      	b.n	80029e8 <__aeabi_dsub+0x6dc>
 80027b4:	0032      	movs	r2, r6
 80027b6:	e6c1      	b.n	800253c <__aeabi_dsub+0x230>
 80027b8:	4642      	mov	r2, r8
 80027ba:	2400      	movs	r4, #0
 80027bc:	2300      	movs	r3, #0
 80027be:	e648      	b.n	8002452 <__aeabi_dsub+0x146>
 80027c0:	2020      	movs	r0, #32
 80027c2:	000c      	movs	r4, r1
 80027c4:	1a80      	subs	r0, r0, r2
 80027c6:	003e      	movs	r6, r7
 80027c8:	4087      	lsls	r7, r0
 80027ca:	4084      	lsls	r4, r0
 80027cc:	40d6      	lsrs	r6, r2
 80027ce:	1e78      	subs	r0, r7, #1
 80027d0:	4187      	sbcs	r7, r0
 80027d2:	40d1      	lsrs	r1, r2
 80027d4:	4334      	orrs	r4, r6
 80027d6:	433c      	orrs	r4, r7
 80027d8:	448c      	add	ip, r1
 80027da:	e7a4      	b.n	8002726 <__aeabi_dsub+0x41a>
 80027dc:	4a80      	ldr	r2, [pc, #512]	; (80029e0 <__aeabi_dsub+0x6d4>)
 80027de:	4290      	cmp	r0, r2
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x4d8>
 80027e2:	e0e9      	b.n	80029b8 <__aeabi_dsub+0x6ac>
 80027e4:	19df      	adds	r7, r3, r7
 80027e6:	429f      	cmp	r7, r3
 80027e8:	419b      	sbcs	r3, r3
 80027ea:	4461      	add	r1, ip
 80027ec:	425b      	negs	r3, r3
 80027ee:	18c9      	adds	r1, r1, r3
 80027f0:	07cc      	lsls	r4, r1, #31
 80027f2:	087f      	lsrs	r7, r7, #1
 80027f4:	084b      	lsrs	r3, r1, #1
 80027f6:	4699      	mov	r9, r3
 80027f8:	4680      	mov	r8, r0
 80027fa:	433c      	orrs	r4, r7
 80027fc:	e6f4      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 80027fe:	1afc      	subs	r4, r7, r3
 8002800:	42a7      	cmp	r7, r4
 8002802:	41bf      	sbcs	r7, r7
 8002804:	4663      	mov	r3, ip
 8002806:	427f      	negs	r7, r7
 8002808:	1ac9      	subs	r1, r1, r3
 800280a:	1bcb      	subs	r3, r1, r7
 800280c:	4699      	mov	r9, r3
 800280e:	465d      	mov	r5, fp
 8002810:	e5d5      	b.n	80023be <__aeabi_dsub+0xb2>
 8002812:	08ff      	lsrs	r7, r7, #3
 8002814:	074b      	lsls	r3, r1, #29
 8002816:	465d      	mov	r5, fp
 8002818:	433b      	orrs	r3, r7
 800281a:	08cc      	lsrs	r4, r1, #3
 800281c:	e6ee      	b.n	80025fc <__aeabi_dsub+0x2f0>
 800281e:	4662      	mov	r2, ip
 8002820:	431a      	orrs	r2, r3
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x51a>
 8002824:	e082      	b.n	800292c <__aeabi_dsub+0x620>
 8002826:	000b      	movs	r3, r1
 8002828:	433b      	orrs	r3, r7
 800282a:	d11b      	bne.n	8002864 <__aeabi_dsub+0x558>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	2500      	movs	r5, #0
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	e6f9      	b.n	8002628 <__aeabi_dsub+0x31c>
 8002834:	19dc      	adds	r4, r3, r7
 8002836:	429c      	cmp	r4, r3
 8002838:	419b      	sbcs	r3, r3
 800283a:	4461      	add	r1, ip
 800283c:	4689      	mov	r9, r1
 800283e:	425b      	negs	r3, r3
 8002840:	4499      	add	r9, r3
 8002842:	464b      	mov	r3, r9
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	d444      	bmi.n	80028d2 <__aeabi_dsub+0x5c6>
 8002848:	2301      	movs	r3, #1
 800284a:	4698      	mov	r8, r3
 800284c:	e6cc      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 800284e:	1bdc      	subs	r4, r3, r7
 8002850:	4662      	mov	r2, ip
 8002852:	42a3      	cmp	r3, r4
 8002854:	419b      	sbcs	r3, r3
 8002856:	1a51      	subs	r1, r2, r1
 8002858:	425b      	negs	r3, r3
 800285a:	1acb      	subs	r3, r1, r3
 800285c:	4699      	mov	r9, r3
 800285e:	2301      	movs	r3, #1
 8002860:	4698      	mov	r8, r3
 8002862:	e5a4      	b.n	80023ae <__aeabi_dsub+0xa2>
 8002864:	08ff      	lsrs	r7, r7, #3
 8002866:	074b      	lsls	r3, r1, #29
 8002868:	465d      	mov	r5, fp
 800286a:	433b      	orrs	r3, r7
 800286c:	08cc      	lsrs	r4, r1, #3
 800286e:	e6d7      	b.n	8002620 <__aeabi_dsub+0x314>
 8002870:	4662      	mov	r2, ip
 8002872:	431a      	orrs	r2, r3
 8002874:	0014      	movs	r4, r2
 8002876:	1e63      	subs	r3, r4, #1
 8002878:	419c      	sbcs	r4, r3
 800287a:	e679      	b.n	8002570 <__aeabi_dsub+0x264>
 800287c:	0015      	movs	r5, r2
 800287e:	4664      	mov	r4, ip
 8002880:	3d20      	subs	r5, #32
 8002882:	40ec      	lsrs	r4, r5
 8002884:	46a0      	mov	r8, r4
 8002886:	2a20      	cmp	r2, #32
 8002888:	d005      	beq.n	8002896 <__aeabi_dsub+0x58a>
 800288a:	2540      	movs	r5, #64	; 0x40
 800288c:	4664      	mov	r4, ip
 800288e:	1aaa      	subs	r2, r5, r2
 8002890:	4094      	lsls	r4, r2
 8002892:	4323      	orrs	r3, r4
 8002894:	469a      	mov	sl, r3
 8002896:	4654      	mov	r4, sl
 8002898:	1e63      	subs	r3, r4, #1
 800289a:	419c      	sbcs	r4, r3
 800289c:	4643      	mov	r3, r8
 800289e:	4323      	orrs	r3, r4
 80028a0:	e773      	b.n	800278a <__aeabi_dsub+0x47e>
 80028a2:	4662      	mov	r2, ip
 80028a4:	431a      	orrs	r2, r3
 80028a6:	d023      	beq.n	80028f0 <__aeabi_dsub+0x5e4>
 80028a8:	000a      	movs	r2, r1
 80028aa:	433a      	orrs	r2, r7
 80028ac:	d000      	beq.n	80028b0 <__aeabi_dsub+0x5a4>
 80028ae:	e0a0      	b.n	80029f2 <__aeabi_dsub+0x6e6>
 80028b0:	4662      	mov	r2, ip
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	0752      	lsls	r2, r2, #29
 80028b6:	4313      	orrs	r3, r2
 80028b8:	4662      	mov	r2, ip
 80028ba:	08d4      	lsrs	r4, r2, #3
 80028bc:	e6b0      	b.n	8002620 <__aeabi_dsub+0x314>
 80028be:	000b      	movs	r3, r1
 80028c0:	433b      	orrs	r3, r7
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x5ba>
 80028c4:	e728      	b.n	8002718 <__aeabi_dsub+0x40c>
 80028c6:	08ff      	lsrs	r7, r7, #3
 80028c8:	074b      	lsls	r3, r1, #29
 80028ca:	465d      	mov	r5, fp
 80028cc:	433b      	orrs	r3, r7
 80028ce:	08cc      	lsrs	r4, r1, #3
 80028d0:	e697      	b.n	8002602 <__aeabi_dsub+0x2f6>
 80028d2:	2302      	movs	r3, #2
 80028d4:	4698      	mov	r8, r3
 80028d6:	e736      	b.n	8002746 <__aeabi_dsub+0x43a>
 80028d8:	1afc      	subs	r4, r7, r3
 80028da:	42a7      	cmp	r7, r4
 80028dc:	41bf      	sbcs	r7, r7
 80028de:	4663      	mov	r3, ip
 80028e0:	427f      	negs	r7, r7
 80028e2:	1ac9      	subs	r1, r1, r3
 80028e4:	1bcb      	subs	r3, r1, r7
 80028e6:	4699      	mov	r9, r3
 80028e8:	2301      	movs	r3, #1
 80028ea:	465d      	mov	r5, fp
 80028ec:	4698      	mov	r8, r3
 80028ee:	e55e      	b.n	80023ae <__aeabi_dsub+0xa2>
 80028f0:	074b      	lsls	r3, r1, #29
 80028f2:	08ff      	lsrs	r7, r7, #3
 80028f4:	433b      	orrs	r3, r7
 80028f6:	08cc      	lsrs	r4, r1, #3
 80028f8:	e692      	b.n	8002620 <__aeabi_dsub+0x314>
 80028fa:	1bdc      	subs	r4, r3, r7
 80028fc:	4660      	mov	r0, ip
 80028fe:	42a3      	cmp	r3, r4
 8002900:	41b6      	sbcs	r6, r6
 8002902:	1a40      	subs	r0, r0, r1
 8002904:	4276      	negs	r6, r6
 8002906:	1b80      	subs	r0, r0, r6
 8002908:	4681      	mov	r9, r0
 800290a:	0200      	lsls	r0, r0, #8
 800290c:	d560      	bpl.n	80029d0 <__aeabi_dsub+0x6c4>
 800290e:	1afc      	subs	r4, r7, r3
 8002910:	42a7      	cmp	r7, r4
 8002912:	41bf      	sbcs	r7, r7
 8002914:	4663      	mov	r3, ip
 8002916:	427f      	negs	r7, r7
 8002918:	1ac9      	subs	r1, r1, r3
 800291a:	1bcb      	subs	r3, r1, r7
 800291c:	4699      	mov	r9, r3
 800291e:	465d      	mov	r5, fp
 8002920:	e576      	b.n	8002410 <__aeabi_dsub+0x104>
 8002922:	08ff      	lsrs	r7, r7, #3
 8002924:	074b      	lsls	r3, r1, #29
 8002926:	433b      	orrs	r3, r7
 8002928:	08cc      	lsrs	r4, r1, #3
 800292a:	e667      	b.n	80025fc <__aeabi_dsub+0x2f0>
 800292c:	000a      	movs	r2, r1
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	433a      	orrs	r2, r7
 8002932:	d100      	bne.n	8002936 <__aeabi_dsub+0x62a>
 8002934:	e66f      	b.n	8002616 <__aeabi_dsub+0x30a>
 8002936:	4662      	mov	r2, ip
 8002938:	0752      	lsls	r2, r2, #29
 800293a:	4313      	orrs	r3, r2
 800293c:	4662      	mov	r2, ip
 800293e:	08d4      	lsrs	r4, r2, #3
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0312      	lsls	r2, r2, #12
 8002944:	4214      	tst	r4, r2
 8002946:	d007      	beq.n	8002958 <__aeabi_dsub+0x64c>
 8002948:	08c8      	lsrs	r0, r1, #3
 800294a:	4210      	tst	r0, r2
 800294c:	d104      	bne.n	8002958 <__aeabi_dsub+0x64c>
 800294e:	465d      	mov	r5, fp
 8002950:	0004      	movs	r4, r0
 8002952:	08fb      	lsrs	r3, r7, #3
 8002954:	0749      	lsls	r1, r1, #29
 8002956:	430b      	orrs	r3, r1
 8002958:	0f5a      	lsrs	r2, r3, #29
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	0752      	lsls	r2, r2, #29
 8002960:	4313      	orrs	r3, r2
 8002962:	e65d      	b.n	8002620 <__aeabi_dsub+0x314>
 8002964:	074b      	lsls	r3, r1, #29
 8002966:	08ff      	lsrs	r7, r7, #3
 8002968:	433b      	orrs	r3, r7
 800296a:	08cc      	lsrs	r4, r1, #3
 800296c:	e649      	b.n	8002602 <__aeabi_dsub+0x2f6>
 800296e:	19dc      	adds	r4, r3, r7
 8002970:	429c      	cmp	r4, r3
 8002972:	419b      	sbcs	r3, r3
 8002974:	4461      	add	r1, ip
 8002976:	4689      	mov	r9, r1
 8002978:	425b      	negs	r3, r3
 800297a:	4499      	add	r9, r3
 800297c:	464b      	mov	r3, r9
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	d400      	bmi.n	8002984 <__aeabi_dsub+0x678>
 8002982:	e631      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 8002984:	464a      	mov	r2, r9
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <__aeabi_dsub+0x6d8>)
 8002988:	401a      	ands	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	4691      	mov	r9, r2
 800298e:	4698      	mov	r8, r3
 8002990:	e62a      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 8002992:	0016      	movs	r6, r2
 8002994:	4664      	mov	r4, ip
 8002996:	3e20      	subs	r6, #32
 8002998:	40f4      	lsrs	r4, r6
 800299a:	46a0      	mov	r8, r4
 800299c:	2a20      	cmp	r2, #32
 800299e:	d005      	beq.n	80029ac <__aeabi_dsub+0x6a0>
 80029a0:	2640      	movs	r6, #64	; 0x40
 80029a2:	4664      	mov	r4, ip
 80029a4:	1ab2      	subs	r2, r6, r2
 80029a6:	4094      	lsls	r4, r2
 80029a8:	4323      	orrs	r3, r4
 80029aa:	469a      	mov	sl, r3
 80029ac:	4654      	mov	r4, sl
 80029ae:	1e63      	subs	r3, r4, #1
 80029b0:	419c      	sbcs	r4, r3
 80029b2:	4643      	mov	r3, r8
 80029b4:	431c      	orrs	r4, r3
 80029b6:	e5db      	b.n	8002570 <__aeabi_dsub+0x264>
 80029b8:	0002      	movs	r2, r0
 80029ba:	2400      	movs	r4, #0
 80029bc:	2300      	movs	r3, #0
 80029be:	e548      	b.n	8002452 <__aeabi_dsub+0x146>
 80029c0:	19dc      	adds	r4, r3, r7
 80029c2:	42bc      	cmp	r4, r7
 80029c4:	41bf      	sbcs	r7, r7
 80029c6:	4461      	add	r1, ip
 80029c8:	4689      	mov	r9, r1
 80029ca:	427f      	negs	r7, r7
 80029cc:	44b9      	add	r9, r7
 80029ce:	e738      	b.n	8002842 <__aeabi_dsub+0x536>
 80029d0:	464b      	mov	r3, r9
 80029d2:	4323      	orrs	r3, r4
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x6cc>
 80029d6:	e69f      	b.n	8002718 <__aeabi_dsub+0x40c>
 80029d8:	e606      	b.n	80025e8 <__aeabi_dsub+0x2dc>
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	000007fe 	.word	0x000007fe
 80029e0:	000007ff 	.word	0x000007ff
 80029e4:	ff7fffff 	.word	0xff7fffff
 80029e8:	08ff      	lsrs	r7, r7, #3
 80029ea:	074b      	lsls	r3, r1, #29
 80029ec:	433b      	orrs	r3, r7
 80029ee:	08cc      	lsrs	r4, r1, #3
 80029f0:	e616      	b.n	8002620 <__aeabi_dsub+0x314>
 80029f2:	4662      	mov	r2, ip
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	0752      	lsls	r2, r2, #29
 80029f8:	4313      	orrs	r3, r2
 80029fa:	4662      	mov	r2, ip
 80029fc:	08d4      	lsrs	r4, r2, #3
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0312      	lsls	r2, r2, #12
 8002a02:	4214      	tst	r4, r2
 8002a04:	d007      	beq.n	8002a16 <__aeabi_dsub+0x70a>
 8002a06:	08c8      	lsrs	r0, r1, #3
 8002a08:	4210      	tst	r0, r2
 8002a0a:	d104      	bne.n	8002a16 <__aeabi_dsub+0x70a>
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	0004      	movs	r4, r0
 8002a10:	08fb      	lsrs	r3, r7, #3
 8002a12:	0749      	lsls	r1, r1, #29
 8002a14:	430b      	orrs	r3, r1
 8002a16:	0f5a      	lsrs	r2, r3, #29
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	0752      	lsls	r2, r2, #29
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	e5fe      	b.n	8002620 <__aeabi_dsub+0x314>
 8002a22:	2300      	movs	r3, #0
 8002a24:	4a01      	ldr	r2, [pc, #4]	; (8002a2c <__aeabi_dsub+0x720>)
 8002a26:	001c      	movs	r4, r3
 8002a28:	e513      	b.n	8002452 <__aeabi_dsub+0x146>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	000007ff 	.word	0x000007ff

08002a30 <__aeabi_dcmpun>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	0005      	movs	r5, r0
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <__aeabi_dcmpun+0x38>)
 8002a36:	031c      	lsls	r4, r3, #12
 8002a38:	0016      	movs	r6, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	030a      	lsls	r2, r1, #12
 8002a3e:	0049      	lsls	r1, r1, #1
 8002a40:	0b12      	lsrs	r2, r2, #12
 8002a42:	0d49      	lsrs	r1, r1, #21
 8002a44:	0b24      	lsrs	r4, r4, #12
 8002a46:	0d5b      	lsrs	r3, r3, #21
 8002a48:	4281      	cmp	r1, r0
 8002a4a:	d008      	beq.n	8002a5e <__aeabi_dcmpun+0x2e>
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <__aeabi_dcmpun+0x38>)
 8002a4e:	2000      	movs	r0, #0
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <__aeabi_dcmpun+0x2c>
 8002a54:	0020      	movs	r0, r4
 8002a56:	4330      	orrs	r0, r6
 8002a58:	1e43      	subs	r3, r0, #1
 8002a5a:	4198      	sbcs	r0, r3
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	2001      	movs	r0, #1
 8002a60:	432a      	orrs	r2, r5
 8002a62:	d1fb      	bne.n	8002a5c <__aeabi_dcmpun+0x2c>
 8002a64:	e7f2      	b.n	8002a4c <__aeabi_dcmpun+0x1c>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	000007ff 	.word	0x000007ff

08002a6c <__aeabi_d2iz>:
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	b530      	push	{r4, r5, lr}
 8002a70:	4c13      	ldr	r4, [pc, #76]	; (8002ac0 <__aeabi_d2iz+0x54>)
 8002a72:	0053      	lsls	r3, r2, #1
 8002a74:	0309      	lsls	r1, r1, #12
 8002a76:	0005      	movs	r5, r0
 8002a78:	0b09      	lsrs	r1, r1, #12
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	0d5b      	lsrs	r3, r3, #21
 8002a7e:	0fd2      	lsrs	r2, r2, #31
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	dd04      	ble.n	8002a8e <__aeabi_d2iz+0x22>
 8002a84:	480f      	ldr	r0, [pc, #60]	; (8002ac4 <__aeabi_d2iz+0x58>)
 8002a86:	4283      	cmp	r3, r0
 8002a88:	dd02      	ble.n	8002a90 <__aeabi_d2iz+0x24>
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <__aeabi_d2iz+0x5c>)
 8002a8c:	18d0      	adds	r0, r2, r3
 8002a8e:	bd30      	pop	{r4, r5, pc}
 8002a90:	2080      	movs	r0, #128	; 0x80
 8002a92:	0340      	lsls	r0, r0, #13
 8002a94:	4301      	orrs	r1, r0
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <__aeabi_d2iz+0x60>)
 8002a98:	1ac0      	subs	r0, r0, r3
 8002a9a:	281f      	cmp	r0, #31
 8002a9c:	dd08      	ble.n	8002ab0 <__aeabi_d2iz+0x44>
 8002a9e:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <__aeabi_d2iz+0x64>)
 8002aa0:	1ac3      	subs	r3, r0, r3
 8002aa2:	40d9      	lsrs	r1, r3
 8002aa4:	000b      	movs	r3, r1
 8002aa6:	4258      	negs	r0, r3
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d1f0      	bne.n	8002a8e <__aeabi_d2iz+0x22>
 8002aac:	0018      	movs	r0, r3
 8002aae:	e7ee      	b.n	8002a8e <__aeabi_d2iz+0x22>
 8002ab0:	4c08      	ldr	r4, [pc, #32]	; (8002ad4 <__aeabi_d2iz+0x68>)
 8002ab2:	40c5      	lsrs	r5, r0
 8002ab4:	46a4      	mov	ip, r4
 8002ab6:	4463      	add	r3, ip
 8002ab8:	4099      	lsls	r1, r3
 8002aba:	000b      	movs	r3, r1
 8002abc:	432b      	orrs	r3, r5
 8002abe:	e7f2      	b.n	8002aa6 <__aeabi_d2iz+0x3a>
 8002ac0:	000003fe 	.word	0x000003fe
 8002ac4:	0000041d 	.word	0x0000041d
 8002ac8:	7fffffff 	.word	0x7fffffff
 8002acc:	00000433 	.word	0x00000433
 8002ad0:	00000413 	.word	0x00000413
 8002ad4:	fffffbed 	.word	0xfffffbed

08002ad8 <__aeabi_i2d>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d016      	beq.n	8002b0c <__aeabi_i2d+0x34>
 8002ade:	17c3      	asrs	r3, r0, #31
 8002ae0:	18c5      	adds	r5, r0, r3
 8002ae2:	405d      	eors	r5, r3
 8002ae4:	0fc4      	lsrs	r4, r0, #31
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	f000 f91c 	bl	8002d24 <__clzsi2>
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <__aeabi_i2d+0x5c>)
 8002aee:	1a12      	subs	r2, r2, r0
 8002af0:	280a      	cmp	r0, #10
 8002af2:	dc16      	bgt.n	8002b22 <__aeabi_i2d+0x4a>
 8002af4:	0003      	movs	r3, r0
 8002af6:	002e      	movs	r6, r5
 8002af8:	3315      	adds	r3, #21
 8002afa:	409e      	lsls	r6, r3
 8002afc:	230b      	movs	r3, #11
 8002afe:	1a18      	subs	r0, r3, r0
 8002b00:	40c5      	lsrs	r5, r0
 8002b02:	0552      	lsls	r2, r2, #21
 8002b04:	032d      	lsls	r5, r5, #12
 8002b06:	0b2d      	lsrs	r5, r5, #12
 8002b08:	0d53      	lsrs	r3, r2, #21
 8002b0a:	e003      	b.n	8002b14 <__aeabi_i2d+0x3c>
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2500      	movs	r5, #0
 8002b12:	2600      	movs	r6, #0
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	432b      	orrs	r3, r5
 8002b18:	07e4      	lsls	r4, r4, #31
 8002b1a:	4323      	orrs	r3, r4
 8002b1c:	0030      	movs	r0, r6
 8002b1e:	0019      	movs	r1, r3
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	380b      	subs	r0, #11
 8002b24:	4085      	lsls	r5, r0
 8002b26:	0552      	lsls	r2, r2, #21
 8002b28:	032d      	lsls	r5, r5, #12
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	0b2d      	lsrs	r5, r5, #12
 8002b2e:	0d53      	lsrs	r3, r2, #21
 8002b30:	e7f0      	b.n	8002b14 <__aeabi_i2d+0x3c>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	0000041e 	.word	0x0000041e

08002b38 <__aeabi_ui2d>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	1e04      	subs	r4, r0, #0
 8002b3c:	d010      	beq.n	8002b60 <__aeabi_ui2d+0x28>
 8002b3e:	f000 f8f1 	bl	8002d24 <__clzsi2>
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <__aeabi_ui2d+0x48>)
 8002b44:	1a1b      	subs	r3, r3, r0
 8002b46:	280a      	cmp	r0, #10
 8002b48:	dc11      	bgt.n	8002b6e <__aeabi_ui2d+0x36>
 8002b4a:	220b      	movs	r2, #11
 8002b4c:	0021      	movs	r1, r4
 8002b4e:	1a12      	subs	r2, r2, r0
 8002b50:	40d1      	lsrs	r1, r2
 8002b52:	3015      	adds	r0, #21
 8002b54:	030a      	lsls	r2, r1, #12
 8002b56:	055b      	lsls	r3, r3, #21
 8002b58:	4084      	lsls	r4, r0
 8002b5a:	0b12      	lsrs	r2, r2, #12
 8002b5c:	0d5b      	lsrs	r3, r3, #21
 8002b5e:	e001      	b.n	8002b64 <__aeabi_ui2d+0x2c>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	051b      	lsls	r3, r3, #20
 8002b66:	4313      	orrs	r3, r2
 8002b68:	0020      	movs	r0, r4
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	0022      	movs	r2, r4
 8002b70:	380b      	subs	r0, #11
 8002b72:	4082      	lsls	r2, r0
 8002b74:	055b      	lsls	r3, r3, #21
 8002b76:	0312      	lsls	r2, r2, #12
 8002b78:	2400      	movs	r4, #0
 8002b7a:	0b12      	lsrs	r2, r2, #12
 8002b7c:	0d5b      	lsrs	r3, r3, #21
 8002b7e:	e7f1      	b.n	8002b64 <__aeabi_ui2d+0x2c>
 8002b80:	0000041e 	.word	0x0000041e

08002b84 <__aeabi_f2d>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	0043      	lsls	r3, r0, #1
 8002b88:	0246      	lsls	r6, r0, #9
 8002b8a:	0fc4      	lsrs	r4, r0, #31
 8002b8c:	20fe      	movs	r0, #254	; 0xfe
 8002b8e:	0e1b      	lsrs	r3, r3, #24
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	0a75      	lsrs	r5, r6, #9
 8002b94:	4208      	tst	r0, r1
 8002b96:	d00c      	beq.n	8002bb2 <__aeabi_f2d+0x2e>
 8002b98:	22e0      	movs	r2, #224	; 0xe0
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	4694      	mov	ip, r2
 8002b9e:	076d      	lsls	r5, r5, #29
 8002ba0:	0b36      	lsrs	r6, r6, #12
 8002ba2:	4463      	add	r3, ip
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	4333      	orrs	r3, r6
 8002ba8:	07e4      	lsls	r4, r4, #31
 8002baa:	4323      	orrs	r3, r4
 8002bac:	0028      	movs	r0, r5
 8002bae:	0019      	movs	r1, r3
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d114      	bne.n	8002be0 <__aeabi_f2d+0x5c>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	d01b      	beq.n	8002bf2 <__aeabi_f2d+0x6e>
 8002bba:	0028      	movs	r0, r5
 8002bbc:	f000 f8b2 	bl	8002d24 <__clzsi2>
 8002bc0:	280a      	cmp	r0, #10
 8002bc2:	dc1c      	bgt.n	8002bfe <__aeabi_f2d+0x7a>
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	002e      	movs	r6, r5
 8002bc8:	1a1b      	subs	r3, r3, r0
 8002bca:	40de      	lsrs	r6, r3
 8002bcc:	0003      	movs	r3, r0
 8002bce:	3315      	adds	r3, #21
 8002bd0:	409d      	lsls	r5, r3
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <__aeabi_f2d+0x88>)
 8002bd4:	0336      	lsls	r6, r6, #12
 8002bd6:	1a12      	subs	r2, r2, r0
 8002bd8:	0552      	lsls	r2, r2, #21
 8002bda:	0b36      	lsrs	r6, r6, #12
 8002bdc:	0d53      	lsrs	r3, r2, #21
 8002bde:	e7e1      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	d009      	beq.n	8002bf8 <__aeabi_f2d+0x74>
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	0b36      	lsrs	r6, r6, #12
 8002be8:	0312      	lsls	r2, r2, #12
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <__aeabi_f2d+0x8c>)
 8002bec:	076d      	lsls	r5, r5, #29
 8002bee:	4316      	orrs	r6, r2
 8002bf0:	e7d8      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	e7d5      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <__aeabi_f2d+0x8c>)
 8002bfc:	e7d2      	b.n	8002ba4 <__aeabi_f2d+0x20>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	3b0b      	subs	r3, #11
 8002c02:	409d      	lsls	r5, r3
 8002c04:	002e      	movs	r6, r5
 8002c06:	2500      	movs	r5, #0
 8002c08:	e7e3      	b.n	8002bd2 <__aeabi_f2d+0x4e>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	00000389 	.word	0x00000389
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2f>:
 8002c14:	0002      	movs	r2, r0
 8002c16:	004b      	lsls	r3, r1, #1
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1a:	0d5b      	lsrs	r3, r3, #21
 8002c1c:	030c      	lsls	r4, r1, #12
 8002c1e:	4e3d      	ldr	r6, [pc, #244]	; (8002d14 <__aeabi_d2f+0x100>)
 8002c20:	0a64      	lsrs	r4, r4, #9
 8002c22:	0f40      	lsrs	r0, r0, #29
 8002c24:	1c5f      	adds	r7, r3, #1
 8002c26:	0fc9      	lsrs	r1, r1, #31
 8002c28:	4304      	orrs	r4, r0
 8002c2a:	00d5      	lsls	r5, r2, #3
 8002c2c:	4237      	tst	r7, r6
 8002c2e:	d00a      	beq.n	8002c46 <__aeabi_d2f+0x32>
 8002c30:	4839      	ldr	r0, [pc, #228]	; (8002d18 <__aeabi_d2f+0x104>)
 8002c32:	181e      	adds	r6, r3, r0
 8002c34:	2efe      	cmp	r6, #254	; 0xfe
 8002c36:	dd16      	ble.n	8002c66 <__aeabi_d2f+0x52>
 8002c38:	20ff      	movs	r0, #255	; 0xff
 8002c3a:	2400      	movs	r4, #0
 8002c3c:	05c0      	lsls	r0, r0, #23
 8002c3e:	4320      	orrs	r0, r4
 8002c40:	07c9      	lsls	r1, r1, #31
 8002c42:	4308      	orrs	r0, r1
 8002c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <__aeabi_d2f+0x44>
 8002c4a:	432c      	orrs	r4, r5
 8002c4c:	d026      	beq.n	8002c9c <__aeabi_d2f+0x88>
 8002c4e:	2205      	movs	r2, #5
 8002c50:	0192      	lsls	r2, r2, #6
 8002c52:	0a54      	lsrs	r4, r2, #9
 8002c54:	b2d8      	uxtb	r0, r3
 8002c56:	e7f1      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002c58:	4325      	orrs	r5, r4
 8002c5a:	d0ed      	beq.n	8002c38 <__aeabi_d2f+0x24>
 8002c5c:	2080      	movs	r0, #128	; 0x80
 8002c5e:	03c0      	lsls	r0, r0, #15
 8002c60:	4304      	orrs	r4, r0
 8002c62:	20ff      	movs	r0, #255	; 0xff
 8002c64:	e7ea      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002c66:	2e00      	cmp	r6, #0
 8002c68:	dd1b      	ble.n	8002ca2 <__aeabi_d2f+0x8e>
 8002c6a:	0192      	lsls	r2, r2, #6
 8002c6c:	1e53      	subs	r3, r2, #1
 8002c6e:	419a      	sbcs	r2, r3
 8002c70:	00e4      	lsls	r4, r4, #3
 8002c72:	0f6d      	lsrs	r5, r5, #29
 8002c74:	4322      	orrs	r2, r4
 8002c76:	432a      	orrs	r2, r5
 8002c78:	0753      	lsls	r3, r2, #29
 8002c7a:	d048      	beq.n	8002d0e <__aeabi_d2f+0xfa>
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d000      	beq.n	8002c86 <__aeabi_d2f+0x72>
 8002c84:	3204      	adds	r2, #4
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	04db      	lsls	r3, r3, #19
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d03f      	beq.n	8002d0e <__aeabi_d2f+0xfa>
 8002c8e:	1c70      	adds	r0, r6, #1
 8002c90:	2efe      	cmp	r6, #254	; 0xfe
 8002c92:	d0d1      	beq.n	8002c38 <__aeabi_d2f+0x24>
 8002c94:	0192      	lsls	r2, r2, #6
 8002c96:	0a54      	lsrs	r4, r2, #9
 8002c98:	b2c0      	uxtb	r0, r0
 8002c9a:	e7cf      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	2400      	movs	r4, #0
 8002ca0:	e7cc      	b.n	8002c3c <__aeabi_d2f+0x28>
 8002ca2:	0032      	movs	r2, r6
 8002ca4:	3217      	adds	r2, #23
 8002ca6:	db22      	blt.n	8002cee <__aeabi_d2f+0xda>
 8002ca8:	2080      	movs	r0, #128	; 0x80
 8002caa:	0400      	lsls	r0, r0, #16
 8002cac:	4320      	orrs	r0, r4
 8002cae:	241e      	movs	r4, #30
 8002cb0:	1ba4      	subs	r4, r4, r6
 8002cb2:	2c1f      	cmp	r4, #31
 8002cb4:	dd1d      	ble.n	8002cf2 <__aeabi_d2f+0xde>
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4252      	negs	r2, r2
 8002cba:	1b96      	subs	r6, r2, r6
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	40f2      	lsrs	r2, r6
 8002cc0:	0016      	movs	r6, r2
 8002cc2:	2c20      	cmp	r4, #32
 8002cc4:	d004      	beq.n	8002cd0 <__aeabi_d2f+0xbc>
 8002cc6:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <__aeabi_d2f+0x108>)
 8002cc8:	4694      	mov	ip, r2
 8002cca:	4463      	add	r3, ip
 8002ccc:	4098      	lsls	r0, r3
 8002cce:	4305      	orrs	r5, r0
 8002cd0:	002a      	movs	r2, r5
 8002cd2:	1e53      	subs	r3, r2, #1
 8002cd4:	419a      	sbcs	r2, r3
 8002cd6:	4332      	orrs	r2, r6
 8002cd8:	2600      	movs	r6, #0
 8002cda:	0753      	lsls	r3, r2, #29
 8002cdc:	d1ce      	bne.n	8002c7c <__aeabi_d2f+0x68>
 8002cde:	2480      	movs	r4, #128	; 0x80
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	04e4      	lsls	r4, r4, #19
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	4023      	ands	r3, r4
 8002ce8:	4222      	tst	r2, r4
 8002cea:	d1d3      	bne.n	8002c94 <__aeabi_d2f+0x80>
 8002cec:	e7b0      	b.n	8002c50 <__aeabi_d2f+0x3c>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e7ad      	b.n	8002c4e <__aeabi_d2f+0x3a>
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <__aeabi_d2f+0x10c>)
 8002cf4:	4694      	mov	ip, r2
 8002cf6:	002a      	movs	r2, r5
 8002cf8:	40e2      	lsrs	r2, r4
 8002cfa:	0014      	movs	r4, r2
 8002cfc:	002a      	movs	r2, r5
 8002cfe:	4463      	add	r3, ip
 8002d00:	409a      	lsls	r2, r3
 8002d02:	4098      	lsls	r0, r3
 8002d04:	1e55      	subs	r5, r2, #1
 8002d06:	41aa      	sbcs	r2, r5
 8002d08:	4302      	orrs	r2, r0
 8002d0a:	4322      	orrs	r2, r4
 8002d0c:	e7e4      	b.n	8002cd8 <__aeabi_d2f+0xc4>
 8002d0e:	0033      	movs	r3, r6
 8002d10:	e79e      	b.n	8002c50 <__aeabi_d2f+0x3c>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	000007fe 	.word	0x000007fe
 8002d18:	fffffc80 	.word	0xfffffc80
 8002d1c:	fffffca2 	.word	0xfffffca2
 8002d20:	fffffc82 	.word	0xfffffc82

08002d24 <__clzsi2>:
 8002d24:	211c      	movs	r1, #28
 8002d26:	2301      	movs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	4298      	cmp	r0, r3
 8002d2c:	d301      	bcc.n	8002d32 <__clzsi2+0xe>
 8002d2e:	0c00      	lsrs	r0, r0, #16
 8002d30:	3910      	subs	r1, #16
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d301      	bcc.n	8002d3c <__clzsi2+0x18>
 8002d38:	0a00      	lsrs	r0, r0, #8
 8002d3a:	3908      	subs	r1, #8
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	4298      	cmp	r0, r3
 8002d40:	d301      	bcc.n	8002d46 <__clzsi2+0x22>
 8002d42:	0900      	lsrs	r0, r0, #4
 8002d44:	3904      	subs	r1, #4
 8002d46:	a202      	add	r2, pc, #8	; (adr r2, 8002d50 <__clzsi2+0x2c>)
 8002d48:	5c10      	ldrb	r0, [r2, r0]
 8002d4a:	1840      	adds	r0, r0, r1
 8002d4c:	4770      	bx	lr
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	02020304 	.word	0x02020304
 8002d54:	01010101 	.word	0x01010101
	...

08002d60 <__clzdi2>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	2900      	cmp	r1, #0
 8002d64:	d103      	bne.n	8002d6e <__clzdi2+0xe>
 8002d66:	f7ff ffdd 	bl	8002d24 <__clzsi2>
 8002d6a:	3020      	adds	r0, #32
 8002d6c:	e002      	b.n	8002d74 <__clzdi2+0x14>
 8002d6e:	0008      	movs	r0, r1
 8002d70:	f7ff ffd8 	bl	8002d24 <__clzsi2>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)

08002d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7e:	240c      	movs	r4, #12
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	0018      	movs	r0, r3
 8002d84:	2314      	movs	r3, #20
 8002d86:	001a      	movs	r2, r3
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f003 f975 	bl	8006078 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002d94:	2104      	movs	r1, #4
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002da6:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dac:	2120      	movs	r1, #32
 8002dae:	430a      	orrs	r2, r1
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <MX_GPIO_Init+0xb8>)
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002dd6:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_GPIO_Init+0xbc>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2140      	movs	r1, #64	; 0x40
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 ff77 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2204      	movs	r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	2288      	movs	r2, #136	; 0x88
 8002dec:	0352      	lsls	r2, r2, #13
 8002dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <MX_GPIO_Init+0xc0>)
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f000 fe03 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002e02:	0021      	movs	r1, r4
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <MX_GPIO_Init+0xbc>)
 8002e20:	0019      	movs	r1, r3
 8002e22:	0010      	movs	r0, r2
 8002e24:	f000 fdf0 	bl	8003a08 <HAL_GPIO_Init>

}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b009      	add	sp, #36	; 0x24
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	50000800 	.word	0x50000800
 8002e38:	50001400 	.word	0x50001400

08002e3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <MX_I2C1_Init+0x78>)
 8002e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <MX_I2C1_Init+0x7c>)
 8002e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 ff47 	bl	8003d0c <HAL_I2C_Init>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e82:	f000 f8d6 	bl	8003032 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f001 fc74 	bl	8004778 <HAL_I2CEx_ConfigAnalogFilter>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d001      	beq.n	8002e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e94:	f000 f8cd 	bl	8003032 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <MX_I2C1_Init+0x74>)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f001 fcb7 	bl	8004810 <HAL_I2CEx_ConfigDigitalFilter>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ea6:	f000 f8c4 	bl	8003032 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200001fc 	.word	0x200001fc
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	00303d5b 	.word	0x00303d5b

08002ebc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b095      	sub	sp, #84	; 0x54
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	233c      	movs	r3, #60	; 0x3c
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	0018      	movs	r0, r3
 8002eca:	2314      	movs	r3, #20
 8002ecc:	001a      	movs	r2, r3
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f003 f8d2 	bl	8006078 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed4:	2414      	movs	r4, #20
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	0018      	movs	r0, r3
 8002eda:	2328      	movs	r3, #40	; 0x28
 8002edc:	001a      	movs	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f003 f8ca 	bl	8006078 <memset>
  if(i2cHandle->Instance==I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_I2C_MspInit+0xbc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d13f      	bne.n	8002f6e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	0018      	movs	r0, r3
 8002efe:	f002 f9e3 	bl	80052c8 <HAL_RCCEx_PeriphCLKConfig>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002f06:	f000 f894 	bl	8003032 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f22:	213c      	movs	r1, #60	; 0x3c
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	22c0      	movs	r2, #192	; 0xc0
 8002f28:	00d2      	lsls	r2, r2, #3
 8002f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2212      	movs	r2, #18
 8002f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2206      	movs	r2, #6
 8002f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	187a      	adds	r2, r7, r1
 8002f46:	23a0      	movs	r3, #160	; 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fd5b 	bl	8003a08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	0389      	lsls	r1, r1, #14
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_I2C_MspInit+0xc0>)
 8002f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	039b      	lsls	r3, r3, #14
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b015      	add	sp, #84	; 0x54
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	40005400 	.word	0x40005400
 8002f7c:	40021000 	.word	0x40021000

08002f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f84:	f000 fc06 	bl	8003794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f88:	f000 f80b 	bl	8002fa2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f8c:	f7ff fef4 	bl	8002d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002f90:	f000 f952 	bl	8003238 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002f94:	f7ff ff52 	bl	8002e3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FSM_init();
 8002f98:	f000 f9f6 	bl	8003388 <FSM_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		FSM_update();
 8002f9c:	f000 fa1e 	bl	80033dc <FSM_update>
 8002fa0:	e7fc      	b.n	8002f9c <main+0x1c>

08002fa2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa2:	b590      	push	{r4, r7, lr}
 8002fa4:	b093      	sub	sp, #76	; 0x4c
 8002fa6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa8:	2410      	movs	r4, #16
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	0018      	movs	r0, r3
 8002fae:	2338      	movs	r3, #56	; 0x38
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f003 f860 	bl	8006078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb8:	003b      	movs	r3, r7
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f003 f859 	bl	8006078 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f001 fc6c 	bl	80048a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	0052      	lsls	r2, r2, #1
 8002fdc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f001 fca4 	bl	8004940 <HAL_RCC_OscConfig>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d001      	beq.n	8003000 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ffc:	f000 f819 	bl	8003032 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003000:	003b      	movs	r3, r7
 8003002:	2207      	movs	r2, #7
 8003004:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003006:	003b      	movs	r3, r7
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800300c:	003b      	movs	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003012:	003b      	movs	r3, r7
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003018:	003b      	movs	r3, r7
 800301a:	2100      	movs	r1, #0
 800301c:	0018      	movs	r0, r3
 800301e:	f001 ffa9 	bl	8004f74 <HAL_RCC_ClockConfig>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003026:	f000 f804 	bl	8003032 <Error_Handler>
  }
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b013      	add	sp, #76	; 0x4c
 8003030:	bd90      	pop	{r4, r7, pc}

08003032 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003036:	b672      	cpsid	i
}
 8003038:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800303a:	e7fe      	b.n	800303a <Error_Handler+0x8>

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_MspInit+0x44>)
 8003044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_MspInit+0x44>)
 8003048:	2101      	movs	r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_MspInit+0x44>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_MspInit+0x44>)
 800305c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_MspInit+0x44>)
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	0549      	lsls	r1, r1, #21
 8003064:	430a      	orrs	r2, r1
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_MspInit+0x44>)
 800306a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	055b      	lsls	r3, r3, #21
 8003070:	4013      	ands	r3, r2
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	40021000 	.word	0x40021000

08003084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <NMI_Handler+0x4>

0800308a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <HardFault_Handler+0x4>

08003090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a8:	f000 fbde 	bl	8003868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  return 1;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_kill>:

int _kill(int pid, int sig)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030c8:	f002 ffac 	bl	8006024 <__errno>
 80030cc:	0003      	movs	r3, r0
 80030ce:	2216      	movs	r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
  return -1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	425b      	negs	r3, r3
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}

080030de <_exit>:

void _exit (int status)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030e6:	2301      	movs	r3, #1
 80030e8:	425a      	negs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0011      	movs	r1, r2
 80030ee:	0018      	movs	r0, r3
 80030f0:	f7ff ffe5 	bl	80030be <_kill>
  while (1) {}    /* Make sure we hang here */
 80030f4:	e7fe      	b.n	80030f4 <_exit+0x16>

080030f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e00a      	b.n	800311e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003108:	e000      	b.n	800310c <_read+0x16>
 800310a:	bf00      	nop
 800310c:	0001      	movs	r1, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	60ba      	str	r2, [r7, #8]
 8003114:	b2ca      	uxtb	r2, r1
 8003116:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	dbf0      	blt.n	8003108 <_read+0x12>
  }

  return len;
 8003126:	687b      	ldr	r3, [r7, #4]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}

08003130 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e009      	b.n	8003156 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60ba      	str	r2, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	0018      	movs	r0, r3
 800314c:	f000 fb10 	bl	8003770 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	3301      	adds	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	dbf1      	blt.n	8003142 <_write+0x12>
  }
  return len;
 800315e:	687b      	ldr	r3, [r7, #4]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b006      	add	sp, #24
 8003166:	bd80      	pop	{r7, pc}

08003168 <_close>:

int _close(int file)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003170:	2301      	movs	r3, #1
 8003172:	425b      	negs	r3, r3
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	b002      	add	sp, #8
 800317a:	bd80      	pop	{r7, pc}

0800317c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	0192      	lsls	r2, r2, #6
 800318c:	605a      	str	r2, [r3, #4]
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <_isatty>:

int _isatty(int file)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <_sbrk+0x5c>)
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <_sbrk+0x60>)
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <_sbrk+0x64>)
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <_sbrk+0x68>)
 80031e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d207      	bcs.n	8003200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f0:	f002 ff18 	bl	8006024 <__errno>
 80031f4:	0003      	movs	r3, r0
 80031f6:	220c      	movs	r2, #12
 80031f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	425b      	negs	r3, r3
 80031fe:	e009      	b.n	8003214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	18d2      	adds	r2, r2, r3
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <_sbrk+0x64>)
 8003210:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b006      	add	sp, #24
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20002000 	.word	0x20002000
 8003220:	00000400 	.word	0x00000400
 8003224:	20000250 	.word	0x20000250
 8003228:	20000358 	.word	0x20000358

0800322c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <MX_USART2_UART_Init+0x64>)
 8003240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003244:	2296      	movs	r2, #150	; 0x96
 8003246:	0192      	lsls	r2, r2, #6
 8003248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800325e:	220c      	movs	r2, #12
 8003260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <MX_USART2_UART_Init+0x60>)
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <MX_USART2_UART_Init+0x60>)
 8003282:	0018      	movs	r0, r3
 8003284:	f002 f99a 	bl	80055bc <HAL_UART_Init>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800328c:	f7ff fed1 	bl	8003032 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20000254 	.word	0x20000254
 800329c:	40004400 	.word	0x40004400

080032a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	2414      	movs	r4, #20
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	0018      	movs	r0, r3
 80032ae:	2314      	movs	r3, #20
 80032b0:	001a      	movs	r2, r3
 80032b2:	2100      	movs	r1, #0
 80032b4:	f002 fee0 	bl	8006078 <memset>
  if(uartHandle->Instance==USART2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_UART_MspInit+0x8c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d130      	bne.n	8003324 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	0289      	lsls	r1, r1, #10
 80032cc:	430a      	orrs	r2, r1
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_UART_MspInit+0x90>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80032f6:	0021      	movs	r1, r4
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	220c      	movs	r2, #12
 80032fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2202      	movs	r2, #2
 8003302:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	2201      	movs	r2, #1
 8003308:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	187b      	adds	r3, r7, r1
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2201      	movs	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003316:	187a      	adds	r2, r7, r1
 8003318:	23a0      	movs	r3, #160	; 0xa0
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	0011      	movs	r1, r2
 800331e:	0018      	movs	r0, r3
 8003320:	f000 fb72 	bl	8003a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b00b      	add	sp, #44	; 0x2c
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	40004400 	.word	0x40004400
 8003330:	40021000 	.word	0x40021000

08003334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003334:	480d      	ldr	r0, [pc, #52]	; (800336c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003336:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003338:	f7ff ff78 	bl	800322c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800333c:	480c      	ldr	r0, [pc, #48]	; (8003370 <LoopForever+0x6>)
  ldr r1, =_edata
 800333e:	490d      	ldr	r1, [pc, #52]	; (8003374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <LoopForever+0xe>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003344:	e002      	b.n	800334c <LoopCopyDataInit>

08003346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334a:	3304      	adds	r3, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800334c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003350:	d3f9      	bcc.n	8003346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003354:	4c0a      	ldr	r4, [pc, #40]	; (8003380 <LoopForever+0x16>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003358:	e001      	b.n	800335e <LoopFillZerobss>

0800335a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800335c:	3204      	adds	r2, #4

0800335e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003360:	d3fb      	bcc.n	800335a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003362:	f002 fe65 	bl	8006030 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003366:	f7ff fe0b 	bl	8002f80 <main>

0800336a <LoopForever>:

LoopForever:
  b LoopForever
 800336a:	e7fe      	b.n	800336a <LoopForever>
  ldr   r0, =_estack
 800336c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003378:	0800b1a4 	.word	0x0800b1a4
  ldr r2, =_sbss
 800337c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003380:	20000358 	.word	0x20000358

08003384 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <ADC1_IRQHandler>
	...

08003388 <FSM_init>:
static sht31_t sht31Sensor;
static delay_t delaySamplePeriod;
static delay_t delayMeasuring;
static uint8_t buf[MSG_MAX_LENGHT];

void FSM_init() {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	SensorReadState = IDLE;
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <FSM_init+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
	delayInit(&delaySamplePeriod, FSM_SAMPLE_PERIOD);
 8003392:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <FSM_init+0x44>)
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <FSM_init+0x48>)
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f889 	bl	80034b0 <delayInit>
	delayInit(&delayMeasuring, FSM_MEASURE_WAIT_TIME);
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <FSM_init+0x4c>)
 80033a0:	2114      	movs	r1, #20
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f884 	bl	80034b0 <delayInit>
	sht31Sensor.errState=false;
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <FSM_init+0x50>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	729a      	strb	r2, [r3, #10]
	sht31Sensor.humidity=0;
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <FSM_init+0x50>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	605a      	str	r2, [r3, #4]
	sht31Sensor.temperature=0;
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <FSM_init+0x50>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
	sht31Sensor.readCMD = SS_CLOCK_STR_DIS_HGH_REP;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <FSM_init+0x50>)
 80033bc:	2290      	movs	r2, #144	; 0x90
 80033be:	0192      	lsls	r2, r2, #6
 80033c0:	811a      	strh	r2, [r3, #8]
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200002e8 	.word	0x200002e8
 80033cc:	00002710 	.word	0x00002710
 80033d0:	200002f8 	.word	0x200002f8
 80033d4:	20000304 	.word	0x20000304
 80033d8:	200002ec 	.word	0x200002ec

080033dc <FSM_update>:

void FSM_update() {
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	switch (SensorReadState) {
 80033e0:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <FSM_update+0xbc>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d84b      	bhi.n	8003480 <FSM_update+0xa4>
 80033e8:	009a      	lsls	r2, r3, #2
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <FSM_update+0xc0>)
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	469f      	mov	pc, r3
	case IDLE:
		if (delayRead(&delaySamplePeriod)) {
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <FSM_update+0xc4>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f86a 	bl	80034ce <delayRead>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d044      	beq.n	8003488 <FSM_update+0xac>
			SensorReadState = NEW_MEASURE;
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <FSM_update+0xbc>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003404:	e040      	b.n	8003488 <FSM_update+0xac>
	case NEW_MEASURE:
		initNewMeasure(&sht31Sensor);
 8003406:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <FSM_update+0xc8>)
 8003408:	0018      	movs	r0, r3
 800340a:	f000 f88f 	bl	800352c <initNewMeasure>
		if ( !sht31Sensor.errState) {
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <FSM_update+0xc8>)
 8003410:	7a9b      	ldrb	r3, [r3, #10]
 8003412:	2201      	movs	r2, #1
 8003414:	4053      	eors	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <FSM_update+0x46>
			SensorReadState = MEASURING;
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <FSM_update+0xbc>)
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
		}
		if (sht31Sensor.errState) {
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <FSM_update+0xc8>)
 8003424:	7a9b      	ldrb	r3, [r3, #10]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d030      	beq.n	800348c <FSM_update+0xb0>
			SensorReadState = SEND_DATA;
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <FSM_update+0xbc>)
 800342c:	2204      	movs	r2, #4
 800342e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003430:	e02c      	b.n	800348c <FSM_update+0xb0>
	case MEASURING:
		if (delayRead(&delayMeasuring)) {
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <FSM_update+0xcc>)
 8003434:	0018      	movs	r0, r3
 8003436:	f000 f84a 	bl	80034ce <delayRead>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d028      	beq.n	8003490 <FSM_update+0xb4>
			SensorReadState = DATA_READ;
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <FSM_update+0xbc>)
 8003440:	2203      	movs	r2, #3
 8003442:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003444:	e024      	b.n	8003490 <FSM_update+0xb4>
	case DATA_READ:
		readSensorData(&sht31Sensor);
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <FSM_update+0xc8>)
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f88b 	bl	8003564 <readSensorData>
		SensorReadState = SEND_DATA;
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <FSM_update+0xbc>)
 8003450:	2204      	movs	r2, #4
 8003452:	701a      	strb	r2, [r3, #0]
		break;
 8003454:	e01d      	b.n	8003492 <FSM_update+0xb6>
	case SEND_DATA:
		sensorDataString(&sht31Sensor,buf);
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <FSM_update+0xd0>)
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <FSM_update+0xc8>)
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f000 f8b1 	bl	80035c4 <sensorDataString>
		sendStringUart(buf,(uint8_t) strlen(buf));
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <FSM_update+0xd0>)
 8003464:	0018      	movs	r0, r3
 8003466:	f7fc fe4d 	bl	8000104 <strlen>
 800346a:	0003      	movs	r3, r0
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <FSM_update+0xd0>)
 8003470:	0011      	movs	r1, r2
 8003472:	0018      	movs	r0, r3
 8003474:	f000 f966 	bl	8003744 <sendStringUart>
		SensorReadState = IDLE;
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <FSM_update+0xbc>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
		break;
 800347e:	e008      	b.n	8003492 <FSM_update+0xb6>
	default:
		SensorReadState = IDLE;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <FSM_update+0xbc>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
		break;
 8003486:	e004      	b.n	8003492 <FSM_update+0xb6>
		break;
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	e002      	b.n	8003492 <FSM_update+0xb6>
		break;
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	e000      	b.n	8003492 <FSM_update+0xb6>
		break;
 8003490:	46c0      	nop			; (mov r8, r8)
	}
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200002e8 	.word	0x200002e8
 800349c:	0800acc4 	.word	0x0800acc4
 80034a0:	200002f8 	.word	0x200002f8
 80034a4:	200002ec 	.word	0x200002ec
 80034a8:	20000304 	.word	0x20000304
 80034ac:	20000310 	.word	0x20000310

080034b0 <delayInit>:
 *      Author: leonardo
 */
#include "API_delay.h"

// Iniciliza estructura de delay
void delayInit(delay_t *delay, tick_t duration) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	721a      	strb	r2, [r3, #8]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <delayRead>:

//Devuelve 1 si se cumplio la duración del retardo, en caso de no estar corriendo cambia el estado de delay->running a true
bool_t delayRead(delay_t *delay) {
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
	if(delay->duration == 0)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <delayRead+0x14>
		return false;	// Check de parámetros
 80034de:	2300      	movs	r3, #0
 80034e0:	e020      	b.n	8003524 <delayRead+0x56>
	if (!delay->running) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7a1b      	ldrb	r3, [r3, #8]
 80034e6:	2201      	movs	r2, #1
 80034e8:	4053      	eors	r3, r2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <delayRead+0x36>
		delay->running = true;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	721a      	strb	r2, [r3, #8]
		delay->startTime = GetTick();
 80034f6:	f000 f8dd 	bl	80036b4 <GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	601a      	str	r2, [r3, #0]
		return false;
 8003500:	2300      	movs	r3, #0
 8003502:	e00f      	b.n	8003524 <delayRead+0x56>
	} else {
		if ((GetTick() - delay->startTime) >= delay->duration) {
 8003504:	f000 f8d6 	bl	80036b4 <GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1ad2      	subs	r2, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d304      	bcc.n	8003522 <delayRead+0x54>
			delay->running = false;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	721a      	strb	r2, [r3, #8]
			return true;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <delayRead+0x56>
		} else
			return false;
 8003522:	2300      	movs	r3, #0
	}
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <initNewMeasure>:
 *      Author: leomu
 */

#include "API_sht31.h"

int8_t initNewMeasure(sht31_t *sht31Sensor) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	uint8_t i2cWriteCMD[CMD_BYTES_SIZE];
	i2cWriteCMD[0] = (uint8_t) ((sht31Sensor->readCMD & 0xFF00) >> 8);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	891b      	ldrh	r3, [r3, #8]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	b29b      	uxth	r3, r3
 800353c:	b2da      	uxtb	r2, r3
 800353e:	210c      	movs	r1, #12
 8003540:	187b      	adds	r3, r7, r1
 8003542:	701a      	strb	r2, [r3, #0]
	i2cWriteCMD[1] = (uint8_t) (sht31Sensor->readCMD & 0x00FF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	891b      	ldrh	r3, [r3, #8]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	187b      	adds	r3, r7, r1
 800354c:	705a      	strb	r2, [r3, #1]
	sendI2C_CMD((DEFAULT_ADDR << 1), i2cWriteCMD, CMD_BYTES_SIZE);
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2202      	movs	r2, #2
 8003552:	0019      	movs	r1, r3
 8003554:	2088      	movs	r0, #136	; 0x88
 8003556:	f000 f8b5 	bl	80036c4 <sendI2C_CMD>
	return 0;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}

08003564 <readSensorData>:

int8_t readSensorData(sht31_t *sht31Sensor) {
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	uint8_t i2cReadData[DATA_BYTES_SIZE];
	readI2C_Data((DEFAULT_ADDR << 1), i2cReadData, DATA_BYTES_SIZE);
 800356c:	2408      	movs	r4, #8
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2206      	movs	r2, #6
 8003572:	0019      	movs	r1, r3
 8003574:	2088      	movs	r0, #136	; 0x88
 8003576:	f000 f8c5 	bl	8003704 <readI2C_Data>
	sht31Sensor->temperature = tempConv((((uint16_t) i2cReadData[0]) << 8) | i2cReadData[1]);
 800357a:	193b      	adds	r3, r7, r4
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b21a      	sxth	r2, r3
 8003582:	193b      	adds	r3, r7, r4
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	b21b      	sxth	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b21b      	sxth	r3, r3
 800358c:	b29b      	uxth	r3, r3
 800358e:	0018      	movs	r0, r3
 8003590:	f000 f84a 	bl	8003628 <tempConv>
 8003594:	1c02      	adds	r2, r0, #0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
	sht31Sensor->humidity = humConv((((uint16_t) i2cReadData[3]) << 8) | i2cReadData[4]);
 800359a:	193b      	adds	r3, r7, r4
 800359c:	78db      	ldrb	r3, [r3, #3]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	b21a      	sxth	r2, r3
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b21b      	sxth	r3, r3
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f860 	bl	8003674 <humConv>
 80035b4:	1c02      	adds	r2, r0, #0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	605a      	str	r2, [r3, #4]
	return 0;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b005      	add	sp, #20
 80035c2:	bd90      	pop	{r4, r7, pc}

080035c4 <sensorDataString>:

void sensorDataString(sht31_t *sht31Sensor, uint8_t *buf) {
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	if (!sht31Sensor->errState) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7a9b      	ldrb	r3, [r3, #10]
 80035d2:	2201      	movs	r2, #1
 80035d4:	4053      	eors	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d016      	beq.n	800360a <sensorDataString+0x46>
		sprintf(buf, "Temperature:%.2f - Humidity:%.2f\r\n",
				sht31Sensor->temperature, sht31Sensor->humidity);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
		sprintf(buf, "Temperature:%.2f - Humidity:%.2f\r\n",
 80035e0:	1c18      	adds	r0, r3, #0
 80035e2:	f7ff facf 	bl	8002b84 <__aeabi_f2d>
 80035e6:	0004      	movs	r4, r0
 80035e8:	000d      	movs	r5, r1
				sht31Sensor->temperature, sht31Sensor->humidity);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
		sprintf(buf, "Temperature:%.2f - Humidity:%.2f\r\n",
 80035ee:	1c18      	adds	r0, r3, #0
 80035f0:	f7ff fac8 	bl	8002b84 <__aeabi_f2d>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	4909      	ldr	r1, [pc, #36]	; (8003620 <sensorDataString+0x5c>)
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	9200      	str	r2, [sp, #0]
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	0022      	movs	r2, r4
 8003602:	002b      	movs	r3, r5
 8003604:	f003 fbba 	bl	8006d7c <siprintf>
	} else {
		sprintf(buf, "Sensor error\r\n");
	}
}
 8003608:	e005      	b.n	8003616 <sensorDataString+0x52>
		sprintf(buf, "Sensor error\r\n");
 800360a:	4a06      	ldr	r2, [pc, #24]	; (8003624 <sensorDataString+0x60>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	0011      	movs	r1, r2
 8003610:	0018      	movs	r0, r3
 8003612:	f003 fbb3 	bl	8006d7c <siprintf>
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bdb0      	pop	{r4, r5, r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	0800aaf0 	.word	0x0800aaf0
 8003624:	0800ab14 	.word	0x0800ab14

08003628 <tempConv>:

float tempConv(uint16_t temp) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	801a      	strh	r2, [r3, #0]
	float temperature = ((float) (temp)) / 65537;
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f7fd fc7b 	bl	8000f34 <__aeabi_ui2f>
 800363e:	1c03      	adds	r3, r0, #0
 8003640:	4909      	ldr	r1, [pc, #36]	; (8003668 <tempConv+0x40>)
 8003642:	1c18      	adds	r0, r3, #0
 8003644:	f7fd f88a 	bl	800075c <__aeabi_fdiv>
 8003648:	1c03      	adds	r3, r0, #0
 800364a:	60fb      	str	r3, [r7, #12]
	return (-45 + (temperature * 175));
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <tempConv+0x44>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7fd f99c 	bl	800098c <__aeabi_fmul>
 8003654:	1c03      	adds	r3, r0, #0
 8003656:	4906      	ldr	r1, [pc, #24]	; (8003670 <tempConv+0x48>)
 8003658:	1c18      	adds	r0, r3, #0
 800365a:	f7fd fabd 	bl	8000bd8 <__aeabi_fsub>
 800365e:	1c03      	adds	r3, r0, #0
}
 8003660:	1c18      	adds	r0, r3, #0
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}
 8003668:	47800080 	.word	0x47800080
 800366c:	432f0000 	.word	0x432f0000
 8003670:	42340000 	.word	0x42340000

08003674 <humConv>:

float humConv(uint16_t hum) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	0002      	movs	r2, r0
 800367c:	1dbb      	adds	r3, r7, #6
 800367e:	801a      	strh	r2, [r3, #0]
	float humidity = (float) (hum);
 8003680:	1dbb      	adds	r3, r7, #6
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	0018      	movs	r0, r3
 8003686:	f7fd fc55 	bl	8000f34 <__aeabi_ui2f>
 800368a:	1c03      	adds	r3, r0, #0
 800368c:	60fb      	str	r3, [r7, #12]
	return (100 * humidity / 65537);
 800368e:	4907      	ldr	r1, [pc, #28]	; (80036ac <humConv+0x38>)
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7fd f97b 	bl	800098c <__aeabi_fmul>
 8003696:	1c03      	adds	r3, r0, #0
 8003698:	4905      	ldr	r1, [pc, #20]	; (80036b0 <humConv+0x3c>)
 800369a:	1c18      	adds	r0, r3, #0
 800369c:	f7fd f85e 	bl	800075c <__aeabi_fdiv>
 80036a0:	1c03      	adds	r3, r0, #0
}
 80036a2:	1c18      	adds	r0, r3, #0
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b004      	add	sp, #16
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	42c80000 	.word	0x42c80000
 80036b0:	47800080 	.word	0x47800080

080036b4 <GetTick>:

#include "stm32g0xx_hal.h"
#include "i2c.h"
#include "usart.h"

uint32_t GetTick(){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80036b8:	f000 f8e8 	bl	800388c <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <sendI2C_CMD>:

int8_t sendI2C_CMD (uint8_t addr, uint8_t * sendCMD,int8_t size){
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6039      	str	r1, [r7, #0]
 80036cc:	0011      	movs	r1, r2
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	1c02      	adds	r2, r0, #0
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	1dbb      	adds	r3, r7, #6
 80036d6:	1c0a      	adds	r2, r1, #0
 80036d8:	701a      	strb	r2, [r3, #0]
	 HAL_I2C_Master_Transmit(&hi2c1, addr, sendCMD, size, 100);
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b299      	uxth	r1, r3
 80036e0:	1dbb      	adds	r3, r7, #6
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	4805      	ldr	r0, [pc, #20]	; (8003700 <sendI2C_CMD+0x3c>)
 80036ec:	2464      	movs	r4, #100	; 0x64
 80036ee:	9400      	str	r4, [sp, #0]
 80036f0:	f000 fba2 	bl	8003e38 <HAL_I2C_Master_Transmit>
	 return 0;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b003      	add	sp, #12
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	200001fc 	.word	0x200001fc

08003704 <readI2C_Data>:
int8_t readI2C_Data (uint8_t addr,uint8_t * data,int8_t size){
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b085      	sub	sp, #20
 8003708:	af02      	add	r7, sp, #8
 800370a:	6039      	str	r1, [r7, #0]
 800370c:	0011      	movs	r1, r2
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	1c02      	adds	r2, r0, #0
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	1dbb      	adds	r3, r7, #6
 8003716:	1c0a      	adds	r2, r1, #0
 8003718:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c1, addr, data, size,100);
 800371a:	1dfb      	adds	r3, r7, #7
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b299      	uxth	r1, r3
 8003720:	1dbb      	adds	r3, r7, #6
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b25b      	sxtb	r3, r3
 8003726:	b29b      	uxth	r3, r3
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4805      	ldr	r0, [pc, #20]	; (8003740 <readI2C_Data+0x3c>)
 800372c:	2464      	movs	r4, #100	; 0x64
 800372e:	9400      	str	r4, [sp, #0]
 8003730:	f000 fc8a 	bl	8004048 <HAL_I2C_Master_Receive>
	return 0;
 8003734:	2300      	movs	r3, #0
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b003      	add	sp, #12
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	200001fc 	.word	0x200001fc

08003744 <sendStringUart>:

void sendStringUart(uint8_t * buf, uint8_t size){
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	000a      	movs	r2, r1
 800374e:	1cfb      	adds	r3, r7, #3
 8003750:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, buf, size, 100);
 8003752:	1cfb      	adds	r3, r7, #3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b29a      	uxth	r2, r3
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4804      	ldr	r0, [pc, #16]	; (800376c <sendStringUart+0x28>)
 800375c:	2364      	movs	r3, #100	; 0x64
 800375e:	f001 ff83 	bl	8005668 <HAL_UART_Transmit>
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000254 	.word	0x20000254

08003770 <__io_putchar>:

int __io_putchar(int ch) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 100);
 8003778:	1d39      	adds	r1, r7, #4
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <__io_putchar+0x20>)
 800377c:	2364      	movs	r3, #100	; 0x64
 800377e:	2201      	movs	r2, #1
 8003780:	f001 ff72 	bl	8005668 <HAL_UART_Transmit>
	return ch;
 8003784:	687b      	ldr	r3, [r7, #4]
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20000254 	.word	0x20000254

08003794 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_Init+0x3c>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_Init+0x3c>)
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	0049      	lsls	r1, r1, #1
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ae:	2000      	movs	r0, #0
 80037b0:	f000 f810 	bl	80037d4 <HAL_InitTick>
 80037b4:	1e03      	subs	r3, r0, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037b8:	1dfb      	adds	r3, r7, #7
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e001      	b.n	80037c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037c0:	f7ff fc3c 	bl	800303c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037c4:	1dfb      	adds	r3, r7, #7
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40022000 	.word	0x40022000

080037d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037dc:	230f      	movs	r3, #15
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_InitTick+0x88>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02b      	beq.n	8003844 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037ec:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_InitTick+0x8c>)
 80037ee:	681c      	ldr	r4, [r3, #0]
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_InitTick+0x88>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	0019      	movs	r1, r3
 80037f6:	23fa      	movs	r3, #250	; 0xfa
 80037f8:	0098      	lsls	r0, r3, #2
 80037fa:	f7fc fc9f 	bl	800013c <__udivsi3>
 80037fe:	0003      	movs	r3, r0
 8003800:	0019      	movs	r1, r3
 8003802:	0020      	movs	r0, r4
 8003804:	f7fc fc9a 	bl	800013c <__udivsi3>
 8003808:	0003      	movs	r3, r0
 800380a:	0018      	movs	r0, r3
 800380c:	f000 f8ef 	bl	80039ee <HAL_SYSTICK_Config>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d112      	bne.n	800383a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d80a      	bhi.n	8003830 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	2301      	movs	r3, #1
 800381e:	425b      	negs	r3, r3
 8003820:	2200      	movs	r2, #0
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f8ce 	bl	80039c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_InitTick+0x90>)
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e00d      	b.n	800384c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003830:	230f      	movs	r3, #15
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e008      	b.n	800384c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800383a:	230f      	movs	r3, #15
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e003      	b.n	800384c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800384c:	230f      	movs	r3, #15
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	781b      	ldrb	r3, [r3, #0]
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b005      	add	sp, #20
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	20000008 	.word	0x20000008
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_IncTick+0x1c>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	001a      	movs	r2, r3
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_IncTick+0x20>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	18d2      	adds	r2, r2, r3
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_IncTick+0x20>)
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	20000008 	.word	0x20000008
 8003888:	20000344 	.word	0x20000344

0800388c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  return uwTick;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_GetTick+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000344 	.word	0x20000344

080038a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	0002      	movs	r2, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b7f      	cmp	r3, #127	; 0x7f
 80038b4:	d828      	bhi.n	8003908 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038b6:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <__NVIC_SetPriority+0xd4>)
 80038b8:	1dfb      	adds	r3, r7, #7
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b25b      	sxtb	r3, r3
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	33c0      	adds	r3, #192	; 0xc0
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	589b      	ldr	r3, [r3, r2]
 80038c6:	1dfa      	adds	r2, r7, #7
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	0011      	movs	r1, r2
 80038cc:	2203      	movs	r2, #3
 80038ce:	400a      	ands	r2, r1
 80038d0:	00d2      	lsls	r2, r2, #3
 80038d2:	21ff      	movs	r1, #255	; 0xff
 80038d4:	4091      	lsls	r1, r2
 80038d6:	000a      	movs	r2, r1
 80038d8:	43d2      	mvns	r2, r2
 80038da:	401a      	ands	r2, r3
 80038dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	22ff      	movs	r2, #255	; 0xff
 80038e4:	401a      	ands	r2, r3
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0018      	movs	r0, r3
 80038ec:	2303      	movs	r3, #3
 80038ee:	4003      	ands	r3, r0
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038f4:	481f      	ldr	r0, [pc, #124]	; (8003974 <__NVIC_SetPriority+0xd4>)
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	430a      	orrs	r2, r1
 8003900:	33c0      	adds	r3, #192	; 0xc0
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003906:	e031      	b.n	800396c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003908:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <__NVIC_SetPriority+0xd8>)
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	0019      	movs	r1, r3
 8003910:	230f      	movs	r3, #15
 8003912:	400b      	ands	r3, r1
 8003914:	3b08      	subs	r3, #8
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3306      	adds	r3, #6
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	3304      	adds	r3, #4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1dfa      	adds	r2, r7, #7
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	0011      	movs	r1, r2
 8003928:	2203      	movs	r2, #3
 800392a:	400a      	ands	r2, r1
 800392c:	00d2      	lsls	r2, r2, #3
 800392e:	21ff      	movs	r1, #255	; 0xff
 8003930:	4091      	lsls	r1, r2
 8003932:	000a      	movs	r2, r1
 8003934:	43d2      	mvns	r2, r2
 8003936:	401a      	ands	r2, r3
 8003938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	401a      	ands	r2, r3
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	0018      	movs	r0, r3
 8003948:	2303      	movs	r3, #3
 800394a:	4003      	ands	r3, r0
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003950:	4809      	ldr	r0, [pc, #36]	; (8003978 <__NVIC_SetPriority+0xd8>)
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	001c      	movs	r4, r3
 8003958:	230f      	movs	r3, #15
 800395a:	4023      	ands	r3, r4
 800395c:	3b08      	subs	r3, #8
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	430a      	orrs	r2, r1
 8003962:	3306      	adds	r3, #6
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	18c3      	adds	r3, r0, r3
 8003968:	3304      	adds	r3, #4
 800396a:	601a      	str	r2, [r3, #0]
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b003      	add	sp, #12
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1e5a      	subs	r2, r3, #1
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	045b      	lsls	r3, r3, #17
 800398c:	429a      	cmp	r2, r3
 800398e:	d301      	bcc.n	8003994 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003990:	2301      	movs	r3, #1
 8003992:	e010      	b.n	80039b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <SysTick_Config+0x44>)
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	3a01      	subs	r2, #1
 800399a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399c:	2301      	movs	r3, #1
 800399e:	425b      	negs	r3, r3
 80039a0:	2103      	movs	r1, #3
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7ff ff7c 	bl	80038a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <SysTick_Config+0x44>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <SysTick_Config+0x44>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	210f      	movs	r1, #15
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	1c02      	adds	r2, r0, #0
 80039d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	0011      	movs	r1, r2
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff ff5d 	bl	80038a0 <__NVIC_SetPriority>
}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff ffbf 	bl	800397c <SysTick_Config>
 80039fe:	0003      	movs	r3, r0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e147      	b.n	8003ca8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4091      	lsls	r1, r2
 8003a22:	000a      	movs	r2, r1
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d100      	bne.n	8003a30 <HAL_GPIO_Init+0x28>
 8003a2e:	e138      	b.n	8003ca2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2203      	movs	r2, #3
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d005      	beq.n	8003a48 <HAL_GPIO_Init+0x40>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	409a      	lsls	r2, r3
 8003a56:	0013      	movs	r3, r2
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	43da      	mvns	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	2201      	movs	r2, #1
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d017      	beq.n	8003ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	0013      	movs	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d123      	bne.n	8003b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	0092      	lsls	r2, r2, #2
 8003afc:	58d3      	ldr	r3, [r2, r3]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2207      	movs	r2, #7
 8003b04:	4013      	ands	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2107      	movs	r1, #7
 8003b1e:	400b      	ands	r3, r1
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	409a      	lsls	r2, r3
 8003b24:	0013      	movs	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	0092      	lsls	r2, r2, #2
 8003b36:	6939      	ldr	r1, [r7, #16]
 8003b38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	409a      	lsls	r2, r3
 8003b48:	0013      	movs	r3, r2
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2203      	movs	r2, #3
 8003b58:	401a      	ands	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	23c0      	movs	r3, #192	; 0xc0
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	4013      	ands	r3, r2
 8003b78:	d100      	bne.n	8003b7c <HAL_GPIO_Init+0x174>
 8003b7a:	e092      	b.n	8003ca2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3318      	adds	r3, #24
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	589b      	ldr	r3, [r3, r2]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	4013      	ands	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	220f      	movs	r2, #15
 8003b94:	409a      	lsls	r2, r3
 8003b96:	0013      	movs	r3, r2
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	23a0      	movs	r3, #160	; 0xa0
 8003ba4:	05db      	lsls	r3, r3, #23
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d013      	beq.n	8003bd2 <HAL_GPIO_Init+0x1ca>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a45      	ldr	r2, [pc, #276]	; (8003cc4 <HAL_GPIO_Init+0x2bc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00d      	beq.n	8003bce <HAL_GPIO_Init+0x1c6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <HAL_GPIO_Init+0x2c0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <HAL_GPIO_Init+0x1c2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a43      	ldr	r2, [pc, #268]	; (8003ccc <HAL_GPIO_Init+0x2c4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <HAL_GPIO_Init+0x1be>
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e006      	b.n	8003bd4 <HAL_GPIO_Init+0x1cc>
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	e004      	b.n	8003bd4 <HAL_GPIO_Init+0x1cc>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e002      	b.n	8003bd4 <HAL_GPIO_Init+0x1cc>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_GPIO_Init+0x1cc>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	400a      	ands	r2, r1
 8003bda:	00d2      	lsls	r2, r2, #3
 8003bdc:	4093      	lsls	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003be4:	4936      	ldr	r1, [pc, #216]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	3318      	adds	r3, #24
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	035b      	lsls	r3, r3, #13
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43da      	mvns	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	039b      	lsls	r3, r3, #14
 8003c34:	4013      	ands	r3, r2
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c46:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c48:	2384      	movs	r3, #132	; 0x84
 8003c4a:	58d3      	ldr	r3, [r2, r3]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	029b      	lsls	r3, r3, #10
 8003c60:	4013      	ands	r3, r2
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c6c:	4914      	ldr	r1, [pc, #80]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c6e:	2284      	movs	r2, #132	; 0x84
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	58d3      	ldr	r3, [r2, r3]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	025b      	lsls	r3, r3, #9
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c9a:	4909      	ldr	r1, [pc, #36]	; (8003cc0 <HAL_GPIO_Init+0x2b8>)
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	40da      	lsrs	r2, r3
 8003cb0:	1e13      	subs	r3, r2, #0
 8003cb2:	d000      	beq.n	8003cb6 <HAL_GPIO_Init+0x2ae>
 8003cb4:	e6b0      	b.n	8003a18 <HAL_GPIO_Init+0x10>
  }
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	50000400 	.word	0x50000400
 8003cc8:	50000800 	.word	0x50000800
 8003ccc:	50000c00 	.word	0x50000c00

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	0008      	movs	r0, r1
 8003cda:	0011      	movs	r1, r2
 8003cdc:	1cbb      	adds	r3, r7, #2
 8003cde:	1c02      	adds	r2, r0, #0
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	1c7b      	adds	r3, r7, #1
 8003ce4:	1c0a      	adds	r2, r1, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ce8:	1c7b      	adds	r3, r7, #1
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cf0:	1cbb      	adds	r3, r7, #2
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cf8:	e003      	b.n	8003d02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cfa:	1cbb      	adds	r3, r7, #2
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e082      	b.n	8003e24 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2240      	movs	r2, #64	; 0x40
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff f8c1 	bl	8002ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2241      	movs	r2, #65	; 0x41
 8003d3e:	2124      	movs	r1, #36	; 0x24
 8003d40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	438a      	bics	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_I2C_Init+0x120>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4931      	ldr	r1, [pc, #196]	; (8003e30 <HAL_I2C_Init+0x124>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d108      	bne.n	8003d8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	0209      	lsls	r1, r1, #8
 8003d84:	430a      	orrs	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	e007      	b.n	8003d9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2184      	movs	r1, #132	; 0x84
 8003d94:	0209      	lsls	r1, r1, #8
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d104      	bne.n	8003dac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	491f      	ldr	r1, [pc, #124]	; (8003e34 <HAL_I2C_Init+0x128>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	491a      	ldr	r1, [pc, #104]	; (8003e30 <HAL_I2C_Init+0x124>)
 8003dc8:	400a      	ands	r2, r1
 8003dca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69d9      	ldr	r1, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	430a      	orrs	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2241      	movs	r2, #65	; 0x41
 8003e10:	2120      	movs	r1, #32
 8003e12:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2242      	movs	r2, #66	; 0x42
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	f0ffffff 	.word	0xf0ffffff
 8003e30:	ffff7fff 	.word	0xffff7fff
 8003e34:	02008000 	.word	0x02008000

08003e38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	0008      	movs	r0, r1
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	0019      	movs	r1, r3
 8003e46:	230a      	movs	r3, #10
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	1c02      	adds	r2, r0, #0
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	2308      	movs	r3, #8
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	1c0a      	adds	r2, r1, #0
 8003e54:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2241      	movs	r2, #65	; 0x41
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d000      	beq.n	8003e64 <HAL_I2C_Master_Transmit+0x2c>
 8003e62:	e0e7      	b.n	8004034 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Master_Transmit+0x3a>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e0e1      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1fe>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2240      	movs	r2, #64	; 0x40
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e7a:	f7ff fd07 	bl	800388c <HAL_GetTick>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	0219      	lsls	r1, r3, #8
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2319      	movs	r3, #25
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f000 fa04 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003e94:	1e03      	subs	r3, r0, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0cc      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2241      	movs	r2, #65	; 0x41
 8003ea0:	2121      	movs	r1, #33	; 0x21
 8003ea2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2242      	movs	r2, #66	; 0x42
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	18ba      	adds	r2, r7, r2
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2bff      	cmp	r3, #255	; 0xff
 8003ed0:	d911      	bls.n	8003ef6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	045c      	lsls	r4, r3, #17
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	8819      	ldrh	r1, [r3, #0]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	4b55      	ldr	r3, [pc, #340]	; (8004040 <HAL_I2C_Master_Transmit+0x208>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	0023      	movs	r3, r4
 8003ef0:	f000 fc08 	bl	8004704 <I2C_TransferConfig>
 8003ef4:	e075      	b.n	8003fe2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	049c      	lsls	r4, r3, #18
 8003f0a:	230a      	movs	r3, #10
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	8819      	ldrh	r1, [r3, #0]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_I2C_Master_Transmit+0x208>)
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	0023      	movs	r3, r4
 8003f18:	f000 fbf4 	bl	8004704 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f1c:	e061      	b.n	8003fe2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f9f8 	bl	800431a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e081      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d03a      	beq.n	8003fe2 <HAL_I2C_Master_Transmit+0x1aa>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d136      	bne.n	8003fe2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	f000 f98b 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003f86:	1e03      	subs	r3, r0, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e053      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2bff      	cmp	r3, #255	; 0xff
 8003f96:	d911      	bls.n	8003fbc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	22ff      	movs	r2, #255	; 0xff
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	045c      	lsls	r4, r3, #17
 8003fa8:	230a      	movs	r3, #10
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	8819      	ldrh	r1, [r3, #0]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	0023      	movs	r3, r4
 8003fb6:	f000 fba5 	bl	8004704 <I2C_TransferConfig>
 8003fba:	e012      	b.n	8003fe2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	049c      	lsls	r4, r3, #18
 8003fd0:	230a      	movs	r3, #10
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	8819      	ldrh	r1, [r3, #0]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	0023      	movs	r3, r4
 8003fde:	f000 fb91 	bl	8004704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d198      	bne.n	8003f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 f9d0 	bl	8004398 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e01a      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2220      	movs	r2, #32
 8004006:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	490c      	ldr	r1, [pc, #48]	; (8004044 <HAL_I2C_Master_Transmit+0x20c>)
 8004014:	400a      	ands	r2, r1
 8004016:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2241      	movs	r2, #65	; 0x41
 800401c:	2120      	movs	r1, #32
 800401e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2242      	movs	r2, #66	; 0x42
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b007      	add	sp, #28
 800403c:	bd90      	pop	{r4, r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	80002000 	.word	0x80002000
 8004044:	fe00e800 	.word	0xfe00e800

08004048 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b089      	sub	sp, #36	; 0x24
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	0008      	movs	r0, r1
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	0019      	movs	r1, r3
 8004056:	230a      	movs	r3, #10
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	1c02      	adds	r2, r0, #0
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	2308      	movs	r3, #8
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	1c0a      	adds	r2, r1, #0
 8004064:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2241      	movs	r2, #65	; 0x41
 800406a:	5c9b      	ldrb	r3, [r3, r2]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d000      	beq.n	8004074 <HAL_I2C_Master_Receive+0x2c>
 8004072:	e0e8      	b.n	8004246 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2240      	movs	r2, #64	; 0x40
 8004078:	5c9b      	ldrb	r3, [r3, r2]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_I2C_Master_Receive+0x3a>
 800407e:	2302      	movs	r3, #2
 8004080:	e0e2      	b.n	8004248 <HAL_I2C_Master_Receive+0x200>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2240      	movs	r2, #64	; 0x40
 8004086:	2101      	movs	r1, #1
 8004088:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800408a:	f7ff fbff 	bl	800388c <HAL_GetTick>
 800408e:	0003      	movs	r3, r0
 8004090:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	0219      	lsls	r1, r3, #8
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2319      	movs	r3, #25
 800409e:	2201      	movs	r2, #1
 80040a0:	f000 f8fc 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 80040a4:	1e03      	subs	r3, r0, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0cd      	b.n	8004248 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2241      	movs	r2, #65	; 0x41
 80040b0:	2122      	movs	r1, #34	; 0x22
 80040b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2242      	movs	r2, #66	; 0x42
 80040b8:	2110      	movs	r1, #16
 80040ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2208      	movs	r2, #8
 80040cc:	18ba      	adds	r2, r7, r2
 80040ce:	8812      	ldrh	r2, [r2, #0]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2bff      	cmp	r3, #255	; 0xff
 80040e0:	d911      	bls.n	8004106 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	22ff      	movs	r2, #255	; 0xff
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	045c      	lsls	r4, r3, #17
 80040f2:	230a      	movs	r3, #10
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	8819      	ldrh	r1, [r3, #0]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	4b55      	ldr	r3, [pc, #340]	; (8004250 <HAL_I2C_Master_Receive+0x208>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	0023      	movs	r3, r4
 8004100:	f000 fb00 	bl	8004704 <I2C_TransferConfig>
 8004104:	e076      	b.n	80041f4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004114:	b2da      	uxtb	r2, r3
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	049c      	lsls	r4, r3, #18
 800411a:	230a      	movs	r3, #10
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	8819      	ldrh	r1, [r3, #0]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_I2C_Master_Receive+0x208>)
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0023      	movs	r3, r4
 8004128:	f000 faec 	bl	8004704 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800412c:	e062      	b.n	80041f4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f96b 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e082      	b.n	8004248 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d03a      	beq.n	80041f4 <HAL_I2C_Master_Receive+0x1ac>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d136      	bne.n	80041f4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	0013      	movs	r3, r2
 8004190:	2200      	movs	r2, #0
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	f000 f882 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e053      	b.n	8004248 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2bff      	cmp	r3, #255	; 0xff
 80041a8:	d911      	bls.n	80041ce <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	045c      	lsls	r4, r3, #17
 80041ba:	230a      	movs	r3, #10
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	8819      	ldrh	r1, [r3, #0]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	0023      	movs	r3, r4
 80041c8:	f000 fa9c 	bl	8004704 <I2C_TransferConfig>
 80041cc:	e012      	b.n	80041f4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	049c      	lsls	r4, r3, #18
 80041e2:	230a      	movs	r3, #10
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	8819      	ldrh	r1, [r3, #0]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	0023      	movs	r3, r4
 80041f0:	f000 fa88 	bl	8004704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d197      	bne.n	800412e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 f8c7 	bl	8004398 <I2C_WaitOnSTOPFlagUntilTimeout>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e01a      	b.n	8004248 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2220      	movs	r2, #32
 8004218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	490b      	ldr	r1, [pc, #44]	; (8004254 <HAL_I2C_Master_Receive+0x20c>)
 8004226:	400a      	ands	r2, r1
 8004228:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2241      	movs	r2, #65	; 0x41
 800422e:	2120      	movs	r1, #32
 8004230:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2242      	movs	r2, #66	; 0x42
 8004236:	2100      	movs	r1, #0
 8004238:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2240      	movs	r2, #64	; 0x40
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b007      	add	sp, #28
 800424e:	bd90      	pop	{r4, r7, pc}
 8004250:	80002400 	.word	0x80002400
 8004254:	fe00e800 	.word	0xfe00e800

08004258 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2202      	movs	r2, #2
 8004268:	4013      	ands	r3, r2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d103      	bne.n	8004276 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	2b01      	cmp	r3, #1
 8004282:	d007      	beq.n	8004294 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2101      	movs	r1, #1
 8004290:	430a      	orrs	r2, r1
 8004292:	619a      	str	r2, [r3, #24]
  }
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	1dfb      	adds	r3, r7, #7
 80042aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ac:	e021      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	d01e      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7ff faea 	bl	800388c <HAL_GetTick>
 80042b8:	0002      	movs	r2, r0
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d113      	bne.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	2220      	movs	r2, #32
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2241      	movs	r2, #65	; 0x41
 80042da:	2120      	movs	r1, #32
 80042dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2242      	movs	r2, #66	; 0x42
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2240      	movs	r2, #64	; 0x40
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00f      	b.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	425a      	negs	r2, r3
 8004302:	4153      	adcs	r3, r2
 8004304:	b2db      	uxtb	r3, r3
 8004306:	001a      	movs	r2, r3
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d0ce      	beq.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}

0800431a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004326:	e02b      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	0018      	movs	r0, r3
 8004330:	f000 f8e8 	bl	8004504 <I2C_IsErrorOccurred>
 8004334:	1e03      	subs	r3, r0, #0
 8004336:	d001      	beq.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e029      	b.n	8004390 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3301      	adds	r3, #1
 8004340:	d01e      	beq.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7ff faa3 	bl	800388c <HAL_GetTick>
 8004346:	0002      	movs	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d113      	bne.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	2220      	movs	r2, #32
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2241      	movs	r2, #65	; 0x41
 8004368:	2120      	movs	r1, #32
 800436a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2242      	movs	r2, #66	; 0x42
 8004370:	2100      	movs	r1, #0
 8004372:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e007      	b.n	8004390 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2202      	movs	r2, #2
 8004388:	4013      	ands	r3, r2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d1cc      	bne.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b004      	add	sp, #16
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a4:	e028      	b.n	80043f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f8a9 	bl	8004504 <I2C_IsErrorOccurred>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d001      	beq.n	80043ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e026      	b.n	8004408 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ba:	f7ff fa67 	bl	800388c <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d113      	bne.n	80043f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	2220      	movs	r2, #32
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2241      	movs	r2, #65	; 0x41
 80043e0:	2120      	movs	r1, #32
 80043e2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2242      	movs	r2, #66	; 0x42
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2240      	movs	r2, #64	; 0x40
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2220      	movs	r2, #32
 8004400:	4013      	ands	r3, r2
 8004402:	2b20      	cmp	r3, #32
 8004404:	d1cf      	bne.n	80043a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	b004      	add	sp, #16
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800441c:	e064      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	0018      	movs	r0, r3
 8004426:	f000 f86d 	bl	8004504 <I2C_IsErrorOccurred>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d001      	beq.n	8004432 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e062      	b.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2220      	movs	r2, #32
 800443a:	4013      	ands	r3, r2
 800443c:	2b20      	cmp	r3, #32
 800443e:	d138      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	2b04      	cmp	r3, #4
 800444c:	d105      	bne.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e04e      	b.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2210      	movs	r2, #16
 8004462:	4013      	ands	r3, r2
 8004464:	2b10      	cmp	r3, #16
 8004466:	d107      	bne.n	8004478 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2210      	movs	r2, #16
 800446e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2204      	movs	r2, #4
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
 8004476:	e002      	b.n	800447e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2220      	movs	r2, #32
 8004484:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	491b      	ldr	r1, [pc, #108]	; (8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004492:	400a      	ands	r2, r1
 8004494:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2241      	movs	r2, #65	; 0x41
 800449a:	2120      	movs	r1, #32
 800449c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2242      	movs	r2, #66	; 0x42
 80044a2:	2100      	movs	r1, #0
 80044a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2240      	movs	r2, #64	; 0x40
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e022      	b.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7ff f9eb 	bl	800388c <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	2220      	movs	r2, #32
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2241      	movs	r2, #65	; 0x41
 80044d8:	2120      	movs	r1, #32
 80044da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2240      	movs	r2, #64	; 0x40
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e007      	b.n	80044f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2204      	movs	r2, #4
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d193      	bne.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	0018      	movs	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b004      	add	sp, #16
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	fe00e800 	.word	0xfe00e800

08004504 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b08b      	sub	sp, #44	; 0x2c
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2327      	movs	r3, #39	; 0x27
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2210      	movs	r2, #16
 800452c:	4013      	ands	r3, r2
 800452e:	d100      	bne.n	8004532 <I2C_IsErrorOccurred+0x2e>
 8004530:	e082      	b.n	8004638 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2210      	movs	r2, #16
 8004538:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800453a:	e060      	b.n	80045fe <I2C_IsErrorOccurred+0xfa>
 800453c:	2427      	movs	r4, #39	; 0x27
 800453e:	193b      	adds	r3, r7, r4
 8004540:	193a      	adds	r2, r7, r4
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3301      	adds	r3, #1
 800454a:	d058      	beq.n	80045fe <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7ff f99e 	bl	800388c <HAL_GetTick>
 8004550:	0002      	movs	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	d306      	bcc.n	800456a <I2C_IsErrorOccurred+0x66>
 800455c:	193b      	adds	r3, r7, r4
 800455e:	193a      	adds	r2, r7, r4
 8004560:	7812      	ldrb	r2, [r2, #0]
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d149      	bne.n	80045fe <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	01db      	lsls	r3, r3, #7
 8004574:	4013      	ands	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004578:	2013      	movs	r0, #19
 800457a:	183b      	adds	r3, r7, r0
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	2142      	movs	r1, #66	; 0x42
 8004580:	5c52      	ldrb	r2, [r2, r1]
 8004582:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	401a      	ands	r2, r3
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	429a      	cmp	r2, r3
 8004596:	d126      	bne.n	80045e6 <I2C_IsErrorOccurred+0xe2>
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	429a      	cmp	r2, r3
 80045a0:	d021      	beq.n	80045e6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80045a2:	183b      	adds	r3, r7, r0
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d01d      	beq.n	80045e6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	01c9      	lsls	r1, r1, #7
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045bc:	f7ff f966 	bl	800388c <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045c4:	e00f      	b.n	80045e6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045c6:	f7ff f961 	bl	800388c <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b19      	cmp	r3, #25
 80045d2:	d908      	bls.n	80045e6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2220      	movs	r2, #32
 80045d8:	4313      	orrs	r3, r2
 80045da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045dc:	2327      	movs	r3, #39	; 0x27
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]

              break;
 80045e4:	e00b      	b.n	80045fe <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2220      	movs	r2, #32
 80045ee:	4013      	ands	r3, r2
 80045f0:	2127      	movs	r1, #39	; 0x27
 80045f2:	187a      	adds	r2, r7, r1
 80045f4:	1879      	adds	r1, r7, r1
 80045f6:	7809      	ldrb	r1, [r1, #0]
 80045f8:	7011      	strb	r1, [r2, #0]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d1e3      	bne.n	80045c6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2220      	movs	r2, #32
 8004606:	4013      	ands	r3, r2
 8004608:	2b20      	cmp	r3, #32
 800460a:	d004      	beq.n	8004616 <I2C_IsErrorOccurred+0x112>
 800460c:	2327      	movs	r3, #39	; 0x27
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d092      	beq.n	800453c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004616:	2327      	movs	r3, #39	; 0x27
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2220      	movs	r2, #32
 8004626:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2204      	movs	r2, #4
 800462c:	4313      	orrs	r3, r2
 800462e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004630:	2327      	movs	r3, #39	; 0x27
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4013      	ands	r3, r2
 8004648:	d00c      	beq.n	8004664 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2201      	movs	r2, #1
 800464e:	4313      	orrs	r3, r2
 8004650:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	0052      	lsls	r2, r2, #1
 800465a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800465c:	2327      	movs	r3, #39	; 0x27
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4013      	ands	r3, r2
 800466c:	d00c      	beq.n	8004688 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	2208      	movs	r2, #8
 8004672:	4313      	orrs	r3, r2
 8004674:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2280      	movs	r2, #128	; 0x80
 800467c:	00d2      	lsls	r2, r2, #3
 800467e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004680:	2327      	movs	r3, #39	; 0x27
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4013      	ands	r3, r2
 8004690:	d00c      	beq.n	80046ac <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	2202      	movs	r2, #2
 8004696:	4313      	orrs	r3, r2
 8004698:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a4:	2327      	movs	r3, #39	; 0x27
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80046ac:	2327      	movs	r3, #39	; 0x27
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01d      	beq.n	80046f2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff fdcd 	bl	8004258 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	490d      	ldr	r1, [pc, #52]	; (8004700 <I2C_IsErrorOccurred+0x1fc>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2241      	movs	r2, #65	; 0x41
 80046de:	2120      	movs	r1, #32
 80046e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2242      	movs	r2, #66	; 0x42
 80046e6:	2100      	movs	r1, #0
 80046e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80046f2:	2327      	movs	r3, #39	; 0x27
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	781b      	ldrb	r3, [r3, #0]
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b00b      	add	sp, #44	; 0x2c
 80046fe:	bd90      	pop	{r4, r7, pc}
 8004700:	fe00e800 	.word	0xfe00e800

08004704 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	0008      	movs	r0, r1
 800470e:	0011      	movs	r1, r2
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	240a      	movs	r4, #10
 8004714:	193b      	adds	r3, r7, r4
 8004716:	1c02      	adds	r2, r0, #0
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	2009      	movs	r0, #9
 800471c:	183b      	adds	r3, r7, r0
 800471e:	1c0a      	adds	r2, r1, #0
 8004720:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004722:	193b      	adds	r3, r7, r4
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	059b      	lsls	r3, r3, #22
 8004728:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800472a:	183b      	adds	r3, r7, r0
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	0419      	lsls	r1, r3, #16
 8004730:	23ff      	movs	r3, #255	; 0xff
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004736:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	4313      	orrs	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474e:	0d51      	lsrs	r1, r2, #21
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	00d2      	lsls	r2, r2, #3
 8004754:	400a      	ands	r2, r1
 8004756:	4907      	ldr	r1, [pc, #28]	; (8004774 <I2C_TransferConfig+0x70>)
 8004758:	430a      	orrs	r2, r1
 800475a:	43d2      	mvns	r2, r2
 800475c:	401a      	ands	r2, r3
 800475e:	0011      	movs	r1, r2
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b007      	add	sp, #28
 8004770:	bd90      	pop	{r4, r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	03ff63ff 	.word	0x03ff63ff

08004778 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2241      	movs	r2, #65	; 0x41
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b20      	cmp	r3, #32
 800478c:	d138      	bne.n	8004800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	5c9b      	ldrb	r3, [r3, r2]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004798:	2302      	movs	r3, #2
 800479a:	e032      	b.n	8004802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2240      	movs	r2, #64	; 0x40
 80047a0:	2101      	movs	r1, #1
 80047a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2241      	movs	r2, #65	; 0x41
 80047a8:	2124      	movs	r1, #36	; 0x24
 80047aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2101      	movs	r1, #1
 80047b8:	438a      	bics	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4911      	ldr	r1, [pc, #68]	; (800480c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2101      	movs	r1, #1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2241      	movs	r2, #65	; 0x41
 80047f0:	2120      	movs	r1, #32
 80047f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	ffffefff 	.word	0xffffefff

08004810 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2241      	movs	r2, #65	; 0x41
 800481e:	5c9b      	ldrb	r3, [r3, r2]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b20      	cmp	r3, #32
 8004824:	d139      	bne.n	800489a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2240      	movs	r2, #64	; 0x40
 800482a:	5c9b      	ldrb	r3, [r3, r2]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004830:	2302      	movs	r3, #2
 8004832:	e033      	b.n	800489c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2240      	movs	r2, #64	; 0x40
 8004838:	2101      	movs	r1, #1
 800483a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2241      	movs	r2, #65	; 0x41
 8004840:	2124      	movs	r1, #36	; 0x24
 8004842:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2101      	movs	r1, #1
 8004850:	438a      	bics	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2101      	movs	r1, #1
 8004882:	430a      	orrs	r2, r1
 8004884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2241      	movs	r2, #65	; 0x41
 800488a:	2120      	movs	r1, #32
 800488c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2240      	movs	r2, #64	; 0x40
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	fffff0ff 	.word	0xfffff0ff

080048a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	430a      	orrs	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d11f      	bne.n	800490c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	0013      	movs	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	189b      	adds	r3, r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4912      	ldr	r1, [pc, #72]	; (8004924 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80048da:	0018      	movs	r0, r3
 80048dc:	f7fb fc2e 	bl	800013c <__udivsi3>
 80048e0:	0003      	movs	r3, r0
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048e6:	e008      	b.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e001      	b.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e009      	b.n	800490e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	401a      	ands	r2, r3
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	429a      	cmp	r2, r3
 800490a:	d0ed      	beq.n	80048e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b004      	add	sp, #16
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	40007000 	.word	0x40007000
 800491c:	fffff9ff 	.word	0xfffff9ff
 8004920:	20000000 	.word	0x20000000
 8004924:	000f4240 	.word	0x000f4240

08004928 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <LL_RCC_GetAPB1Prescaler+0x14>)
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	23e0      	movs	r3, #224	; 0xe0
 8004932:	01db      	lsls	r3, r3, #7
 8004934:	4013      	ands	r3, r2
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000

08004940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e2fe      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	4013      	ands	r3, r2
 800495a:	d100      	bne.n	800495e <HAL_RCC_OscConfig+0x1e>
 800495c:	e07c      	b.n	8004a58 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4bc3      	ldr	r3, [pc, #780]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2238      	movs	r2, #56	; 0x38
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	4bc0      	ldr	r3, [pc, #768]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2203      	movs	r2, #3
 800496e:	4013      	ands	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d102      	bne.n	800497e <HAL_RCC_OscConfig+0x3e>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d002      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4bb9      	ldr	r3, [pc, #740]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	4013      	ands	r3, r2
 800498e:	d062      	beq.n	8004a56 <HAL_RCC_OscConfig+0x116>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d15e      	bne.n	8004a56 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e2d9      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	025b      	lsls	r3, r3, #9
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_OscConfig+0x78>
 80049a8:	4bb0      	ldr	r3, [pc, #704]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4baf      	ldr	r3, [pc, #700]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	0249      	lsls	r1, r1, #9
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e020      	b.n	80049fa <HAL_RCC_OscConfig+0xba>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	23a0      	movs	r3, #160	; 0xa0
 80049be:	02db      	lsls	r3, r3, #11
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d10e      	bne.n	80049e2 <HAL_RCC_OscConfig+0xa2>
 80049c4:	4ba9      	ldr	r3, [pc, #676]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4ba8      	ldr	r3, [pc, #672]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049ca:	2180      	movs	r1, #128	; 0x80
 80049cc:	02c9      	lsls	r1, r1, #11
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4ba6      	ldr	r3, [pc, #664]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4ba5      	ldr	r3, [pc, #660]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	0249      	lsls	r1, r1, #9
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e00b      	b.n	80049fa <HAL_RCC_OscConfig+0xba>
 80049e2:	4ba2      	ldr	r3, [pc, #648]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4ba1      	ldr	r3, [pc, #644]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049e8:	49a1      	ldr	r1, [pc, #644]	; (8004c70 <HAL_RCC_OscConfig+0x330>)
 80049ea:	400a      	ands	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	4b9f      	ldr	r3, [pc, #636]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4b9e      	ldr	r3, [pc, #632]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 80049f4:	499f      	ldr	r1, [pc, #636]	; (8004c74 <HAL_RCC_OscConfig+0x334>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d014      	beq.n	8004a2c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fe ff43 	bl	800388c <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fe ff3e 	bl	800388c <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e298      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1e:	4b93      	ldr	r3, [pc, #588]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	4013      	ands	r3, r2
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xcc>
 8004a2a:	e015      	b.n	8004a58 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fe ff2e 	bl	800388c <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a36:	f7fe ff29 	bl	800388c <HAL_GetTick>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b64      	cmp	r3, #100	; 0x64
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e283      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a48:	4b88      	ldr	r3, [pc, #544]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	4013      	ands	r3, r2
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0xf6>
 8004a54:	e000      	b.n	8004a58 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d100      	bne.n	8004a64 <HAL_RCC_OscConfig+0x124>
 8004a62:	e099      	b.n	8004b98 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a64:	4b81      	ldr	r3, [pc, #516]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2238      	movs	r2, #56	; 0x38
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a6e:	4b7f      	ldr	r3, [pc, #508]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2203      	movs	r2, #3
 8004a74:	4013      	ands	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d102      	bne.n	8004a84 <HAL_RCC_OscConfig+0x144>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d002      	beq.n	8004a8a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d135      	bne.n	8004af6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8a:	4b78      	ldr	r3, [pc, #480]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4013      	ands	r3, r2
 8004a94:	d005      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x162>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e256      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b72      	ldr	r3, [pc, #456]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4a74      	ldr	r2, [pc, #464]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	021a      	lsls	r2, r3, #8
 8004ab2:	4b6e      	ldr	r3, [pc, #440]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d112      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004abe:	4b6b      	ldr	r3, [pc, #428]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6e      	ldr	r2, [pc, #440]	; (8004c7c <HAL_RCC_OscConfig+0x33c>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	4b67      	ldr	r3, [pc, #412]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ad2:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	0adb      	lsrs	r3, r3, #11
 8004ad8:	2207      	movs	r2, #7
 8004ada:	4013      	ands	r3, r2
 8004adc:	4a68      	ldr	r2, [pc, #416]	; (8004c80 <HAL_RCC_OscConfig+0x340>)
 8004ade:	40da      	lsrs	r2, r3
 8004ae0:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <HAL_RCC_OscConfig+0x344>)
 8004ae2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ae4:	4b68      	ldr	r3, [pc, #416]	; (8004c88 <HAL_RCC_OscConfig+0x348>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fe fe73 	bl	80037d4 <HAL_InitTick>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d051      	beq.n	8004b96 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e22c      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d030      	beq.n	8004b60 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004afe:	4b5b      	ldr	r3, [pc, #364]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5e      	ldr	r2, [pc, #376]	; (8004c7c <HAL_RCC_OscConfig+0x33c>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004b12:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b55      	ldr	r3, [pc, #340]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	0049      	lsls	r1, r1, #1
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe feb4 	bl	800388c <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fe feaf 	bl	800388c <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e209      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3c:	4b4b      	ldr	r3, [pc, #300]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a4a      	ldr	r2, [pc, #296]	; (8004c78 <HAL_RCC_OscConfig+0x338>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	4b44      	ldr	r3, [pc, #272]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e01b      	b.n	8004b98 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b60:	4b42      	ldr	r3, [pc, #264]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b66:	4949      	ldr	r1, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x34c>)
 8004b68:	400a      	ands	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fe8e 	bl	800388c <HAL_GetTick>
 8004b70:	0003      	movs	r3, r0
 8004b72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fe fe89 	bl	800388c <HAL_GetTick>
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e1e3      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b88:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x236>
 8004b94:	e000      	b.n	8004b98 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d047      	beq.n	8004c32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ba2:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2238      	movs	r2, #56	; 0x38
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b18      	cmp	r3, #24
 8004bac:	d10a      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004bae:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d03c      	beq.n	8004c32 <HAL_RCC_OscConfig+0x2f2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d138      	bne.n	8004c32 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e1c5      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d019      	beq.n	8004c00 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bd0:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fe fe58 	bl	800388c <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fe fe53 	bl	800388c <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e1ad      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d0f1      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2a2>
 8004bfe:	e018      	b.n	8004c32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004c02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004c06:	2101      	movs	r1, #1
 8004c08:	438a      	bics	r2, r1
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fe fe3e 	bl	800388c <HAL_GetTick>
 8004c10:	0003      	movs	r3, r0
 8004c12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fe fe39 	bl	800388c <HAL_GetTick>
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e193      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d1f1      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2204      	movs	r2, #4
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <HAL_RCC_OscConfig+0x2fe>
 8004c3c:	e0c6      	b.n	8004dcc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3e:	231f      	movs	r3, #31
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2238      	movs	r2, #56	; 0x38
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d11e      	bne.n	8004c90 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCC_OscConfig+0x32c>)
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	2202      	movs	r2, #2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <HAL_RCC_OscConfig+0x31e>
 8004c5c:	e0b6      	b.n	8004dcc <HAL_RCC_OscConfig+0x48c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d000      	beq.n	8004c68 <HAL_RCC_OscConfig+0x328>
 8004c66:	e0b1      	b.n	8004dcc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e171      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	fffeffff 	.word	0xfffeffff
 8004c74:	fffbffff 	.word	0xfffbffff
 8004c78:	ffff80ff 	.word	0xffff80ff
 8004c7c:	ffffc7ff 	.word	0xffffc7ff
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20000004 	.word	0x20000004
 8004c8c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c90:	4bb1      	ldr	r3, [pc, #708]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	055b      	lsls	r3, r3, #21
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x360>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x362>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d011      	beq.n	8004cca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	4bac      	ldr	r3, [pc, #688]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004caa:	4bab      	ldr	r3, [pc, #684]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	0549      	lsls	r1, r1, #21
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cb4:	4ba8      	ldr	r3, [pc, #672]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	055b      	lsls	r3, r3, #21
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004cc2:	231f      	movs	r3, #31
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cca:	4ba4      	ldr	r3, [pc, #656]	; (8004f5c <HAL_RCC_OscConfig+0x61c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d11a      	bne.n	8004d0c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd6:	4ba1      	ldr	r3, [pc, #644]	; (8004f5c <HAL_RCC_OscConfig+0x61c>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4ba0      	ldr	r3, [pc, #640]	; (8004f5c <HAL_RCC_OscConfig+0x61c>)
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	0049      	lsls	r1, r1, #1
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fdd2 	bl	800388c <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fe fdcd 	bl	800388c <HAL_GetTick>
 8004cf2:	0002      	movs	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e127      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d00:	4b96      	ldr	r3, [pc, #600]	; (8004f5c <HAL_RCC_OscConfig+0x61c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3e2>
 8004d14:	4b90      	ldr	r3, [pc, #576]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d18:	4b8f      	ldr	r3, [pc, #572]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d20:	e01c      	b.n	8004d5c <HAL_RCC_OscConfig+0x41c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b05      	cmp	r3, #5
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x404>
 8004d2a:	4b8b      	ldr	r3, [pc, #556]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d2e:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d30:	2104      	movs	r1, #4
 8004d32:	430a      	orrs	r2, r1
 8004d34:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d36:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d3a:	4b87      	ldr	r3, [pc, #540]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d42:	e00b      	b.n	8004d5c <HAL_RCC_OscConfig+0x41c>
 8004d44:	4b84      	ldr	r3, [pc, #528]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d48:	4b83      	ldr	r3, [pc, #524]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d50:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d54:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d56:	2104      	movs	r1, #4
 8004d58:	438a      	bics	r2, r1
 8004d5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d014      	beq.n	8004d8e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fd92 	bl	800388c <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6c:	e009      	b.n	8004d82 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fe fd8d 	bl	800388c <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	4a79      	ldr	r2, [pc, #484]	; (8004f60 <HAL_RCC_OscConfig+0x620>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0e6      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d82:	4b75      	ldr	r3, [pc, #468]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	2202      	movs	r2, #2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x42e>
 8004d8c:	e013      	b.n	8004db6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fe fd7d 	bl	800388c <HAL_GetTick>
 8004d92:	0003      	movs	r3, r0
 8004d94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d96:	e009      	b.n	8004dac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7fe fd78 	bl	800388c <HAL_GetTick>
 8004d9c:	0002      	movs	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	4a6f      	ldr	r2, [pc, #444]	; (8004f60 <HAL_RCC_OscConfig+0x620>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e0d1      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dac:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	2202      	movs	r2, #2
 8004db2:	4013      	ands	r3, r2
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004db6:	231f      	movs	r3, #31
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc4:	4b64      	ldr	r3, [pc, #400]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004dc6:	4967      	ldr	r1, [pc, #412]	; (8004f64 <HAL_RCC_OscConfig+0x624>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d100      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x496>
 8004dd4:	e0bb      	b.n	8004f4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd6:	4b60      	ldr	r3, [pc, #384]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2238      	movs	r2, #56	; 0x38
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d100      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4a4>
 8004de2:	e07b      	b.n	8004edc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d156      	bne.n	8004e9a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004df2:	495d      	ldr	r1, [pc, #372]	; (8004f68 <HAL_RCC_OscConfig+0x628>)
 8004df4:	400a      	ands	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fe fd48 	bl	800388c <HAL_GetTick>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fe fd43 	bl	800388c <HAL_GetTick>
 8004e06:	0002      	movs	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e09d      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e14:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	049b      	lsls	r3, r3, #18
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e20:	4b4d      	ldr	r3, [pc, #308]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a51      	ldr	r2, [pc, #324]	; (8004f6c <HAL_RCC_OscConfig+0x62c>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1a      	ldr	r2, [r3, #32]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e50:	430a      	orrs	r2, r1
 8004e52:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e54:	4b40      	ldr	r3, [pc, #256]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e5a:	2180      	movs	r1, #128	; 0x80
 8004e5c:	0449      	lsls	r1, r1, #17
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	4b3c      	ldr	r3, [pc, #240]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	0549      	lsls	r1, r1, #21
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe fd0c 	bl	800388c <HAL_GetTick>
 8004e74:	0003      	movs	r3, r0
 8004e76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fe fd07 	bl	800388c <HAL_GetTick>
 8004e7e:	0002      	movs	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e061      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8c:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	049b      	lsls	r3, r3, #18
 8004e94:	4013      	ands	r3, r2
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x53a>
 8004e98:	e059      	b.n	8004f4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b2e      	ldr	r3, [pc, #184]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ea0:	4931      	ldr	r1, [pc, #196]	; (8004f68 <HAL_RCC_OscConfig+0x628>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fe fcf1 	bl	800388c <HAL_GetTick>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7fe fcec 	bl	800388c <HAL_GetTick>
 8004eb4:	0002      	movs	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e046      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec2:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	049b      	lsls	r3, r3, #18
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004ed4:	4926      	ldr	r1, [pc, #152]	; (8004f70 <HAL_RCC_OscConfig+0x630>)
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	e038      	b.n	8004f4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e033      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x618>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d126      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2270      	movs	r2, #112	; 0x70
 8004f00:	401a      	ands	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d11f      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	23fe      	movs	r3, #254	; 0xfe
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	401a      	ands	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d116      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	23f8      	movs	r3, #248	; 0xf8
 8004f20:	039b      	lsls	r3, r3, #14
 8004f22:	401a      	ands	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d10e      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	23e0      	movs	r3, #224	; 0xe0
 8004f30:	051b      	lsls	r3, r3, #20
 8004f32:	401a      	ands	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	0f5b      	lsrs	r3, r3, #29
 8004f40:	075a      	lsls	r2, r3, #29
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b008      	add	sp, #32
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	00001388 	.word	0x00001388
 8004f64:	efffffff 	.word	0xefffffff
 8004f68:	feffffff 	.word	0xfeffffff
 8004f6c:	11c1808c 	.word	0x11c1808c
 8004f70:	eefefffc 	.word	0xeefefffc

08004f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0e9      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f88:	4b76      	ldr	r3, [pc, #472]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	4013      	ands	r3, r2
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d91e      	bls.n	8004fd4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b73      	ldr	r3, [pc, #460]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	4393      	bics	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	4b70      	ldr	r3, [pc, #448]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fa8:	f7fe fc70 	bl	800388c <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb2:	f7fe fc6b 	bl	800388c <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	4a6a      	ldr	r2, [pc, #424]	; (8005168 <HAL_RCC_ClockConfig+0x1f4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0ca      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fc6:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2207      	movs	r2, #7
 8004fcc:	4013      	ands	r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1ee      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d015      	beq.n	800500a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d006      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004fe8:	4b60      	ldr	r3, [pc, #384]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	4b5f      	ldr	r3, [pc, #380]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8004fee:	21e0      	movs	r1, #224	; 0xe0
 8004ff0:	01c9      	lsls	r1, r1, #7
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	4a5d      	ldr	r2, [pc, #372]	; (8005170 <HAL_RCC_ClockConfig+0x1fc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	4b59      	ldr	r3, [pc, #356]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2201      	movs	r2, #1
 8005010:	4013      	ands	r3, r2
 8005012:	d057      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501c:	4b53      	ldr	r3, [pc, #332]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	029b      	lsls	r3, r3, #10
 8005024:	4013      	ands	r3, r2
 8005026:	d12b      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e097      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d107      	bne.n	8005044 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005034:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	049b      	lsls	r3, r3, #18
 800503c:	4013      	ands	r3, r2
 800503e:	d11f      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e08b      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d107      	bne.n	800505c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504c:	4b47      	ldr	r3, [pc, #284]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4013      	ands	r3, r2
 8005056:	d113      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e07f      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d106      	bne.n	8005072 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	2202      	movs	r2, #2
 800506a:	4013      	ands	r3, r2
 800506c:	d108      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e074      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005072:	4b3e      	ldr	r3, [pc, #248]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005076:	2202      	movs	r2, #2
 8005078:	4013      	ands	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e06d      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005080:	4b3a      	ldr	r3, [pc, #232]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2207      	movs	r2, #7
 8005086:	4393      	bics	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4b37      	ldr	r3, [pc, #220]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fe fbfa 	bl	800388c <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509c:	e009      	b.n	80050b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509e:	f7fe fbf5 	bl	800388c <HAL_GetTick>
 80050a2:	0002      	movs	r2, r0
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <HAL_RCC_ClockConfig+0x1f4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e054      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2238      	movs	r2, #56	; 0x38
 80050b8:	401a      	ands	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1ec      	bne.n	800509e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2207      	movs	r2, #7
 80050ca:	4013      	ands	r3, r2
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d21e      	bcs.n	8005110 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2207      	movs	r2, #7
 80050d8:	4393      	bics	r3, r2
 80050da:	0019      	movs	r1, r3
 80050dc:	4b21      	ldr	r3, [pc, #132]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050e4:	f7fe fbd2 	bl	800388c <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050ec:	e009      	b.n	8005102 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ee:	f7fe fbcd 	bl	800388c <HAL_GetTick>
 80050f2:	0002      	movs	r2, r0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_RCC_ClockConfig+0x1f4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e02c      	b.n	800515c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2207      	movs	r2, #7
 8005108:	4013      	ands	r3, r2
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d1ee      	bne.n	80050ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2204      	movs	r2, #4
 8005116:	4013      	ands	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <HAL_RCC_ClockConfig+0x200>)
 8005120:	4013      	ands	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800512e:	f000 f829 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005132:	0001      	movs	r1, r0
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <HAL_RCC_ClockConfig+0x1f8>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	220f      	movs	r2, #15
 800513c:	401a      	ands	r2, r3
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_RCC_ClockConfig+0x204>)
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	58d3      	ldr	r3, [r2, r3]
 8005144:	221f      	movs	r2, #31
 8005146:	4013      	ands	r3, r2
 8005148:	000a      	movs	r2, r1
 800514a:	40da      	lsrs	r2, r3
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_ClockConfig+0x208>)
 800514e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_ClockConfig+0x20c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0018      	movs	r0, r3
 8005156:	f7fe fb3d 	bl	80037d4 <HAL_InitTick>
 800515a:	0003      	movs	r3, r0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40022000 	.word	0x40022000
 8005168:	00001388 	.word	0x00001388
 800516c:	40021000 	.word	0x40021000
 8005170:	fffff0ff 	.word	0xfffff0ff
 8005174:	ffff8fff 	.word	0xffff8fff
 8005178:	0800ac64 	.word	0x0800ac64
 800517c:	20000000 	.word	0x20000000
 8005180:	20000004 	.word	0x20000004

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518a:	4b3c      	ldr	r3, [pc, #240]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2238      	movs	r2, #56	; 0x38
 8005190:	4013      	ands	r3, r2
 8005192:	d10f      	bne.n	80051b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	0adb      	lsrs	r3, r3, #11
 800519a:	2207      	movs	r2, #7
 800519c:	4013      	ands	r3, r2
 800519e:	2201      	movs	r2, #1
 80051a0:	409a      	lsls	r2, r3
 80051a2:	0013      	movs	r3, r2
 80051a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80051a6:	6839      	ldr	r1, [r7, #0]
 80051a8:	4835      	ldr	r0, [pc, #212]	; (8005280 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051aa:	f7fa ffc7 	bl	800013c <__udivsi3>
 80051ae:	0003      	movs	r3, r0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e05d      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051b4:	4b31      	ldr	r3, [pc, #196]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2238      	movs	r2, #56	; 0x38
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d102      	bne.n	80051c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051c0:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCC_GetSysClockFreq+0x100>)
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e054      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2238      	movs	r2, #56	; 0x38
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d138      	bne.n	8005244 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2203      	movs	r2, #3
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051dc:	4b27      	ldr	r3, [pc, #156]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	2207      	movs	r2, #7
 80051e4:	4013      	ands	r3, r2
 80051e6:	3301      	adds	r3, #1
 80051e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10d      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4824      	ldr	r0, [pc, #144]	; (8005284 <HAL_RCC_GetSysClockFreq+0x100>)
 80051f4:	f7fa ffa2 	bl	800013c <__udivsi3>
 80051f8:	0003      	movs	r3, r0
 80051fa:	0019      	movs	r1, r3
 80051fc:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	227f      	movs	r2, #127	; 0x7f
 8005204:	4013      	ands	r3, r2
 8005206:	434b      	muls	r3, r1
 8005208:	617b      	str	r3, [r7, #20]
        break;
 800520a:	e00d      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	481c      	ldr	r0, [pc, #112]	; (8005280 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005210:	f7fa ff94 	bl	800013c <__udivsi3>
 8005214:	0003      	movs	r3, r0
 8005216:	0019      	movs	r1, r3
 8005218:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	227f      	movs	r2, #127	; 0x7f
 8005220:	4013      	ands	r3, r2
 8005222:	434b      	muls	r3, r1
 8005224:	617b      	str	r3, [r7, #20]
        break;
 8005226:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0f5b      	lsrs	r3, r3, #29
 800522e:	2207      	movs	r2, #7
 8005230:	4013      	ands	r3, r2
 8005232:	3301      	adds	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f7fa ff7f 	bl	800013c <__udivsi3>
 800523e:	0003      	movs	r3, r0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e015      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2238      	movs	r2, #56	; 0x38
 800524a:	4013      	ands	r3, r2
 800524c:	2b20      	cmp	r3, #32
 800524e:	d103      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e00b      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_RCC_GetSysClockFreq+0xf8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2238      	movs	r2, #56	; 0x38
 800525e:	4013      	ands	r3, r2
 8005260:	2b18      	cmp	r3, #24
 8005262:	d103      	bne.n	800526c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005264:	23fa      	movs	r3, #250	; 0xfa
 8005266:	01db      	lsls	r3, r3, #7
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e001      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005270:	693b      	ldr	r3, [r7, #16]
}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b006      	add	sp, #24
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	40021000 	.word	0x40021000
 8005280:	00f42400 	.word	0x00f42400
 8005284:	007a1200 	.word	0x007a1200

08005288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b02      	ldr	r3, [pc, #8]	; (8005298 <HAL_RCC_GetHCLKFreq+0x10>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	20000000 	.word	0x20000000

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052a0:	f7ff fff2 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a4:	0004      	movs	r4, r0
 80052a6:	f7ff fb3f 	bl	8004928 <LL_RCC_GetAPB1Prescaler>
 80052aa:	0003      	movs	r3, r0
 80052ac:	0b1a      	lsrs	r2, r3, #12
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052b0:	0092      	lsls	r2, r2, #2
 80052b2:	58d3      	ldr	r3, [r2, r3]
 80052b4:	221f      	movs	r2, #31
 80052b6:	4013      	ands	r3, r2
 80052b8:	40dc      	lsrs	r4, r3
 80052ba:	0023      	movs	r3, r4
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdb0      	pop	{r4, r5, r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	0800aca4 	.word	0x0800aca4

080052c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80052d0:	2313      	movs	r3, #19
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052d8:	2312      	movs	r3, #18
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	4013      	ands	r3, r2
 80052ea:	d100      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80052ec:	e0a3      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	2011      	movs	r0, #17
 80052f0:	183b      	adds	r3, r7, r0
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4ba5      	ldr	r3, [pc, #660]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	055b      	lsls	r3, r3, #21
 80052fe:	4013      	ands	r3, r2
 8005300:	d110      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	4ba2      	ldr	r3, [pc, #648]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005306:	4ba1      	ldr	r3, [pc, #644]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	0549      	lsls	r1, r1, #21
 800530c:	430a      	orrs	r2, r1
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005310:	4b9e      	ldr	r3, [pc, #632]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	055b      	lsls	r3, r3, #21
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	183b      	adds	r3, r7, r0
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005324:	4b9a      	ldr	r3, [pc, #616]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b99      	ldr	r3, [pc, #612]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	0049      	lsls	r1, r1, #1
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005332:	f7fe faab 	bl	800388c <HAL_GetTick>
 8005336:	0003      	movs	r3, r0
 8005338:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800533a:	e00b      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533c:	f7fe faa6 	bl	800388c <HAL_GetTick>
 8005340:	0002      	movs	r2, r0
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d904      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800534a:	2313      	movs	r3, #19
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2203      	movs	r2, #3
 8005350:	701a      	strb	r2, [r3, #0]
        break;
 8005352:	e005      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005354:	4b8e      	ldr	r3, [pc, #568]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4013      	ands	r3, r2
 800535e:	d0ed      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005360:	2313      	movs	r3, #19
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d154      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800536a:	4b88      	ldr	r3, [pc, #544]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800536c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800536e:	23c0      	movs	r3, #192	; 0xc0
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4013      	ands	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d019      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	429a      	cmp	r2, r3
 8005384:	d014      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005386:	4b81      	ldr	r3, [pc, #516]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800538c:	4013      	ands	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005390:	4b7e      	ldr	r3, [pc, #504]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005392:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005394:	4b7d      	ldr	r3, [pc, #500]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	0249      	lsls	r1, r1, #9
 800539a:	430a      	orrs	r2, r1
 800539c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800539e:	4b7b      	ldr	r3, [pc, #492]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053a2:	4b7a      	ldr	r3, [pc, #488]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053a4:	497c      	ldr	r1, [pc, #496]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053aa:	4b78      	ldr	r3, [pc, #480]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2201      	movs	r2, #1
 80053b4:	4013      	ands	r3, r2
 80053b6:	d016      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fe fa68 	bl	800388c <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c0:	e00c      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c2:	f7fe fa63 	bl	800388c <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	4a73      	ldr	r2, [pc, #460]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d904      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80053d2:	2313      	movs	r3, #19
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	2203      	movs	r2, #3
 80053d8:	701a      	strb	r2, [r3, #0]
            break;
 80053da:	e004      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053dc:	4b6b      	ldr	r3, [pc, #428]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e0:	2202      	movs	r2, #2
 80053e2:	4013      	ands	r3, r2
 80053e4:	d0ed      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80053e6:	2313      	movs	r3, #19
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f0:	4b66      	ldr	r3, [pc, #408]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fe:	4b63      	ldr	r3, [pc, #396]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005400:	430a      	orrs	r2, r1
 8005402:	65da      	str	r2, [r3, #92]	; 0x5c
 8005404:	e00c      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005406:	2312      	movs	r3, #18
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	2213      	movs	r2, #19
 800540c:	18ba      	adds	r2, r7, r2
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e005      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	2312      	movs	r3, #18
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	2213      	movs	r2, #19
 800541a:	18ba      	adds	r2, r7, r2
 800541c:	7812      	ldrb	r2, [r2, #0]
 800541e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005420:	2311      	movs	r3, #17
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800542a:	4b58      	ldr	r3, [pc, #352]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800542c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800542e:	4b57      	ldr	r3, [pc, #348]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005430:	495b      	ldr	r1, [pc, #364]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005432:	400a      	ands	r2, r1
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	4013      	ands	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005440:	4b52      	ldr	r3, [pc, #328]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	2203      	movs	r2, #3
 8005446:	4393      	bics	r3, r2
 8005448:	0019      	movs	r1, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b4f      	ldr	r3, [pc, #316]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005450:	430a      	orrs	r2, r1
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	4013      	ands	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800545e:	4b4b      	ldr	r3, [pc, #300]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	4a50      	ldr	r2, [pc, #320]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	4b47      	ldr	r3, [pc, #284]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800546e:	430a      	orrs	r2, r1
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4013      	ands	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800547e:	4b43      	ldr	r3, [pc, #268]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	4a49      	ldr	r2, [pc, #292]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005484:	4013      	ands	r3, r2
 8005486:	0019      	movs	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	4b3f      	ldr	r3, [pc, #252]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800548e:	430a      	orrs	r2, r1
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4013      	ands	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800549e:	4b3b      	ldr	r3, [pc, #236]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	4a42      	ldr	r2, [pc, #264]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	0019      	movs	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b37      	ldr	r3, [pc, #220]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ae:	430a      	orrs	r2, r1
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2220      	movs	r2, #32
 80054b8:	4013      	ands	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054bc:	4b33      	ldr	r3, [pc, #204]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c0:	4a3b      	ldr	r2, [pc, #236]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	4b30      	ldr	r3, [pc, #192]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054cc:	430a      	orrs	r2, r1
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	01db      	lsls	r3, r3, #7
 80054d8:	4013      	ands	r3, r2
 80054da:	d015      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	0899      	lsrs	r1, r3, #2
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	05db      	lsls	r3, r3, #23
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d106      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	0249      	lsls	r1, r1, #9
 8005504:	430a      	orrs	r2, r1
 8005506:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	039b      	lsls	r3, r3, #14
 8005510:	4013      	ands	r3, r2
 8005512:	d016      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005524:	430a      	orrs	r2, r1
 8005526:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	03db      	lsls	r3, r3, #15
 8005530:	429a      	cmp	r2, r3
 8005532:	d106      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005534:	4b15      	ldr	r3, [pc, #84]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	0449      	lsls	r1, r1, #17
 800553e:	430a      	orrs	r2, r1
 8005540:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	4013      	ands	r3, r2
 800554c:	d016      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800555e:	430a      	orrs	r2, r1
 8005560:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	01db      	lsls	r3, r3, #7
 800556a:	429a      	cmp	r2, r3
 800556c:	d106      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	0249      	lsls	r1, r1, #9
 8005578:	430a      	orrs	r2, r1
 800557a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800557c:	2312      	movs	r3, #18
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	781b      	ldrb	r3, [r3, #0]
}
 8005582:	0018      	movs	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	b006      	add	sp, #24
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	40021000 	.word	0x40021000
 8005590:	40007000 	.word	0x40007000
 8005594:	fffffcff 	.word	0xfffffcff
 8005598:	fffeffff 	.word	0xfffeffff
 800559c:	00001388 	.word	0x00001388
 80055a0:	efffffff 	.word	0xefffffff
 80055a4:	fffff3ff 	.word	0xfffff3ff
 80055a8:	fff3ffff 	.word	0xfff3ffff
 80055ac:	ffcfffff 	.word	0xffcfffff
 80055b0:	ffffcfff 	.word	0xffffcfff
 80055b4:	ffbfffff 	.word	0xffbfffff
 80055b8:	ffff3fff 	.word	0xffff3fff

080055bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e046      	b.n	800565c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2288      	movs	r2, #136	; 0x88
 80055d2:	589b      	ldr	r3, [r3, r2]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2284      	movs	r2, #132	; 0x84
 80055dc:	2100      	movs	r1, #0
 80055de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fd fe5c 	bl	80032a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2288      	movs	r2, #136	; 0x88
 80055ec:	2124      	movs	r1, #36	; 0x24
 80055ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2101      	movs	r1, #1
 80055fc:	438a      	bics	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f000 f8cc 	bl	80057a0 <UART_SetConfig>
 8005608:	0003      	movs	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e024      	b.n	800565c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 fb37 	bl	8005c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	490d      	ldr	r1, [pc, #52]	; (8005664 <HAL_UART_Init+0xa8>)
 800562e:	400a      	ands	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	212a      	movs	r1, #42	; 0x2a
 800563e:	438a      	bics	r2, r1
 8005640:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f000 fbcf 	bl	8005df8 <UART_CheckIdleState>
 800565a:	0003      	movs	r3, r0
}
 800565c:	0018      	movs	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	b002      	add	sp, #8
 8005662:	bd80      	pop	{r7, pc}
 8005664:	ffffb7ff 	.word	0xffffb7ff

08005668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	1dbb      	adds	r3, r7, #6
 8005676:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2288      	movs	r2, #136	; 0x88
 800567c:	589b      	ldr	r3, [r3, r2]
 800567e:	2b20      	cmp	r3, #32
 8005680:	d000      	beq.n	8005684 <HAL_UART_Transmit+0x1c>
 8005682:	e088      	b.n	8005796 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_UART_Transmit+0x2a>
 800568a:	1dbb      	adds	r3, r7, #6
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e080      	b.n	8005798 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	015b      	lsls	r3, r3, #5
 800569e:	429a      	cmp	r2, r3
 80056a0:	d109      	bne.n	80056b6 <HAL_UART_Transmit+0x4e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2201      	movs	r2, #1
 80056ae:	4013      	ands	r3, r2
 80056b0:	d001      	beq.n	80056b6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e070      	b.n	8005798 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2290      	movs	r2, #144	; 0x90
 80056ba:	2100      	movs	r1, #0
 80056bc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2288      	movs	r2, #136	; 0x88
 80056c2:	2121      	movs	r1, #33	; 0x21
 80056c4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056c6:	f7fe f8e1 	bl	800388c <HAL_GetTick>
 80056ca:	0003      	movs	r3, r0
 80056cc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1dba      	adds	r2, r7, #6
 80056d2:	2154      	movs	r1, #84	; 0x54
 80056d4:	8812      	ldrh	r2, [r2, #0]
 80056d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1dba      	adds	r2, r7, #6
 80056dc:	2156      	movs	r1, #86	; 0x56
 80056de:	8812      	ldrh	r2, [r2, #0]
 80056e0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	015b      	lsls	r3, r3, #5
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d108      	bne.n	8005700 <HAL_UART_Transmit+0x98>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e003      	b.n	8005708 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005708:	e02c      	b.n	8005764 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	0013      	movs	r3, r2
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	f000 fbbc 	bl	8005e94 <UART_WaitOnFlagUntilTimeout>
 800571c:	1e03      	subs	r3, r0, #0
 800571e:	d001      	beq.n	8005724 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e039      	b.n	8005798 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	001a      	movs	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	05d2      	lsls	r2, r2, #23
 8005736:	0dd2      	lsrs	r2, r2, #23
 8005738:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3302      	adds	r3, #2
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e007      	b.n	8005752 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2256      	movs	r2, #86	; 0x56
 8005756:	5a9b      	ldrh	r3, [r3, r2]
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b299      	uxth	r1, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2256      	movs	r2, #86	; 0x56
 8005762:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2256      	movs	r2, #86	; 0x56
 8005768:	5a9b      	ldrh	r3, [r3, r2]
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1cc      	bne.n	800570a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	0013      	movs	r3, r2
 800577a:	2200      	movs	r2, #0
 800577c:	2140      	movs	r1, #64	; 0x40
 800577e:	f000 fb89 	bl	8005e94 <UART_WaitOnFlagUntilTimeout>
 8005782:	1e03      	subs	r3, r0, #0
 8005784:	d001      	beq.n	800578a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e006      	b.n	8005798 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2288      	movs	r2, #136	; 0x88
 800578e:	2120      	movs	r1, #32
 8005790:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e000      	b.n	8005798 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
  }
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b008      	add	sp, #32
 800579e:	bd80      	pop	{r7, pc}

080057a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a0:	b5b0      	push	{r4, r5, r7, lr}
 80057a2:	b090      	sub	sp, #64	; 0x40
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057a8:	231a      	movs	r3, #26
 80057aa:	2220      	movs	r2, #32
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	19db      	adds	r3, r3, r7
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	431a      	orrs	r2, r3
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4ac4      	ldr	r2, [pc, #784]	; (8005ae4 <UART_SetConfig+0x344>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	430b      	orrs	r3, r1
 80057e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4abf      	ldr	r2, [pc, #764]	; (8005ae8 <UART_SetConfig+0x348>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	68d9      	ldr	r1, [r3, #12]
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	0003      	movs	r3, r0
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4ab9      	ldr	r2, [pc, #740]	; (8005aec <UART_SetConfig+0x34c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005812:	4313      	orrs	r3, r2
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4ab4      	ldr	r2, [pc, #720]	; (8005af0 <UART_SetConfig+0x350>)
 800581e:	4013      	ands	r3, r2
 8005820:	0019      	movs	r1, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	430b      	orrs	r3, r1
 800582a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	220f      	movs	r2, #15
 8005834:	4393      	bics	r3, r2
 8005836:	0018      	movs	r0, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	0003      	movs	r3, r0
 8005842:	430b      	orrs	r3, r1
 8005844:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4aaa      	ldr	r2, [pc, #680]	; (8005af4 <UART_SetConfig+0x354>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d131      	bne.n	80058b4 <UART_SetConfig+0x114>
 8005850:	4ba9      	ldr	r3, [pc, #676]	; (8005af8 <UART_SetConfig+0x358>)
 8005852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005854:	2203      	movs	r2, #3
 8005856:	4013      	ands	r3, r2
 8005858:	2b03      	cmp	r3, #3
 800585a:	d01d      	beq.n	8005898 <UART_SetConfig+0xf8>
 800585c:	d823      	bhi.n	80058a6 <UART_SetConfig+0x106>
 800585e:	2b02      	cmp	r3, #2
 8005860:	d00c      	beq.n	800587c <UART_SetConfig+0xdc>
 8005862:	d820      	bhi.n	80058a6 <UART_SetConfig+0x106>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <UART_SetConfig+0xce>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d00e      	beq.n	800588a <UART_SetConfig+0xea>
 800586c:	e01b      	b.n	80058a6 <UART_SetConfig+0x106>
 800586e:	231b      	movs	r3, #27
 8005870:	2220      	movs	r2, #32
 8005872:	189b      	adds	r3, r3, r2
 8005874:	19db      	adds	r3, r3, r7
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e071      	b.n	8005960 <UART_SetConfig+0x1c0>
 800587c:	231b      	movs	r3, #27
 800587e:	2220      	movs	r2, #32
 8005880:	189b      	adds	r3, r3, r2
 8005882:	19db      	adds	r3, r3, r7
 8005884:	2202      	movs	r2, #2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e06a      	b.n	8005960 <UART_SetConfig+0x1c0>
 800588a:	231b      	movs	r3, #27
 800588c:	2220      	movs	r2, #32
 800588e:	189b      	adds	r3, r3, r2
 8005890:	19db      	adds	r3, r3, r7
 8005892:	2204      	movs	r2, #4
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e063      	b.n	8005960 <UART_SetConfig+0x1c0>
 8005898:	231b      	movs	r3, #27
 800589a:	2220      	movs	r2, #32
 800589c:	189b      	adds	r3, r3, r2
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	2208      	movs	r2, #8
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e05c      	b.n	8005960 <UART_SetConfig+0x1c0>
 80058a6:	231b      	movs	r3, #27
 80058a8:	2220      	movs	r2, #32
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	19db      	adds	r3, r3, r7
 80058ae:	2210      	movs	r2, #16
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e055      	b.n	8005960 <UART_SetConfig+0x1c0>
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a90      	ldr	r2, [pc, #576]	; (8005afc <UART_SetConfig+0x35c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d106      	bne.n	80058cc <UART_SetConfig+0x12c>
 80058be:	231b      	movs	r3, #27
 80058c0:	2220      	movs	r2, #32
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	19db      	adds	r3, r3, r7
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	e049      	b.n	8005960 <UART_SetConfig+0x1c0>
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a86      	ldr	r2, [pc, #536]	; (8005aec <UART_SetConfig+0x34c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d13e      	bne.n	8005954 <UART_SetConfig+0x1b4>
 80058d6:	4b88      	ldr	r3, [pc, #544]	; (8005af8 <UART_SetConfig+0x358>)
 80058d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058da:	23c0      	movs	r3, #192	; 0xc0
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	4013      	ands	r3, r2
 80058e0:	22c0      	movs	r2, #192	; 0xc0
 80058e2:	0112      	lsls	r2, r2, #4
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d027      	beq.n	8005938 <UART_SetConfig+0x198>
 80058e8:	22c0      	movs	r2, #192	; 0xc0
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d82a      	bhi.n	8005946 <UART_SetConfig+0x1a6>
 80058f0:	2280      	movs	r2, #128	; 0x80
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d011      	beq.n	800591c <UART_SetConfig+0x17c>
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d822      	bhi.n	8005946 <UART_SetConfig+0x1a6>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <UART_SetConfig+0x16e>
 8005904:	2280      	movs	r2, #128	; 0x80
 8005906:	00d2      	lsls	r2, r2, #3
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <UART_SetConfig+0x18a>
 800590c:	e01b      	b.n	8005946 <UART_SetConfig+0x1a6>
 800590e:	231b      	movs	r3, #27
 8005910:	2220      	movs	r2, #32
 8005912:	189b      	adds	r3, r3, r2
 8005914:	19db      	adds	r3, r3, r7
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e021      	b.n	8005960 <UART_SetConfig+0x1c0>
 800591c:	231b      	movs	r3, #27
 800591e:	2220      	movs	r2, #32
 8005920:	189b      	adds	r3, r3, r2
 8005922:	19db      	adds	r3, r3, r7
 8005924:	2202      	movs	r2, #2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e01a      	b.n	8005960 <UART_SetConfig+0x1c0>
 800592a:	231b      	movs	r3, #27
 800592c:	2220      	movs	r2, #32
 800592e:	189b      	adds	r3, r3, r2
 8005930:	19db      	adds	r3, r3, r7
 8005932:	2204      	movs	r2, #4
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e013      	b.n	8005960 <UART_SetConfig+0x1c0>
 8005938:	231b      	movs	r3, #27
 800593a:	2220      	movs	r2, #32
 800593c:	189b      	adds	r3, r3, r2
 800593e:	19db      	adds	r3, r3, r7
 8005940:	2208      	movs	r2, #8
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e00c      	b.n	8005960 <UART_SetConfig+0x1c0>
 8005946:	231b      	movs	r3, #27
 8005948:	2220      	movs	r2, #32
 800594a:	189b      	adds	r3, r3, r2
 800594c:	19db      	adds	r3, r3, r7
 800594e:	2210      	movs	r2, #16
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e005      	b.n	8005960 <UART_SetConfig+0x1c0>
 8005954:	231b      	movs	r3, #27
 8005956:	2220      	movs	r2, #32
 8005958:	189b      	adds	r3, r3, r2
 800595a:	19db      	adds	r3, r3, r7
 800595c:	2210      	movs	r2, #16
 800595e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a61      	ldr	r2, [pc, #388]	; (8005aec <UART_SetConfig+0x34c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d000      	beq.n	800596c <UART_SetConfig+0x1cc>
 800596a:	e092      	b.n	8005a92 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800596c:	231b      	movs	r3, #27
 800596e:	2220      	movs	r2, #32
 8005970:	189b      	adds	r3, r3, r2
 8005972:	19db      	adds	r3, r3, r7
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b08      	cmp	r3, #8
 8005978:	d015      	beq.n	80059a6 <UART_SetConfig+0x206>
 800597a:	dc18      	bgt.n	80059ae <UART_SetConfig+0x20e>
 800597c:	2b04      	cmp	r3, #4
 800597e:	d00d      	beq.n	800599c <UART_SetConfig+0x1fc>
 8005980:	dc15      	bgt.n	80059ae <UART_SetConfig+0x20e>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <UART_SetConfig+0x1ec>
 8005986:	2b02      	cmp	r3, #2
 8005988:	d005      	beq.n	8005996 <UART_SetConfig+0x1f6>
 800598a:	e010      	b.n	80059ae <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800598c:	f7ff fc86 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8005990:	0003      	movs	r3, r0
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005994:	e014      	b.n	80059c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005996:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <UART_SetConfig+0x360>)
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800599a:	e011      	b.n	80059c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599c:	f7ff fbf2 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 80059a0:	0003      	movs	r3, r0
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059a4:	e00c      	b.n	80059c0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ac:	e008      	b.n	80059c0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80059b2:	231a      	movs	r3, #26
 80059b4:	2220      	movs	r2, #32
 80059b6:	189b      	adds	r3, r3, r2
 80059b8:	19db      	adds	r3, r3, r7
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]
        break;
 80059be:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d100      	bne.n	80059c8 <UART_SetConfig+0x228>
 80059c6:	e147      	b.n	8005c58 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059cc:	4b4d      	ldr	r3, [pc, #308]	; (8005b04 <UART_SetConfig+0x364>)
 80059ce:	0052      	lsls	r2, r2, #1
 80059d0:	5ad3      	ldrh	r3, [r2, r3]
 80059d2:	0019      	movs	r1, r3
 80059d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059d6:	f7fa fbb1 	bl	800013c <__udivsi3>
 80059da:	0003      	movs	r3, r0
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	0013      	movs	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d305      	bcc.n	80059fa <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d906      	bls.n	8005a08 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80059fa:	231a      	movs	r3, #26
 80059fc:	2220      	movs	r2, #32
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	19db      	adds	r3, r3, r7
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e127      	b.n	8005c58 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a14:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <UART_SetConfig+0x364>)
 8005a16:	0052      	lsls	r2, r2, #1
 8005a18:	5ad3      	ldrh	r3, [r2, r3]
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	69b8      	ldr	r0, [r7, #24]
 8005a26:	69f9      	ldr	r1, [r7, #28]
 8005a28:	f7fa fd3c 	bl	80004a4 <__aeabi_uldivmod>
 8005a2c:	0002      	movs	r2, r0
 8005a2e:	000b      	movs	r3, r1
 8005a30:	0e11      	lsrs	r1, r2, #24
 8005a32:	021d      	lsls	r5, r3, #8
 8005a34:	430d      	orrs	r5, r1
 8005a36:	0214      	lsls	r4, r2, #8
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68b8      	ldr	r0, [r7, #8]
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	1900      	adds	r0, r0, r4
 8005a4a:	4169      	adcs	r1, r5
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	2300      	movs	r3, #0
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f7fa fd23 	bl	80004a4 <__aeabi_uldivmod>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	000b      	movs	r3, r1
 8005a62:	0013      	movs	r3, r2
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a68:	23c0      	movs	r3, #192	; 0xc0
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d309      	bcc.n	8005a84 <UART_SetConfig+0x2e4>
 8005a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	035b      	lsls	r3, r3, #13
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d204      	bcs.n	8005a84 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	e0e9      	b.n	8005c58 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005a84:	231a      	movs	r3, #26
 8005a86:	2220      	movs	r2, #32
 8005a88:	189b      	adds	r3, r3, r2
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e0e2      	b.n	8005c58 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d000      	beq.n	8005aa0 <UART_SetConfig+0x300>
 8005a9e:	e083      	b.n	8005ba8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d015      	beq.n	8005ada <UART_SetConfig+0x33a>
 8005aae:	dc2b      	bgt.n	8005b08 <UART_SetConfig+0x368>
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d00d      	beq.n	8005ad0 <UART_SetConfig+0x330>
 8005ab4:	dc28      	bgt.n	8005b08 <UART_SetConfig+0x368>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <UART_SetConfig+0x320>
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d005      	beq.n	8005aca <UART_SetConfig+0x32a>
 8005abe:	e023      	b.n	8005b08 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7ff fbec 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ac8:	e027      	b.n	8005b1a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <UART_SetConfig+0x360>)
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ace:	e024      	b.n	8005b1a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad0:	f7ff fb58 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ad8:	e01f      	b.n	8005b1a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae0:	e01b      	b.n	8005b1a <UART_SetConfig+0x37a>
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	cfff69f3 	.word	0xcfff69f3
 8005ae8:	ffffcfff 	.word	0xffffcfff
 8005aec:	40008000 	.word	0x40008000
 8005af0:	11fff4ff 	.word	0x11fff4ff
 8005af4:	40013800 	.word	0x40013800
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40004400 	.word	0x40004400
 8005b00:	00f42400 	.word	0x00f42400
 8005b04:	0800acd8 	.word	0x0800acd8
      default:
        pclk = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b0c:	231a      	movs	r3, #26
 8005b0e:	2220      	movs	r2, #32
 8005b10:	189b      	adds	r3, r3, r2
 8005b12:	19db      	adds	r3, r3, r7
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
        break;
 8005b18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d100      	bne.n	8005b22 <UART_SetConfig+0x382>
 8005b20:	e09a      	b.n	8005c58 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b26:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <UART_SetConfig+0x4e8>)
 8005b28:	0052      	lsls	r2, r2, #1
 8005b2a:	5ad3      	ldrh	r3, [r2, r3]
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b30:	f7fa fb04 	bl	800013c <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	005a      	lsls	r2, r3, #1
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	18d2      	adds	r2, r2, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0019      	movs	r1, r3
 8005b46:	0010      	movs	r0, r2
 8005b48:	f7fa faf8 	bl	800013c <__udivsi3>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	d921      	bls.n	8005b9a <UART_SetConfig+0x3fa>
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	025b      	lsls	r3, r3, #9
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d21c      	bcs.n	8005b9a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	200e      	movs	r0, #14
 8005b66:	2420      	movs	r4, #32
 8005b68:	1903      	adds	r3, r0, r4
 8005b6a:	19db      	adds	r3, r3, r7
 8005b6c:	210f      	movs	r1, #15
 8005b6e:	438a      	bics	r2, r1
 8005b70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2207      	movs	r2, #7
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	b299      	uxth	r1, r3
 8005b7e:	1903      	adds	r3, r0, r4
 8005b80:	19db      	adds	r3, r3, r7
 8005b82:	1902      	adds	r2, r0, r4
 8005b84:	19d2      	adds	r2, r2, r7
 8005b86:	8812      	ldrh	r2, [r2, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1902      	adds	r2, r0, r4
 8005b92:	19d2      	adds	r2, r2, r7
 8005b94:	8812      	ldrh	r2, [r2, #0]
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	e05e      	b.n	8005c58 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b9a:	231a      	movs	r3, #26
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	19db      	adds	r3, r3, r7
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e057      	b.n	8005c58 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ba8:	231b      	movs	r3, #27
 8005baa:	2220      	movs	r2, #32
 8005bac:	189b      	adds	r3, r3, r2
 8005bae:	19db      	adds	r3, r3, r7
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d015      	beq.n	8005be2 <UART_SetConfig+0x442>
 8005bb6:	dc18      	bgt.n	8005bea <UART_SetConfig+0x44a>
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d00d      	beq.n	8005bd8 <UART_SetConfig+0x438>
 8005bbc:	dc15      	bgt.n	8005bea <UART_SetConfig+0x44a>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <UART_SetConfig+0x428>
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d005      	beq.n	8005bd2 <UART_SetConfig+0x432>
 8005bc6:	e010      	b.n	8005bea <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7ff fb68 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd0:	e014      	b.n	8005bfc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd2:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <UART_SetConfig+0x4ec>)
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd6:	e011      	b.n	8005bfc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd8:	f7ff fad4 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be0:	e00c      	b.n	8005bfc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be8:	e008      	b.n	8005bfc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005bee:	231a      	movs	r3, #26
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	189b      	adds	r3, r3, r2
 8005bf4:	19db      	adds	r3, r3, r7
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
        break;
 8005bfa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d02a      	beq.n	8005c58 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c06:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <UART_SetConfig+0x4e8>)
 8005c08:	0052      	lsls	r2, r2, #1
 8005c0a:	5ad3      	ldrh	r3, [r2, r3]
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c10:	f7fa fa94 	bl	800013c <__udivsi3>
 8005c14:	0003      	movs	r3, r0
 8005c16:	001a      	movs	r2, r3
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	18d2      	adds	r2, r2, r3
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0019      	movs	r1, r3
 8005c26:	0010      	movs	r0, r2
 8005c28:	f7fa fa88 	bl	800013c <__udivsi3>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	2b0f      	cmp	r3, #15
 8005c34:	d90a      	bls.n	8005c4c <UART_SetConfig+0x4ac>
 8005c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	025b      	lsls	r3, r3, #9
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d205      	bcs.n	8005c4c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	e005      	b.n	8005c58 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005c4c:	231a      	movs	r3, #26
 8005c4e:	2220      	movs	r2, #32
 8005c50:	189b      	adds	r3, r3, r2
 8005c52:	19db      	adds	r3, r3, r7
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	226a      	movs	r2, #106	; 0x6a
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2268      	movs	r2, #104	; 0x68
 8005c64:	2101      	movs	r1, #1
 8005c66:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2200      	movs	r2, #0
 8005c72:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c74:	231a      	movs	r3, #26
 8005c76:	2220      	movs	r2, #32
 8005c78:	189b      	adds	r3, r3, r2
 8005c7a:	19db      	adds	r3, r3, r7
 8005c7c:	781b      	ldrb	r3, [r3, #0]
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b010      	add	sp, #64	; 0x40
 8005c84:	bdb0      	pop	{r4, r5, r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	0800acd8 	.word	0x0800acd8
 8005c8c:	00f42400 	.word	0x00f42400

08005c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a4a      	ldr	r2, [pc, #296]	; (8005dd4 <UART_AdvFeatureConfig+0x144>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	0019      	movs	r1, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4a43      	ldr	r2, [pc, #268]	; (8005dd8 <UART_AdvFeatureConfig+0x148>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	0019      	movs	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a3b      	ldr	r2, [pc, #236]	; (8005ddc <UART_AdvFeatureConfig+0x14c>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	2208      	movs	r2, #8
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a34      	ldr	r2, [pc, #208]	; (8005de0 <UART_AdvFeatureConfig+0x150>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	2210      	movs	r2, #16
 8005d26:	4013      	ands	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <UART_AdvFeatureConfig+0x154>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	2220      	movs	r2, #32
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4a25      	ldr	r2, [pc, #148]	; (8005de8 <UART_AdvFeatureConfig+0x158>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	0019      	movs	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <UART_AdvFeatureConfig+0x15c>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	0019      	movs	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	035b      	lsls	r3, r3, #13
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d10b      	bne.n	8005daa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <UART_AdvFeatureConfig+0x160>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	4013      	ands	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4a0e      	ldr	r2, [pc, #56]	; (8005df4 <UART_AdvFeatureConfig+0x164>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	fffdffff 	.word	0xfffdffff
 8005dd8:	fffeffff 	.word	0xfffeffff
 8005ddc:	fffbffff 	.word	0xfffbffff
 8005de0:	ffff7fff 	.word	0xffff7fff
 8005de4:	ffffefff 	.word	0xffffefff
 8005de8:	ffffdfff 	.word	0xffffdfff
 8005dec:	ffefffff 	.word	0xffefffff
 8005df0:	ff9fffff 	.word	0xff9fffff
 8005df4:	fff7ffff 	.word	0xfff7ffff

08005df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2290      	movs	r2, #144	; 0x90
 8005e04:	2100      	movs	r1, #0
 8005e06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e08:	f7fd fd40 	bl	800388c <HAL_GetTick>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2208      	movs	r2, #8
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d10c      	bne.n	8005e38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	0391      	lsls	r1, r2, #14
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <UART_CheckIdleState+0x98>)
 8005e28:	9200      	str	r2, [sp, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f000 f832 	bl	8005e94 <UART_WaitOnFlagUntilTimeout>
 8005e30:	1e03      	subs	r3, r0, #0
 8005e32:	d001      	beq.n	8005e38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e026      	b.n	8005e86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d10c      	bne.n	8005e60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	03d1      	lsls	r1, r2, #15
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <UART_CheckIdleState+0x98>)
 8005e50:	9200      	str	r2, [sp, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f000 f81e 	bl	8005e94 <UART_WaitOnFlagUntilTimeout>
 8005e58:	1e03      	subs	r3, r0, #0
 8005e5a:	d001      	beq.n	8005e60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e012      	b.n	8005e86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2288      	movs	r2, #136	; 0x88
 8005e64:	2120      	movs	r1, #32
 8005e66:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	228c      	movs	r2, #140	; 0x8c
 8005e6c:	2120      	movs	r1, #32
 8005e6e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2284      	movs	r2, #132	; 0x84
 8005e80:	2100      	movs	r1, #0
 8005e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	01ffffff 	.word	0x01ffffff

08005e94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b094      	sub	sp, #80	; 0x50
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	1dfb      	adds	r3, r7, #7
 8005ea2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea4:	e0a7      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	d100      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x1a>
 8005eac:	e0a3      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	f7fd fced 	bl	800388c <HAL_GetTick>
 8005eb2:	0002      	movs	r2, r0
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d13f      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ece:	2301      	movs	r3, #1
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			; (mov r8, r8)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	494e      	ldr	r1, [pc, #312]	; (8006020 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40
 8005f00:	2301      	movs	r3, #1
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	f383 8810 	msr	PRIMASK, r3
}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2101      	movs	r1, #1
 8005f18:	438a      	bics	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2288      	movs	r2, #136	; 0x88
 8005f2c:	2120      	movs	r1, #32
 8005f2e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	228c      	movs	r2, #140	; 0x8c
 8005f34:	2120      	movs	r1, #32
 8005f36:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2284      	movs	r2, #132	; 0x84
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e069      	b.n	8006018 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d052      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d148      	bne.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2280      	movs	r2, #128	; 0x80
 8005f6a:	0112      	lsls	r2, r2, #4
 8005f6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f72:	613b      	str	r3, [r7, #16]
  return(result);
 8005f74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f383 8810 	msr	PRIMASK, r3
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4924      	ldr	r1, [pc, #144]	; (8006020 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f383 8810 	msr	PRIMASK, r3
}
 8005f9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fa6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005faa:	2301      	movs	r3, #1
 8005fac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f383 8810 	msr	PRIMASK, r3
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	438a      	bics	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	f383 8810 	msr	PRIMASK, r3
}
 8005fd0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2288      	movs	r2, #136	; 0x88
 8005fd6:	2120      	movs	r1, #32
 8005fd8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	228c      	movs	r2, #140	; 0x8c
 8005fde:	2120      	movs	r1, #32
 8005fe0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2290      	movs	r2, #144	; 0x90
 8005fe6:	2120      	movs	r1, #32
 8005fe8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2284      	movs	r2, #132	; 0x84
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e010      	b.n	8006018 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	425a      	negs	r2, r3
 8006006:	4153      	adcs	r3, r2
 8006008:	b2db      	uxtb	r3, r3
 800600a:	001a      	movs	r2, r3
 800600c:	1dfb      	adds	r3, r7, #7
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d100      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x182>
 8006014:	e747      	b.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b014      	add	sp, #80	; 0x50
 800601e:	bd80      	pop	{r7, pc}
 8006020:	fffffe5f 	.word	0xfffffe5f

08006024 <__errno>:
 8006024:	4b01      	ldr	r3, [pc, #4]	; (800602c <__errno+0x8>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	4770      	bx	lr
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	2000000c 	.word	0x2000000c

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	2600      	movs	r6, #0
 8006034:	4d0c      	ldr	r5, [pc, #48]	; (8006068 <__libc_init_array+0x38>)
 8006036:	4c0d      	ldr	r4, [pc, #52]	; (800606c <__libc_init_array+0x3c>)
 8006038:	1b64      	subs	r4, r4, r5
 800603a:	10a4      	asrs	r4, r4, #2
 800603c:	42a6      	cmp	r6, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	2600      	movs	r6, #0
 8006042:	f004 fd47 	bl	800aad4 <_init>
 8006046:	4d0a      	ldr	r5, [pc, #40]	; (8006070 <__libc_init_array+0x40>)
 8006048:	4c0a      	ldr	r4, [pc, #40]	; (8006074 <__libc_init_array+0x44>)
 800604a:	1b64      	subs	r4, r4, r5
 800604c:	10a4      	asrs	r4, r4, #2
 800604e:	42a6      	cmp	r6, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	00b3      	lsls	r3, r6, #2
 8006056:	58eb      	ldr	r3, [r5, r3]
 8006058:	4798      	blx	r3
 800605a:	3601      	adds	r6, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	00b3      	lsls	r3, r6, #2
 8006060:	58eb      	ldr	r3, [r5, r3]
 8006062:	4798      	blx	r3
 8006064:	3601      	adds	r6, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	0800b19c 	.word	0x0800b19c
 800606c:	0800b19c 	.word	0x0800b19c
 8006070:	0800b19c 	.word	0x0800b19c
 8006074:	0800b1a0 	.word	0x0800b1a0

08006078 <memset>:
 8006078:	0003      	movs	r3, r0
 800607a:	1882      	adds	r2, r0, r2
 800607c:	4293      	cmp	r3, r2
 800607e:	d100      	bne.n	8006082 <memset+0xa>
 8006080:	4770      	bx	lr
 8006082:	7019      	strb	r1, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	e7f9      	b.n	800607c <memset+0x4>

08006088 <__cvt>:
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	001e      	movs	r6, r3
 800608c:	2300      	movs	r3, #0
 800608e:	0014      	movs	r4, r2
 8006090:	b08b      	sub	sp, #44	; 0x2c
 8006092:	429e      	cmp	r6, r3
 8006094:	da04      	bge.n	80060a0 <__cvt+0x18>
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	0609      	lsls	r1, r1, #24
 800609a:	1873      	adds	r3, r6, r1
 800609c:	001e      	movs	r6, r3
 800609e:	232d      	movs	r3, #45	; 0x2d
 80060a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060a4:	7013      	strb	r3, [r2, #0]
 80060a6:	2320      	movs	r3, #32
 80060a8:	2203      	movs	r2, #3
 80060aa:	439f      	bics	r7, r3
 80060ac:	2f46      	cmp	r7, #70	; 0x46
 80060ae:	d007      	beq.n	80060c0 <__cvt+0x38>
 80060b0:	003b      	movs	r3, r7
 80060b2:	3b45      	subs	r3, #69	; 0x45
 80060b4:	4259      	negs	r1, r3
 80060b6:	414b      	adcs	r3, r1
 80060b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80060ba:	3a01      	subs	r2, #1
 80060bc:	18cb      	adds	r3, r1, r3
 80060be:	9310      	str	r3, [sp, #64]	; 0x40
 80060c0:	ab09      	add	r3, sp, #36	; 0x24
 80060c2:	9304      	str	r3, [sp, #16]
 80060c4:	ab08      	add	r3, sp, #32
 80060c6:	9303      	str	r3, [sp, #12]
 80060c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060ca:	9200      	str	r2, [sp, #0]
 80060cc:	9302      	str	r3, [sp, #8]
 80060ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060d0:	0022      	movs	r2, r4
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	0033      	movs	r3, r6
 80060d6:	f001 fdc3 	bl	8007c60 <_dtoa_r>
 80060da:	0005      	movs	r5, r0
 80060dc:	2f47      	cmp	r7, #71	; 0x47
 80060de:	d102      	bne.n	80060e6 <__cvt+0x5e>
 80060e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060e2:	07db      	lsls	r3, r3, #31
 80060e4:	d528      	bpl.n	8006138 <__cvt+0xb0>
 80060e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060e8:	18eb      	adds	r3, r5, r3
 80060ea:	9307      	str	r3, [sp, #28]
 80060ec:	2f46      	cmp	r7, #70	; 0x46
 80060ee:	d114      	bne.n	800611a <__cvt+0x92>
 80060f0:	782b      	ldrb	r3, [r5, #0]
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d10c      	bne.n	8006110 <__cvt+0x88>
 80060f6:	2200      	movs	r2, #0
 80060f8:	2300      	movs	r3, #0
 80060fa:	0020      	movs	r0, r4
 80060fc:	0031      	movs	r1, r6
 80060fe:	f7fa f9a3 	bl	8000448 <__aeabi_dcmpeq>
 8006102:	2800      	cmp	r0, #0
 8006104:	d104      	bne.n	8006110 <__cvt+0x88>
 8006106:	2301      	movs	r3, #1
 8006108:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	18d3      	adds	r3, r2, r3
 8006118:	9307      	str	r3, [sp, #28]
 800611a:	2200      	movs	r2, #0
 800611c:	2300      	movs	r3, #0
 800611e:	0020      	movs	r0, r4
 8006120:	0031      	movs	r1, r6
 8006122:	f7fa f991 	bl	8000448 <__aeabi_dcmpeq>
 8006126:	2800      	cmp	r0, #0
 8006128:	d001      	beq.n	800612e <__cvt+0xa6>
 800612a:	9b07      	ldr	r3, [sp, #28]
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
 800612e:	2230      	movs	r2, #48	; 0x30
 8006130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006132:	9907      	ldr	r1, [sp, #28]
 8006134:	428b      	cmp	r3, r1
 8006136:	d306      	bcc.n	8006146 <__cvt+0xbe>
 8006138:	0028      	movs	r0, r5
 800613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800613e:	1b5b      	subs	r3, r3, r5
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	b00b      	add	sp, #44	; 0x2c
 8006144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	9109      	str	r1, [sp, #36]	; 0x24
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e7f0      	b.n	8006130 <__cvt+0xa8>

0800614e <__exponent>:
 800614e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006150:	1c83      	adds	r3, r0, #2
 8006152:	b087      	sub	sp, #28
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	0005      	movs	r5, r0
 8006158:	000c      	movs	r4, r1
 800615a:	232b      	movs	r3, #43	; 0x2b
 800615c:	7002      	strb	r2, [r0, #0]
 800615e:	2900      	cmp	r1, #0
 8006160:	da01      	bge.n	8006166 <__exponent+0x18>
 8006162:	424c      	negs	r4, r1
 8006164:	3302      	adds	r3, #2
 8006166:	706b      	strb	r3, [r5, #1]
 8006168:	2c09      	cmp	r4, #9
 800616a:	dd31      	ble.n	80061d0 <__exponent+0x82>
 800616c:	270a      	movs	r7, #10
 800616e:	ab04      	add	r3, sp, #16
 8006170:	1dde      	adds	r6, r3, #7
 8006172:	0020      	movs	r0, r4
 8006174:	0039      	movs	r1, r7
 8006176:	9601      	str	r6, [sp, #4]
 8006178:	f7fa f950 	bl	800041c <__aeabi_idivmod>
 800617c:	3e01      	subs	r6, #1
 800617e:	3130      	adds	r1, #48	; 0x30
 8006180:	0020      	movs	r0, r4
 8006182:	7031      	strb	r1, [r6, #0]
 8006184:	0039      	movs	r1, r7
 8006186:	9402      	str	r4, [sp, #8]
 8006188:	f7fa f862 	bl	8000250 <__divsi3>
 800618c:	9b02      	ldr	r3, [sp, #8]
 800618e:	0004      	movs	r4, r0
 8006190:	2b63      	cmp	r3, #99	; 0x63
 8006192:	dcee      	bgt.n	8006172 <__exponent+0x24>
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	3430      	adds	r4, #48	; 0x30
 8006198:	1e9a      	subs	r2, r3, #2
 800619a:	0013      	movs	r3, r2
 800619c:	9903      	ldr	r1, [sp, #12]
 800619e:	7014      	strb	r4, [r2, #0]
 80061a0:	a804      	add	r0, sp, #16
 80061a2:	3007      	adds	r0, #7
 80061a4:	4298      	cmp	r0, r3
 80061a6:	d80e      	bhi.n	80061c6 <__exponent+0x78>
 80061a8:	ab04      	add	r3, sp, #16
 80061aa:	3307      	adds	r3, #7
 80061ac:	2000      	movs	r0, #0
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d804      	bhi.n	80061bc <__exponent+0x6e>
 80061b2:	ab04      	add	r3, sp, #16
 80061b4:	3009      	adds	r0, #9
 80061b6:	18c0      	adds	r0, r0, r3
 80061b8:	9b01      	ldr	r3, [sp, #4]
 80061ba:	1ac0      	subs	r0, r0, r3
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	1818      	adds	r0, r3, r0
 80061c0:	1b40      	subs	r0, r0, r5
 80061c2:	b007      	add	sp, #28
 80061c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c6:	7818      	ldrb	r0, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	7008      	strb	r0, [r1, #0]
 80061cc:	3101      	adds	r1, #1
 80061ce:	e7e7      	b.n	80061a0 <__exponent+0x52>
 80061d0:	2330      	movs	r3, #48	; 0x30
 80061d2:	18e4      	adds	r4, r4, r3
 80061d4:	70ab      	strb	r3, [r5, #2]
 80061d6:	1d28      	adds	r0, r5, #4
 80061d8:	70ec      	strb	r4, [r5, #3]
 80061da:	e7f1      	b.n	80061c0 <__exponent+0x72>

080061dc <_printf_float>:
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	b095      	sub	sp, #84	; 0x54
 80061e0:	000c      	movs	r4, r1
 80061e2:	9209      	str	r2, [sp, #36]	; 0x24
 80061e4:	001e      	movs	r6, r3
 80061e6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80061e8:	0007      	movs	r7, r0
 80061ea:	f002 fec7 	bl	8008f7c <_localeconv_r>
 80061ee:	6803      	ldr	r3, [r0, #0]
 80061f0:	0018      	movs	r0, r3
 80061f2:	930c      	str	r3, [sp, #48]	; 0x30
 80061f4:	f7f9 ff86 	bl	8000104 <strlen>
 80061f8:	2300      	movs	r3, #0
 80061fa:	9312      	str	r3, [sp, #72]	; 0x48
 80061fc:	7e23      	ldrb	r3, [r4, #24]
 80061fe:	2207      	movs	r2, #7
 8006200:	930a      	str	r3, [sp, #40]	; 0x28
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	900e      	str	r0, [sp, #56]	; 0x38
 8006206:	930d      	str	r3, [sp, #52]	; 0x34
 8006208:	990d      	ldr	r1, [sp, #52]	; 0x34
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	05c9      	lsls	r1, r1, #23
 800620e:	d547      	bpl.n	80062a0 <_printf_float+0xc4>
 8006210:	189b      	adds	r3, r3, r2
 8006212:	4393      	bics	r3, r2
 8006214:	001a      	movs	r2, r3
 8006216:	3208      	adds	r2, #8
 8006218:	602a      	str	r2, [r5, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006220:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006222:	2201      	movs	r2, #1
 8006224:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006226:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006228:	930b      	str	r3, [sp, #44]	; 0x2c
 800622a:	006b      	lsls	r3, r5, #1
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006230:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006232:	4ba7      	ldr	r3, [pc, #668]	; (80064d0 <_printf_float+0x2f4>)
 8006234:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006236:	4252      	negs	r2, r2
 8006238:	f7fc fbfa 	bl	8002a30 <__aeabi_dcmpun>
 800623c:	2800      	cmp	r0, #0
 800623e:	d131      	bne.n	80062a4 <_printf_float+0xc8>
 8006240:	2201      	movs	r2, #1
 8006242:	4ba3      	ldr	r3, [pc, #652]	; (80064d0 <_printf_float+0x2f4>)
 8006244:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006246:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006248:	4252      	negs	r2, r2
 800624a:	f7fa f90d 	bl	8000468 <__aeabi_dcmple>
 800624e:	2800      	cmp	r0, #0
 8006250:	d128      	bne.n	80062a4 <_printf_float+0xc8>
 8006252:	2200      	movs	r2, #0
 8006254:	2300      	movs	r3, #0
 8006256:	0029      	movs	r1, r5
 8006258:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800625a:	f7fa f8fb 	bl	8000454 <__aeabi_dcmplt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d003      	beq.n	800626a <_printf_float+0x8e>
 8006262:	0023      	movs	r3, r4
 8006264:	222d      	movs	r2, #45	; 0x2d
 8006266:	3343      	adds	r3, #67	; 0x43
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626c:	4d99      	ldr	r5, [pc, #612]	; (80064d4 <_printf_float+0x2f8>)
 800626e:	2b47      	cmp	r3, #71	; 0x47
 8006270:	d900      	bls.n	8006274 <_printf_float+0x98>
 8006272:	4d99      	ldr	r5, [pc, #612]	; (80064d8 <_printf_float+0x2fc>)
 8006274:	2303      	movs	r3, #3
 8006276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	3301      	adds	r3, #1
 800627c:	439a      	bics	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	6022      	str	r2, [r4, #0]
 8006282:	930b      	str	r3, [sp, #44]	; 0x2c
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	0021      	movs	r1, r4
 8006288:	0038      	movs	r0, r7
 800628a:	9600      	str	r6, [sp, #0]
 800628c:	aa13      	add	r2, sp, #76	; 0x4c
 800628e:	f000 f9e7 	bl	8006660 <_printf_common>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d000      	beq.n	8006298 <_printf_float+0xbc>
 8006296:	e0a2      	b.n	80063de <_printf_float+0x202>
 8006298:	2001      	movs	r0, #1
 800629a:	4240      	negs	r0, r0
 800629c:	b015      	add	sp, #84	; 0x54
 800629e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a0:	3307      	adds	r3, #7
 80062a2:	e7b6      	b.n	8006212 <_printf_float+0x36>
 80062a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062a6:	002b      	movs	r3, r5
 80062a8:	0010      	movs	r0, r2
 80062aa:	0029      	movs	r1, r5
 80062ac:	f7fc fbc0 	bl	8002a30 <__aeabi_dcmpun>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d00b      	beq.n	80062cc <_printf_float+0xf0>
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_float+0xe4>
 80062b8:	0023      	movs	r3, r4
 80062ba:	222d      	movs	r2, #45	; 0x2d
 80062bc:	3343      	adds	r3, #67	; 0x43
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c2:	4d86      	ldr	r5, [pc, #536]	; (80064dc <_printf_float+0x300>)
 80062c4:	2b47      	cmp	r3, #71	; 0x47
 80062c6:	d9d5      	bls.n	8006274 <_printf_float+0x98>
 80062c8:	4d85      	ldr	r5, [pc, #532]	; (80064e0 <_printf_float+0x304>)
 80062ca:	e7d3      	b.n	8006274 <_printf_float+0x98>
 80062cc:	2220      	movs	r2, #32
 80062ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062d0:	6863      	ldr	r3, [r4, #4]
 80062d2:	4391      	bics	r1, r2
 80062d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	d149      	bne.n	800636e <_printf_float+0x192>
 80062da:	3307      	adds	r3, #7
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	2380      	movs	r3, #128	; 0x80
 80062e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	2200      	movs	r2, #0
 80062e8:	9206      	str	r2, [sp, #24]
 80062ea:	aa12      	add	r2, sp, #72	; 0x48
 80062ec:	9205      	str	r2, [sp, #20]
 80062ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f0:	a908      	add	r1, sp, #32
 80062f2:	9204      	str	r2, [sp, #16]
 80062f4:	aa11      	add	r2, sp, #68	; 0x44
 80062f6:	9203      	str	r2, [sp, #12]
 80062f8:	2223      	movs	r2, #35	; 0x23
 80062fa:	6023      	str	r3, [r4, #0]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	1852      	adds	r2, r2, r1
 8006302:	9202      	str	r2, [sp, #8]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	0038      	movs	r0, r7
 8006308:	002b      	movs	r3, r5
 800630a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800630c:	f7ff febc 	bl	8006088 <__cvt>
 8006310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006312:	0005      	movs	r5, r0
 8006314:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006316:	2b47      	cmp	r3, #71	; 0x47
 8006318:	d108      	bne.n	800632c <_printf_float+0x150>
 800631a:	1ccb      	adds	r3, r1, #3
 800631c:	db02      	blt.n	8006324 <_printf_float+0x148>
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	4299      	cmp	r1, r3
 8006322:	dd48      	ble.n	80063b6 <_printf_float+0x1da>
 8006324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006326:	3b02      	subs	r3, #2
 8006328:	b2db      	uxtb	r3, r3
 800632a:	930a      	str	r3, [sp, #40]	; 0x28
 800632c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632e:	2b65      	cmp	r3, #101	; 0x65
 8006330:	d824      	bhi.n	800637c <_printf_float+0x1a0>
 8006332:	0020      	movs	r0, r4
 8006334:	001a      	movs	r2, r3
 8006336:	3901      	subs	r1, #1
 8006338:	3050      	adds	r0, #80	; 0x50
 800633a:	9111      	str	r1, [sp, #68]	; 0x44
 800633c:	f7ff ff07 	bl	800614e <__exponent>
 8006340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006342:	900b      	str	r0, [sp, #44]	; 0x2c
 8006344:	1813      	adds	r3, r2, r0
 8006346:	6123      	str	r3, [r4, #16]
 8006348:	2a01      	cmp	r2, #1
 800634a:	dc02      	bgt.n	8006352 <_printf_float+0x176>
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	07d2      	lsls	r2, r2, #31
 8006350:	d501      	bpl.n	8006356 <_printf_float+0x17a>
 8006352:	3301      	adds	r3, #1
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	2323      	movs	r3, #35	; 0x23
 8006358:	aa08      	add	r2, sp, #32
 800635a:	189b      	adds	r3, r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d100      	bne.n	8006364 <_printf_float+0x188>
 8006362:	e78f      	b.n	8006284 <_printf_float+0xa8>
 8006364:	0023      	movs	r3, r4
 8006366:	222d      	movs	r2, #45	; 0x2d
 8006368:	3343      	adds	r3, #67	; 0x43
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e78a      	b.n	8006284 <_printf_float+0xa8>
 800636e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006370:	2a47      	cmp	r2, #71	; 0x47
 8006372:	d1b4      	bne.n	80062de <_printf_float+0x102>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1b2      	bne.n	80062de <_printf_float+0x102>
 8006378:	3301      	adds	r3, #1
 800637a:	e7af      	b.n	80062dc <_printf_float+0x100>
 800637c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800637e:	2b66      	cmp	r3, #102	; 0x66
 8006380:	d11b      	bne.n	80063ba <_printf_float+0x1de>
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	2900      	cmp	r1, #0
 8006386:	dd0d      	ble.n	80063a4 <_printf_float+0x1c8>
 8006388:	6121      	str	r1, [r4, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <_printf_float+0x1b8>
 800638e:	6822      	ldr	r2, [r4, #0]
 8006390:	07d2      	lsls	r2, r2, #31
 8006392:	d502      	bpl.n	800639a <_printf_float+0x1be>
 8006394:	3301      	adds	r3, #1
 8006396:	1859      	adds	r1, r3, r1
 8006398:	6121      	str	r1, [r4, #16]
 800639a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800639c:	65a3      	str	r3, [r4, #88]	; 0x58
 800639e:	2300      	movs	r3, #0
 80063a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063a2:	e7d8      	b.n	8006356 <_printf_float+0x17a>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <_printf_float+0x1d4>
 80063a8:	2201      	movs	r2, #1
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	4211      	tst	r1, r2
 80063ae:	d000      	beq.n	80063b2 <_printf_float+0x1d6>
 80063b0:	1c9a      	adds	r2, r3, #2
 80063b2:	6122      	str	r2, [r4, #16]
 80063b4:	e7f1      	b.n	800639a <_printf_float+0x1be>
 80063b6:	2367      	movs	r3, #103	; 0x67
 80063b8:	930a      	str	r3, [sp, #40]	; 0x28
 80063ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063be:	4293      	cmp	r3, r2
 80063c0:	db06      	blt.n	80063d0 <_printf_float+0x1f4>
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	07d2      	lsls	r2, r2, #31
 80063c8:	d5e7      	bpl.n	800639a <_printf_float+0x1be>
 80063ca:	3301      	adds	r3, #1
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	e7e4      	b.n	800639a <_printf_float+0x1be>
 80063d0:	2101      	movs	r1, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dc01      	bgt.n	80063da <_printf_float+0x1fe>
 80063d6:	1849      	adds	r1, r1, r1
 80063d8:	1ac9      	subs	r1, r1, r3
 80063da:	1852      	adds	r2, r2, r1
 80063dc:	e7e9      	b.n	80063b2 <_printf_float+0x1d6>
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	0553      	lsls	r3, r2, #21
 80063e2:	d407      	bmi.n	80063f4 <_printf_float+0x218>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	002a      	movs	r2, r5
 80063e8:	0038      	movs	r0, r7
 80063ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ec:	47b0      	blx	r6
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d128      	bne.n	8006444 <_printf_float+0x268>
 80063f2:	e751      	b.n	8006298 <_printf_float+0xbc>
 80063f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f6:	2b65      	cmp	r3, #101	; 0x65
 80063f8:	d800      	bhi.n	80063fc <_printf_float+0x220>
 80063fa:	e0e1      	b.n	80065c0 <_printf_float+0x3e4>
 80063fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80063fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006400:	2200      	movs	r2, #0
 8006402:	2300      	movs	r3, #0
 8006404:	f7fa f820 	bl	8000448 <__aeabi_dcmpeq>
 8006408:	2800      	cmp	r0, #0
 800640a:	d031      	beq.n	8006470 <_printf_float+0x294>
 800640c:	2301      	movs	r3, #1
 800640e:	0038      	movs	r0, r7
 8006410:	4a34      	ldr	r2, [pc, #208]	; (80064e4 <_printf_float+0x308>)
 8006412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006414:	47b0      	blx	r6
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d100      	bne.n	800641c <_printf_float+0x240>
 800641a:	e73d      	b.n	8006298 <_printf_float+0xbc>
 800641c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800641e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006420:	4293      	cmp	r3, r2
 8006422:	db02      	blt.n	800642a <_printf_float+0x24e>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	07db      	lsls	r3, r3, #31
 8006428:	d50c      	bpl.n	8006444 <_printf_float+0x268>
 800642a:	0038      	movs	r0, r7
 800642c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800642e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006432:	47b0      	blx	r6
 8006434:	2500      	movs	r5, #0
 8006436:	1c43      	adds	r3, r0, #1
 8006438:	d100      	bne.n	800643c <_printf_float+0x260>
 800643a:	e72d      	b.n	8006298 <_printf_float+0xbc>
 800643c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800643e:	3b01      	subs	r3, #1
 8006440:	42ab      	cmp	r3, r5
 8006442:	dc0a      	bgt.n	800645a <_printf_float+0x27e>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	079b      	lsls	r3, r3, #30
 8006448:	d500      	bpl.n	800644c <_printf_float+0x270>
 800644a:	e106      	b.n	800665a <_printf_float+0x47e>
 800644c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800644e:	68e0      	ldr	r0, [r4, #12]
 8006450:	4298      	cmp	r0, r3
 8006452:	db00      	blt.n	8006456 <_printf_float+0x27a>
 8006454:	e722      	b.n	800629c <_printf_float+0xc0>
 8006456:	0018      	movs	r0, r3
 8006458:	e720      	b.n	800629c <_printf_float+0xc0>
 800645a:	0022      	movs	r2, r4
 800645c:	2301      	movs	r3, #1
 800645e:	0038      	movs	r0, r7
 8006460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006462:	321a      	adds	r2, #26
 8006464:	47b0      	blx	r6
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d100      	bne.n	800646c <_printf_float+0x290>
 800646a:	e715      	b.n	8006298 <_printf_float+0xbc>
 800646c:	3501      	adds	r5, #1
 800646e:	e7e5      	b.n	800643c <_printf_float+0x260>
 8006470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006472:	2b00      	cmp	r3, #0
 8006474:	dc38      	bgt.n	80064e8 <_printf_float+0x30c>
 8006476:	2301      	movs	r3, #1
 8006478:	0038      	movs	r0, r7
 800647a:	4a1a      	ldr	r2, [pc, #104]	; (80064e4 <_printf_float+0x308>)
 800647c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800647e:	47b0      	blx	r6
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d100      	bne.n	8006486 <_printf_float+0x2aa>
 8006484:	e708      	b.n	8006298 <_printf_float+0xbc>
 8006486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800648a:	4313      	orrs	r3, r2
 800648c:	d102      	bne.n	8006494 <_printf_float+0x2b8>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	07db      	lsls	r3, r3, #31
 8006492:	d5d7      	bpl.n	8006444 <_printf_float+0x268>
 8006494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006496:	0038      	movs	r0, r7
 8006498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800649c:	47b0      	blx	r6
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	d100      	bne.n	80064a4 <_printf_float+0x2c8>
 80064a2:	e6f9      	b.n	8006298 <_printf_float+0xbc>
 80064a4:	2300      	movs	r3, #0
 80064a6:	930a      	str	r3, [sp, #40]	; 0x28
 80064a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ac:	425b      	negs	r3, r3
 80064ae:	4293      	cmp	r3, r2
 80064b0:	dc01      	bgt.n	80064b6 <_printf_float+0x2da>
 80064b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064b4:	e797      	b.n	80063e6 <_printf_float+0x20a>
 80064b6:	0022      	movs	r2, r4
 80064b8:	2301      	movs	r3, #1
 80064ba:	0038      	movs	r0, r7
 80064bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064be:	321a      	adds	r2, #26
 80064c0:	47b0      	blx	r6
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d100      	bne.n	80064c8 <_printf_float+0x2ec>
 80064c6:	e6e7      	b.n	8006298 <_printf_float+0xbc>
 80064c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ca:	3301      	adds	r3, #1
 80064cc:	e7eb      	b.n	80064a6 <_printf_float+0x2ca>
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	7fefffff 	.word	0x7fefffff
 80064d4:	0800acf4 	.word	0x0800acf4
 80064d8:	0800acf8 	.word	0x0800acf8
 80064dc:	0800acfc 	.word	0x0800acfc
 80064e0:	0800ad00 	.word	0x0800ad00
 80064e4:	0800ad04 	.word	0x0800ad04
 80064e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064ec:	920a      	str	r2, [sp, #40]	; 0x28
 80064ee:	429a      	cmp	r2, r3
 80064f0:	dd00      	ble.n	80064f4 <_printf_float+0x318>
 80064f2:	930a      	str	r3, [sp, #40]	; 0x28
 80064f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dc3c      	bgt.n	8006574 <_printf_float+0x398>
 80064fa:	2300      	movs	r3, #0
 80064fc:	930d      	str	r3, [sp, #52]	; 0x34
 80064fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006500:	43db      	mvns	r3, r3
 8006502:	17db      	asrs	r3, r3, #31
 8006504:	930f      	str	r3, [sp, #60]	; 0x3c
 8006506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800650a:	930b      	str	r3, [sp, #44]	; 0x2c
 800650c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650e:	4013      	ands	r3, r2
 8006510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006516:	4293      	cmp	r3, r2
 8006518:	dc34      	bgt.n	8006584 <_printf_float+0x3a8>
 800651a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800651c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800651e:	4293      	cmp	r3, r2
 8006520:	db3d      	blt.n	800659e <_printf_float+0x3c2>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	07db      	lsls	r3, r3, #31
 8006526:	d43a      	bmi.n	800659e <_printf_float+0x3c2>
 8006528:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800652a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800652c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	1a52      	subs	r2, r2, r1
 8006532:	920a      	str	r2, [sp, #40]	; 0x28
 8006534:	429a      	cmp	r2, r3
 8006536:	dd00      	ble.n	800653a <_printf_float+0x35e>
 8006538:	930a      	str	r3, [sp, #40]	; 0x28
 800653a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	dc36      	bgt.n	80065ae <_printf_float+0x3d2>
 8006540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006542:	2500      	movs	r5, #0
 8006544:	43db      	mvns	r3, r3
 8006546:	17db      	asrs	r3, r3, #31
 8006548:	930b      	str	r3, [sp, #44]	; 0x2c
 800654a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800654c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006554:	400a      	ands	r2, r1
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	42ab      	cmp	r3, r5
 800655a:	dc00      	bgt.n	800655e <_printf_float+0x382>
 800655c:	e772      	b.n	8006444 <_printf_float+0x268>
 800655e:	0022      	movs	r2, r4
 8006560:	2301      	movs	r3, #1
 8006562:	0038      	movs	r0, r7
 8006564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006566:	321a      	adds	r2, #26
 8006568:	47b0      	blx	r6
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d100      	bne.n	8006570 <_printf_float+0x394>
 800656e:	e693      	b.n	8006298 <_printf_float+0xbc>
 8006570:	3501      	adds	r5, #1
 8006572:	e7ea      	b.n	800654a <_printf_float+0x36e>
 8006574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006576:	002a      	movs	r2, r5
 8006578:	0038      	movs	r0, r7
 800657a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657c:	47b0      	blx	r6
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d1bb      	bne.n	80064fa <_printf_float+0x31e>
 8006582:	e689      	b.n	8006298 <_printf_float+0xbc>
 8006584:	0022      	movs	r2, r4
 8006586:	2301      	movs	r3, #1
 8006588:	0038      	movs	r0, r7
 800658a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800658c:	321a      	adds	r2, #26
 800658e:	47b0      	blx	r6
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d100      	bne.n	8006596 <_printf_float+0x3ba>
 8006594:	e680      	b.n	8006298 <_printf_float+0xbc>
 8006596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006598:	3301      	adds	r3, #1
 800659a:	930d      	str	r3, [sp, #52]	; 0x34
 800659c:	e7b3      	b.n	8006506 <_printf_float+0x32a>
 800659e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a0:	0038      	movs	r0, r7
 80065a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065a6:	47b0      	blx	r6
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d1bd      	bne.n	8006528 <_printf_float+0x34c>
 80065ac:	e674      	b.n	8006298 <_printf_float+0xbc>
 80065ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b0:	0038      	movs	r0, r7
 80065b2:	18ea      	adds	r2, r5, r3
 80065b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b8:	47b0      	blx	r6
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	d1c0      	bne.n	8006540 <_printf_float+0x364>
 80065be:	e66b      	b.n	8006298 <_printf_float+0xbc>
 80065c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	dc02      	bgt.n	80065cc <_printf_float+0x3f0>
 80065c6:	2301      	movs	r3, #1
 80065c8:	421a      	tst	r2, r3
 80065ca:	d034      	beq.n	8006636 <_printf_float+0x45a>
 80065cc:	2301      	movs	r3, #1
 80065ce:	002a      	movs	r2, r5
 80065d0:	0038      	movs	r0, r7
 80065d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d4:	47b0      	blx	r6
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d100      	bne.n	80065dc <_printf_float+0x400>
 80065da:	e65d      	b.n	8006298 <_printf_float+0xbc>
 80065dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065de:	0038      	movs	r0, r7
 80065e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065e4:	47b0      	blx	r6
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d100      	bne.n	80065ec <_printf_float+0x410>
 80065ea:	e655      	b.n	8006298 <_printf_float+0xbc>
 80065ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80065ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	f7f9 ff28 	bl	8000448 <__aeabi_dcmpeq>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d11a      	bne.n	8006632 <_printf_float+0x456>
 80065fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065fe:	1c6a      	adds	r2, r5, #1
 8006600:	3b01      	subs	r3, #1
 8006602:	0038      	movs	r0, r7
 8006604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006606:	47b0      	blx	r6
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d10e      	bne.n	800662a <_printf_float+0x44e>
 800660c:	e644      	b.n	8006298 <_printf_float+0xbc>
 800660e:	0022      	movs	r2, r4
 8006610:	2301      	movs	r3, #1
 8006612:	0038      	movs	r0, r7
 8006614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006616:	321a      	adds	r2, #26
 8006618:	47b0      	blx	r6
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d100      	bne.n	8006620 <_printf_float+0x444>
 800661e:	e63b      	b.n	8006298 <_printf_float+0xbc>
 8006620:	3501      	adds	r5, #1
 8006622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006624:	3b01      	subs	r3, #1
 8006626:	42ab      	cmp	r3, r5
 8006628:	dcf1      	bgt.n	800660e <_printf_float+0x432>
 800662a:	0022      	movs	r2, r4
 800662c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800662e:	3250      	adds	r2, #80	; 0x50
 8006630:	e6da      	b.n	80063e8 <_printf_float+0x20c>
 8006632:	2500      	movs	r5, #0
 8006634:	e7f5      	b.n	8006622 <_printf_float+0x446>
 8006636:	002a      	movs	r2, r5
 8006638:	e7e3      	b.n	8006602 <_printf_float+0x426>
 800663a:	0022      	movs	r2, r4
 800663c:	2301      	movs	r3, #1
 800663e:	0038      	movs	r0, r7
 8006640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006642:	3219      	adds	r2, #25
 8006644:	47b0      	blx	r6
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	d100      	bne.n	800664c <_printf_float+0x470>
 800664a:	e625      	b.n	8006298 <_printf_float+0xbc>
 800664c:	3501      	adds	r5, #1
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dcf0      	bgt.n	800663a <_printf_float+0x45e>
 8006658:	e6f8      	b.n	800644c <_printf_float+0x270>
 800665a:	2500      	movs	r5, #0
 800665c:	e7f7      	b.n	800664e <_printf_float+0x472>
 800665e:	46c0      	nop			; (mov r8, r8)

08006660 <_printf_common>:
 8006660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006662:	0015      	movs	r5, r2
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	688a      	ldr	r2, [r1, #8]
 8006668:	690b      	ldr	r3, [r1, #16]
 800666a:	000c      	movs	r4, r1
 800666c:	9000      	str	r0, [sp, #0]
 800666e:	4293      	cmp	r3, r2
 8006670:	da00      	bge.n	8006674 <_printf_common+0x14>
 8006672:	0013      	movs	r3, r2
 8006674:	0022      	movs	r2, r4
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	3243      	adds	r2, #67	; 0x43
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	2a00      	cmp	r2, #0
 800667e:	d001      	beq.n	8006684 <_printf_common+0x24>
 8006680:	3301      	adds	r3, #1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	069b      	lsls	r3, r3, #26
 8006688:	d502      	bpl.n	8006690 <_printf_common+0x30>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	3302      	adds	r3, #2
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	2306      	movs	r3, #6
 8006694:	0017      	movs	r7, r2
 8006696:	401f      	ands	r7, r3
 8006698:	421a      	tst	r2, r3
 800669a:	d027      	beq.n	80066ec <_printf_common+0x8c>
 800669c:	0023      	movs	r3, r4
 800669e:	3343      	adds	r3, #67	; 0x43
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	4193      	sbcs	r3, r2
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	0692      	lsls	r2, r2, #26
 80066aa:	d430      	bmi.n	800670e <_printf_common+0xae>
 80066ac:	0022      	movs	r2, r4
 80066ae:	9901      	ldr	r1, [sp, #4]
 80066b0:	9800      	ldr	r0, [sp, #0]
 80066b2:	9e08      	ldr	r6, [sp, #32]
 80066b4:	3243      	adds	r2, #67	; 0x43
 80066b6:	47b0      	blx	r6
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d025      	beq.n	8006708 <_printf_common+0xa8>
 80066bc:	2306      	movs	r3, #6
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	682a      	ldr	r2, [r5, #0]
 80066c2:	68e1      	ldr	r1, [r4, #12]
 80066c4:	2500      	movs	r5, #0
 80066c6:	4003      	ands	r3, r0
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d103      	bne.n	80066d4 <_printf_common+0x74>
 80066cc:	1a8d      	subs	r5, r1, r2
 80066ce:	43eb      	mvns	r3, r5
 80066d0:	17db      	asrs	r3, r3, #31
 80066d2:	401d      	ands	r5, r3
 80066d4:	68a3      	ldr	r3, [r4, #8]
 80066d6:	6922      	ldr	r2, [r4, #16]
 80066d8:	4293      	cmp	r3, r2
 80066da:	dd01      	ble.n	80066e0 <_printf_common+0x80>
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	18ed      	adds	r5, r5, r3
 80066e0:	2700      	movs	r7, #0
 80066e2:	42bd      	cmp	r5, r7
 80066e4:	d120      	bne.n	8006728 <_printf_common+0xc8>
 80066e6:	2000      	movs	r0, #0
 80066e8:	e010      	b.n	800670c <_printf_common+0xac>
 80066ea:	3701      	adds	r7, #1
 80066ec:	68e3      	ldr	r3, [r4, #12]
 80066ee:	682a      	ldr	r2, [r5, #0]
 80066f0:	1a9b      	subs	r3, r3, r2
 80066f2:	42bb      	cmp	r3, r7
 80066f4:	ddd2      	ble.n	800669c <_printf_common+0x3c>
 80066f6:	0022      	movs	r2, r4
 80066f8:	2301      	movs	r3, #1
 80066fa:	9901      	ldr	r1, [sp, #4]
 80066fc:	9800      	ldr	r0, [sp, #0]
 80066fe:	9e08      	ldr	r6, [sp, #32]
 8006700:	3219      	adds	r2, #25
 8006702:	47b0      	blx	r6
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d1f0      	bne.n	80066ea <_printf_common+0x8a>
 8006708:	2001      	movs	r0, #1
 800670a:	4240      	negs	r0, r0
 800670c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800670e:	2030      	movs	r0, #48	; 0x30
 8006710:	18e1      	adds	r1, r4, r3
 8006712:	3143      	adds	r1, #67	; 0x43
 8006714:	7008      	strb	r0, [r1, #0]
 8006716:	0021      	movs	r1, r4
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	3145      	adds	r1, #69	; 0x45
 800671c:	7809      	ldrb	r1, [r1, #0]
 800671e:	18a2      	adds	r2, r4, r2
 8006720:	3243      	adds	r2, #67	; 0x43
 8006722:	3302      	adds	r3, #2
 8006724:	7011      	strb	r1, [r2, #0]
 8006726:	e7c1      	b.n	80066ac <_printf_common+0x4c>
 8006728:	0022      	movs	r2, r4
 800672a:	2301      	movs	r3, #1
 800672c:	9901      	ldr	r1, [sp, #4]
 800672e:	9800      	ldr	r0, [sp, #0]
 8006730:	9e08      	ldr	r6, [sp, #32]
 8006732:	321a      	adds	r2, #26
 8006734:	47b0      	blx	r6
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d0e6      	beq.n	8006708 <_printf_common+0xa8>
 800673a:	3701      	adds	r7, #1
 800673c:	e7d1      	b.n	80066e2 <_printf_common+0x82>
	...

08006740 <_printf_i>:
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	b08b      	sub	sp, #44	; 0x2c
 8006744:	9206      	str	r2, [sp, #24]
 8006746:	000a      	movs	r2, r1
 8006748:	3243      	adds	r2, #67	; 0x43
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	9005      	str	r0, [sp, #20]
 800674e:	9204      	str	r2, [sp, #16]
 8006750:	7e0a      	ldrb	r2, [r1, #24]
 8006752:	000c      	movs	r4, r1
 8006754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006756:	2a78      	cmp	r2, #120	; 0x78
 8006758:	d807      	bhi.n	800676a <_printf_i+0x2a>
 800675a:	2a62      	cmp	r2, #98	; 0x62
 800675c:	d809      	bhi.n	8006772 <_printf_i+0x32>
 800675e:	2a00      	cmp	r2, #0
 8006760:	d100      	bne.n	8006764 <_printf_i+0x24>
 8006762:	e0c1      	b.n	80068e8 <_printf_i+0x1a8>
 8006764:	2a58      	cmp	r2, #88	; 0x58
 8006766:	d100      	bne.n	800676a <_printf_i+0x2a>
 8006768:	e08c      	b.n	8006884 <_printf_i+0x144>
 800676a:	0026      	movs	r6, r4
 800676c:	3642      	adds	r6, #66	; 0x42
 800676e:	7032      	strb	r2, [r6, #0]
 8006770:	e022      	b.n	80067b8 <_printf_i+0x78>
 8006772:	0010      	movs	r0, r2
 8006774:	3863      	subs	r0, #99	; 0x63
 8006776:	2815      	cmp	r0, #21
 8006778:	d8f7      	bhi.n	800676a <_printf_i+0x2a>
 800677a:	f7f9 fcd5 	bl	8000128 <__gnu_thumb1_case_shi>
 800677e:	0016      	.short	0x0016
 8006780:	fff6001f 	.word	0xfff6001f
 8006784:	fff6fff6 	.word	0xfff6fff6
 8006788:	001ffff6 	.word	0x001ffff6
 800678c:	fff6fff6 	.word	0xfff6fff6
 8006790:	fff6fff6 	.word	0xfff6fff6
 8006794:	003600a8 	.word	0x003600a8
 8006798:	fff6009a 	.word	0xfff6009a
 800679c:	00b9fff6 	.word	0x00b9fff6
 80067a0:	0036fff6 	.word	0x0036fff6
 80067a4:	fff6fff6 	.word	0xfff6fff6
 80067a8:	009e      	.short	0x009e
 80067aa:	0026      	movs	r6, r4
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	3642      	adds	r6, #66	; 0x42
 80067b0:	1d11      	adds	r1, r2, #4
 80067b2:	6019      	str	r1, [r3, #0]
 80067b4:	6813      	ldr	r3, [r2, #0]
 80067b6:	7033      	strb	r3, [r6, #0]
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0a7      	b.n	800690c <_printf_i+0x1cc>
 80067bc:	6808      	ldr	r0, [r1, #0]
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	1d0a      	adds	r2, r1, #4
 80067c2:	0605      	lsls	r5, r0, #24
 80067c4:	d50b      	bpl.n	80067de <_printf_i+0x9e>
 80067c6:	680d      	ldr	r5, [r1, #0]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	2d00      	cmp	r5, #0
 80067cc:	da03      	bge.n	80067d6 <_printf_i+0x96>
 80067ce:	232d      	movs	r3, #45	; 0x2d
 80067d0:	9a04      	ldr	r2, [sp, #16]
 80067d2:	426d      	negs	r5, r5
 80067d4:	7013      	strb	r3, [r2, #0]
 80067d6:	4b61      	ldr	r3, [pc, #388]	; (800695c <_printf_i+0x21c>)
 80067d8:	270a      	movs	r7, #10
 80067da:	9303      	str	r3, [sp, #12]
 80067dc:	e01b      	b.n	8006816 <_printf_i+0xd6>
 80067de:	680d      	ldr	r5, [r1, #0]
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	0641      	lsls	r1, r0, #25
 80067e4:	d5f1      	bpl.n	80067ca <_printf_i+0x8a>
 80067e6:	b22d      	sxth	r5, r5
 80067e8:	e7ef      	b.n	80067ca <_printf_i+0x8a>
 80067ea:	680d      	ldr	r5, [r1, #0]
 80067ec:	6819      	ldr	r1, [r3, #0]
 80067ee:	1d08      	adds	r0, r1, #4
 80067f0:	6018      	str	r0, [r3, #0]
 80067f2:	062e      	lsls	r6, r5, #24
 80067f4:	d501      	bpl.n	80067fa <_printf_i+0xba>
 80067f6:	680d      	ldr	r5, [r1, #0]
 80067f8:	e003      	b.n	8006802 <_printf_i+0xc2>
 80067fa:	066d      	lsls	r5, r5, #25
 80067fc:	d5fb      	bpl.n	80067f6 <_printf_i+0xb6>
 80067fe:	680d      	ldr	r5, [r1, #0]
 8006800:	b2ad      	uxth	r5, r5
 8006802:	4b56      	ldr	r3, [pc, #344]	; (800695c <_printf_i+0x21c>)
 8006804:	2708      	movs	r7, #8
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	2a6f      	cmp	r2, #111	; 0x6f
 800680a:	d000      	beq.n	800680e <_printf_i+0xce>
 800680c:	3702      	adds	r7, #2
 800680e:	0023      	movs	r3, r4
 8006810:	2200      	movs	r2, #0
 8006812:	3343      	adds	r3, #67	; 0x43
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	db03      	blt.n	8006826 <_printf_i+0xe6>
 800681e:	2204      	movs	r2, #4
 8006820:	6821      	ldr	r1, [r4, #0]
 8006822:	4391      	bics	r1, r2
 8006824:	6021      	str	r1, [r4, #0]
 8006826:	2d00      	cmp	r5, #0
 8006828:	d102      	bne.n	8006830 <_printf_i+0xf0>
 800682a:	9e04      	ldr	r6, [sp, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <_printf_i+0x10a>
 8006830:	9e04      	ldr	r6, [sp, #16]
 8006832:	0028      	movs	r0, r5
 8006834:	0039      	movs	r1, r7
 8006836:	f7f9 fd07 	bl	8000248 <__aeabi_uidivmod>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	3e01      	subs	r6, #1
 800683e:	5c5b      	ldrb	r3, [r3, r1]
 8006840:	7033      	strb	r3, [r6, #0]
 8006842:	002b      	movs	r3, r5
 8006844:	0005      	movs	r5, r0
 8006846:	429f      	cmp	r7, r3
 8006848:	d9f3      	bls.n	8006832 <_printf_i+0xf2>
 800684a:	2f08      	cmp	r7, #8
 800684c:	d109      	bne.n	8006862 <_printf_i+0x122>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	07db      	lsls	r3, r3, #31
 8006852:	d506      	bpl.n	8006862 <_printf_i+0x122>
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	6922      	ldr	r2, [r4, #16]
 8006858:	4293      	cmp	r3, r2
 800685a:	dc02      	bgt.n	8006862 <_printf_i+0x122>
 800685c:	2330      	movs	r3, #48	; 0x30
 800685e:	3e01      	subs	r6, #1
 8006860:	7033      	strb	r3, [r6, #0]
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	1b9b      	subs	r3, r3, r6
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	9b07      	ldr	r3, [sp, #28]
 800686a:	0021      	movs	r1, r4
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	9805      	ldr	r0, [sp, #20]
 8006870:	9b06      	ldr	r3, [sp, #24]
 8006872:	aa09      	add	r2, sp, #36	; 0x24
 8006874:	f7ff fef4 	bl	8006660 <_printf_common>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d14c      	bne.n	8006916 <_printf_i+0x1d6>
 800687c:	2001      	movs	r0, #1
 800687e:	4240      	negs	r0, r0
 8006880:	b00b      	add	sp, #44	; 0x2c
 8006882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006884:	3145      	adds	r1, #69	; 0x45
 8006886:	700a      	strb	r2, [r1, #0]
 8006888:	4a34      	ldr	r2, [pc, #208]	; (800695c <_printf_i+0x21c>)
 800688a:	9203      	str	r2, [sp, #12]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	6821      	ldr	r1, [r4, #0]
 8006890:	ca20      	ldmia	r2!, {r5}
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	0608      	lsls	r0, r1, #24
 8006896:	d516      	bpl.n	80068c6 <_printf_i+0x186>
 8006898:	07cb      	lsls	r3, r1, #31
 800689a:	d502      	bpl.n	80068a2 <_printf_i+0x162>
 800689c:	2320      	movs	r3, #32
 800689e:	4319      	orrs	r1, r3
 80068a0:	6021      	str	r1, [r4, #0]
 80068a2:	2710      	movs	r7, #16
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	d1b2      	bne.n	800680e <_printf_i+0xce>
 80068a8:	2320      	movs	r3, #32
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	439a      	bics	r2, r3
 80068ae:	6022      	str	r2, [r4, #0]
 80068b0:	e7ad      	b.n	800680e <_printf_i+0xce>
 80068b2:	2220      	movs	r2, #32
 80068b4:	6809      	ldr	r1, [r1, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	0022      	movs	r2, r4
 80068bc:	2178      	movs	r1, #120	; 0x78
 80068be:	3245      	adds	r2, #69	; 0x45
 80068c0:	7011      	strb	r1, [r2, #0]
 80068c2:	4a27      	ldr	r2, [pc, #156]	; (8006960 <_printf_i+0x220>)
 80068c4:	e7e1      	b.n	800688a <_printf_i+0x14a>
 80068c6:	0648      	lsls	r0, r1, #25
 80068c8:	d5e6      	bpl.n	8006898 <_printf_i+0x158>
 80068ca:	b2ad      	uxth	r5, r5
 80068cc:	e7e4      	b.n	8006898 <_printf_i+0x158>
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	680d      	ldr	r5, [r1, #0]
 80068d2:	1d10      	adds	r0, r2, #4
 80068d4:	6949      	ldr	r1, [r1, #20]
 80068d6:	6018      	str	r0, [r3, #0]
 80068d8:	6813      	ldr	r3, [r2, #0]
 80068da:	062e      	lsls	r6, r5, #24
 80068dc:	d501      	bpl.n	80068e2 <_printf_i+0x1a2>
 80068de:	6019      	str	r1, [r3, #0]
 80068e0:	e002      	b.n	80068e8 <_printf_i+0x1a8>
 80068e2:	066d      	lsls	r5, r5, #25
 80068e4:	d5fb      	bpl.n	80068de <_printf_i+0x19e>
 80068e6:	8019      	strh	r1, [r3, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	9e04      	ldr	r6, [sp, #16]
 80068ec:	6123      	str	r3, [r4, #16]
 80068ee:	e7bb      	b.n	8006868 <_printf_i+0x128>
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	1d11      	adds	r1, r2, #4
 80068f4:	6019      	str	r1, [r3, #0]
 80068f6:	6816      	ldr	r6, [r2, #0]
 80068f8:	2100      	movs	r1, #0
 80068fa:	0030      	movs	r0, r6
 80068fc:	6862      	ldr	r2, [r4, #4]
 80068fe:	f002 fb5d 	bl	8008fbc <memchr>
 8006902:	2800      	cmp	r0, #0
 8006904:	d001      	beq.n	800690a <_printf_i+0x1ca>
 8006906:	1b80      	subs	r0, r0, r6
 8006908:	6060      	str	r0, [r4, #4]
 800690a:	6863      	ldr	r3, [r4, #4]
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	2300      	movs	r3, #0
 8006910:	9a04      	ldr	r2, [sp, #16]
 8006912:	7013      	strb	r3, [r2, #0]
 8006914:	e7a8      	b.n	8006868 <_printf_i+0x128>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	0032      	movs	r2, r6
 800691a:	9906      	ldr	r1, [sp, #24]
 800691c:	9805      	ldr	r0, [sp, #20]
 800691e:	9d07      	ldr	r5, [sp, #28]
 8006920:	47a8      	blx	r5
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	d0aa      	beq.n	800687c <_printf_i+0x13c>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	079b      	lsls	r3, r3, #30
 800692a:	d415      	bmi.n	8006958 <_printf_i+0x218>
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	68e0      	ldr	r0, [r4, #12]
 8006930:	4298      	cmp	r0, r3
 8006932:	daa5      	bge.n	8006880 <_printf_i+0x140>
 8006934:	0018      	movs	r0, r3
 8006936:	e7a3      	b.n	8006880 <_printf_i+0x140>
 8006938:	0022      	movs	r2, r4
 800693a:	2301      	movs	r3, #1
 800693c:	9906      	ldr	r1, [sp, #24]
 800693e:	9805      	ldr	r0, [sp, #20]
 8006940:	9e07      	ldr	r6, [sp, #28]
 8006942:	3219      	adds	r2, #25
 8006944:	47b0      	blx	r6
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d098      	beq.n	800687c <_printf_i+0x13c>
 800694a:	3501      	adds	r5, #1
 800694c:	68e3      	ldr	r3, [r4, #12]
 800694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	42ab      	cmp	r3, r5
 8006954:	dcf0      	bgt.n	8006938 <_printf_i+0x1f8>
 8006956:	e7e9      	b.n	800692c <_printf_i+0x1ec>
 8006958:	2500      	movs	r5, #0
 800695a:	e7f7      	b.n	800694c <_printf_i+0x20c>
 800695c:	0800ad06 	.word	0x0800ad06
 8006960:	0800ad17 	.word	0x0800ad17

08006964 <_scanf_float>:
 8006964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006966:	b08b      	sub	sp, #44	; 0x2c
 8006968:	0015      	movs	r5, r2
 800696a:	9001      	str	r0, [sp, #4]
 800696c:	22ae      	movs	r2, #174	; 0xae
 800696e:	2000      	movs	r0, #0
 8006970:	9306      	str	r3, [sp, #24]
 8006972:	688b      	ldr	r3, [r1, #8]
 8006974:	000e      	movs	r6, r1
 8006976:	1e59      	subs	r1, r3, #1
 8006978:	0052      	lsls	r2, r2, #1
 800697a:	9005      	str	r0, [sp, #20]
 800697c:	4291      	cmp	r1, r2
 800697e:	d905      	bls.n	800698c <_scanf_float+0x28>
 8006980:	3b5e      	subs	r3, #94	; 0x5e
 8006982:	3bff      	subs	r3, #255	; 0xff
 8006984:	9305      	str	r3, [sp, #20]
 8006986:	235e      	movs	r3, #94	; 0x5e
 8006988:	33ff      	adds	r3, #255	; 0xff
 800698a:	60b3      	str	r3, [r6, #8]
 800698c:	23f0      	movs	r3, #240	; 0xf0
 800698e:	6832      	ldr	r2, [r6, #0]
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4313      	orrs	r3, r2
 8006994:	6033      	str	r3, [r6, #0]
 8006996:	0033      	movs	r3, r6
 8006998:	2400      	movs	r4, #0
 800699a:	331c      	adds	r3, #28
 800699c:	001f      	movs	r7, r3
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	9402      	str	r4, [sp, #8]
 80069a2:	9408      	str	r4, [sp, #32]
 80069a4:	9407      	str	r4, [sp, #28]
 80069a6:	9400      	str	r4, [sp, #0]
 80069a8:	9404      	str	r4, [sp, #16]
 80069aa:	68b2      	ldr	r2, [r6, #8]
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d00a      	beq.n	80069c6 <_scanf_float+0x62>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b4e      	cmp	r3, #78	; 0x4e
 80069b6:	d844      	bhi.n	8006a42 <_scanf_float+0xde>
 80069b8:	0018      	movs	r0, r3
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d82c      	bhi.n	8006a18 <_scanf_float+0xb4>
 80069be:	382b      	subs	r0, #43	; 0x2b
 80069c0:	b2c1      	uxtb	r1, r0
 80069c2:	290e      	cmp	r1, #14
 80069c4:	d92a      	bls.n	8006a1c <_scanf_float+0xb8>
 80069c6:	9b00      	ldr	r3, [sp, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <_scanf_float+0x70>
 80069cc:	6832      	ldr	r2, [r6, #0]
 80069ce:	4ba4      	ldr	r3, [pc, #656]	; (8006c60 <_scanf_float+0x2fc>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d900      	bls.n	80069de <_scanf_float+0x7a>
 80069dc:	e0f9      	b.n	8006bd2 <_scanf_float+0x26e>
 80069de:	24be      	movs	r4, #190	; 0xbe
 80069e0:	0064      	lsls	r4, r4, #1
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	429f      	cmp	r7, r3
 80069e6:	d900      	bls.n	80069ea <_scanf_float+0x86>
 80069e8:	e0e9      	b.n	8006bbe <_scanf_float+0x25a>
 80069ea:	2301      	movs	r3, #1
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	e185      	b.n	8006cfc <_scanf_float+0x398>
 80069f0:	0018      	movs	r0, r3
 80069f2:	3861      	subs	r0, #97	; 0x61
 80069f4:	280d      	cmp	r0, #13
 80069f6:	d8e6      	bhi.n	80069c6 <_scanf_float+0x62>
 80069f8:	f7f9 fb96 	bl	8000128 <__gnu_thumb1_case_shi>
 80069fc:	ffe50083 	.word	0xffe50083
 8006a00:	ffe5ffe5 	.word	0xffe5ffe5
 8006a04:	00a200b6 	.word	0x00a200b6
 8006a08:	ffe5ffe5 	.word	0xffe5ffe5
 8006a0c:	ffe50089 	.word	0xffe50089
 8006a10:	ffe5ffe5 	.word	0xffe5ffe5
 8006a14:	0065ffe5 	.word	0x0065ffe5
 8006a18:	3841      	subs	r0, #65	; 0x41
 8006a1a:	e7eb      	b.n	80069f4 <_scanf_float+0x90>
 8006a1c:	280e      	cmp	r0, #14
 8006a1e:	d8d2      	bhi.n	80069c6 <_scanf_float+0x62>
 8006a20:	f7f9 fb82 	bl	8000128 <__gnu_thumb1_case_shi>
 8006a24:	ffd1004b 	.word	0xffd1004b
 8006a28:	0098004b 	.word	0x0098004b
 8006a2c:	0020ffd1 	.word	0x0020ffd1
 8006a30:	00400040 	.word	0x00400040
 8006a34:	00400040 	.word	0x00400040
 8006a38:	00400040 	.word	0x00400040
 8006a3c:	00400040 	.word	0x00400040
 8006a40:	0040      	.short	0x0040
 8006a42:	2b6e      	cmp	r3, #110	; 0x6e
 8006a44:	d809      	bhi.n	8006a5a <_scanf_float+0xf6>
 8006a46:	2b60      	cmp	r3, #96	; 0x60
 8006a48:	d8d2      	bhi.n	80069f0 <_scanf_float+0x8c>
 8006a4a:	2b54      	cmp	r3, #84	; 0x54
 8006a4c:	d07d      	beq.n	8006b4a <_scanf_float+0x1e6>
 8006a4e:	2b59      	cmp	r3, #89	; 0x59
 8006a50:	d1b9      	bne.n	80069c6 <_scanf_float+0x62>
 8006a52:	2c07      	cmp	r4, #7
 8006a54:	d1b7      	bne.n	80069c6 <_scanf_float+0x62>
 8006a56:	2408      	movs	r4, #8
 8006a58:	e02c      	b.n	8006ab4 <_scanf_float+0x150>
 8006a5a:	2b74      	cmp	r3, #116	; 0x74
 8006a5c:	d075      	beq.n	8006b4a <_scanf_float+0x1e6>
 8006a5e:	2b79      	cmp	r3, #121	; 0x79
 8006a60:	d0f7      	beq.n	8006a52 <_scanf_float+0xee>
 8006a62:	e7b0      	b.n	80069c6 <_scanf_float+0x62>
 8006a64:	6831      	ldr	r1, [r6, #0]
 8006a66:	05c8      	lsls	r0, r1, #23
 8006a68:	d51c      	bpl.n	8006aa4 <_scanf_float+0x140>
 8006a6a:	2380      	movs	r3, #128	; 0x80
 8006a6c:	4399      	bics	r1, r3
 8006a6e:	9b00      	ldr	r3, [sp, #0]
 8006a70:	6031      	str	r1, [r6, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	9b05      	ldr	r3, [sp, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <_scanf_float+0x120>
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	3201      	adds	r2, #1
 8006a80:	9305      	str	r3, [sp, #20]
 8006a82:	60b2      	str	r2, [r6, #8]
 8006a84:	68b3      	ldr	r3, [r6, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	60b3      	str	r3, [r6, #8]
 8006a8a:	6933      	ldr	r3, [r6, #16]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	6133      	str	r3, [r6, #16]
 8006a90:	686b      	ldr	r3, [r5, #4]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	606b      	str	r3, [r5, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc00      	bgt.n	8006a9c <_scanf_float+0x138>
 8006a9a:	e086      	b.n	8006baa <_scanf_float+0x246>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	e782      	b.n	80069aa <_scanf_float+0x46>
 8006aa4:	9a02      	ldr	r2, [sp, #8]
 8006aa6:	1912      	adds	r2, r2, r4
 8006aa8:	2a00      	cmp	r2, #0
 8006aaa:	d18c      	bne.n	80069c6 <_scanf_float+0x62>
 8006aac:	4a6d      	ldr	r2, [pc, #436]	; (8006c64 <_scanf_float+0x300>)
 8006aae:	6831      	ldr	r1, [r6, #0]
 8006ab0:	400a      	ands	r2, r1
 8006ab2:	6032      	str	r2, [r6, #0]
 8006ab4:	703b      	strb	r3, [r7, #0]
 8006ab6:	3701      	adds	r7, #1
 8006ab8:	e7e4      	b.n	8006a84 <_scanf_float+0x120>
 8006aba:	2180      	movs	r1, #128	; 0x80
 8006abc:	6832      	ldr	r2, [r6, #0]
 8006abe:	420a      	tst	r2, r1
 8006ac0:	d081      	beq.n	80069c6 <_scanf_float+0x62>
 8006ac2:	438a      	bics	r2, r1
 8006ac4:	e7f5      	b.n	8006ab2 <_scanf_float+0x14e>
 8006ac6:	9a02      	ldr	r2, [sp, #8]
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	d10f      	bne.n	8006aec <_scanf_float+0x188>
 8006acc:	9a00      	ldr	r2, [sp, #0]
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	d10f      	bne.n	8006af2 <_scanf_float+0x18e>
 8006ad2:	6832      	ldr	r2, [r6, #0]
 8006ad4:	21e0      	movs	r1, #224	; 0xe0
 8006ad6:	0010      	movs	r0, r2
 8006ad8:	00c9      	lsls	r1, r1, #3
 8006ada:	4008      	ands	r0, r1
 8006adc:	4288      	cmp	r0, r1
 8006ade:	d108      	bne.n	8006af2 <_scanf_float+0x18e>
 8006ae0:	4961      	ldr	r1, [pc, #388]	; (8006c68 <_scanf_float+0x304>)
 8006ae2:	400a      	ands	r2, r1
 8006ae4:	6032      	str	r2, [r6, #0]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	e7e3      	b.n	8006ab4 <_scanf_float+0x150>
 8006aec:	9a02      	ldr	r2, [sp, #8]
 8006aee:	2a02      	cmp	r2, #2
 8006af0:	d059      	beq.n	8006ba6 <_scanf_float+0x242>
 8006af2:	2c01      	cmp	r4, #1
 8006af4:	d002      	beq.n	8006afc <_scanf_float+0x198>
 8006af6:	2c04      	cmp	r4, #4
 8006af8:	d000      	beq.n	8006afc <_scanf_float+0x198>
 8006afa:	e764      	b.n	80069c6 <_scanf_float+0x62>
 8006afc:	3401      	adds	r4, #1
 8006afe:	b2e4      	uxtb	r4, r4
 8006b00:	e7d8      	b.n	8006ab4 <_scanf_float+0x150>
 8006b02:	9a02      	ldr	r2, [sp, #8]
 8006b04:	2a01      	cmp	r2, #1
 8006b06:	d000      	beq.n	8006b0a <_scanf_float+0x1a6>
 8006b08:	e75d      	b.n	80069c6 <_scanf_float+0x62>
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	e7ec      	b.n	8006ae8 <_scanf_float+0x184>
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d110      	bne.n	8006b34 <_scanf_float+0x1d0>
 8006b12:	9a00      	ldr	r2, [sp, #0]
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	d000      	beq.n	8006b1a <_scanf_float+0x1b6>
 8006b18:	e758      	b.n	80069cc <_scanf_float+0x68>
 8006b1a:	6832      	ldr	r2, [r6, #0]
 8006b1c:	21e0      	movs	r1, #224	; 0xe0
 8006b1e:	0010      	movs	r0, r2
 8006b20:	00c9      	lsls	r1, r1, #3
 8006b22:	4008      	ands	r0, r1
 8006b24:	4288      	cmp	r0, r1
 8006b26:	d000      	beq.n	8006b2a <_scanf_float+0x1c6>
 8006b28:	e754      	b.n	80069d4 <_scanf_float+0x70>
 8006b2a:	494f      	ldr	r1, [pc, #316]	; (8006c68 <_scanf_float+0x304>)
 8006b2c:	3401      	adds	r4, #1
 8006b2e:	400a      	ands	r2, r1
 8006b30:	6032      	str	r2, [r6, #0]
 8006b32:	e7bf      	b.n	8006ab4 <_scanf_float+0x150>
 8006b34:	21fd      	movs	r1, #253	; 0xfd
 8006b36:	1ee2      	subs	r2, r4, #3
 8006b38:	420a      	tst	r2, r1
 8006b3a:	d000      	beq.n	8006b3e <_scanf_float+0x1da>
 8006b3c:	e743      	b.n	80069c6 <_scanf_float+0x62>
 8006b3e:	e7dd      	b.n	8006afc <_scanf_float+0x198>
 8006b40:	2c02      	cmp	r4, #2
 8006b42:	d000      	beq.n	8006b46 <_scanf_float+0x1e2>
 8006b44:	e73f      	b.n	80069c6 <_scanf_float+0x62>
 8006b46:	2403      	movs	r4, #3
 8006b48:	e7b4      	b.n	8006ab4 <_scanf_float+0x150>
 8006b4a:	2c06      	cmp	r4, #6
 8006b4c:	d000      	beq.n	8006b50 <_scanf_float+0x1ec>
 8006b4e:	e73a      	b.n	80069c6 <_scanf_float+0x62>
 8006b50:	2407      	movs	r4, #7
 8006b52:	e7af      	b.n	8006ab4 <_scanf_float+0x150>
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	0591      	lsls	r1, r2, #22
 8006b58:	d400      	bmi.n	8006b5c <_scanf_float+0x1f8>
 8006b5a:	e734      	b.n	80069c6 <_scanf_float+0x62>
 8006b5c:	4943      	ldr	r1, [pc, #268]	; (8006c6c <_scanf_float+0x308>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	6032      	str	r2, [r6, #0]
 8006b62:	9a00      	ldr	r2, [sp, #0]
 8006b64:	9204      	str	r2, [sp, #16]
 8006b66:	e7a5      	b.n	8006ab4 <_scanf_float+0x150>
 8006b68:	21a0      	movs	r1, #160	; 0xa0
 8006b6a:	2080      	movs	r0, #128	; 0x80
 8006b6c:	6832      	ldr	r2, [r6, #0]
 8006b6e:	00c9      	lsls	r1, r1, #3
 8006b70:	4011      	ands	r1, r2
 8006b72:	00c0      	lsls	r0, r0, #3
 8006b74:	4281      	cmp	r1, r0
 8006b76:	d006      	beq.n	8006b86 <_scanf_float+0x222>
 8006b78:	4202      	tst	r2, r0
 8006b7a:	d100      	bne.n	8006b7e <_scanf_float+0x21a>
 8006b7c:	e723      	b.n	80069c6 <_scanf_float+0x62>
 8006b7e:	9900      	ldr	r1, [sp, #0]
 8006b80:	2900      	cmp	r1, #0
 8006b82:	d100      	bne.n	8006b86 <_scanf_float+0x222>
 8006b84:	e726      	b.n	80069d4 <_scanf_float+0x70>
 8006b86:	0591      	lsls	r1, r2, #22
 8006b88:	d404      	bmi.n	8006b94 <_scanf_float+0x230>
 8006b8a:	9900      	ldr	r1, [sp, #0]
 8006b8c:	9804      	ldr	r0, [sp, #16]
 8006b8e:	9708      	str	r7, [sp, #32]
 8006b90:	1a09      	subs	r1, r1, r0
 8006b92:	9107      	str	r1, [sp, #28]
 8006b94:	4934      	ldr	r1, [pc, #208]	; (8006c68 <_scanf_float+0x304>)
 8006b96:	400a      	ands	r2, r1
 8006b98:	21c0      	movs	r1, #192	; 0xc0
 8006b9a:	0049      	lsls	r1, r1, #1
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	9200      	str	r2, [sp, #0]
 8006ba4:	e786      	b.n	8006ab4 <_scanf_float+0x150>
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	e79e      	b.n	8006ae8 <_scanf_float+0x184>
 8006baa:	23c0      	movs	r3, #192	; 0xc0
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	0029      	movs	r1, r5
 8006bb0:	58f3      	ldr	r3, [r6, r3]
 8006bb2:	9801      	ldr	r0, [sp, #4]
 8006bb4:	4798      	blx	r3
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d100      	bne.n	8006bbc <_scanf_float+0x258>
 8006bba:	e6f6      	b.n	80069aa <_scanf_float+0x46>
 8006bbc:	e703      	b.n	80069c6 <_scanf_float+0x62>
 8006bbe:	3f01      	subs	r7, #1
 8006bc0:	5933      	ldr	r3, [r6, r4]
 8006bc2:	002a      	movs	r2, r5
 8006bc4:	7839      	ldrb	r1, [r7, #0]
 8006bc6:	9801      	ldr	r0, [sp, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	6933      	ldr	r3, [r6, #16]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	6133      	str	r3, [r6, #16]
 8006bd0:	e707      	b.n	80069e2 <_scanf_float+0x7e>
 8006bd2:	1e63      	subs	r3, r4, #1
 8006bd4:	2b06      	cmp	r3, #6
 8006bd6:	d80e      	bhi.n	8006bf6 <_scanf_float+0x292>
 8006bd8:	9702      	str	r7, [sp, #8]
 8006bda:	2c02      	cmp	r4, #2
 8006bdc:	d920      	bls.n	8006c20 <_scanf_float+0x2bc>
 8006bde:	1be3      	subs	r3, r4, r7
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	9a05      	ldr	r2, [sp, #20]
 8006be8:	189b      	adds	r3, r3, r2
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d827      	bhi.n	8006c40 <_scanf_float+0x2dc>
 8006bf0:	3c03      	subs	r4, #3
 8006bf2:	b2e4      	uxtb	r4, r4
 8006bf4:	1b3f      	subs	r7, r7, r4
 8006bf6:	6833      	ldr	r3, [r6, #0]
 8006bf8:	05da      	lsls	r2, r3, #23
 8006bfa:	d554      	bpl.n	8006ca6 <_scanf_float+0x342>
 8006bfc:	055b      	lsls	r3, r3, #21
 8006bfe:	d537      	bpl.n	8006c70 <_scanf_float+0x30c>
 8006c00:	24be      	movs	r4, #190	; 0xbe
 8006c02:	0064      	lsls	r4, r4, #1
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	429f      	cmp	r7, r3
 8006c08:	d800      	bhi.n	8006c0c <_scanf_float+0x2a8>
 8006c0a:	e6ee      	b.n	80069ea <_scanf_float+0x86>
 8006c0c:	3f01      	subs	r7, #1
 8006c0e:	5933      	ldr	r3, [r6, r4]
 8006c10:	002a      	movs	r2, r5
 8006c12:	7839      	ldrb	r1, [r7, #0]
 8006c14:	9801      	ldr	r0, [sp, #4]
 8006c16:	4798      	blx	r3
 8006c18:	6933      	ldr	r3, [r6, #16]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	6133      	str	r3, [r6, #16]
 8006c1e:	e7f1      	b.n	8006c04 <_scanf_float+0x2a0>
 8006c20:	24be      	movs	r4, #190	; 0xbe
 8006c22:	0064      	lsls	r4, r4, #1
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	429f      	cmp	r7, r3
 8006c28:	d800      	bhi.n	8006c2c <_scanf_float+0x2c8>
 8006c2a:	e6de      	b.n	80069ea <_scanf_float+0x86>
 8006c2c:	3f01      	subs	r7, #1
 8006c2e:	5933      	ldr	r3, [r6, r4]
 8006c30:	002a      	movs	r2, r5
 8006c32:	7839      	ldrb	r1, [r7, #0]
 8006c34:	9801      	ldr	r0, [sp, #4]
 8006c36:	4798      	blx	r3
 8006c38:	6933      	ldr	r3, [r6, #16]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6133      	str	r3, [r6, #16]
 8006c3e:	e7f1      	b.n	8006c24 <_scanf_float+0x2c0>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	002a      	movs	r2, r5
 8006c44:	3b01      	subs	r3, #1
 8006c46:	7819      	ldrb	r1, [r3, #0]
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	23be      	movs	r3, #190	; 0xbe
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	58f3      	ldr	r3, [r6, r3]
 8006c50:	9801      	ldr	r0, [sp, #4]
 8006c52:	9309      	str	r3, [sp, #36]	; 0x24
 8006c54:	4798      	blx	r3
 8006c56:	6933      	ldr	r3, [r6, #16]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	6133      	str	r3, [r6, #16]
 8006c5c:	e7c2      	b.n	8006be4 <_scanf_float+0x280>
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	fffffeff 	.word	0xfffffeff
 8006c64:	fffffe7f 	.word	0xfffffe7f
 8006c68:	fffff87f 	.word	0xfffff87f
 8006c6c:	fffffd7f 	.word	0xfffffd7f
 8006c70:	6933      	ldr	r3, [r6, #16]
 8006c72:	1e7c      	subs	r4, r7, #1
 8006c74:	7821      	ldrb	r1, [r4, #0]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	6133      	str	r3, [r6, #16]
 8006c7a:	2965      	cmp	r1, #101	; 0x65
 8006c7c:	d00c      	beq.n	8006c98 <_scanf_float+0x334>
 8006c7e:	2945      	cmp	r1, #69	; 0x45
 8006c80:	d00a      	beq.n	8006c98 <_scanf_float+0x334>
 8006c82:	23be      	movs	r3, #190	; 0xbe
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	58f3      	ldr	r3, [r6, r3]
 8006c88:	002a      	movs	r2, r5
 8006c8a:	9801      	ldr	r0, [sp, #4]
 8006c8c:	4798      	blx	r3
 8006c8e:	6933      	ldr	r3, [r6, #16]
 8006c90:	1ebc      	subs	r4, r7, #2
 8006c92:	3b01      	subs	r3, #1
 8006c94:	7821      	ldrb	r1, [r4, #0]
 8006c96:	6133      	str	r3, [r6, #16]
 8006c98:	23be      	movs	r3, #190	; 0xbe
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	002a      	movs	r2, r5
 8006c9e:	58f3      	ldr	r3, [r6, r3]
 8006ca0:	9801      	ldr	r0, [sp, #4]
 8006ca2:	4798      	blx	r3
 8006ca4:	0027      	movs	r7, r4
 8006ca6:	6832      	ldr	r2, [r6, #0]
 8006ca8:	2310      	movs	r3, #16
 8006caa:	0011      	movs	r1, r2
 8006cac:	4019      	ands	r1, r3
 8006cae:	9102      	str	r1, [sp, #8]
 8006cb0:	421a      	tst	r2, r3
 8006cb2:	d158      	bne.n	8006d66 <_scanf_float+0x402>
 8006cb4:	23c0      	movs	r3, #192	; 0xc0
 8006cb6:	7039      	strb	r1, [r7, #0]
 8006cb8:	6832      	ldr	r2, [r6, #0]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	2280      	movs	r2, #128	; 0x80
 8006cc0:	00d2      	lsls	r2, r2, #3
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d11d      	bne.n	8006d02 <_scanf_float+0x39e>
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	9a00      	ldr	r2, [sp, #0]
 8006cca:	9900      	ldr	r1, [sp, #0]
 8006ccc:	1a9a      	subs	r2, r3, r2
 8006cce:	428b      	cmp	r3, r1
 8006cd0:	d124      	bne.n	8006d1c <_scanf_float+0x3b8>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	9903      	ldr	r1, [sp, #12]
 8006cd6:	9801      	ldr	r0, [sp, #4]
 8006cd8:	f000 fe9c 	bl	8007a14 <_strtod_r>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	000d      	movs	r5, r1
 8006ce0:	6831      	ldr	r1, [r6, #0]
 8006ce2:	0004      	movs	r4, r0
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	078a      	lsls	r2, r1, #30
 8006ce8:	d525      	bpl.n	8006d36 <_scanf_float+0x3d2>
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	9906      	ldr	r1, [sp, #24]
 8006cee:	600a      	str	r2, [r1, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	601c      	str	r4, [r3, #0]
 8006cf4:	605d      	str	r5, [r3, #4]
 8006cf6:	68f3      	ldr	r3, [r6, #12]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	60f3      	str	r3, [r6, #12]
 8006cfc:	9802      	ldr	r0, [sp, #8]
 8006cfe:	b00b      	add	sp, #44	; 0x2c
 8006d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d02:	9b07      	ldr	r3, [sp, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0e4      	beq.n	8006cd2 <_scanf_float+0x36e>
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	9a02      	ldr	r2, [sp, #8]
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	9801      	ldr	r0, [sp, #4]
 8006d10:	230a      	movs	r3, #10
 8006d12:	f000 ff15 	bl	8007b40 <_strtol_r>
 8006d16:	9b07      	ldr	r3, [sp, #28]
 8006d18:	9f08      	ldr	r7, [sp, #32]
 8006d1a:	1ac2      	subs	r2, r0, r3
 8006d1c:	0033      	movs	r3, r6
 8006d1e:	3370      	adds	r3, #112	; 0x70
 8006d20:	33ff      	adds	r3, #255	; 0xff
 8006d22:	429f      	cmp	r7, r3
 8006d24:	d302      	bcc.n	8006d2c <_scanf_float+0x3c8>
 8006d26:	0037      	movs	r7, r6
 8006d28:	376f      	adds	r7, #111	; 0x6f
 8006d2a:	37ff      	adds	r7, #255	; 0xff
 8006d2c:	0038      	movs	r0, r7
 8006d2e:	490f      	ldr	r1, [pc, #60]	; (8006d6c <_scanf_float+0x408>)
 8006d30:	f000 f824 	bl	8006d7c <siprintf>
 8006d34:	e7cd      	b.n	8006cd2 <_scanf_float+0x36e>
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	0749      	lsls	r1, r1, #29
 8006d3a:	d4d7      	bmi.n	8006cec <_scanf_float+0x388>
 8006d3c:	9906      	ldr	r1, [sp, #24]
 8006d3e:	0020      	movs	r0, r4
 8006d40:	600a      	str	r2, [r1, #0]
 8006d42:	681f      	ldr	r7, [r3, #0]
 8006d44:	0022      	movs	r2, r4
 8006d46:	002b      	movs	r3, r5
 8006d48:	0029      	movs	r1, r5
 8006d4a:	f7fb fe71 	bl	8002a30 <__aeabi_dcmpun>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d004      	beq.n	8006d5c <_scanf_float+0x3f8>
 8006d52:	4807      	ldr	r0, [pc, #28]	; (8006d70 <_scanf_float+0x40c>)
 8006d54:	f000 f80e 	bl	8006d74 <nanf>
 8006d58:	6038      	str	r0, [r7, #0]
 8006d5a:	e7cc      	b.n	8006cf6 <_scanf_float+0x392>
 8006d5c:	0020      	movs	r0, r4
 8006d5e:	0029      	movs	r1, r5
 8006d60:	f7fb ff58 	bl	8002c14 <__aeabi_d2f>
 8006d64:	e7f8      	b.n	8006d58 <_scanf_float+0x3f4>
 8006d66:	2300      	movs	r3, #0
 8006d68:	e640      	b.n	80069ec <_scanf_float+0x88>
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	0800ad28 	.word	0x0800ad28
 8006d70:	0800b130 	.word	0x0800b130

08006d74 <nanf>:
 8006d74:	4800      	ldr	r0, [pc, #0]	; (8006d78 <nanf+0x4>)
 8006d76:	4770      	bx	lr
 8006d78:	7fc00000 	.word	0x7fc00000

08006d7c <siprintf>:
 8006d7c:	b40e      	push	{r1, r2, r3}
 8006d7e:	b500      	push	{lr}
 8006d80:	490b      	ldr	r1, [pc, #44]	; (8006db0 <siprintf+0x34>)
 8006d82:	b09c      	sub	sp, #112	; 0x70
 8006d84:	ab1d      	add	r3, sp, #116	; 0x74
 8006d86:	9002      	str	r0, [sp, #8]
 8006d88:	9006      	str	r0, [sp, #24]
 8006d8a:	9107      	str	r1, [sp, #28]
 8006d8c:	9104      	str	r1, [sp, #16]
 8006d8e:	4809      	ldr	r0, [pc, #36]	; (8006db4 <siprintf+0x38>)
 8006d90:	4909      	ldr	r1, [pc, #36]	; (8006db8 <siprintf+0x3c>)
 8006d92:	cb04      	ldmia	r3!, {r2}
 8006d94:	9105      	str	r1, [sp, #20]
 8006d96:	6800      	ldr	r0, [r0, #0]
 8006d98:	a902      	add	r1, sp, #8
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	f002 ff5c 	bl	8009c58 <_svfiprintf_r>
 8006da0:	2300      	movs	r3, #0
 8006da2:	9a02      	ldr	r2, [sp, #8]
 8006da4:	7013      	strb	r3, [r2, #0]
 8006da6:	b01c      	add	sp, #112	; 0x70
 8006da8:	bc08      	pop	{r3}
 8006daa:	b003      	add	sp, #12
 8006dac:	4718      	bx	r3
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	7fffffff 	.word	0x7fffffff
 8006db4:	2000000c 	.word	0x2000000c
 8006db8:	ffff0208 	.word	0xffff0208

08006dbc <sulp>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	0016      	movs	r6, r2
 8006dc0:	000d      	movs	r5, r1
 8006dc2:	f002 fc93 	bl	80096ec <__ulp>
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	d00d      	beq.n	8006de6 <sulp+0x2a>
 8006dca:	236b      	movs	r3, #107	; 0x6b
 8006dcc:	006a      	lsls	r2, r5, #1
 8006dce:	0d52      	lsrs	r2, r2, #21
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	dd07      	ble.n	8006de6 <sulp+0x2a>
 8006dd6:	2400      	movs	r4, #0
 8006dd8:	4a03      	ldr	r2, [pc, #12]	; (8006de8 <sulp+0x2c>)
 8006dda:	051b      	lsls	r3, r3, #20
 8006ddc:	189d      	adds	r5, r3, r2
 8006dde:	002b      	movs	r3, r5
 8006de0:	0022      	movs	r2, r4
 8006de2:	f7fb f827 	bl	8001e34 <__aeabi_dmul>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	3ff00000 	.word	0x3ff00000

08006dec <_strtod_l>:
 8006dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dee:	001d      	movs	r5, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	b0a5      	sub	sp, #148	; 0x94
 8006df4:	9320      	str	r3, [sp, #128]	; 0x80
 8006df6:	4bac      	ldr	r3, [pc, #688]	; (80070a8 <_strtod_l+0x2bc>)
 8006df8:	9005      	str	r0, [sp, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	9108      	str	r1, [sp, #32]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	9307      	str	r3, [sp, #28]
 8006e02:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e04:	f7f9 f97e 	bl	8000104 <strlen>
 8006e08:	2600      	movs	r6, #0
 8006e0a:	0004      	movs	r4, r0
 8006e0c:	2700      	movs	r7, #0
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006e14:	7813      	ldrb	r3, [r2, #0]
 8006e16:	2b2b      	cmp	r3, #43	; 0x2b
 8006e18:	d058      	beq.n	8006ecc <_strtod_l+0xe0>
 8006e1a:	d844      	bhi.n	8006ea6 <_strtod_l+0xba>
 8006e1c:	2b0d      	cmp	r3, #13
 8006e1e:	d83d      	bhi.n	8006e9c <_strtod_l+0xb0>
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d83d      	bhi.n	8006ea0 <_strtod_l+0xb4>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d047      	beq.n	8006eb8 <_strtod_l+0xcc>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e30:	920a      	str	r2, [sp, #40]	; 0x28
 8006e32:	9306      	str	r3, [sp, #24]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b30      	cmp	r3, #48	; 0x30
 8006e38:	d000      	beq.n	8006e3c <_strtod_l+0x50>
 8006e3a:	e07f      	b.n	8006f3c <_strtod_l+0x150>
 8006e3c:	9b06      	ldr	r3, [sp, #24]
 8006e3e:	3220      	adds	r2, #32
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	4393      	bics	r3, r2
 8006e44:	2b58      	cmp	r3, #88	; 0x58
 8006e46:	d000      	beq.n	8006e4a <_strtod_l+0x5e>
 8006e48:	e06e      	b.n	8006f28 <_strtod_l+0x13c>
 8006e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e4c:	9502      	str	r5, [sp, #8]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	ab20      	add	r3, sp, #128	; 0x80
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	4a95      	ldr	r2, [pc, #596]	; (80070ac <_strtod_l+0x2c0>)
 8006e56:	ab21      	add	r3, sp, #132	; 0x84
 8006e58:	9805      	ldr	r0, [sp, #20]
 8006e5a:	a91f      	add	r1, sp, #124	; 0x7c
 8006e5c:	f001 fd84 	bl	8008968 <__gethex>
 8006e60:	2307      	movs	r3, #7
 8006e62:	0005      	movs	r5, r0
 8006e64:	0004      	movs	r4, r0
 8006e66:	401d      	ands	r5, r3
 8006e68:	4218      	tst	r0, r3
 8006e6a:	d006      	beq.n	8006e7a <_strtod_l+0x8e>
 8006e6c:	2d06      	cmp	r5, #6
 8006e6e:	d12f      	bne.n	8006ed0 <_strtod_l+0xe4>
 8006e70:	9b06      	ldr	r3, [sp, #24]
 8006e72:	3301      	adds	r3, #1
 8006e74:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e76:	2300      	movs	r3, #0
 8006e78:	930e      	str	r3, [sp, #56]	; 0x38
 8006e7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <_strtod_l+0x9a>
 8006e80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01c      	beq.n	8006ec6 <_strtod_l+0xda>
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	0032      	movs	r2, r6
 8006e90:	061b      	lsls	r3, r3, #24
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	0010      	movs	r0, r2
 8006e96:	0019      	movs	r1, r3
 8006e98:	b025      	add	sp, #148	; 0x94
 8006e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d1c3      	bne.n	8006e28 <_strtod_l+0x3c>
 8006ea0:	3201      	adds	r2, #1
 8006ea2:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ea4:	e7b5      	b.n	8006e12 <_strtod_l+0x26>
 8006ea6:	2b2d      	cmp	r3, #45	; 0x2d
 8006ea8:	d1be      	bne.n	8006e28 <_strtod_l+0x3c>
 8006eaa:	3b2c      	subs	r3, #44	; 0x2c
 8006eac:	930e      	str	r3, [sp, #56]	; 0x38
 8006eae:	1c53      	adds	r3, r2, #1
 8006eb0:	931f      	str	r3, [sp, #124]	; 0x7c
 8006eb2:	7853      	ldrb	r3, [r2, #1]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1b9      	bne.n	8006e2c <_strtod_l+0x40>
 8006eb8:	9b08      	ldr	r3, [sp, #32]
 8006eba:	931f      	str	r3, [sp, #124]	; 0x7c
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1dc      	bne.n	8006e80 <_strtod_l+0x94>
 8006ec6:	0032      	movs	r2, r6
 8006ec8:	003b      	movs	r3, r7
 8006eca:	e7e3      	b.n	8006e94 <_strtod_l+0xa8>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e7ed      	b.n	8006eac <_strtod_l+0xc0>
 8006ed0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ed2:	2a00      	cmp	r2, #0
 8006ed4:	d007      	beq.n	8006ee6 <_strtod_l+0xfa>
 8006ed6:	2135      	movs	r1, #53	; 0x35
 8006ed8:	a822      	add	r0, sp, #136	; 0x88
 8006eda:	f002 fd08 	bl	80098ee <__copybits>
 8006ede:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006ee0:	9805      	ldr	r0, [sp, #20]
 8006ee2:	f002 f8c3 	bl	800906c <_Bfree>
 8006ee6:	1e68      	subs	r0, r5, #1
 8006ee8:	2804      	cmp	r0, #4
 8006eea:	d806      	bhi.n	8006efa <_strtod_l+0x10e>
 8006eec:	f7f9 f912 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006ef0:	1816030b 	.word	0x1816030b
 8006ef4:	0b          	.byte	0x0b
 8006ef5:	00          	.byte	0x00
 8006ef6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006ef8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8006efa:	0723      	lsls	r3, r4, #28
 8006efc:	d5bd      	bpl.n	8006e7a <_strtod_l+0x8e>
 8006efe:	2380      	movs	r3, #128	; 0x80
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	431f      	orrs	r7, r3
 8006f04:	e7b9      	b.n	8006e7a <_strtod_l+0x8e>
 8006f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f08:	4a69      	ldr	r2, [pc, #420]	; (80070b0 <_strtod_l+0x2c4>)
 8006f0a:	496a      	ldr	r1, [pc, #424]	; (80070b4 <_strtod_l+0x2c8>)
 8006f0c:	401a      	ands	r2, r3
 8006f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f10:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8006f12:	185b      	adds	r3, r3, r1
 8006f14:	051b      	lsls	r3, r3, #20
 8006f16:	431a      	orrs	r2, r3
 8006f18:	0017      	movs	r7, r2
 8006f1a:	e7ee      	b.n	8006efa <_strtod_l+0x10e>
 8006f1c:	4f66      	ldr	r7, [pc, #408]	; (80070b8 <_strtod_l+0x2cc>)
 8006f1e:	e7ec      	b.n	8006efa <_strtod_l+0x10e>
 8006f20:	2601      	movs	r6, #1
 8006f22:	4f66      	ldr	r7, [pc, #408]	; (80070bc <_strtod_l+0x2d0>)
 8006f24:	4276      	negs	r6, r6
 8006f26:	e7e8      	b.n	8006efa <_strtod_l+0x10e>
 8006f28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	d0f9      	beq.n	8006f28 <_strtod_l+0x13c>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0a0      	beq.n	8006e7a <_strtod_l+0x8e>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f3e:	220a      	movs	r2, #10
 8006f40:	9310      	str	r3, [sp, #64]	; 0x40
 8006f42:	2300      	movs	r3, #0
 8006f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f48:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006f4c:	7805      	ldrb	r5, [r0, #0]
 8006f4e:	002b      	movs	r3, r5
 8006f50:	3b30      	subs	r3, #48	; 0x30
 8006f52:	b2d9      	uxtb	r1, r3
 8006f54:	2909      	cmp	r1, #9
 8006f56:	d927      	bls.n	8006fa8 <_strtod_l+0x1bc>
 8006f58:	0022      	movs	r2, r4
 8006f5a:	9907      	ldr	r1, [sp, #28]
 8006f5c:	f002 ff94 	bl	8009e88 <strncmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d033      	beq.n	8006fcc <_strtod_l+0x1e0>
 8006f64:	2000      	movs	r0, #0
 8006f66:	002b      	movs	r3, r5
 8006f68:	4684      	mov	ip, r0
 8006f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6c:	900c      	str	r0, [sp, #48]	; 0x30
 8006f6e:	9206      	str	r2, [sp, #24]
 8006f70:	2220      	movs	r2, #32
 8006f72:	0019      	movs	r1, r3
 8006f74:	4391      	bics	r1, r2
 8006f76:	000a      	movs	r2, r1
 8006f78:	2100      	movs	r1, #0
 8006f7a:	9107      	str	r1, [sp, #28]
 8006f7c:	2a45      	cmp	r2, #69	; 0x45
 8006f7e:	d000      	beq.n	8006f82 <_strtod_l+0x196>
 8006f80:	e0c5      	b.n	800710e <_strtod_l+0x322>
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f86:	4303      	orrs	r3, r0
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	428b      	cmp	r3, r1
 8006f8c:	d094      	beq.n	8006eb8 <_strtod_l+0xcc>
 8006f8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f90:	9308      	str	r3, [sp, #32]
 8006f92:	3301      	adds	r3, #1
 8006f94:	931f      	str	r3, [sp, #124]	; 0x7c
 8006f96:	9b08      	ldr	r3, [sp, #32]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8006f9c:	d076      	beq.n	800708c <_strtod_l+0x2a0>
 8006f9e:	000c      	movs	r4, r1
 8006fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8006fa2:	d179      	bne.n	8007098 <_strtod_l+0x2ac>
 8006fa4:	2401      	movs	r4, #1
 8006fa6:	e072      	b.n	800708e <_strtod_l+0x2a2>
 8006fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006faa:	2908      	cmp	r1, #8
 8006fac:	dc09      	bgt.n	8006fc2 <_strtod_l+0x1d6>
 8006fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fb0:	4351      	muls	r1, r2
 8006fb2:	185b      	adds	r3, r3, r1
 8006fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb8:	3001      	adds	r0, #1
 8006fba:	3301      	adds	r3, #1
 8006fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fbe:	901f      	str	r0, [sp, #124]	; 0x7c
 8006fc0:	e7c3      	b.n	8006f4a <_strtod_l+0x15e>
 8006fc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fc4:	4351      	muls	r1, r2
 8006fc6:	185b      	adds	r3, r3, r1
 8006fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fca:	e7f4      	b.n	8006fb6 <_strtod_l+0x1ca>
 8006fcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd0:	191c      	adds	r4, r3, r4
 8006fd2:	941f      	str	r4, [sp, #124]	; 0x7c
 8006fd4:	7823      	ldrb	r3, [r4, #0]
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d039      	beq.n	800704e <_strtod_l+0x262>
 8006fda:	900c      	str	r0, [sp, #48]	; 0x30
 8006fdc:	9206      	str	r2, [sp, #24]
 8006fde:	001a      	movs	r2, r3
 8006fe0:	3a30      	subs	r2, #48	; 0x30
 8006fe2:	2a09      	cmp	r2, #9
 8006fe4:	d912      	bls.n	800700c <_strtod_l+0x220>
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4694      	mov	ip, r2
 8006fea:	e7c1      	b.n	8006f70 <_strtod_l+0x184>
 8006fec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fee:	3001      	adds	r0, #1
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	921f      	str	r2, [sp, #124]	; 0x7c
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b30      	cmp	r3, #48	; 0x30
 8006ff8:	d0f8      	beq.n	8006fec <_strtod_l+0x200>
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	3a31      	subs	r2, #49	; 0x31
 8006ffe:	2a08      	cmp	r2, #8
 8007000:	d83f      	bhi.n	8007082 <_strtod_l+0x296>
 8007002:	900c      	str	r0, [sp, #48]	; 0x30
 8007004:	2000      	movs	r0, #0
 8007006:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007008:	9006      	str	r0, [sp, #24]
 800700a:	9210      	str	r2, [sp, #64]	; 0x40
 800700c:	001a      	movs	r2, r3
 800700e:	1c41      	adds	r1, r0, #1
 8007010:	3a30      	subs	r2, #48	; 0x30
 8007012:	2b30      	cmp	r3, #48	; 0x30
 8007014:	d015      	beq.n	8007042 <_strtod_l+0x256>
 8007016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007018:	185b      	adds	r3, r3, r1
 800701a:	210a      	movs	r1, #10
 800701c:	930c      	str	r3, [sp, #48]	; 0x30
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	18c4      	adds	r4, r0, r3
 8007022:	42a3      	cmp	r3, r4
 8007024:	d115      	bne.n	8007052 <_strtod_l+0x266>
 8007026:	9906      	ldr	r1, [sp, #24]
 8007028:	9b06      	ldr	r3, [sp, #24]
 800702a:	3101      	adds	r1, #1
 800702c:	1809      	adds	r1, r1, r0
 800702e:	181b      	adds	r3, r3, r0
 8007030:	9106      	str	r1, [sp, #24]
 8007032:	2b08      	cmp	r3, #8
 8007034:	dc1b      	bgt.n	800706e <_strtod_l+0x282>
 8007036:	230a      	movs	r3, #10
 8007038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800703a:	434b      	muls	r3, r1
 800703c:	2100      	movs	r1, #0
 800703e:	18d3      	adds	r3, r2, r3
 8007040:	930b      	str	r3, [sp, #44]	; 0x2c
 8007042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007044:	0008      	movs	r0, r1
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	921f      	str	r2, [sp, #124]	; 0x7c
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	e7c7      	b.n	8006fde <_strtod_l+0x1f2>
 800704e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007050:	e7d1      	b.n	8006ff6 <_strtod_l+0x20a>
 8007052:	2b08      	cmp	r3, #8
 8007054:	dc04      	bgt.n	8007060 <_strtod_l+0x274>
 8007056:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007058:	434d      	muls	r5, r1
 800705a:	950b      	str	r5, [sp, #44]	; 0x2c
 800705c:	3301      	adds	r3, #1
 800705e:	e7e0      	b.n	8007022 <_strtod_l+0x236>
 8007060:	1c5d      	adds	r5, r3, #1
 8007062:	2d10      	cmp	r5, #16
 8007064:	dcfa      	bgt.n	800705c <_strtod_l+0x270>
 8007066:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007068:	434d      	muls	r5, r1
 800706a:	950f      	str	r5, [sp, #60]	; 0x3c
 800706c:	e7f6      	b.n	800705c <_strtod_l+0x270>
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	2100      	movs	r1, #0
 8007072:	2b10      	cmp	r3, #16
 8007074:	dce5      	bgt.n	8007042 <_strtod_l+0x256>
 8007076:	230a      	movs	r3, #10
 8007078:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800707a:	4343      	muls	r3, r0
 800707c:	18d3      	adds	r3, r2, r3
 800707e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007080:	e7df      	b.n	8007042 <_strtod_l+0x256>
 8007082:	2200      	movs	r2, #0
 8007084:	920c      	str	r2, [sp, #48]	; 0x30
 8007086:	9206      	str	r2, [sp, #24]
 8007088:	3201      	adds	r2, #1
 800708a:	e7ad      	b.n	8006fe8 <_strtod_l+0x1fc>
 800708c:	2400      	movs	r4, #0
 800708e:	9b08      	ldr	r3, [sp, #32]
 8007090:	3302      	adds	r3, #2
 8007092:	931f      	str	r3, [sp, #124]	; 0x7c
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	789b      	ldrb	r3, [r3, #2]
 8007098:	001a      	movs	r2, r3
 800709a:	3a30      	subs	r2, #48	; 0x30
 800709c:	2a09      	cmp	r2, #9
 800709e:	d913      	bls.n	80070c8 <_strtod_l+0x2dc>
 80070a0:	9a08      	ldr	r2, [sp, #32]
 80070a2:	921f      	str	r2, [sp, #124]	; 0x7c
 80070a4:	2200      	movs	r2, #0
 80070a6:	e031      	b.n	800710c <_strtod_l+0x320>
 80070a8:	0800af78 	.word	0x0800af78
 80070ac:	0800ad30 	.word	0x0800ad30
 80070b0:	ffefffff 	.word	0xffefffff
 80070b4:	00000433 	.word	0x00000433
 80070b8:	7ff00000 	.word	0x7ff00000
 80070bc:	7fffffff 	.word	0x7fffffff
 80070c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	921f      	str	r2, [sp, #124]	; 0x7c
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b30      	cmp	r3, #48	; 0x30
 80070ca:	d0f9      	beq.n	80070c0 <_strtod_l+0x2d4>
 80070cc:	2200      	movs	r2, #0
 80070ce:	9207      	str	r2, [sp, #28]
 80070d0:	001a      	movs	r2, r3
 80070d2:	3a31      	subs	r2, #49	; 0x31
 80070d4:	2a08      	cmp	r2, #8
 80070d6:	d81a      	bhi.n	800710e <_strtod_l+0x322>
 80070d8:	3b30      	subs	r3, #48	; 0x30
 80070da:	001a      	movs	r2, r3
 80070dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070de:	9307      	str	r3, [sp, #28]
 80070e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	911f      	str	r1, [sp, #124]	; 0x7c
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	001d      	movs	r5, r3
 80070ea:	3d30      	subs	r5, #48	; 0x30
 80070ec:	2d09      	cmp	r5, #9
 80070ee:	d939      	bls.n	8007164 <_strtod_l+0x378>
 80070f0:	9d07      	ldr	r5, [sp, #28]
 80070f2:	1b49      	subs	r1, r1, r5
 80070f4:	4db0      	ldr	r5, [pc, #704]	; (80073b8 <_strtod_l+0x5cc>)
 80070f6:	9507      	str	r5, [sp, #28]
 80070f8:	2908      	cmp	r1, #8
 80070fa:	dc03      	bgt.n	8007104 <_strtod_l+0x318>
 80070fc:	9207      	str	r2, [sp, #28]
 80070fe:	42aa      	cmp	r2, r5
 8007100:	dd00      	ble.n	8007104 <_strtod_l+0x318>
 8007102:	9507      	str	r5, [sp, #28]
 8007104:	2c00      	cmp	r4, #0
 8007106:	d002      	beq.n	800710e <_strtod_l+0x322>
 8007108:	9a07      	ldr	r2, [sp, #28]
 800710a:	4252      	negs	r2, r2
 800710c:	9207      	str	r2, [sp, #28]
 800710e:	9a06      	ldr	r2, [sp, #24]
 8007110:	2a00      	cmp	r2, #0
 8007112:	d14b      	bne.n	80071ac <_strtod_l+0x3c0>
 8007114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007116:	4310      	orrs	r0, r2
 8007118:	d000      	beq.n	800711c <_strtod_l+0x330>
 800711a:	e6ae      	b.n	8006e7a <_strtod_l+0x8e>
 800711c:	4662      	mov	r2, ip
 800711e:	2a00      	cmp	r2, #0
 8007120:	d000      	beq.n	8007124 <_strtod_l+0x338>
 8007122:	e6c9      	b.n	8006eb8 <_strtod_l+0xcc>
 8007124:	2b69      	cmp	r3, #105	; 0x69
 8007126:	d025      	beq.n	8007174 <_strtod_l+0x388>
 8007128:	dc21      	bgt.n	800716e <_strtod_l+0x382>
 800712a:	2b49      	cmp	r3, #73	; 0x49
 800712c:	d022      	beq.n	8007174 <_strtod_l+0x388>
 800712e:	2b4e      	cmp	r3, #78	; 0x4e
 8007130:	d000      	beq.n	8007134 <_strtod_l+0x348>
 8007132:	e6c1      	b.n	8006eb8 <_strtod_l+0xcc>
 8007134:	49a1      	ldr	r1, [pc, #644]	; (80073bc <_strtod_l+0x5d0>)
 8007136:	a81f      	add	r0, sp, #124	; 0x7c
 8007138:	f001 fe64 	bl	8008e04 <__match>
 800713c:	2800      	cmp	r0, #0
 800713e:	d100      	bne.n	8007142 <_strtod_l+0x356>
 8007140:	e6ba      	b.n	8006eb8 <_strtod_l+0xcc>
 8007142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b28      	cmp	r3, #40	; 0x28
 8007148:	d12a      	bne.n	80071a0 <_strtod_l+0x3b4>
 800714a:	499d      	ldr	r1, [pc, #628]	; (80073c0 <_strtod_l+0x5d4>)
 800714c:	aa22      	add	r2, sp, #136	; 0x88
 800714e:	a81f      	add	r0, sp, #124	; 0x7c
 8007150:	f001 fe6c 	bl	8008e2c <__hexnan>
 8007154:	2805      	cmp	r0, #5
 8007156:	d123      	bne.n	80071a0 <_strtod_l+0x3b4>
 8007158:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800715a:	4a9a      	ldr	r2, [pc, #616]	; (80073c4 <_strtod_l+0x5d8>)
 800715c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800715e:	431a      	orrs	r2, r3
 8007160:	0017      	movs	r7, r2
 8007162:	e68a      	b.n	8006e7a <_strtod_l+0x8e>
 8007164:	210a      	movs	r1, #10
 8007166:	434a      	muls	r2, r1
 8007168:	18d2      	adds	r2, r2, r3
 800716a:	3a30      	subs	r2, #48	; 0x30
 800716c:	e7b8      	b.n	80070e0 <_strtod_l+0x2f4>
 800716e:	2b6e      	cmp	r3, #110	; 0x6e
 8007170:	d0e0      	beq.n	8007134 <_strtod_l+0x348>
 8007172:	e6a1      	b.n	8006eb8 <_strtod_l+0xcc>
 8007174:	4994      	ldr	r1, [pc, #592]	; (80073c8 <_strtod_l+0x5dc>)
 8007176:	a81f      	add	r0, sp, #124	; 0x7c
 8007178:	f001 fe44 	bl	8008e04 <__match>
 800717c:	2800      	cmp	r0, #0
 800717e:	d100      	bne.n	8007182 <_strtod_l+0x396>
 8007180:	e69a      	b.n	8006eb8 <_strtod_l+0xcc>
 8007182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007184:	4991      	ldr	r1, [pc, #580]	; (80073cc <_strtod_l+0x5e0>)
 8007186:	3b01      	subs	r3, #1
 8007188:	a81f      	add	r0, sp, #124	; 0x7c
 800718a:	931f      	str	r3, [sp, #124]	; 0x7c
 800718c:	f001 fe3a 	bl	8008e04 <__match>
 8007190:	2800      	cmp	r0, #0
 8007192:	d102      	bne.n	800719a <_strtod_l+0x3ae>
 8007194:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007196:	3301      	adds	r3, #1
 8007198:	931f      	str	r3, [sp, #124]	; 0x7c
 800719a:	2600      	movs	r6, #0
 800719c:	4f89      	ldr	r7, [pc, #548]	; (80073c4 <_strtod_l+0x5d8>)
 800719e:	e66c      	b.n	8006e7a <_strtod_l+0x8e>
 80071a0:	488b      	ldr	r0, [pc, #556]	; (80073d0 <_strtod_l+0x5e4>)
 80071a2:	f002 fe59 	bl	8009e58 <nan>
 80071a6:	0006      	movs	r6, r0
 80071a8:	000f      	movs	r7, r1
 80071aa:	e666      	b.n	8006e7a <_strtod_l+0x8e>
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	930a      	str	r3, [sp, #40]	; 0x28
 80071b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <_strtod_l+0x3d2>
 80071ba:	9b06      	ldr	r3, [sp, #24]
 80071bc:	9309      	str	r3, [sp, #36]	; 0x24
 80071be:	9c06      	ldr	r4, [sp, #24]
 80071c0:	2c10      	cmp	r4, #16
 80071c2:	dd00      	ble.n	80071c6 <_strtod_l+0x3da>
 80071c4:	2410      	movs	r4, #16
 80071c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071c8:	f7fb fcb6 	bl	8002b38 <__aeabi_ui2d>
 80071cc:	9b06      	ldr	r3, [sp, #24]
 80071ce:	0006      	movs	r6, r0
 80071d0:	000f      	movs	r7, r1
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	dd15      	ble.n	8007202 <_strtod_l+0x416>
 80071d6:	0022      	movs	r2, r4
 80071d8:	4b7e      	ldr	r3, [pc, #504]	; (80073d4 <_strtod_l+0x5e8>)
 80071da:	3a09      	subs	r2, #9
 80071dc:	00d2      	lsls	r2, r2, #3
 80071de:	189b      	adds	r3, r3, r2
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f7fa fe26 	bl	8001e34 <__aeabi_dmul>
 80071e8:	0006      	movs	r6, r0
 80071ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80071ec:	000f      	movs	r7, r1
 80071ee:	f7fb fca3 	bl	8002b38 <__aeabi_ui2d>
 80071f2:	0002      	movs	r2, r0
 80071f4:	000b      	movs	r3, r1
 80071f6:	0030      	movs	r0, r6
 80071f8:	0039      	movs	r1, r7
 80071fa:	f7f9 fedd 	bl	8000fb8 <__aeabi_dadd>
 80071fe:	0006      	movs	r6, r0
 8007200:	000f      	movs	r7, r1
 8007202:	9b06      	ldr	r3, [sp, #24]
 8007204:	2b0f      	cmp	r3, #15
 8007206:	dc39      	bgt.n	800727c <_strtod_l+0x490>
 8007208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d100      	bne.n	8007210 <_strtod_l+0x424>
 800720e:	e634      	b.n	8006e7a <_strtod_l+0x8e>
 8007210:	dd24      	ble.n	800725c <_strtod_l+0x470>
 8007212:	2b16      	cmp	r3, #22
 8007214:	dc09      	bgt.n	800722a <_strtod_l+0x43e>
 8007216:	496f      	ldr	r1, [pc, #444]	; (80073d4 <_strtod_l+0x5e8>)
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	18c9      	adds	r1, r1, r3
 800721c:	0032      	movs	r2, r6
 800721e:	6808      	ldr	r0, [r1, #0]
 8007220:	6849      	ldr	r1, [r1, #4]
 8007222:	003b      	movs	r3, r7
 8007224:	f7fa fe06 	bl	8001e34 <__aeabi_dmul>
 8007228:	e7bd      	b.n	80071a6 <_strtod_l+0x3ba>
 800722a:	2325      	movs	r3, #37	; 0x25
 800722c:	9a06      	ldr	r2, [sp, #24]
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007232:	4293      	cmp	r3, r2
 8007234:	db22      	blt.n	800727c <_strtod_l+0x490>
 8007236:	240f      	movs	r4, #15
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	4d66      	ldr	r5, [pc, #408]	; (80073d4 <_strtod_l+0x5e8>)
 800723c:	1ae4      	subs	r4, r4, r3
 800723e:	00e1      	lsls	r1, r4, #3
 8007240:	1869      	adds	r1, r5, r1
 8007242:	0032      	movs	r2, r6
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	6849      	ldr	r1, [r1, #4]
 8007248:	003b      	movs	r3, r7
 800724a:	f7fa fdf3 	bl	8001e34 <__aeabi_dmul>
 800724e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007250:	1b1c      	subs	r4, r3, r4
 8007252:	00e4      	lsls	r4, r4, #3
 8007254:	192c      	adds	r4, r5, r4
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	6863      	ldr	r3, [r4, #4]
 800725a:	e7e3      	b.n	8007224 <_strtod_l+0x438>
 800725c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725e:	3316      	adds	r3, #22
 8007260:	db0c      	blt.n	800727c <_strtod_l+0x490>
 8007262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007264:	9a07      	ldr	r2, [sp, #28]
 8007266:	0030      	movs	r0, r6
 8007268:	1a9a      	subs	r2, r3, r2
 800726a:	4b5a      	ldr	r3, [pc, #360]	; (80073d4 <_strtod_l+0x5e8>)
 800726c:	00d2      	lsls	r2, r2, #3
 800726e:	189b      	adds	r3, r3, r2
 8007270:	0039      	movs	r1, r7
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f7fa f9db 	bl	8001630 <__aeabi_ddiv>
 800727a:	e794      	b.n	80071a6 <_strtod_l+0x3ba>
 800727c:	9b06      	ldr	r3, [sp, #24]
 800727e:	1b1c      	subs	r4, r3, r4
 8007280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007282:	18e4      	adds	r4, r4, r3
 8007284:	2c00      	cmp	r4, #0
 8007286:	dd72      	ble.n	800736e <_strtod_l+0x582>
 8007288:	230f      	movs	r3, #15
 800728a:	0021      	movs	r1, r4
 800728c:	4019      	ands	r1, r3
 800728e:	421c      	tst	r4, r3
 8007290:	d00a      	beq.n	80072a8 <_strtod_l+0x4bc>
 8007292:	00cb      	lsls	r3, r1, #3
 8007294:	494f      	ldr	r1, [pc, #316]	; (80073d4 <_strtod_l+0x5e8>)
 8007296:	0032      	movs	r2, r6
 8007298:	18c9      	adds	r1, r1, r3
 800729a:	6808      	ldr	r0, [r1, #0]
 800729c:	6849      	ldr	r1, [r1, #4]
 800729e:	003b      	movs	r3, r7
 80072a0:	f7fa fdc8 	bl	8001e34 <__aeabi_dmul>
 80072a4:	0006      	movs	r6, r0
 80072a6:	000f      	movs	r7, r1
 80072a8:	230f      	movs	r3, #15
 80072aa:	439c      	bics	r4, r3
 80072ac:	d04a      	beq.n	8007344 <_strtod_l+0x558>
 80072ae:	3326      	adds	r3, #38	; 0x26
 80072b0:	33ff      	adds	r3, #255	; 0xff
 80072b2:	429c      	cmp	r4, r3
 80072b4:	dd22      	ble.n	80072fc <_strtod_l+0x510>
 80072b6:	2300      	movs	r3, #0
 80072b8:	9306      	str	r3, [sp, #24]
 80072ba:	9307      	str	r3, [sp, #28]
 80072bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80072be:	9309      	str	r3, [sp, #36]	; 0x24
 80072c0:	2322      	movs	r3, #34	; 0x22
 80072c2:	2600      	movs	r6, #0
 80072c4:	9a05      	ldr	r2, [sp, #20]
 80072c6:	4f3f      	ldr	r7, [pc, #252]	; (80073c4 <_strtod_l+0x5d8>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072cc:	42b3      	cmp	r3, r6
 80072ce:	d100      	bne.n	80072d2 <_strtod_l+0x4e6>
 80072d0:	e5d3      	b.n	8006e7a <_strtod_l+0x8e>
 80072d2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	f001 fec9 	bl	800906c <_Bfree>
 80072da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072dc:	9805      	ldr	r0, [sp, #20]
 80072de:	f001 fec5 	bl	800906c <_Bfree>
 80072e2:	9907      	ldr	r1, [sp, #28]
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	f001 fec1 	bl	800906c <_Bfree>
 80072ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072ec:	9805      	ldr	r0, [sp, #20]
 80072ee:	f001 febd 	bl	800906c <_Bfree>
 80072f2:	9906      	ldr	r1, [sp, #24]
 80072f4:	9805      	ldr	r0, [sp, #20]
 80072f6:	f001 feb9 	bl	800906c <_Bfree>
 80072fa:	e5be      	b.n	8006e7a <_strtod_l+0x8e>
 80072fc:	2300      	movs	r3, #0
 80072fe:	0030      	movs	r0, r6
 8007300:	0039      	movs	r1, r7
 8007302:	4d35      	ldr	r5, [pc, #212]	; (80073d8 <_strtod_l+0x5ec>)
 8007304:	1124      	asrs	r4, r4, #4
 8007306:	9308      	str	r3, [sp, #32]
 8007308:	2c01      	cmp	r4, #1
 800730a:	dc1e      	bgt.n	800734a <_strtod_l+0x55e>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <_strtod_l+0x528>
 8007310:	0006      	movs	r6, r0
 8007312:	000f      	movs	r7, r1
 8007314:	4b31      	ldr	r3, [pc, #196]	; (80073dc <_strtod_l+0x5f0>)
 8007316:	0032      	movs	r2, r6
 8007318:	18ff      	adds	r7, r7, r3
 800731a:	9b08      	ldr	r3, [sp, #32]
 800731c:	00dd      	lsls	r5, r3, #3
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <_strtod_l+0x5ec>)
 8007320:	195d      	adds	r5, r3, r5
 8007322:	6828      	ldr	r0, [r5, #0]
 8007324:	6869      	ldr	r1, [r5, #4]
 8007326:	003b      	movs	r3, r7
 8007328:	f7fa fd84 	bl	8001e34 <__aeabi_dmul>
 800732c:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <_strtod_l+0x5d8>)
 800732e:	4a2c      	ldr	r2, [pc, #176]	; (80073e0 <_strtod_l+0x5f4>)
 8007330:	0006      	movs	r6, r0
 8007332:	400b      	ands	r3, r1
 8007334:	4293      	cmp	r3, r2
 8007336:	d8be      	bhi.n	80072b6 <_strtod_l+0x4ca>
 8007338:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <_strtod_l+0x5f8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d913      	bls.n	8007366 <_strtod_l+0x57a>
 800733e:	2601      	movs	r6, #1
 8007340:	4f29      	ldr	r7, [pc, #164]	; (80073e8 <_strtod_l+0x5fc>)
 8007342:	4276      	negs	r6, r6
 8007344:	2300      	movs	r3, #0
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	e087      	b.n	800745a <_strtod_l+0x66e>
 800734a:	2201      	movs	r2, #1
 800734c:	4214      	tst	r4, r2
 800734e:	d004      	beq.n	800735a <_strtod_l+0x56e>
 8007350:	682a      	ldr	r2, [r5, #0]
 8007352:	686b      	ldr	r3, [r5, #4]
 8007354:	f7fa fd6e 	bl	8001e34 <__aeabi_dmul>
 8007358:	2301      	movs	r3, #1
 800735a:	9a08      	ldr	r2, [sp, #32]
 800735c:	1064      	asrs	r4, r4, #1
 800735e:	3201      	adds	r2, #1
 8007360:	9208      	str	r2, [sp, #32]
 8007362:	3508      	adds	r5, #8
 8007364:	e7d0      	b.n	8007308 <_strtod_l+0x51c>
 8007366:	23d4      	movs	r3, #212	; 0xd4
 8007368:	049b      	lsls	r3, r3, #18
 800736a:	18cf      	adds	r7, r1, r3
 800736c:	e7ea      	b.n	8007344 <_strtod_l+0x558>
 800736e:	2c00      	cmp	r4, #0
 8007370:	d0e8      	beq.n	8007344 <_strtod_l+0x558>
 8007372:	4264      	negs	r4, r4
 8007374:	220f      	movs	r2, #15
 8007376:	0023      	movs	r3, r4
 8007378:	4013      	ands	r3, r2
 800737a:	4214      	tst	r4, r2
 800737c:	d00a      	beq.n	8007394 <_strtod_l+0x5a8>
 800737e:	00da      	lsls	r2, r3, #3
 8007380:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <_strtod_l+0x5e8>)
 8007382:	0030      	movs	r0, r6
 8007384:	189b      	adds	r3, r3, r2
 8007386:	0039      	movs	r1, r7
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f7fa f950 	bl	8001630 <__aeabi_ddiv>
 8007390:	0006      	movs	r6, r0
 8007392:	000f      	movs	r7, r1
 8007394:	1124      	asrs	r4, r4, #4
 8007396:	d0d5      	beq.n	8007344 <_strtod_l+0x558>
 8007398:	2c1f      	cmp	r4, #31
 800739a:	dd27      	ble.n	80073ec <_strtod_l+0x600>
 800739c:	2300      	movs	r3, #0
 800739e:	9306      	str	r3, [sp, #24]
 80073a0:	9307      	str	r3, [sp, #28]
 80073a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	2322      	movs	r3, #34	; 0x22
 80073a8:	9a05      	ldr	r2, [sp, #20]
 80073aa:	2600      	movs	r6, #0
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b0:	2700      	movs	r7, #0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d18d      	bne.n	80072d2 <_strtod_l+0x4e6>
 80073b6:	e560      	b.n	8006e7a <_strtod_l+0x8e>
 80073b8:	00004e1f 	.word	0x00004e1f
 80073bc:	0800ad01 	.word	0x0800ad01
 80073c0:	0800ad44 	.word	0x0800ad44
 80073c4:	7ff00000 	.word	0x7ff00000
 80073c8:	0800acf9 	.word	0x0800acf9
 80073cc:	0800ae84 	.word	0x0800ae84
 80073d0:	0800b130 	.word	0x0800b130
 80073d4:	0800b010 	.word	0x0800b010
 80073d8:	0800afe8 	.word	0x0800afe8
 80073dc:	fcb00000 	.word	0xfcb00000
 80073e0:	7ca00000 	.word	0x7ca00000
 80073e4:	7c900000 	.word	0x7c900000
 80073e8:	7fefffff 	.word	0x7fefffff
 80073ec:	2310      	movs	r3, #16
 80073ee:	0022      	movs	r2, r4
 80073f0:	401a      	ands	r2, r3
 80073f2:	9208      	str	r2, [sp, #32]
 80073f4:	421c      	tst	r4, r3
 80073f6:	d001      	beq.n	80073fc <_strtod_l+0x610>
 80073f8:	335a      	adds	r3, #90	; 0x5a
 80073fa:	9308      	str	r3, [sp, #32]
 80073fc:	0030      	movs	r0, r6
 80073fe:	0039      	movs	r1, r7
 8007400:	2300      	movs	r3, #0
 8007402:	4dc5      	ldr	r5, [pc, #788]	; (8007718 <_strtod_l+0x92c>)
 8007404:	2201      	movs	r2, #1
 8007406:	4214      	tst	r4, r2
 8007408:	d004      	beq.n	8007414 <_strtod_l+0x628>
 800740a:	682a      	ldr	r2, [r5, #0]
 800740c:	686b      	ldr	r3, [r5, #4]
 800740e:	f7fa fd11 	bl	8001e34 <__aeabi_dmul>
 8007412:	2301      	movs	r3, #1
 8007414:	1064      	asrs	r4, r4, #1
 8007416:	3508      	adds	r5, #8
 8007418:	2c00      	cmp	r4, #0
 800741a:	d1f3      	bne.n	8007404 <_strtod_l+0x618>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <_strtod_l+0x638>
 8007420:	0006      	movs	r6, r0
 8007422:	000f      	movs	r7, r1
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00f      	beq.n	800744a <_strtod_l+0x65e>
 800742a:	236b      	movs	r3, #107	; 0x6b
 800742c:	007a      	lsls	r2, r7, #1
 800742e:	0d52      	lsrs	r2, r2, #21
 8007430:	0039      	movs	r1, r7
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	dd08      	ble.n	800744a <_strtod_l+0x65e>
 8007438:	2b1f      	cmp	r3, #31
 800743a:	dc00      	bgt.n	800743e <_strtod_l+0x652>
 800743c:	e124      	b.n	8007688 <_strtod_l+0x89c>
 800743e:	2600      	movs	r6, #0
 8007440:	2b34      	cmp	r3, #52	; 0x34
 8007442:	dc00      	bgt.n	8007446 <_strtod_l+0x65a>
 8007444:	e119      	b.n	800767a <_strtod_l+0x88e>
 8007446:	27dc      	movs	r7, #220	; 0xdc
 8007448:	04bf      	lsls	r7, r7, #18
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	0030      	movs	r0, r6
 8007450:	0039      	movs	r1, r7
 8007452:	f7f8 fff9 	bl	8000448 <__aeabi_dcmpeq>
 8007456:	2800      	cmp	r0, #0
 8007458:	d1a0      	bne.n	800739c <_strtod_l+0x5b0>
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007462:	9b06      	ldr	r3, [sp, #24]
 8007464:	9805      	ldr	r0, [sp, #20]
 8007466:	f001 fe69 	bl	800913c <__s2b>
 800746a:	900b      	str	r0, [sp, #44]	; 0x2c
 800746c:	2800      	cmp	r0, #0
 800746e:	d100      	bne.n	8007472 <_strtod_l+0x686>
 8007470:	e721      	b.n	80072b6 <_strtod_l+0x4ca>
 8007472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007474:	9907      	ldr	r1, [sp, #28]
 8007476:	17da      	asrs	r2, r3, #31
 8007478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800747a:	1a5b      	subs	r3, r3, r1
 800747c:	401a      	ands	r2, r3
 800747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007480:	9215      	str	r2, [sp, #84]	; 0x54
 8007482:	43db      	mvns	r3, r3
 8007484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007486:	17db      	asrs	r3, r3, #31
 8007488:	401a      	ands	r2, r3
 800748a:	2300      	movs	r3, #0
 800748c:	921a      	str	r2, [sp, #104]	; 0x68
 800748e:	9306      	str	r3, [sp, #24]
 8007490:	9307      	str	r3, [sp, #28]
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	9805      	ldr	r0, [sp, #20]
 8007496:	6859      	ldr	r1, [r3, #4]
 8007498:	f001 fda4 	bl	8008fe4 <_Balloc>
 800749c:	9009      	str	r0, [sp, #36]	; 0x24
 800749e:	2800      	cmp	r0, #0
 80074a0:	d100      	bne.n	80074a4 <_strtod_l+0x6b8>
 80074a2:	e70d      	b.n	80072c0 <_strtod_l+0x4d4>
 80074a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	310c      	adds	r1, #12
 80074ac:	1c9a      	adds	r2, r3, #2
 80074ae:	0092      	lsls	r2, r2, #2
 80074b0:	300c      	adds	r0, #12
 80074b2:	930c      	str	r3, [sp, #48]	; 0x30
 80074b4:	f001 fd8d 	bl	8008fd2 <memcpy>
 80074b8:	ab22      	add	r3, sp, #136	; 0x88
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	ab21      	add	r3, sp, #132	; 0x84
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	0032      	movs	r2, r6
 80074c2:	003b      	movs	r3, r7
 80074c4:	9805      	ldr	r0, [sp, #20]
 80074c6:	9612      	str	r6, [sp, #72]	; 0x48
 80074c8:	9713      	str	r7, [sp, #76]	; 0x4c
 80074ca:	f002 f983 	bl	80097d4 <__d2b>
 80074ce:	9020      	str	r0, [sp, #128]	; 0x80
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d100      	bne.n	80074d6 <_strtod_l+0x6ea>
 80074d4:	e6f4      	b.n	80072c0 <_strtod_l+0x4d4>
 80074d6:	2101      	movs	r1, #1
 80074d8:	9805      	ldr	r0, [sp, #20]
 80074da:	f001 fec3 	bl	8009264 <__i2b>
 80074de:	9007      	str	r0, [sp, #28]
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d100      	bne.n	80074e6 <_strtod_l+0x6fa>
 80074e4:	e6ec      	b.n	80072c0 <_strtod_l+0x4d4>
 80074e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074ea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80074ec:	1ad4      	subs	r4, r2, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	db01      	blt.n	80074f6 <_strtod_l+0x70a>
 80074f2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80074f4:	195d      	adds	r5, r3, r5
 80074f6:	9908      	ldr	r1, [sp, #32]
 80074f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074fa:	1a5b      	subs	r3, r3, r1
 80074fc:	2136      	movs	r1, #54	; 0x36
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	1a8a      	subs	r2, r1, r2
 8007502:	4986      	ldr	r1, [pc, #536]	; (800771c <_strtod_l+0x930>)
 8007504:	2001      	movs	r0, #1
 8007506:	468c      	mov	ip, r1
 8007508:	2100      	movs	r1, #0
 800750a:	3b01      	subs	r3, #1
 800750c:	9110      	str	r1, [sp, #64]	; 0x40
 800750e:	9014      	str	r0, [sp, #80]	; 0x50
 8007510:	4563      	cmp	r3, ip
 8007512:	da07      	bge.n	8007524 <_strtod_l+0x738>
 8007514:	4661      	mov	r1, ip
 8007516:	1ac9      	subs	r1, r1, r3
 8007518:	1a52      	subs	r2, r2, r1
 800751a:	291f      	cmp	r1, #31
 800751c:	dd00      	ble.n	8007520 <_strtod_l+0x734>
 800751e:	e0b8      	b.n	8007692 <_strtod_l+0x8a6>
 8007520:	4088      	lsls	r0, r1
 8007522:	9014      	str	r0, [sp, #80]	; 0x50
 8007524:	18ab      	adds	r3, r5, r2
 8007526:	930c      	str	r3, [sp, #48]	; 0x30
 8007528:	18a4      	adds	r4, r4, r2
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800752e:	191c      	adds	r4, r3, r4
 8007530:	002b      	movs	r3, r5
 8007532:	4295      	cmp	r5, r2
 8007534:	dd00      	ble.n	8007538 <_strtod_l+0x74c>
 8007536:	0013      	movs	r3, r2
 8007538:	42a3      	cmp	r3, r4
 800753a:	dd00      	ble.n	800753e <_strtod_l+0x752>
 800753c:	0023      	movs	r3, r4
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd04      	ble.n	800754c <_strtod_l+0x760>
 8007542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007544:	1ae4      	subs	r4, r4, r3
 8007546:	1ad2      	subs	r2, r2, r3
 8007548:	920c      	str	r2, [sp, #48]	; 0x30
 800754a:	1aed      	subs	r5, r5, r3
 800754c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	dd17      	ble.n	8007582 <_strtod_l+0x796>
 8007552:	001a      	movs	r2, r3
 8007554:	9907      	ldr	r1, [sp, #28]
 8007556:	9805      	ldr	r0, [sp, #20]
 8007558:	f001 ff4a 	bl	80093f0 <__pow5mult>
 800755c:	9007      	str	r0, [sp, #28]
 800755e:	2800      	cmp	r0, #0
 8007560:	d100      	bne.n	8007564 <_strtod_l+0x778>
 8007562:	e6ad      	b.n	80072c0 <_strtod_l+0x4d4>
 8007564:	0001      	movs	r1, r0
 8007566:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007568:	9805      	ldr	r0, [sp, #20]
 800756a:	f001 fe91 	bl	8009290 <__multiply>
 800756e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007570:	2800      	cmp	r0, #0
 8007572:	d100      	bne.n	8007576 <_strtod_l+0x78a>
 8007574:	e6a4      	b.n	80072c0 <_strtod_l+0x4d4>
 8007576:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007578:	9805      	ldr	r0, [sp, #20]
 800757a:	f001 fd77 	bl	800906c <_Bfree>
 800757e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007580:	9320      	str	r3, [sp, #128]	; 0x80
 8007582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd00      	ble.n	800758a <_strtod_l+0x79e>
 8007588:	e089      	b.n	800769e <_strtod_l+0x8b2>
 800758a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	dd08      	ble.n	80075a2 <_strtod_l+0x7b6>
 8007590:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007592:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007594:	9805      	ldr	r0, [sp, #20]
 8007596:	f001 ff2b 	bl	80093f0 <__pow5mult>
 800759a:	9009      	str	r0, [sp, #36]	; 0x24
 800759c:	2800      	cmp	r0, #0
 800759e:	d100      	bne.n	80075a2 <_strtod_l+0x7b6>
 80075a0:	e68e      	b.n	80072c0 <_strtod_l+0x4d4>
 80075a2:	2c00      	cmp	r4, #0
 80075a4:	dd08      	ble.n	80075b8 <_strtod_l+0x7cc>
 80075a6:	0022      	movs	r2, r4
 80075a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075aa:	9805      	ldr	r0, [sp, #20]
 80075ac:	f001 ff7c 	bl	80094a8 <__lshift>
 80075b0:	9009      	str	r0, [sp, #36]	; 0x24
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d100      	bne.n	80075b8 <_strtod_l+0x7cc>
 80075b6:	e683      	b.n	80072c0 <_strtod_l+0x4d4>
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	dd08      	ble.n	80075ce <_strtod_l+0x7e2>
 80075bc:	002a      	movs	r2, r5
 80075be:	9907      	ldr	r1, [sp, #28]
 80075c0:	9805      	ldr	r0, [sp, #20]
 80075c2:	f001 ff71 	bl	80094a8 <__lshift>
 80075c6:	9007      	str	r0, [sp, #28]
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d100      	bne.n	80075ce <_strtod_l+0x7e2>
 80075cc:	e678      	b.n	80072c0 <_strtod_l+0x4d4>
 80075ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80075d2:	9805      	ldr	r0, [sp, #20]
 80075d4:	f001 fff2 	bl	80095bc <__mdiff>
 80075d8:	9006      	str	r0, [sp, #24]
 80075da:	2800      	cmp	r0, #0
 80075dc:	d100      	bne.n	80075e0 <_strtod_l+0x7f4>
 80075de:	e66f      	b.n	80072c0 <_strtod_l+0x4d4>
 80075e0:	2200      	movs	r2, #0
 80075e2:	68c3      	ldr	r3, [r0, #12]
 80075e4:	9907      	ldr	r1, [sp, #28]
 80075e6:	60c2      	str	r2, [r0, #12]
 80075e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80075ea:	f001 ffcb 	bl	8009584 <__mcmp>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	da5f      	bge.n	80076b2 <_strtod_l+0x8c6>
 80075f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f4:	4333      	orrs	r3, r6
 80075f6:	d000      	beq.n	80075fa <_strtod_l+0x80e>
 80075f8:	e08a      	b.n	8007710 <_strtod_l+0x924>
 80075fa:	033b      	lsls	r3, r7, #12
 80075fc:	d000      	beq.n	8007600 <_strtod_l+0x814>
 80075fe:	e087      	b.n	8007710 <_strtod_l+0x924>
 8007600:	22d6      	movs	r2, #214	; 0xd6
 8007602:	4b47      	ldr	r3, [pc, #284]	; (8007720 <_strtod_l+0x934>)
 8007604:	04d2      	lsls	r2, r2, #19
 8007606:	403b      	ands	r3, r7
 8007608:	4293      	cmp	r3, r2
 800760a:	d800      	bhi.n	800760e <_strtod_l+0x822>
 800760c:	e080      	b.n	8007710 <_strtod_l+0x924>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	930a      	str	r3, [sp, #40]	; 0x28
 8007614:	2b00      	cmp	r3, #0
 8007616:	d104      	bne.n	8007622 <_strtod_l+0x836>
 8007618:	9b06      	ldr	r3, [sp, #24]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	930a      	str	r3, [sp, #40]	; 0x28
 800761e:	2b01      	cmp	r3, #1
 8007620:	dd76      	ble.n	8007710 <_strtod_l+0x924>
 8007622:	9906      	ldr	r1, [sp, #24]
 8007624:	2201      	movs	r2, #1
 8007626:	9805      	ldr	r0, [sp, #20]
 8007628:	f001 ff3e 	bl	80094a8 <__lshift>
 800762c:	9907      	ldr	r1, [sp, #28]
 800762e:	9006      	str	r0, [sp, #24]
 8007630:	f001 ffa8 	bl	8009584 <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	dd6b      	ble.n	8007710 <_strtod_l+0x924>
 8007638:	9908      	ldr	r1, [sp, #32]
 800763a:	003b      	movs	r3, r7
 800763c:	4a38      	ldr	r2, [pc, #224]	; (8007720 <_strtod_l+0x934>)
 800763e:	2900      	cmp	r1, #0
 8007640:	d100      	bne.n	8007644 <_strtod_l+0x858>
 8007642:	e092      	b.n	800776a <_strtod_l+0x97e>
 8007644:	0011      	movs	r1, r2
 8007646:	20d6      	movs	r0, #214	; 0xd6
 8007648:	4039      	ands	r1, r7
 800764a:	04c0      	lsls	r0, r0, #19
 800764c:	4281      	cmp	r1, r0
 800764e:	dd00      	ble.n	8007652 <_strtod_l+0x866>
 8007650:	e08b      	b.n	800776a <_strtod_l+0x97e>
 8007652:	23dc      	movs	r3, #220	; 0xdc
 8007654:	049b      	lsls	r3, r3, #18
 8007656:	4299      	cmp	r1, r3
 8007658:	dc00      	bgt.n	800765c <_strtod_l+0x870>
 800765a:	e6a4      	b.n	80073a6 <_strtod_l+0x5ba>
 800765c:	0030      	movs	r0, r6
 800765e:	0039      	movs	r1, r7
 8007660:	2200      	movs	r2, #0
 8007662:	4b30      	ldr	r3, [pc, #192]	; (8007724 <_strtod_l+0x938>)
 8007664:	f7fa fbe6 	bl	8001e34 <__aeabi_dmul>
 8007668:	0006      	movs	r6, r0
 800766a:	000f      	movs	r7, r1
 800766c:	4308      	orrs	r0, r1
 800766e:	d000      	beq.n	8007672 <_strtod_l+0x886>
 8007670:	e62f      	b.n	80072d2 <_strtod_l+0x4e6>
 8007672:	2322      	movs	r3, #34	; 0x22
 8007674:	9a05      	ldr	r2, [sp, #20]
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e62b      	b.n	80072d2 <_strtod_l+0x4e6>
 800767a:	234b      	movs	r3, #75	; 0x4b
 800767c:	1a9a      	subs	r2, r3, r2
 800767e:	3b4c      	subs	r3, #76	; 0x4c
 8007680:	4093      	lsls	r3, r2
 8007682:	4019      	ands	r1, r3
 8007684:	000f      	movs	r7, r1
 8007686:	e6e0      	b.n	800744a <_strtod_l+0x65e>
 8007688:	2201      	movs	r2, #1
 800768a:	4252      	negs	r2, r2
 800768c:	409a      	lsls	r2, r3
 800768e:	4016      	ands	r6, r2
 8007690:	e6db      	b.n	800744a <_strtod_l+0x65e>
 8007692:	4925      	ldr	r1, [pc, #148]	; (8007728 <_strtod_l+0x93c>)
 8007694:	1acb      	subs	r3, r1, r3
 8007696:	0001      	movs	r1, r0
 8007698:	4099      	lsls	r1, r3
 800769a:	9110      	str	r1, [sp, #64]	; 0x40
 800769c:	e741      	b.n	8007522 <_strtod_l+0x736>
 800769e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	f001 ff00 	bl	80094a8 <__lshift>
 80076a8:	9020      	str	r0, [sp, #128]	; 0x80
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d000      	beq.n	80076b0 <_strtod_l+0x8c4>
 80076ae:	e76c      	b.n	800758a <_strtod_l+0x79e>
 80076b0:	e606      	b.n	80072c0 <_strtod_l+0x4d4>
 80076b2:	970c      	str	r7, [sp, #48]	; 0x30
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d176      	bne.n	80077a6 <_strtod_l+0x9ba>
 80076b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076ba:	033b      	lsls	r3, r7, #12
 80076bc:	0b1b      	lsrs	r3, r3, #12
 80076be:	2a00      	cmp	r2, #0
 80076c0:	d038      	beq.n	8007734 <_strtod_l+0x948>
 80076c2:	4a1a      	ldr	r2, [pc, #104]	; (800772c <_strtod_l+0x940>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d138      	bne.n	800773a <_strtod_l+0x94e>
 80076c8:	2201      	movs	r2, #1
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	4252      	negs	r2, r2
 80076ce:	0031      	movs	r1, r6
 80076d0:	0010      	movs	r0, r2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <_strtod_l+0x902>
 80076d6:	24d4      	movs	r4, #212	; 0xd4
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <_strtod_l+0x934>)
 80076da:	0010      	movs	r0, r2
 80076dc:	403b      	ands	r3, r7
 80076de:	04e4      	lsls	r4, r4, #19
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d804      	bhi.n	80076ee <_strtod_l+0x902>
 80076e4:	306c      	adds	r0, #108	; 0x6c
 80076e6:	0d1b      	lsrs	r3, r3, #20
 80076e8:	1ac3      	subs	r3, r0, r3
 80076ea:	409a      	lsls	r2, r3
 80076ec:	0010      	movs	r0, r2
 80076ee:	4281      	cmp	r1, r0
 80076f0:	d123      	bne.n	800773a <_strtod_l+0x94e>
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <_strtod_l+0x944>)
 80076f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d102      	bne.n	8007700 <_strtod_l+0x914>
 80076fa:	1c4b      	adds	r3, r1, #1
 80076fc:	d100      	bne.n	8007700 <_strtod_l+0x914>
 80076fe:	e5df      	b.n	80072c0 <_strtod_l+0x4d4>
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <_strtod_l+0x934>)
 8007702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007704:	2600      	movs	r6, #0
 8007706:	401a      	ands	r2, r3
 8007708:	0013      	movs	r3, r2
 800770a:	2280      	movs	r2, #128	; 0x80
 800770c:	0352      	lsls	r2, r2, #13
 800770e:	189f      	adds	r7, r3, r2
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1a2      	bne.n	800765c <_strtod_l+0x870>
 8007716:	e5dc      	b.n	80072d2 <_strtod_l+0x4e6>
 8007718:	0800ad58 	.word	0x0800ad58
 800771c:	fffffc02 	.word	0xfffffc02
 8007720:	7ff00000 	.word	0x7ff00000
 8007724:	39500000 	.word	0x39500000
 8007728:	fffffbe2 	.word	0xfffffbe2
 800772c:	000fffff 	.word	0x000fffff
 8007730:	7fefffff 	.word	0x7fefffff
 8007734:	4333      	orrs	r3, r6
 8007736:	d100      	bne.n	800773a <_strtod_l+0x94e>
 8007738:	e77e      	b.n	8007638 <_strtod_l+0x84c>
 800773a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01d      	beq.n	800777c <_strtod_l+0x990>
 8007740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007742:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007744:	4213      	tst	r3, r2
 8007746:	d0e3      	beq.n	8007710 <_strtod_l+0x924>
 8007748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774a:	0030      	movs	r0, r6
 800774c:	0039      	movs	r1, r7
 800774e:	9a08      	ldr	r2, [sp, #32]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d017      	beq.n	8007784 <_strtod_l+0x998>
 8007754:	f7ff fb32 	bl	8006dbc <sulp>
 8007758:	0002      	movs	r2, r0
 800775a:	000b      	movs	r3, r1
 800775c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800775e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007760:	f7f9 fc2a 	bl	8000fb8 <__aeabi_dadd>
 8007764:	0006      	movs	r6, r0
 8007766:	000f      	movs	r7, r1
 8007768:	e7d2      	b.n	8007710 <_strtod_l+0x924>
 800776a:	2601      	movs	r6, #1
 800776c:	4013      	ands	r3, r2
 800776e:	4a99      	ldr	r2, [pc, #612]	; (80079d4 <_strtod_l+0xbe8>)
 8007770:	4276      	negs	r6, r6
 8007772:	189b      	adds	r3, r3, r2
 8007774:	4a98      	ldr	r2, [pc, #608]	; (80079d8 <_strtod_l+0xbec>)
 8007776:	431a      	orrs	r2, r3
 8007778:	0017      	movs	r7, r2
 800777a:	e7c9      	b.n	8007710 <_strtod_l+0x924>
 800777c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800777e:	4233      	tst	r3, r6
 8007780:	d0c6      	beq.n	8007710 <_strtod_l+0x924>
 8007782:	e7e1      	b.n	8007748 <_strtod_l+0x95c>
 8007784:	f7ff fb1a 	bl	8006dbc <sulp>
 8007788:	0002      	movs	r2, r0
 800778a:	000b      	movs	r3, r1
 800778c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800778e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007790:	f7fa fdbc 	bl	800230c <__aeabi_dsub>
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	0006      	movs	r6, r0
 800779a:	000f      	movs	r7, r1
 800779c:	f7f8 fe54 	bl	8000448 <__aeabi_dcmpeq>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0b5      	beq.n	8007710 <_strtod_l+0x924>
 80077a4:	e5ff      	b.n	80073a6 <_strtod_l+0x5ba>
 80077a6:	9907      	ldr	r1, [sp, #28]
 80077a8:	9806      	ldr	r0, [sp, #24]
 80077aa:	f002 f877 	bl	800989c <__ratio>
 80077ae:	2380      	movs	r3, #128	; 0x80
 80077b0:	2200      	movs	r2, #0
 80077b2:	05db      	lsls	r3, r3, #23
 80077b4:	0004      	movs	r4, r0
 80077b6:	000d      	movs	r5, r1
 80077b8:	f7f8 fe56 	bl	8000468 <__aeabi_dcmple>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d075      	beq.n	80078ac <_strtod_l+0xac0>
 80077c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d047      	beq.n	8007856 <_strtod_l+0xa6a>
 80077c6:	2300      	movs	r3, #0
 80077c8:	4c84      	ldr	r4, [pc, #528]	; (80079dc <_strtod_l+0xbf0>)
 80077ca:	2500      	movs	r5, #0
 80077cc:	9310      	str	r3, [sp, #64]	; 0x40
 80077ce:	9411      	str	r4, [sp, #68]	; 0x44
 80077d0:	4c82      	ldr	r4, [pc, #520]	; (80079dc <_strtod_l+0xbf0>)
 80077d2:	4a83      	ldr	r2, [pc, #524]	; (80079e0 <_strtod_l+0xbf4>)
 80077d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d6:	4013      	ands	r3, r2
 80077d8:	9314      	str	r3, [sp, #80]	; 0x50
 80077da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077dc:	4b81      	ldr	r3, [pc, #516]	; (80079e4 <_strtod_l+0xbf8>)
 80077de:	429a      	cmp	r2, r3
 80077e0:	d000      	beq.n	80077e4 <_strtod_l+0x9f8>
 80077e2:	e0ac      	b.n	800793e <_strtod_l+0xb52>
 80077e4:	4a80      	ldr	r2, [pc, #512]	; (80079e8 <_strtod_l+0xbfc>)
 80077e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077e8:	4694      	mov	ip, r2
 80077ea:	4463      	add	r3, ip
 80077ec:	001f      	movs	r7, r3
 80077ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077f2:	0030      	movs	r0, r6
 80077f4:	0039      	movs	r1, r7
 80077f6:	920c      	str	r2, [sp, #48]	; 0x30
 80077f8:	930d      	str	r3, [sp, #52]	; 0x34
 80077fa:	f001 ff77 	bl	80096ec <__ulp>
 80077fe:	0002      	movs	r2, r0
 8007800:	000b      	movs	r3, r1
 8007802:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007804:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007806:	f7fa fb15 	bl	8001e34 <__aeabi_dmul>
 800780a:	0032      	movs	r2, r6
 800780c:	003b      	movs	r3, r7
 800780e:	f7f9 fbd3 	bl	8000fb8 <__aeabi_dadd>
 8007812:	4a73      	ldr	r2, [pc, #460]	; (80079e0 <_strtod_l+0xbf4>)
 8007814:	4b75      	ldr	r3, [pc, #468]	; (80079ec <_strtod_l+0xc00>)
 8007816:	0006      	movs	r6, r0
 8007818:	400a      	ands	r2, r1
 800781a:	429a      	cmp	r2, r3
 800781c:	d95e      	bls.n	80078dc <_strtod_l+0xaf0>
 800781e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007820:	4b73      	ldr	r3, [pc, #460]	; (80079f0 <_strtod_l+0xc04>)
 8007822:	429a      	cmp	r2, r3
 8007824:	d103      	bne.n	800782e <_strtod_l+0xa42>
 8007826:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007828:	3301      	adds	r3, #1
 800782a:	d100      	bne.n	800782e <_strtod_l+0xa42>
 800782c:	e548      	b.n	80072c0 <_strtod_l+0x4d4>
 800782e:	2601      	movs	r6, #1
 8007830:	4f6f      	ldr	r7, [pc, #444]	; (80079f0 <_strtod_l+0xc04>)
 8007832:	4276      	negs	r6, r6
 8007834:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007836:	9805      	ldr	r0, [sp, #20]
 8007838:	f001 fc18 	bl	800906c <_Bfree>
 800783c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800783e:	9805      	ldr	r0, [sp, #20]
 8007840:	f001 fc14 	bl	800906c <_Bfree>
 8007844:	9907      	ldr	r1, [sp, #28]
 8007846:	9805      	ldr	r0, [sp, #20]
 8007848:	f001 fc10 	bl	800906c <_Bfree>
 800784c:	9906      	ldr	r1, [sp, #24]
 800784e:	9805      	ldr	r0, [sp, #20]
 8007850:	f001 fc0c 	bl	800906c <_Bfree>
 8007854:	e61d      	b.n	8007492 <_strtod_l+0x6a6>
 8007856:	2e00      	cmp	r6, #0
 8007858:	d11c      	bne.n	8007894 <_strtod_l+0xaa8>
 800785a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800785c:	031b      	lsls	r3, r3, #12
 800785e:	d11f      	bne.n	80078a0 <_strtod_l+0xab4>
 8007860:	2200      	movs	r2, #0
 8007862:	0020      	movs	r0, r4
 8007864:	0029      	movs	r1, r5
 8007866:	4b5d      	ldr	r3, [pc, #372]	; (80079dc <_strtod_l+0xbf0>)
 8007868:	f7f8 fdf4 	bl	8000454 <__aeabi_dcmplt>
 800786c:	2800      	cmp	r0, #0
 800786e:	d11a      	bne.n	80078a6 <_strtod_l+0xaba>
 8007870:	0020      	movs	r0, r4
 8007872:	0029      	movs	r1, r5
 8007874:	2200      	movs	r2, #0
 8007876:	4b5f      	ldr	r3, [pc, #380]	; (80079f4 <_strtod_l+0xc08>)
 8007878:	f7fa fadc 	bl	8001e34 <__aeabi_dmul>
 800787c:	0005      	movs	r5, r0
 800787e:	000c      	movs	r4, r1
 8007880:	2380      	movs	r3, #128	; 0x80
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	18e3      	adds	r3, r4, r3
 8007886:	951c      	str	r5, [sp, #112]	; 0x70
 8007888:	931d      	str	r3, [sp, #116]	; 0x74
 800788a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800788c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800788e:	9210      	str	r2, [sp, #64]	; 0x40
 8007890:	9311      	str	r3, [sp, #68]	; 0x44
 8007892:	e79e      	b.n	80077d2 <_strtod_l+0x9e6>
 8007894:	2e01      	cmp	r6, #1
 8007896:	d103      	bne.n	80078a0 <_strtod_l+0xab4>
 8007898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	d100      	bne.n	80078a0 <_strtod_l+0xab4>
 800789e:	e582      	b.n	80073a6 <_strtod_l+0x5ba>
 80078a0:	2300      	movs	r3, #0
 80078a2:	4c55      	ldr	r4, [pc, #340]	; (80079f8 <_strtod_l+0xc0c>)
 80078a4:	e791      	b.n	80077ca <_strtod_l+0x9de>
 80078a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078a8:	4c52      	ldr	r4, [pc, #328]	; (80079f4 <_strtod_l+0xc08>)
 80078aa:	e7e9      	b.n	8007880 <_strtod_l+0xa94>
 80078ac:	2200      	movs	r2, #0
 80078ae:	0020      	movs	r0, r4
 80078b0:	0029      	movs	r1, r5
 80078b2:	4b50      	ldr	r3, [pc, #320]	; (80079f4 <_strtod_l+0xc08>)
 80078b4:	f7fa fabe 	bl	8001e34 <__aeabi_dmul>
 80078b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ba:	0005      	movs	r5, r0
 80078bc:	000b      	movs	r3, r1
 80078be:	000c      	movs	r4, r1
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d107      	bne.n	80078d4 <_strtod_l+0xae8>
 80078c4:	2280      	movs	r2, #128	; 0x80
 80078c6:	0612      	lsls	r2, r2, #24
 80078c8:	188b      	adds	r3, r1, r2
 80078ca:	9016      	str	r0, [sp, #88]	; 0x58
 80078cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80078ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078d2:	e7dc      	b.n	800788e <_strtod_l+0xaa2>
 80078d4:	0002      	movs	r2, r0
 80078d6:	9216      	str	r2, [sp, #88]	; 0x58
 80078d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80078da:	e7f8      	b.n	80078ce <_strtod_l+0xae2>
 80078dc:	23d4      	movs	r3, #212	; 0xd4
 80078de:	049b      	lsls	r3, r3, #18
 80078e0:	18cf      	adds	r7, r1, r3
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1a5      	bne.n	8007834 <_strtod_l+0xa48>
 80078e8:	4b3d      	ldr	r3, [pc, #244]	; (80079e0 <_strtod_l+0xbf4>)
 80078ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078ec:	403b      	ands	r3, r7
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d1a0      	bne.n	8007834 <_strtod_l+0xa48>
 80078f2:	0028      	movs	r0, r5
 80078f4:	0021      	movs	r1, r4
 80078f6:	f7f8 fe13 	bl	8000520 <__aeabi_d2lz>
 80078fa:	f7f8 fe4d 	bl	8000598 <__aeabi_l2d>
 80078fe:	0002      	movs	r2, r0
 8007900:	000b      	movs	r3, r1
 8007902:	0028      	movs	r0, r5
 8007904:	0021      	movs	r1, r4
 8007906:	f7fa fd01 	bl	800230c <__aeabi_dsub>
 800790a:	033b      	lsls	r3, r7, #12
 800790c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800790e:	0b1b      	lsrs	r3, r3, #12
 8007910:	4333      	orrs	r3, r6
 8007912:	4313      	orrs	r3, r2
 8007914:	0004      	movs	r4, r0
 8007916:	000d      	movs	r5, r1
 8007918:	4a38      	ldr	r2, [pc, #224]	; (80079fc <_strtod_l+0xc10>)
 800791a:	2b00      	cmp	r3, #0
 800791c:	d055      	beq.n	80079ca <_strtod_l+0xbde>
 800791e:	4b38      	ldr	r3, [pc, #224]	; (8007a00 <_strtod_l+0xc14>)
 8007920:	f7f8 fd98 	bl	8000454 <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	d000      	beq.n	800792a <_strtod_l+0xb3e>
 8007928:	e4d3      	b.n	80072d2 <_strtod_l+0x4e6>
 800792a:	0020      	movs	r0, r4
 800792c:	0029      	movs	r1, r5
 800792e:	4a35      	ldr	r2, [pc, #212]	; (8007a04 <_strtod_l+0xc18>)
 8007930:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <_strtod_l+0xc08>)
 8007932:	f7f8 fda3 	bl	800047c <__aeabi_dcmpgt>
 8007936:	2800      	cmp	r0, #0
 8007938:	d100      	bne.n	800793c <_strtod_l+0xb50>
 800793a:	e77b      	b.n	8007834 <_strtod_l+0xa48>
 800793c:	e4c9      	b.n	80072d2 <_strtod_l+0x4e6>
 800793e:	9b08      	ldr	r3, [sp, #32]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d02b      	beq.n	800799c <_strtod_l+0xbb0>
 8007944:	23d4      	movs	r3, #212	; 0xd4
 8007946:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007948:	04db      	lsls	r3, r3, #19
 800794a:	429a      	cmp	r2, r3
 800794c:	d826      	bhi.n	800799c <_strtod_l+0xbb0>
 800794e:	0028      	movs	r0, r5
 8007950:	0021      	movs	r1, r4
 8007952:	4a2d      	ldr	r2, [pc, #180]	; (8007a08 <_strtod_l+0xc1c>)
 8007954:	4b2d      	ldr	r3, [pc, #180]	; (8007a0c <_strtod_l+0xc20>)
 8007956:	f7f8 fd87 	bl	8000468 <__aeabi_dcmple>
 800795a:	2800      	cmp	r0, #0
 800795c:	d017      	beq.n	800798e <_strtod_l+0xba2>
 800795e:	0028      	movs	r0, r5
 8007960:	0021      	movs	r1, r4
 8007962:	f7f8 fdbf 	bl	80004e4 <__aeabi_d2uiz>
 8007966:	2800      	cmp	r0, #0
 8007968:	d100      	bne.n	800796c <_strtod_l+0xb80>
 800796a:	3001      	adds	r0, #1
 800796c:	f7fb f8e4 	bl	8002b38 <__aeabi_ui2d>
 8007970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007972:	0005      	movs	r5, r0
 8007974:	000b      	movs	r3, r1
 8007976:	000c      	movs	r4, r1
 8007978:	2a00      	cmp	r2, #0
 800797a:	d122      	bne.n	80079c2 <_strtod_l+0xbd6>
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	0612      	lsls	r2, r2, #24
 8007980:	188b      	adds	r3, r1, r2
 8007982:	9018      	str	r0, [sp, #96]	; 0x60
 8007984:	9319      	str	r3, [sp, #100]	; 0x64
 8007986:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007988:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800798a:	9210      	str	r2, [sp, #64]	; 0x40
 800798c:	9311      	str	r3, [sp, #68]	; 0x44
 800798e:	22d6      	movs	r2, #214	; 0xd6
 8007990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007992:	04d2      	lsls	r2, r2, #19
 8007994:	189b      	adds	r3, r3, r2
 8007996:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	9311      	str	r3, [sp, #68]	; 0x44
 800799c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800799e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80079a2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80079a4:	f001 fea2 	bl	80096ec <__ulp>
 80079a8:	0002      	movs	r2, r0
 80079aa:	000b      	movs	r3, r1
 80079ac:	0030      	movs	r0, r6
 80079ae:	0039      	movs	r1, r7
 80079b0:	f7fa fa40 	bl	8001e34 <__aeabi_dmul>
 80079b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079b8:	f7f9 fafe 	bl	8000fb8 <__aeabi_dadd>
 80079bc:	0006      	movs	r6, r0
 80079be:	000f      	movs	r7, r1
 80079c0:	e78f      	b.n	80078e2 <_strtod_l+0xaf6>
 80079c2:	0002      	movs	r2, r0
 80079c4:	9218      	str	r2, [sp, #96]	; 0x60
 80079c6:	9319      	str	r3, [sp, #100]	; 0x64
 80079c8:	e7dd      	b.n	8007986 <_strtod_l+0xb9a>
 80079ca:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <_strtod_l+0xc24>)
 80079cc:	f7f8 fd42 	bl	8000454 <__aeabi_dcmplt>
 80079d0:	e7b1      	b.n	8007936 <_strtod_l+0xb4a>
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	fff00000 	.word	0xfff00000
 80079d8:	000fffff 	.word	0x000fffff
 80079dc:	3ff00000 	.word	0x3ff00000
 80079e0:	7ff00000 	.word	0x7ff00000
 80079e4:	7fe00000 	.word	0x7fe00000
 80079e8:	fcb00000 	.word	0xfcb00000
 80079ec:	7c9fffff 	.word	0x7c9fffff
 80079f0:	7fefffff 	.word	0x7fefffff
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	bff00000 	.word	0xbff00000
 80079fc:	94a03595 	.word	0x94a03595
 8007a00:	3fdfffff 	.word	0x3fdfffff
 8007a04:	35afe535 	.word	0x35afe535
 8007a08:	ffc00000 	.word	0xffc00000
 8007a0c:	41dfffff 	.word	0x41dfffff
 8007a10:	3fcfffff 	.word	0x3fcfffff

08007a14 <_strtod_r>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <_strtod_r+0xc>)
 8007a18:	f7ff f9e8 	bl	8006dec <_strtod_l>
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	20000074 	.word	0x20000074

08007a24 <_strtol_l.constprop.0>:
 8007a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a26:	b087      	sub	sp, #28
 8007a28:	001e      	movs	r6, r3
 8007a2a:	9005      	str	r0, [sp, #20]
 8007a2c:	9101      	str	r1, [sp, #4]
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d045      	beq.n	8007ac0 <_strtol_l.constprop.0+0x9c>
 8007a34:	000b      	movs	r3, r1
 8007a36:	2e24      	cmp	r6, #36	; 0x24
 8007a38:	d842      	bhi.n	8007ac0 <_strtol_l.constprop.0+0x9c>
 8007a3a:	4a3f      	ldr	r2, [pc, #252]	; (8007b38 <_strtol_l.constprop.0+0x114>)
 8007a3c:	2108      	movs	r1, #8
 8007a3e:	4694      	mov	ip, r2
 8007a40:	001a      	movs	r2, r3
 8007a42:	4660      	mov	r0, ip
 8007a44:	7814      	ldrb	r4, [r2, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	5d00      	ldrb	r0, [r0, r4]
 8007a4a:	001d      	movs	r5, r3
 8007a4c:	0007      	movs	r7, r0
 8007a4e:	400f      	ands	r7, r1
 8007a50:	4208      	tst	r0, r1
 8007a52:	d1f5      	bne.n	8007a40 <_strtol_l.constprop.0+0x1c>
 8007a54:	2c2d      	cmp	r4, #45	; 0x2d
 8007a56:	d13a      	bne.n	8007ace <_strtol_l.constprop.0+0xaa>
 8007a58:	2701      	movs	r7, #1
 8007a5a:	781c      	ldrb	r4, [r3, #0]
 8007a5c:	1c95      	adds	r5, r2, #2
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	d065      	beq.n	8007b2e <_strtol_l.constprop.0+0x10a>
 8007a62:	2e10      	cmp	r6, #16
 8007a64:	d109      	bne.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007a66:	2c30      	cmp	r4, #48	; 0x30
 8007a68:	d107      	bne.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	782b      	ldrb	r3, [r5, #0]
 8007a6e:	4393      	bics	r3, r2
 8007a70:	2b58      	cmp	r3, #88	; 0x58
 8007a72:	d157      	bne.n	8007b24 <_strtol_l.constprop.0+0x100>
 8007a74:	2610      	movs	r6, #16
 8007a76:	786c      	ldrb	r4, [r5, #1]
 8007a78:	3502      	adds	r5, #2
 8007a7a:	4b30      	ldr	r3, [pc, #192]	; (8007b3c <_strtol_l.constprop.0+0x118>)
 8007a7c:	0031      	movs	r1, r6
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	0018      	movs	r0, r3
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	f7f8 fbe0 	bl	8000248 <__aeabi_uidivmod>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4684      	mov	ip, r0
 8007a8e:	0018      	movs	r0, r3
 8007a90:	9104      	str	r1, [sp, #16]
 8007a92:	4252      	negs	r2, r2
 8007a94:	0021      	movs	r1, r4
 8007a96:	3930      	subs	r1, #48	; 0x30
 8007a98:	2909      	cmp	r1, #9
 8007a9a:	d81d      	bhi.n	8007ad8 <_strtol_l.constprop.0+0xb4>
 8007a9c:	000c      	movs	r4, r1
 8007a9e:	42a6      	cmp	r6, r4
 8007aa0:	dd28      	ble.n	8007af4 <_strtol_l.constprop.0+0xd0>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	db24      	blt.n	8007af0 <_strtol_l.constprop.0+0xcc>
 8007aa6:	0013      	movs	r3, r2
 8007aa8:	4584      	cmp	ip, r0
 8007aaa:	d306      	bcc.n	8007aba <_strtol_l.constprop.0+0x96>
 8007aac:	d102      	bne.n	8007ab4 <_strtol_l.constprop.0+0x90>
 8007aae:	9904      	ldr	r1, [sp, #16]
 8007ab0:	42a1      	cmp	r1, r4
 8007ab2:	db02      	blt.n	8007aba <_strtol_l.constprop.0+0x96>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4370      	muls	r0, r6
 8007ab8:	1820      	adds	r0, r4, r0
 8007aba:	782c      	ldrb	r4, [r5, #0]
 8007abc:	3501      	adds	r5, #1
 8007abe:	e7e9      	b.n	8007a94 <_strtol_l.constprop.0+0x70>
 8007ac0:	f7fe fab0 	bl	8006024 <__errno>
 8007ac4:	2316      	movs	r3, #22
 8007ac6:	6003      	str	r3, [r0, #0]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	b007      	add	sp, #28
 8007acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ace:	2c2b      	cmp	r4, #43	; 0x2b
 8007ad0:	d1c5      	bne.n	8007a5e <_strtol_l.constprop.0+0x3a>
 8007ad2:	781c      	ldrb	r4, [r3, #0]
 8007ad4:	1c95      	adds	r5, r2, #2
 8007ad6:	e7c2      	b.n	8007a5e <_strtol_l.constprop.0+0x3a>
 8007ad8:	0021      	movs	r1, r4
 8007ada:	3941      	subs	r1, #65	; 0x41
 8007adc:	2919      	cmp	r1, #25
 8007ade:	d801      	bhi.n	8007ae4 <_strtol_l.constprop.0+0xc0>
 8007ae0:	3c37      	subs	r4, #55	; 0x37
 8007ae2:	e7dc      	b.n	8007a9e <_strtol_l.constprop.0+0x7a>
 8007ae4:	0021      	movs	r1, r4
 8007ae6:	3961      	subs	r1, #97	; 0x61
 8007ae8:	2919      	cmp	r1, #25
 8007aea:	d803      	bhi.n	8007af4 <_strtol_l.constprop.0+0xd0>
 8007aec:	3c57      	subs	r4, #87	; 0x57
 8007aee:	e7d6      	b.n	8007a9e <_strtol_l.constprop.0+0x7a>
 8007af0:	0013      	movs	r3, r2
 8007af2:	e7e2      	b.n	8007aba <_strtol_l.constprop.0+0x96>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da09      	bge.n	8007b0c <_strtol_l.constprop.0+0xe8>
 8007af8:	2322      	movs	r3, #34	; 0x22
 8007afa:	9a05      	ldr	r2, [sp, #20]
 8007afc:	9803      	ldr	r0, [sp, #12]
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	9b02      	ldr	r3, [sp, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0e1      	beq.n	8007aca <_strtol_l.constprop.0+0xa6>
 8007b06:	1e6b      	subs	r3, r5, #1
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	e007      	b.n	8007b1c <_strtol_l.constprop.0+0xf8>
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	d000      	beq.n	8007b12 <_strtol_l.constprop.0+0xee>
 8007b10:	4240      	negs	r0, r0
 8007b12:	9a02      	ldr	r2, [sp, #8]
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	d0d8      	beq.n	8007aca <_strtol_l.constprop.0+0xa6>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f4      	bne.n	8007b06 <_strtol_l.constprop.0+0xe2>
 8007b1c:	9b02      	ldr	r3, [sp, #8]
 8007b1e:	9a01      	ldr	r2, [sp, #4]
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e7d2      	b.n	8007aca <_strtol_l.constprop.0+0xa6>
 8007b24:	2430      	movs	r4, #48	; 0x30
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d1a7      	bne.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007b2a:	3608      	adds	r6, #8
 8007b2c:	e7a5      	b.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007b2e:	2c30      	cmp	r4, #48	; 0x30
 8007b30:	d09b      	beq.n	8007a6a <_strtol_l.constprop.0+0x46>
 8007b32:	260a      	movs	r6, #10
 8007b34:	e7a1      	b.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	0800ad81 	.word	0x0800ad81
 8007b3c:	7fffffff 	.word	0x7fffffff

08007b40 <_strtol_r>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	f7ff ff6f 	bl	8007a24 <_strtol_l.constprop.0>
 8007b46:	bd10      	pop	{r4, pc}

08007b48 <quorem>:
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	0006      	movs	r6, r0
 8007b4c:	690b      	ldr	r3, [r1, #16]
 8007b4e:	6932      	ldr	r2, [r6, #16]
 8007b50:	b087      	sub	sp, #28
 8007b52:	2000      	movs	r0, #0
 8007b54:	9103      	str	r1, [sp, #12]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	db65      	blt.n	8007c26 <quorem+0xde>
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	009c      	lsls	r4, r3, #2
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	000b      	movs	r3, r1
 8007b62:	3314      	adds	r3, #20
 8007b64:	9305      	str	r3, [sp, #20]
 8007b66:	191b      	adds	r3, r3, r4
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	0033      	movs	r3, r6
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	191c      	adds	r4, r3, r4
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	6827      	ldr	r7, [r4, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	0038      	movs	r0, r7
 8007b7a:	1c5d      	adds	r5, r3, #1
 8007b7c:	0029      	movs	r1, r5
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	f7f8 fadc 	bl	800013c <__udivsi3>
 8007b84:	9001      	str	r0, [sp, #4]
 8007b86:	42af      	cmp	r7, r5
 8007b88:	d324      	bcc.n	8007bd4 <quorem+0x8c>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	46ac      	mov	ip, r5
 8007b8e:	9802      	ldr	r0, [sp, #8]
 8007b90:	9f05      	ldr	r7, [sp, #20]
 8007b92:	cf08      	ldmia	r7!, {r3}
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	b299      	uxth	r1, r3
 8007b98:	4351      	muls	r1, r2
 8007b9a:	0c1b      	lsrs	r3, r3, #16
 8007b9c:	4353      	muls	r3, r2
 8007b9e:	1949      	adds	r1, r1, r5
 8007ba0:	0c0a      	lsrs	r2, r1, #16
 8007ba2:	189b      	adds	r3, r3, r2
 8007ba4:	6802      	ldr	r2, [r0, #0]
 8007ba6:	b289      	uxth	r1, r1
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	4462      	add	r2, ip
 8007bac:	1a52      	subs	r2, r2, r1
 8007bae:	6801      	ldr	r1, [r0, #0]
 8007bb0:	0c1d      	lsrs	r5, r3, #16
 8007bb2:	0c09      	lsrs	r1, r1, #16
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	1acb      	subs	r3, r1, r3
 8007bb8:	1411      	asrs	r1, r2, #16
 8007bba:	185b      	adds	r3, r3, r1
 8007bbc:	1419      	asrs	r1, r3, #16
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	468c      	mov	ip, r1
 8007bc8:	c004      	stmia	r0!, {r2}
 8007bca:	42bb      	cmp	r3, r7
 8007bcc:	d2e1      	bcs.n	8007b92 <quorem+0x4a>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d030      	beq.n	8007c36 <quorem+0xee>
 8007bd4:	0030      	movs	r0, r6
 8007bd6:	9903      	ldr	r1, [sp, #12]
 8007bd8:	f001 fcd4 	bl	8009584 <__mcmp>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	db21      	blt.n	8007c24 <quorem+0xdc>
 8007be0:	0030      	movs	r0, r6
 8007be2:	2400      	movs	r4, #0
 8007be4:	9b01      	ldr	r3, [sp, #4]
 8007be6:	9903      	ldr	r1, [sp, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	3014      	adds	r0, #20
 8007bee:	3114      	adds	r1, #20
 8007bf0:	6803      	ldr	r3, [r0, #0]
 8007bf2:	c920      	ldmia	r1!, {r5}
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	1914      	adds	r4, r2, r4
 8007bf8:	b2aa      	uxth	r2, r5
 8007bfa:	1aa2      	subs	r2, r4, r2
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	0c2d      	lsrs	r5, r5, #16
 8007c00:	1414      	asrs	r4, r2, #16
 8007c02:	1b5b      	subs	r3, r3, r5
 8007c04:	191b      	adds	r3, r3, r4
 8007c06:	141c      	asrs	r4, r3, #16
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	041b      	lsls	r3, r3, #16
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	c008      	stmia	r0!, {r3}
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	428b      	cmp	r3, r1
 8007c14:	d2ec      	bcs.n	8007bf0 <quorem+0xa8>
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	9a02      	ldr	r2, [sp, #8]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	2a00      	cmp	r2, #0
 8007c22:	d015      	beq.n	8007c50 <quorem+0x108>
 8007c24:	9801      	ldr	r0, [sp, #4]
 8007c26:	b007      	add	sp, #28
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <quorem+0xf6>
 8007c30:	9b00      	ldr	r3, [sp, #0]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	9b02      	ldr	r3, [sp, #8]
 8007c38:	3c04      	subs	r4, #4
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	d3f5      	bcc.n	8007c2a <quorem+0xe2>
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	6133      	str	r3, [r6, #16]
 8007c42:	e7c7      	b.n	8007bd4 <quorem+0x8c>
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	d106      	bne.n	8007c58 <quorem+0x110>
 8007c4a:	9a00      	ldr	r2, [sp, #0]
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	9200      	str	r2, [sp, #0]
 8007c50:	9a02      	ldr	r2, [sp, #8]
 8007c52:	3b04      	subs	r3, #4
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d3f5      	bcc.n	8007c44 <quorem+0xfc>
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	6133      	str	r3, [r6, #16]
 8007c5c:	e7e2      	b.n	8007c24 <quorem+0xdc>
	...

08007c60 <_dtoa_r>:
 8007c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c62:	b09d      	sub	sp, #116	; 0x74
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	9c03      	ldr	r4, [sp, #12]
 8007c6c:	9308      	str	r3, [sp, #32]
 8007c6e:	9409      	str	r4, [sp, #36]	; 0x24
 8007c70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c72:	0007      	movs	r7, r0
 8007c74:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d10e      	bne.n	8007c98 <_dtoa_r+0x38>
 8007c7a:	2010      	movs	r0, #16
 8007c7c:	f001 f982 	bl	8008f84 <malloc>
 8007c80:	1e02      	subs	r2, r0, #0
 8007c82:	6278      	str	r0, [r7, #36]	; 0x24
 8007c84:	d104      	bne.n	8007c90 <_dtoa_r+0x30>
 8007c86:	21ea      	movs	r1, #234	; 0xea
 8007c88:	4bc7      	ldr	r3, [pc, #796]	; (8007fa8 <_dtoa_r+0x348>)
 8007c8a:	48c8      	ldr	r0, [pc, #800]	; (8007fac <_dtoa_r+0x34c>)
 8007c8c:	f002 f91c 	bl	8009ec8 <__assert_func>
 8007c90:	6044      	str	r4, [r0, #4]
 8007c92:	6084      	str	r4, [r0, #8]
 8007c94:	6004      	str	r4, [r0, #0]
 8007c96:	60c4      	str	r4, [r0, #12]
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	6819      	ldr	r1, [r3, #0]
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	d00a      	beq.n	8007cb6 <_dtoa_r+0x56>
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4093      	lsls	r3, r2
 8007ca6:	604a      	str	r2, [r1, #4]
 8007ca8:	608b      	str	r3, [r1, #8]
 8007caa:	0038      	movs	r0, r7
 8007cac:	f001 f9de 	bl	800906c <_Bfree>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da20      	bge.n	8007cfe <_dtoa_r+0x9e>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cca:	4bb9      	ldr	r3, [pc, #740]	; (8007fb0 <_dtoa_r+0x350>)
 8007ccc:	4ab8      	ldr	r2, [pc, #736]	; (8007fb0 <_dtoa_r+0x350>)
 8007cce:	402b      	ands	r3, r5
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d117      	bne.n	8007d04 <_dtoa_r+0xa4>
 8007cd4:	4bb7      	ldr	r3, [pc, #732]	; (8007fb4 <_dtoa_r+0x354>)
 8007cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cd8:	0328      	lsls	r0, r5, #12
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	0b00      	lsrs	r0, r0, #12
 8007ce0:	4318      	orrs	r0, r3
 8007ce2:	d101      	bne.n	8007ce8 <_dtoa_r+0x88>
 8007ce4:	f000 fdbf 	bl	8008866 <_dtoa_r+0xc06>
 8007ce8:	48b3      	ldr	r0, [pc, #716]	; (8007fb8 <_dtoa_r+0x358>)
 8007cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cec:	9006      	str	r0, [sp, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <_dtoa_r+0x98>
 8007cf2:	4bb2      	ldr	r3, [pc, #712]	; (8007fbc <_dtoa_r+0x35c>)
 8007cf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	9806      	ldr	r0, [sp, #24]
 8007cfa:	b01d      	add	sp, #116	; 0x74
 8007cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	e7e1      	b.n	8007cc8 <_dtoa_r+0x68>
 8007d04:	9b08      	ldr	r3, [sp, #32]
 8007d06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007d08:	9312      	str	r3, [sp, #72]	; 0x48
 8007d0a:	9413      	str	r4, [sp, #76]	; 0x4c
 8007d0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d10:	2200      	movs	r2, #0
 8007d12:	2300      	movs	r3, #0
 8007d14:	f7f8 fb98 	bl	8000448 <__aeabi_dcmpeq>
 8007d18:	1e04      	subs	r4, r0, #0
 8007d1a:	d009      	beq.n	8007d30 <_dtoa_r+0xd0>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	4ba7      	ldr	r3, [pc, #668]	; (8007fc0 <_dtoa_r+0x360>)
 8007d24:	9306      	str	r3, [sp, #24]
 8007d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0e5      	beq.n	8007cf8 <_dtoa_r+0x98>
 8007d2c:	4ba5      	ldr	r3, [pc, #660]	; (8007fc4 <_dtoa_r+0x364>)
 8007d2e:	e7e1      	b.n	8007cf4 <_dtoa_r+0x94>
 8007d30:	ab1a      	add	r3, sp, #104	; 0x68
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	ab1b      	add	r3, sp, #108	; 0x6c
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	0038      	movs	r0, r7
 8007d3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d3e:	f001 fd49 	bl	80097d4 <__d2b>
 8007d42:	006e      	lsls	r6, r5, #1
 8007d44:	9005      	str	r0, [sp, #20]
 8007d46:	0d76      	lsrs	r6, r6, #21
 8007d48:	d100      	bne.n	8007d4c <_dtoa_r+0xec>
 8007d4a:	e07c      	b.n	8007e46 <_dtoa_r+0x1e6>
 8007d4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d52:	4a9d      	ldr	r2, [pc, #628]	; (8007fc8 <_dtoa_r+0x368>)
 8007d54:	031b      	lsls	r3, r3, #12
 8007d56:	0b1b      	lsrs	r3, r3, #12
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	0011      	movs	r1, r2
 8007d5c:	4b9b      	ldr	r3, [pc, #620]	; (8007fcc <_dtoa_r+0x36c>)
 8007d5e:	9418      	str	r4, [sp, #96]	; 0x60
 8007d60:	18f6      	adds	r6, r6, r3
 8007d62:	2200      	movs	r2, #0
 8007d64:	4b9a      	ldr	r3, [pc, #616]	; (8007fd0 <_dtoa_r+0x370>)
 8007d66:	f7fa fad1 	bl	800230c <__aeabi_dsub>
 8007d6a:	4a9a      	ldr	r2, [pc, #616]	; (8007fd4 <_dtoa_r+0x374>)
 8007d6c:	4b9a      	ldr	r3, [pc, #616]	; (8007fd8 <_dtoa_r+0x378>)
 8007d6e:	f7fa f861 	bl	8001e34 <__aeabi_dmul>
 8007d72:	4a9a      	ldr	r2, [pc, #616]	; (8007fdc <_dtoa_r+0x37c>)
 8007d74:	4b9a      	ldr	r3, [pc, #616]	; (8007fe0 <_dtoa_r+0x380>)
 8007d76:	f7f9 f91f 	bl	8000fb8 <__aeabi_dadd>
 8007d7a:	0004      	movs	r4, r0
 8007d7c:	0030      	movs	r0, r6
 8007d7e:	000d      	movs	r5, r1
 8007d80:	f7fa feaa 	bl	8002ad8 <__aeabi_i2d>
 8007d84:	4a97      	ldr	r2, [pc, #604]	; (8007fe4 <_dtoa_r+0x384>)
 8007d86:	4b98      	ldr	r3, [pc, #608]	; (8007fe8 <_dtoa_r+0x388>)
 8007d88:	f7fa f854 	bl	8001e34 <__aeabi_dmul>
 8007d8c:	0002      	movs	r2, r0
 8007d8e:	000b      	movs	r3, r1
 8007d90:	0020      	movs	r0, r4
 8007d92:	0029      	movs	r1, r5
 8007d94:	f7f9 f910 	bl	8000fb8 <__aeabi_dadd>
 8007d98:	0004      	movs	r4, r0
 8007d9a:	000d      	movs	r5, r1
 8007d9c:	f7fa fe66 	bl	8002a6c <__aeabi_d2iz>
 8007da0:	2200      	movs	r2, #0
 8007da2:	9002      	str	r0, [sp, #8]
 8007da4:	2300      	movs	r3, #0
 8007da6:	0020      	movs	r0, r4
 8007da8:	0029      	movs	r1, r5
 8007daa:	f7f8 fb53 	bl	8000454 <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d00b      	beq.n	8007dca <_dtoa_r+0x16a>
 8007db2:	9802      	ldr	r0, [sp, #8]
 8007db4:	f7fa fe90 	bl	8002ad8 <__aeabi_i2d>
 8007db8:	002b      	movs	r3, r5
 8007dba:	0022      	movs	r2, r4
 8007dbc:	f7f8 fb44 	bl	8000448 <__aeabi_dcmpeq>
 8007dc0:	4243      	negs	r3, r0
 8007dc2:	4158      	adcs	r0, r3
 8007dc4:	9b02      	ldr	r3, [sp, #8]
 8007dc6:	1a1b      	subs	r3, r3, r0
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	2301      	movs	r3, #1
 8007dcc:	9316      	str	r3, [sp, #88]	; 0x58
 8007dce:	9b02      	ldr	r3, [sp, #8]
 8007dd0:	2b16      	cmp	r3, #22
 8007dd2:	d80f      	bhi.n	8007df4 <_dtoa_r+0x194>
 8007dd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dd8:	00da      	lsls	r2, r3, #3
 8007dda:	4b84      	ldr	r3, [pc, #528]	; (8007fec <_dtoa_r+0x38c>)
 8007ddc:	189b      	adds	r3, r3, r2
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f7f8 fb37 	bl	8000454 <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d049      	beq.n	8007e7e <_dtoa_r+0x21e>
 8007dea:	9b02      	ldr	r3, [sp, #8]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	9302      	str	r3, [sp, #8]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9316      	str	r3, [sp, #88]	; 0x58
 8007df4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007df6:	1b9e      	subs	r6, r3, r6
 8007df8:	2300      	movs	r3, #0
 8007dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8007dfc:	0033      	movs	r3, r6
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	930d      	str	r3, [sp, #52]	; 0x34
 8007e02:	d504      	bpl.n	8007e0e <_dtoa_r+0x1ae>
 8007e04:	2301      	movs	r3, #1
 8007e06:	1b9b      	subs	r3, r3, r6
 8007e08:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e0e:	9b02      	ldr	r3, [sp, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	db36      	blt.n	8007e82 <_dtoa_r+0x222>
 8007e14:	9a02      	ldr	r2, [sp, #8]
 8007e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e18:	4694      	mov	ip, r2
 8007e1a:	4463      	add	r3, ip
 8007e1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9215      	str	r2, [sp, #84]	; 0x54
 8007e22:	930e      	str	r3, [sp, #56]	; 0x38
 8007e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e26:	2401      	movs	r4, #1
 8007e28:	2b09      	cmp	r3, #9
 8007e2a:	d864      	bhi.n	8007ef6 <_dtoa_r+0x296>
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	dd02      	ble.n	8007e36 <_dtoa_r+0x1d6>
 8007e30:	2400      	movs	r4, #0
 8007e32:	3b04      	subs	r3, #4
 8007e34:	9322      	str	r3, [sp, #136]	; 0x88
 8007e36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e38:	1e98      	subs	r0, r3, #2
 8007e3a:	2803      	cmp	r0, #3
 8007e3c:	d864      	bhi.n	8007f08 <_dtoa_r+0x2a8>
 8007e3e:	f7f8 f969 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007e42:	3829      	.short	0x3829
 8007e44:	5836      	.short	0x5836
 8007e46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e4a:	189e      	adds	r6, r3, r2
 8007e4c:	4b68      	ldr	r3, [pc, #416]	; (8007ff0 <_dtoa_r+0x390>)
 8007e4e:	18f2      	adds	r2, r6, r3
 8007e50:	2a20      	cmp	r2, #32
 8007e52:	dd0f      	ble.n	8007e74 <_dtoa_r+0x214>
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	409d      	lsls	r5, r3
 8007e5a:	4b66      	ldr	r3, [pc, #408]	; (8007ff4 <_dtoa_r+0x394>)
 8007e5c:	9802      	ldr	r0, [sp, #8]
 8007e5e:	18f3      	adds	r3, r6, r3
 8007e60:	40d8      	lsrs	r0, r3
 8007e62:	4328      	orrs	r0, r5
 8007e64:	f7fa fe68 	bl	8002b38 <__aeabi_ui2d>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4c63      	ldr	r4, [pc, #396]	; (8007ff8 <_dtoa_r+0x398>)
 8007e6c:	3e01      	subs	r6, #1
 8007e6e:	1909      	adds	r1, r1, r4
 8007e70:	9318      	str	r3, [sp, #96]	; 0x60
 8007e72:	e776      	b.n	8007d62 <_dtoa_r+0x102>
 8007e74:	2320      	movs	r3, #32
 8007e76:	9802      	ldr	r0, [sp, #8]
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	4098      	lsls	r0, r3
 8007e7c:	e7f2      	b.n	8007e64 <_dtoa_r+0x204>
 8007e7e:	9016      	str	r0, [sp, #88]	; 0x58
 8007e80:	e7b8      	b.n	8007df4 <_dtoa_r+0x194>
 8007e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e84:	9a02      	ldr	r2, [sp, #8]
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8a:	4253      	negs	r3, r2
 8007e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9315      	str	r3, [sp, #84]	; 0x54
 8007e92:	e7c7      	b.n	8007e24 <_dtoa_r+0x1c4>
 8007e94:	2300      	movs	r3, #0
 8007e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e9c:	9307      	str	r3, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dc13      	bgt.n	8007eca <_dtoa_r+0x26a>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	001a      	movs	r2, r3
 8007ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea8:	9307      	str	r3, [sp, #28]
 8007eaa:	9223      	str	r2, [sp, #140]	; 0x8c
 8007eac:	e00d      	b.n	8007eca <_dtoa_r+0x26a>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7f1      	b.n	8007e96 <_dtoa_r+0x236>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb8:	4694      	mov	ip, r2
 8007eba:	9b02      	ldr	r3, [sp, #8]
 8007ebc:	4463      	add	r3, ip
 8007ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	9307      	str	r3, [sp, #28]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dc00      	bgt.n	8007eca <_dtoa_r+0x26a>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	2200      	movs	r2, #0
 8007ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ece:	6042      	str	r2, [r0, #4]
 8007ed0:	3204      	adds	r2, #4
 8007ed2:	0015      	movs	r5, r2
 8007ed4:	3514      	adds	r5, #20
 8007ed6:	6841      	ldr	r1, [r0, #4]
 8007ed8:	429d      	cmp	r5, r3
 8007eda:	d919      	bls.n	8007f10 <_dtoa_r+0x2b0>
 8007edc:	0038      	movs	r0, r7
 8007ede:	f001 f881 	bl	8008fe4 <_Balloc>
 8007ee2:	9006      	str	r0, [sp, #24]
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d117      	bne.n	8007f18 <_dtoa_r+0x2b8>
 8007ee8:	21d5      	movs	r1, #213	; 0xd5
 8007eea:	0002      	movs	r2, r0
 8007eec:	4b43      	ldr	r3, [pc, #268]	; (8007ffc <_dtoa_r+0x39c>)
 8007eee:	0049      	lsls	r1, r1, #1
 8007ef0:	e6cb      	b.n	8007c8a <_dtoa_r+0x2a>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e7de      	b.n	8007eb4 <_dtoa_r+0x254>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	940f      	str	r4, [sp, #60]	; 0x3c
 8007efa:	9322      	str	r3, [sp, #136]	; 0x88
 8007efc:	3b01      	subs	r3, #1
 8007efe:	930c      	str	r3, [sp, #48]	; 0x30
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	2200      	movs	r2, #0
 8007f04:	3313      	adds	r3, #19
 8007f06:	e7d0      	b.n	8007eaa <_dtoa_r+0x24a>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f0c:	3b02      	subs	r3, #2
 8007f0e:	e7f6      	b.n	8007efe <_dtoa_r+0x29e>
 8007f10:	3101      	adds	r1, #1
 8007f12:	6041      	str	r1, [r0, #4]
 8007f14:	0052      	lsls	r2, r2, #1
 8007f16:	e7dc      	b.n	8007ed2 <_dtoa_r+0x272>
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	9a06      	ldr	r2, [sp, #24]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	2b0e      	cmp	r3, #14
 8007f22:	d900      	bls.n	8007f26 <_dtoa_r+0x2c6>
 8007f24:	e0eb      	b.n	80080fe <_dtoa_r+0x49e>
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d100      	bne.n	8007f2c <_dtoa_r+0x2cc>
 8007f2a:	e0e8      	b.n	80080fe <_dtoa_r+0x49e>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd68      	ble.n	8008004 <_dtoa_r+0x3a4>
 8007f32:	001a      	movs	r2, r3
 8007f34:	210f      	movs	r1, #15
 8007f36:	4b2d      	ldr	r3, [pc, #180]	; (8007fec <_dtoa_r+0x38c>)
 8007f38:	400a      	ands	r2, r1
 8007f3a:	00d2      	lsls	r2, r2, #3
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	681d      	ldr	r5, [r3, #0]
 8007f40:	685e      	ldr	r6, [r3, #4]
 8007f42:	9b02      	ldr	r3, [sp, #8]
 8007f44:	111c      	asrs	r4, r3, #4
 8007f46:	2302      	movs	r3, #2
 8007f48:	9310      	str	r3, [sp, #64]	; 0x40
 8007f4a:	9b02      	ldr	r3, [sp, #8]
 8007f4c:	05db      	lsls	r3, r3, #23
 8007f4e:	d50b      	bpl.n	8007f68 <_dtoa_r+0x308>
 8007f50:	4b2b      	ldr	r3, [pc, #172]	; (8008000 <_dtoa_r+0x3a0>)
 8007f52:	400c      	ands	r4, r1
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f5c:	f7f9 fb68 	bl	8001630 <__aeabi_ddiv>
 8007f60:	2303      	movs	r3, #3
 8007f62:	9008      	str	r0, [sp, #32]
 8007f64:	9109      	str	r1, [sp, #36]	; 0x24
 8007f66:	9310      	str	r3, [sp, #64]	; 0x40
 8007f68:	4b25      	ldr	r3, [pc, #148]	; (8008000 <_dtoa_r+0x3a0>)
 8007f6a:	9314      	str	r3, [sp, #80]	; 0x50
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d108      	bne.n	8007f82 <_dtoa_r+0x322>
 8007f70:	9808      	ldr	r0, [sp, #32]
 8007f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f74:	002a      	movs	r2, r5
 8007f76:	0033      	movs	r3, r6
 8007f78:	f7f9 fb5a 	bl	8001630 <__aeabi_ddiv>
 8007f7c:	9008      	str	r0, [sp, #32]
 8007f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f80:	e05c      	b.n	800803c <_dtoa_r+0x3dc>
 8007f82:	2301      	movs	r3, #1
 8007f84:	421c      	tst	r4, r3
 8007f86:	d00b      	beq.n	8007fa0 <_dtoa_r+0x340>
 8007f88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f8a:	0028      	movs	r0, r5
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f92:	0031      	movs	r1, r6
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f7f9 ff4c 	bl	8001e34 <__aeabi_dmul>
 8007f9c:	0005      	movs	r5, r0
 8007f9e:	000e      	movs	r6, r1
 8007fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa2:	1064      	asrs	r4, r4, #1
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	e7e0      	b.n	8007f6a <_dtoa_r+0x30a>
 8007fa8:	0800ae8e 	.word	0x0800ae8e
 8007fac:	0800aea5 	.word	0x0800aea5
 8007fb0:	7ff00000 	.word	0x7ff00000
 8007fb4:	0000270f 	.word	0x0000270f
 8007fb8:	0800ae8a 	.word	0x0800ae8a
 8007fbc:	0800ae8d 	.word	0x0800ae8d
 8007fc0:	0800ad04 	.word	0x0800ad04
 8007fc4:	0800ad05 	.word	0x0800ad05
 8007fc8:	3ff00000 	.word	0x3ff00000
 8007fcc:	fffffc01 	.word	0xfffffc01
 8007fd0:	3ff80000 	.word	0x3ff80000
 8007fd4:	636f4361 	.word	0x636f4361
 8007fd8:	3fd287a7 	.word	0x3fd287a7
 8007fdc:	8b60c8b3 	.word	0x8b60c8b3
 8007fe0:	3fc68a28 	.word	0x3fc68a28
 8007fe4:	509f79fb 	.word	0x509f79fb
 8007fe8:	3fd34413 	.word	0x3fd34413
 8007fec:	0800b010 	.word	0x0800b010
 8007ff0:	00000432 	.word	0x00000432
 8007ff4:	00000412 	.word	0x00000412
 8007ff8:	fe100000 	.word	0xfe100000
 8007ffc:	0800af00 	.word	0x0800af00
 8008000:	0800afe8 	.word	0x0800afe8
 8008004:	2302      	movs	r3, #2
 8008006:	9310      	str	r3, [sp, #64]	; 0x40
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <_dtoa_r+0x3dc>
 800800e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008010:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008012:	425c      	negs	r4, r3
 8008014:	230f      	movs	r3, #15
 8008016:	4ab6      	ldr	r2, [pc, #728]	; (80082f0 <_dtoa_r+0x690>)
 8008018:	4023      	ands	r3, r4
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f7f9 ff07 	bl	8001e34 <__aeabi_dmul>
 8008026:	2601      	movs	r6, #1
 8008028:	2300      	movs	r3, #0
 800802a:	9008      	str	r0, [sp, #32]
 800802c:	9109      	str	r1, [sp, #36]	; 0x24
 800802e:	4db1      	ldr	r5, [pc, #708]	; (80082f4 <_dtoa_r+0x694>)
 8008030:	1124      	asrs	r4, r4, #4
 8008032:	2c00      	cmp	r4, #0
 8008034:	d000      	beq.n	8008038 <_dtoa_r+0x3d8>
 8008036:	e094      	b.n	8008162 <_dtoa_r+0x502>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d19f      	bne.n	8007f7c <_dtoa_r+0x31c>
 800803c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800803e:	2b00      	cmp	r3, #0
 8008040:	d100      	bne.n	8008044 <_dtoa_r+0x3e4>
 8008042:	e09b      	b.n	800817c <_dtoa_r+0x51c>
 8008044:	9c08      	ldr	r4, [sp, #32]
 8008046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008048:	2200      	movs	r2, #0
 800804a:	0020      	movs	r0, r4
 800804c:	0029      	movs	r1, r5
 800804e:	4baa      	ldr	r3, [pc, #680]	; (80082f8 <_dtoa_r+0x698>)
 8008050:	f7f8 fa00 	bl	8000454 <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	d100      	bne.n	800805a <_dtoa_r+0x3fa>
 8008058:	e090      	b.n	800817c <_dtoa_r+0x51c>
 800805a:	9b07      	ldr	r3, [sp, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d100      	bne.n	8008062 <_dtoa_r+0x402>
 8008060:	e08c      	b.n	800817c <_dtoa_r+0x51c>
 8008062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008064:	2b00      	cmp	r3, #0
 8008066:	dd46      	ble.n	80080f6 <_dtoa_r+0x496>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	0020      	movs	r0, r4
 800806e:	0029      	movs	r1, r5
 8008070:	1e5e      	subs	r6, r3, #1
 8008072:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <_dtoa_r+0x69c>)
 8008074:	f7f9 fede 	bl	8001e34 <__aeabi_dmul>
 8008078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800807a:	9008      	str	r0, [sp, #32]
 800807c:	9109      	str	r1, [sp, #36]	; 0x24
 800807e:	3301      	adds	r3, #1
 8008080:	9310      	str	r3, [sp, #64]	; 0x40
 8008082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008084:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008086:	9c08      	ldr	r4, [sp, #32]
 8008088:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800808a:	9314      	str	r3, [sp, #80]	; 0x50
 800808c:	f7fa fd24 	bl	8002ad8 <__aeabi_i2d>
 8008090:	0022      	movs	r2, r4
 8008092:	002b      	movs	r3, r5
 8008094:	f7f9 fece 	bl	8001e34 <__aeabi_dmul>
 8008098:	2200      	movs	r2, #0
 800809a:	4b99      	ldr	r3, [pc, #612]	; (8008300 <_dtoa_r+0x6a0>)
 800809c:	f7f8 ff8c 	bl	8000fb8 <__aeabi_dadd>
 80080a0:	9010      	str	r0, [sp, #64]	; 0x40
 80080a2:	9111      	str	r1, [sp, #68]	; 0x44
 80080a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080a8:	9208      	str	r2, [sp, #32]
 80080aa:	9309      	str	r3, [sp, #36]	; 0x24
 80080ac:	4a95      	ldr	r2, [pc, #596]	; (8008304 <_dtoa_r+0x6a4>)
 80080ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b0:	4694      	mov	ip, r2
 80080b2:	4463      	add	r3, ip
 80080b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
 80080b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d161      	bne.n	8008182 <_dtoa_r+0x522>
 80080be:	2200      	movs	r2, #0
 80080c0:	0020      	movs	r0, r4
 80080c2:	0029      	movs	r1, r5
 80080c4:	4b90      	ldr	r3, [pc, #576]	; (8008308 <_dtoa_r+0x6a8>)
 80080c6:	f7fa f921 	bl	800230c <__aeabi_dsub>
 80080ca:	9a08      	ldr	r2, [sp, #32]
 80080cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ce:	0004      	movs	r4, r0
 80080d0:	000d      	movs	r5, r1
 80080d2:	f7f8 f9d3 	bl	800047c <__aeabi_dcmpgt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d000      	beq.n	80080dc <_dtoa_r+0x47c>
 80080da:	e2af      	b.n	800863c <_dtoa_r+0x9dc>
 80080dc:	488b      	ldr	r0, [pc, #556]	; (800830c <_dtoa_r+0x6ac>)
 80080de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080e0:	4684      	mov	ip, r0
 80080e2:	4461      	add	r1, ip
 80080e4:	000b      	movs	r3, r1
 80080e6:	0020      	movs	r0, r4
 80080e8:	0029      	movs	r1, r5
 80080ea:	9a08      	ldr	r2, [sp, #32]
 80080ec:	f7f8 f9b2 	bl	8000454 <__aeabi_dcmplt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d000      	beq.n	80080f6 <_dtoa_r+0x496>
 80080f4:	e29f      	b.n	8008636 <_dtoa_r+0x9d6>
 80080f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80080fa:	9308      	str	r3, [sp, #32]
 80080fc:	9409      	str	r4, [sp, #36]	; 0x24
 80080fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008100:	2b00      	cmp	r3, #0
 8008102:	da00      	bge.n	8008106 <_dtoa_r+0x4a6>
 8008104:	e172      	b.n	80083ec <_dtoa_r+0x78c>
 8008106:	9a02      	ldr	r2, [sp, #8]
 8008108:	2a0e      	cmp	r2, #14
 800810a:	dd00      	ble.n	800810e <_dtoa_r+0x4ae>
 800810c:	e16e      	b.n	80083ec <_dtoa_r+0x78c>
 800810e:	4b78      	ldr	r3, [pc, #480]	; (80082f0 <_dtoa_r+0x690>)
 8008110:	00d2      	lsls	r2, r2, #3
 8008112:	189b      	adds	r3, r3, r2
 8008114:	685c      	ldr	r4, [r3, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	930a      	str	r3, [sp, #40]	; 0x28
 800811a:	940b      	str	r4, [sp, #44]	; 0x2c
 800811c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800811e:	2b00      	cmp	r3, #0
 8008120:	db00      	blt.n	8008124 <_dtoa_r+0x4c4>
 8008122:	e0f7      	b.n	8008314 <_dtoa_r+0x6b4>
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	dd00      	ble.n	800812c <_dtoa_r+0x4cc>
 800812a:	e0f3      	b.n	8008314 <_dtoa_r+0x6b4>
 800812c:	d000      	beq.n	8008130 <_dtoa_r+0x4d0>
 800812e:	e282      	b.n	8008636 <_dtoa_r+0x9d6>
 8008130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008134:	2200      	movs	r2, #0
 8008136:	4b74      	ldr	r3, [pc, #464]	; (8008308 <_dtoa_r+0x6a8>)
 8008138:	f7f9 fe7c 	bl	8001e34 <__aeabi_dmul>
 800813c:	9a08      	ldr	r2, [sp, #32]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	f7f8 f9a6 	bl	8000490 <__aeabi_dcmpge>
 8008144:	9e07      	ldr	r6, [sp, #28]
 8008146:	0035      	movs	r5, r6
 8008148:	2800      	cmp	r0, #0
 800814a:	d000      	beq.n	800814e <_dtoa_r+0x4ee>
 800814c:	e259      	b.n	8008602 <_dtoa_r+0x9a2>
 800814e:	9b06      	ldr	r3, [sp, #24]
 8008150:	9a06      	ldr	r2, [sp, #24]
 8008152:	3301      	adds	r3, #1
 8008154:	9308      	str	r3, [sp, #32]
 8008156:	2331      	movs	r3, #49	; 0x31
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	9b02      	ldr	r3, [sp, #8]
 800815c:	3301      	adds	r3, #1
 800815e:	9302      	str	r3, [sp, #8]
 8008160:	e254      	b.n	800860c <_dtoa_r+0x9ac>
 8008162:	4234      	tst	r4, r6
 8008164:	d007      	beq.n	8008176 <_dtoa_r+0x516>
 8008166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008168:	3301      	adds	r3, #1
 800816a:	9310      	str	r3, [sp, #64]	; 0x40
 800816c:	682a      	ldr	r2, [r5, #0]
 800816e:	686b      	ldr	r3, [r5, #4]
 8008170:	f7f9 fe60 	bl	8001e34 <__aeabi_dmul>
 8008174:	0033      	movs	r3, r6
 8008176:	1064      	asrs	r4, r4, #1
 8008178:	3508      	adds	r5, #8
 800817a:	e75a      	b.n	8008032 <_dtoa_r+0x3d2>
 800817c:	9e02      	ldr	r6, [sp, #8]
 800817e:	9b07      	ldr	r3, [sp, #28]
 8008180:	e780      	b.n	8008084 <_dtoa_r+0x424>
 8008182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008184:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008186:	1e5a      	subs	r2, r3, #1
 8008188:	4b59      	ldr	r3, [pc, #356]	; (80082f0 <_dtoa_r+0x690>)
 800818a:	00d2      	lsls	r2, r2, #3
 800818c:	189b      	adds	r3, r3, r2
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2900      	cmp	r1, #0
 8008194:	d051      	beq.n	800823a <_dtoa_r+0x5da>
 8008196:	2000      	movs	r0, #0
 8008198:	495d      	ldr	r1, [pc, #372]	; (8008310 <_dtoa_r+0x6b0>)
 800819a:	f7f9 fa49 	bl	8001630 <__aeabi_ddiv>
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a2:	f7fa f8b3 	bl	800230c <__aeabi_dsub>
 80081a6:	9a06      	ldr	r2, [sp, #24]
 80081a8:	9b06      	ldr	r3, [sp, #24]
 80081aa:	4694      	mov	ip, r2
 80081ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80081ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081b0:	9010      	str	r0, [sp, #64]	; 0x40
 80081b2:	9111      	str	r1, [sp, #68]	; 0x44
 80081b4:	4463      	add	r3, ip
 80081b6:	9319      	str	r3, [sp, #100]	; 0x64
 80081b8:	0029      	movs	r1, r5
 80081ba:	0020      	movs	r0, r4
 80081bc:	f7fa fc56 	bl	8002a6c <__aeabi_d2iz>
 80081c0:	9014      	str	r0, [sp, #80]	; 0x50
 80081c2:	f7fa fc89 	bl	8002ad8 <__aeabi_i2d>
 80081c6:	0002      	movs	r2, r0
 80081c8:	000b      	movs	r3, r1
 80081ca:	0020      	movs	r0, r4
 80081cc:	0029      	movs	r1, r5
 80081ce:	f7fa f89d 	bl	800230c <__aeabi_dsub>
 80081d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081d6:	3301      	adds	r3, #1
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081dc:	0004      	movs	r4, r0
 80081de:	3330      	adds	r3, #48	; 0x30
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081e6:	000d      	movs	r5, r1
 80081e8:	f7f8 f934 	bl	8000454 <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d175      	bne.n	80082dc <_dtoa_r+0x67c>
 80081f0:	0022      	movs	r2, r4
 80081f2:	002b      	movs	r3, r5
 80081f4:	2000      	movs	r0, #0
 80081f6:	4940      	ldr	r1, [pc, #256]	; (80082f8 <_dtoa_r+0x698>)
 80081f8:	f7fa f888 	bl	800230c <__aeabi_dsub>
 80081fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008200:	f7f8 f928 	bl	8000454 <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	d000      	beq.n	800820a <_dtoa_r+0x5aa>
 8008208:	e0d2      	b.n	80083b0 <_dtoa_r+0x750>
 800820a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800820c:	9a08      	ldr	r2, [sp, #32]
 800820e:	4293      	cmp	r3, r2
 8008210:	d100      	bne.n	8008214 <_dtoa_r+0x5b4>
 8008212:	e770      	b.n	80080f6 <_dtoa_r+0x496>
 8008214:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008216:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008218:	2200      	movs	r2, #0
 800821a:	4b38      	ldr	r3, [pc, #224]	; (80082fc <_dtoa_r+0x69c>)
 800821c:	f7f9 fe0a 	bl	8001e34 <__aeabi_dmul>
 8008220:	4b36      	ldr	r3, [pc, #216]	; (80082fc <_dtoa_r+0x69c>)
 8008222:	9010      	str	r0, [sp, #64]	; 0x40
 8008224:	9111      	str	r1, [sp, #68]	; 0x44
 8008226:	2200      	movs	r2, #0
 8008228:	0020      	movs	r0, r4
 800822a:	0029      	movs	r1, r5
 800822c:	f7f9 fe02 	bl	8001e34 <__aeabi_dmul>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	0004      	movs	r4, r0
 8008234:	000d      	movs	r5, r1
 8008236:	9317      	str	r3, [sp, #92]	; 0x5c
 8008238:	e7be      	b.n	80081b8 <_dtoa_r+0x558>
 800823a:	9808      	ldr	r0, [sp, #32]
 800823c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800823e:	f7f9 fdf9 	bl	8001e34 <__aeabi_dmul>
 8008242:	9a06      	ldr	r2, [sp, #24]
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	4694      	mov	ip, r2
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800824c:	9010      	str	r0, [sp, #64]	; 0x40
 800824e:	9111      	str	r1, [sp, #68]	; 0x44
 8008250:	4463      	add	r3, ip
 8008252:	9319      	str	r3, [sp, #100]	; 0x64
 8008254:	0029      	movs	r1, r5
 8008256:	0020      	movs	r0, r4
 8008258:	f7fa fc08 	bl	8002a6c <__aeabi_d2iz>
 800825c:	9017      	str	r0, [sp, #92]	; 0x5c
 800825e:	f7fa fc3b 	bl	8002ad8 <__aeabi_i2d>
 8008262:	0002      	movs	r2, r0
 8008264:	000b      	movs	r3, r1
 8008266:	0020      	movs	r0, r4
 8008268:	0029      	movs	r1, r5
 800826a:	f7fa f84f 	bl	800230c <__aeabi_dsub>
 800826e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008270:	9a08      	ldr	r2, [sp, #32]
 8008272:	3330      	adds	r3, #48	; 0x30
 8008274:	7013      	strb	r3, [r2, #0]
 8008276:	0013      	movs	r3, r2
 8008278:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800827a:	3301      	adds	r3, #1
 800827c:	0004      	movs	r4, r0
 800827e:	000d      	movs	r5, r1
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	4293      	cmp	r3, r2
 8008284:	d12c      	bne.n	80082e0 <_dtoa_r+0x680>
 8008286:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008288:	9911      	ldr	r1, [sp, #68]	; 0x44
 800828a:	9a06      	ldr	r2, [sp, #24]
 800828c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800828e:	4694      	mov	ip, r2
 8008290:	4463      	add	r3, ip
 8008292:	2200      	movs	r2, #0
 8008294:	9308      	str	r3, [sp, #32]
 8008296:	4b1e      	ldr	r3, [pc, #120]	; (8008310 <_dtoa_r+0x6b0>)
 8008298:	f7f8 fe8e 	bl	8000fb8 <__aeabi_dadd>
 800829c:	0002      	movs	r2, r0
 800829e:	000b      	movs	r3, r1
 80082a0:	0020      	movs	r0, r4
 80082a2:	0029      	movs	r1, r5
 80082a4:	f7f8 f8ea 	bl	800047c <__aeabi_dcmpgt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d000      	beq.n	80082ae <_dtoa_r+0x64e>
 80082ac:	e080      	b.n	80083b0 <_dtoa_r+0x750>
 80082ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b2:	2000      	movs	r0, #0
 80082b4:	4916      	ldr	r1, [pc, #88]	; (8008310 <_dtoa_r+0x6b0>)
 80082b6:	f7fa f829 	bl	800230c <__aeabi_dsub>
 80082ba:	0002      	movs	r2, r0
 80082bc:	000b      	movs	r3, r1
 80082be:	0020      	movs	r0, r4
 80082c0:	0029      	movs	r1, r5
 80082c2:	f7f8 f8c7 	bl	8000454 <__aeabi_dcmplt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d100      	bne.n	80082cc <_dtoa_r+0x66c>
 80082ca:	e714      	b.n	80080f6 <_dtoa_r+0x496>
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	001a      	movs	r2, r3
 80082d0:	3a01      	subs	r2, #1
 80082d2:	9208      	str	r2, [sp, #32]
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	2a30      	cmp	r2, #48	; 0x30
 80082d8:	d0f8      	beq.n	80082cc <_dtoa_r+0x66c>
 80082da:	9308      	str	r3, [sp, #32]
 80082dc:	9602      	str	r6, [sp, #8]
 80082de:	e055      	b.n	800838c <_dtoa_r+0x72c>
 80082e0:	2200      	movs	r2, #0
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <_dtoa_r+0x69c>)
 80082e4:	f7f9 fda6 	bl	8001e34 <__aeabi_dmul>
 80082e8:	0004      	movs	r4, r0
 80082ea:	000d      	movs	r5, r1
 80082ec:	e7b2      	b.n	8008254 <_dtoa_r+0x5f4>
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	0800b010 	.word	0x0800b010
 80082f4:	0800afe8 	.word	0x0800afe8
 80082f8:	3ff00000 	.word	0x3ff00000
 80082fc:	40240000 	.word	0x40240000
 8008300:	401c0000 	.word	0x401c0000
 8008304:	fcc00000 	.word	0xfcc00000
 8008308:	40140000 	.word	0x40140000
 800830c:	7cc00000 	.word	0x7cc00000
 8008310:	3fe00000 	.word	0x3fe00000
 8008314:	9b07      	ldr	r3, [sp, #28]
 8008316:	9e06      	ldr	r6, [sp, #24]
 8008318:	3b01      	subs	r3, #1
 800831a:	199b      	adds	r3, r3, r6
 800831c:	930c      	str	r3, [sp, #48]	; 0x30
 800831e:	9c08      	ldr	r4, [sp, #32]
 8008320:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008326:	0020      	movs	r0, r4
 8008328:	0029      	movs	r1, r5
 800832a:	f7f9 f981 	bl	8001630 <__aeabi_ddiv>
 800832e:	f7fa fb9d 	bl	8002a6c <__aeabi_d2iz>
 8008332:	9007      	str	r0, [sp, #28]
 8008334:	f7fa fbd0 	bl	8002ad8 <__aeabi_i2d>
 8008338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833c:	f7f9 fd7a 	bl	8001e34 <__aeabi_dmul>
 8008340:	0002      	movs	r2, r0
 8008342:	000b      	movs	r3, r1
 8008344:	0020      	movs	r0, r4
 8008346:	0029      	movs	r1, r5
 8008348:	f7f9 ffe0 	bl	800230c <__aeabi_dsub>
 800834c:	0033      	movs	r3, r6
 800834e:	9a07      	ldr	r2, [sp, #28]
 8008350:	3601      	adds	r6, #1
 8008352:	3230      	adds	r2, #48	; 0x30
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008358:	9608      	str	r6, [sp, #32]
 800835a:	429a      	cmp	r2, r3
 800835c:	d139      	bne.n	80083d2 <_dtoa_r+0x772>
 800835e:	0002      	movs	r2, r0
 8008360:	000b      	movs	r3, r1
 8008362:	f7f8 fe29 	bl	8000fb8 <__aeabi_dadd>
 8008366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836a:	0004      	movs	r4, r0
 800836c:	000d      	movs	r5, r1
 800836e:	f7f8 f885 	bl	800047c <__aeabi_dcmpgt>
 8008372:	2800      	cmp	r0, #0
 8008374:	d11b      	bne.n	80083ae <_dtoa_r+0x74e>
 8008376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837a:	0020      	movs	r0, r4
 800837c:	0029      	movs	r1, r5
 800837e:	f7f8 f863 	bl	8000448 <__aeabi_dcmpeq>
 8008382:	2800      	cmp	r0, #0
 8008384:	d002      	beq.n	800838c <_dtoa_r+0x72c>
 8008386:	9b07      	ldr	r3, [sp, #28]
 8008388:	07db      	lsls	r3, r3, #31
 800838a:	d410      	bmi.n	80083ae <_dtoa_r+0x74e>
 800838c:	0038      	movs	r0, r7
 800838e:	9905      	ldr	r1, [sp, #20]
 8008390:	f000 fe6c 	bl	800906c <_Bfree>
 8008394:	2300      	movs	r3, #0
 8008396:	9a08      	ldr	r2, [sp, #32]
 8008398:	9802      	ldr	r0, [sp, #8]
 800839a:	7013      	strb	r3, [r2, #0]
 800839c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800839e:	3001      	adds	r0, #1
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d100      	bne.n	80083aa <_dtoa_r+0x74a>
 80083a8:	e4a6      	b.n	8007cf8 <_dtoa_r+0x98>
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e4a4      	b.n	8007cf8 <_dtoa_r+0x98>
 80083ae:	9e02      	ldr	r6, [sp, #8]
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	9308      	str	r3, [sp, #32]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	2a39      	cmp	r2, #57	; 0x39
 80083ba:	d106      	bne.n	80083ca <_dtoa_r+0x76a>
 80083bc:	9a06      	ldr	r2, [sp, #24]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d1f7      	bne.n	80083b2 <_dtoa_r+0x752>
 80083c2:	2230      	movs	r2, #48	; 0x30
 80083c4:	9906      	ldr	r1, [sp, #24]
 80083c6:	3601      	adds	r6, #1
 80083c8:	700a      	strb	r2, [r1, #0]
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	3201      	adds	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e784      	b.n	80082dc <_dtoa_r+0x67c>
 80083d2:	2200      	movs	r2, #0
 80083d4:	4baa      	ldr	r3, [pc, #680]	; (8008680 <_dtoa_r+0xa20>)
 80083d6:	f7f9 fd2d 	bl	8001e34 <__aeabi_dmul>
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	0004      	movs	r4, r0
 80083e0:	000d      	movs	r5, r1
 80083e2:	f7f8 f831 	bl	8000448 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d09b      	beq.n	8008322 <_dtoa_r+0x6c2>
 80083ea:	e7cf      	b.n	800838c <_dtoa_r+0x72c>
 80083ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80083ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80083f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	d012      	beq.n	800841c <_dtoa_r+0x7bc>
 80083f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083f8:	2a01      	cmp	r2, #1
 80083fa:	dc66      	bgt.n	80084ca <_dtoa_r+0x86a>
 80083fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083fe:	2a00      	cmp	r2, #0
 8008400:	d05d      	beq.n	80084be <_dtoa_r+0x85e>
 8008402:	4aa0      	ldr	r2, [pc, #640]	; (8008684 <_dtoa_r+0xa24>)
 8008404:	189b      	adds	r3, r3, r2
 8008406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008408:	2101      	movs	r1, #1
 800840a:	18d2      	adds	r2, r2, r3
 800840c:	920a      	str	r2, [sp, #40]	; 0x28
 800840e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008410:	0038      	movs	r0, r7
 8008412:	18d3      	adds	r3, r2, r3
 8008414:	930d      	str	r3, [sp, #52]	; 0x34
 8008416:	f000 ff25 	bl	8009264 <__i2b>
 800841a:	0005      	movs	r5, r0
 800841c:	2c00      	cmp	r4, #0
 800841e:	dd0e      	ble.n	800843e <_dtoa_r+0x7de>
 8008420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd0b      	ble.n	800843e <_dtoa_r+0x7de>
 8008426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008428:	0023      	movs	r3, r4
 800842a:	4294      	cmp	r4, r2
 800842c:	dd00      	ble.n	8008430 <_dtoa_r+0x7d0>
 800842e:	0013      	movs	r3, r2
 8008430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008432:	1ae4      	subs	r4, r4, r3
 8008434:	1ad2      	subs	r2, r2, r3
 8008436:	920a      	str	r2, [sp, #40]	; 0x28
 8008438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	930d      	str	r3, [sp, #52]	; 0x34
 800843e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01f      	beq.n	8008484 <_dtoa_r+0x824>
 8008444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d054      	beq.n	80084f4 <_dtoa_r+0x894>
 800844a:	2e00      	cmp	r6, #0
 800844c:	dd11      	ble.n	8008472 <_dtoa_r+0x812>
 800844e:	0029      	movs	r1, r5
 8008450:	0032      	movs	r2, r6
 8008452:	0038      	movs	r0, r7
 8008454:	f000 ffcc 	bl	80093f0 <__pow5mult>
 8008458:	9a05      	ldr	r2, [sp, #20]
 800845a:	0001      	movs	r1, r0
 800845c:	0005      	movs	r5, r0
 800845e:	0038      	movs	r0, r7
 8008460:	f000 ff16 	bl	8009290 <__multiply>
 8008464:	9905      	ldr	r1, [sp, #20]
 8008466:	9014      	str	r0, [sp, #80]	; 0x50
 8008468:	0038      	movs	r0, r7
 800846a:	f000 fdff 	bl	800906c <_Bfree>
 800846e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008474:	1b9a      	subs	r2, r3, r6
 8008476:	42b3      	cmp	r3, r6
 8008478:	d004      	beq.n	8008484 <_dtoa_r+0x824>
 800847a:	0038      	movs	r0, r7
 800847c:	9905      	ldr	r1, [sp, #20]
 800847e:	f000 ffb7 	bl	80093f0 <__pow5mult>
 8008482:	9005      	str	r0, [sp, #20]
 8008484:	2101      	movs	r1, #1
 8008486:	0038      	movs	r0, r7
 8008488:	f000 feec 	bl	8009264 <__i2b>
 800848c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800848e:	0006      	movs	r6, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	dd31      	ble.n	80084f8 <_dtoa_r+0x898>
 8008494:	001a      	movs	r2, r3
 8008496:	0001      	movs	r1, r0
 8008498:	0038      	movs	r0, r7
 800849a:	f000 ffa9 	bl	80093f0 <__pow5mult>
 800849e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084a0:	0006      	movs	r6, r0
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	dd2d      	ble.n	8008502 <_dtoa_r+0x8a2>
 80084a6:	2300      	movs	r3, #0
 80084a8:	930e      	str	r3, [sp, #56]	; 0x38
 80084aa:	6933      	ldr	r3, [r6, #16]
 80084ac:	3303      	adds	r3, #3
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	18f3      	adds	r3, r6, r3
 80084b2:	6858      	ldr	r0, [r3, #4]
 80084b4:	f000 fe8e 	bl	80091d4 <__hi0bits>
 80084b8:	2320      	movs	r3, #32
 80084ba:	1a18      	subs	r0, r3, r0
 80084bc:	e039      	b.n	8008532 <_dtoa_r+0x8d2>
 80084be:	2336      	movs	r3, #54	; 0x36
 80084c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80084c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80084c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	e79d      	b.n	8008406 <_dtoa_r+0x7a6>
 80084ca:	9b07      	ldr	r3, [sp, #28]
 80084cc:	1e5e      	subs	r6, r3, #1
 80084ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d0:	42b3      	cmp	r3, r6
 80084d2:	db07      	blt.n	80084e4 <_dtoa_r+0x884>
 80084d4:	1b9e      	subs	r6, r3, r6
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da93      	bge.n	8008406 <_dtoa_r+0x7a6>
 80084de:	1ae4      	subs	r4, r4, r3
 80084e0:	2300      	movs	r3, #0
 80084e2:	e790      	b.n	8008406 <_dtoa_r+0x7a6>
 80084e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084e8:	1af3      	subs	r3, r6, r3
 80084ea:	18d3      	adds	r3, r2, r3
 80084ec:	960e      	str	r6, [sp, #56]	; 0x38
 80084ee:	9315      	str	r3, [sp, #84]	; 0x54
 80084f0:	2600      	movs	r6, #0
 80084f2:	e7f0      	b.n	80084d6 <_dtoa_r+0x876>
 80084f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f6:	e7c0      	b.n	800847a <_dtoa_r+0x81a>
 80084f8:	2300      	movs	r3, #0
 80084fa:	930e      	str	r3, [sp, #56]	; 0x38
 80084fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fe:	2b01      	cmp	r3, #1
 8008500:	dc13      	bgt.n	800852a <_dtoa_r+0x8ca>
 8008502:	2300      	movs	r3, #0
 8008504:	930e      	str	r3, [sp, #56]	; 0x38
 8008506:	9b08      	ldr	r3, [sp, #32]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10e      	bne.n	800852a <_dtoa_r+0x8ca>
 800850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850e:	031b      	lsls	r3, r3, #12
 8008510:	d10b      	bne.n	800852a <_dtoa_r+0x8ca>
 8008512:	4b5d      	ldr	r3, [pc, #372]	; (8008688 <_dtoa_r+0xa28>)
 8008514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008516:	4213      	tst	r3, r2
 8008518:	d007      	beq.n	800852a <_dtoa_r+0x8ca>
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	3301      	adds	r3, #1
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008522:	3301      	adds	r3, #1
 8008524:	930d      	str	r3, [sp, #52]	; 0x34
 8008526:	2301      	movs	r3, #1
 8008528:	930e      	str	r3, [sp, #56]	; 0x38
 800852a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800852c:	2001      	movs	r0, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1bb      	bne.n	80084aa <_dtoa_r+0x84a>
 8008532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008534:	221f      	movs	r2, #31
 8008536:	1818      	adds	r0, r3, r0
 8008538:	0003      	movs	r3, r0
 800853a:	4013      	ands	r3, r2
 800853c:	4210      	tst	r0, r2
 800853e:	d046      	beq.n	80085ce <_dtoa_r+0x96e>
 8008540:	3201      	adds	r2, #1
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	2a04      	cmp	r2, #4
 8008546:	dd3f      	ble.n	80085c8 <_dtoa_r+0x968>
 8008548:	221c      	movs	r2, #28
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800854e:	18e4      	adds	r4, r4, r3
 8008550:	18d2      	adds	r2, r2, r3
 8008552:	920a      	str	r2, [sp, #40]	; 0x28
 8008554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008556:	18d3      	adds	r3, r2, r3
 8008558:	930d      	str	r3, [sp, #52]	; 0x34
 800855a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	dd05      	ble.n	800856c <_dtoa_r+0x90c>
 8008560:	001a      	movs	r2, r3
 8008562:	0038      	movs	r0, r7
 8008564:	9905      	ldr	r1, [sp, #20]
 8008566:	f000 ff9f 	bl	80094a8 <__lshift>
 800856a:	9005      	str	r0, [sp, #20]
 800856c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd05      	ble.n	800857e <_dtoa_r+0x91e>
 8008572:	0031      	movs	r1, r6
 8008574:	001a      	movs	r2, r3
 8008576:	0038      	movs	r0, r7
 8008578:	f000 ff96 	bl	80094a8 <__lshift>
 800857c:	0006      	movs	r6, r0
 800857e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008580:	2b00      	cmp	r3, #0
 8008582:	d026      	beq.n	80085d2 <_dtoa_r+0x972>
 8008584:	0031      	movs	r1, r6
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f000 fffc 	bl	8009584 <__mcmp>
 800858c:	2800      	cmp	r0, #0
 800858e:	da20      	bge.n	80085d2 <_dtoa_r+0x972>
 8008590:	9b02      	ldr	r3, [sp, #8]
 8008592:	220a      	movs	r2, #10
 8008594:	3b01      	subs	r3, #1
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	0038      	movs	r0, r7
 800859a:	2300      	movs	r3, #0
 800859c:	9905      	ldr	r1, [sp, #20]
 800859e:	f000 fd89 	bl	80090b4 <__multadd>
 80085a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085a4:	9005      	str	r0, [sp, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d100      	bne.n	80085ac <_dtoa_r+0x94c>
 80085aa:	e166      	b.n	800887a <_dtoa_r+0xc1a>
 80085ac:	2300      	movs	r3, #0
 80085ae:	0029      	movs	r1, r5
 80085b0:	220a      	movs	r2, #10
 80085b2:	0038      	movs	r0, r7
 80085b4:	f000 fd7e 	bl	80090b4 <__multadd>
 80085b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ba:	0005      	movs	r5, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dc47      	bgt.n	8008650 <_dtoa_r+0x9f0>
 80085c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	dc0d      	bgt.n	80085e2 <_dtoa_r+0x982>
 80085c6:	e043      	b.n	8008650 <_dtoa_r+0x9f0>
 80085c8:	2a04      	cmp	r2, #4
 80085ca:	d0c6      	beq.n	800855a <_dtoa_r+0x8fa>
 80085cc:	0013      	movs	r3, r2
 80085ce:	331c      	adds	r3, #28
 80085d0:	e7bc      	b.n	800854c <_dtoa_r+0x8ec>
 80085d2:	9b07      	ldr	r3, [sp, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc35      	bgt.n	8008644 <_dtoa_r+0x9e4>
 80085d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085da:	2b02      	cmp	r3, #2
 80085dc:	dd32      	ble.n	8008644 <_dtoa_r+0x9e4>
 80085de:	9b07      	ldr	r3, [sp, #28]
 80085e0:	930c      	str	r3, [sp, #48]	; 0x30
 80085e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10c      	bne.n	8008602 <_dtoa_r+0x9a2>
 80085e8:	0031      	movs	r1, r6
 80085ea:	2205      	movs	r2, #5
 80085ec:	0038      	movs	r0, r7
 80085ee:	f000 fd61 	bl	80090b4 <__multadd>
 80085f2:	0006      	movs	r6, r0
 80085f4:	0001      	movs	r1, r0
 80085f6:	9805      	ldr	r0, [sp, #20]
 80085f8:	f000 ffc4 	bl	8009584 <__mcmp>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	dd00      	ble.n	8008602 <_dtoa_r+0x9a2>
 8008600:	e5a5      	b.n	800814e <_dtoa_r+0x4ee>
 8008602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008604:	43db      	mvns	r3, r3
 8008606:	9302      	str	r3, [sp, #8]
 8008608:	9b06      	ldr	r3, [sp, #24]
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	2400      	movs	r4, #0
 800860e:	0031      	movs	r1, r6
 8008610:	0038      	movs	r0, r7
 8008612:	f000 fd2b 	bl	800906c <_Bfree>
 8008616:	2d00      	cmp	r5, #0
 8008618:	d100      	bne.n	800861c <_dtoa_r+0x9bc>
 800861a:	e6b7      	b.n	800838c <_dtoa_r+0x72c>
 800861c:	2c00      	cmp	r4, #0
 800861e:	d005      	beq.n	800862c <_dtoa_r+0x9cc>
 8008620:	42ac      	cmp	r4, r5
 8008622:	d003      	beq.n	800862c <_dtoa_r+0x9cc>
 8008624:	0021      	movs	r1, r4
 8008626:	0038      	movs	r0, r7
 8008628:	f000 fd20 	bl	800906c <_Bfree>
 800862c:	0029      	movs	r1, r5
 800862e:	0038      	movs	r0, r7
 8008630:	f000 fd1c 	bl	800906c <_Bfree>
 8008634:	e6aa      	b.n	800838c <_dtoa_r+0x72c>
 8008636:	2600      	movs	r6, #0
 8008638:	0035      	movs	r5, r6
 800863a:	e7e2      	b.n	8008602 <_dtoa_r+0x9a2>
 800863c:	9602      	str	r6, [sp, #8]
 800863e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008640:	0035      	movs	r5, r6
 8008642:	e584      	b.n	800814e <_dtoa_r+0x4ee>
 8008644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d100      	bne.n	800864c <_dtoa_r+0x9ec>
 800864a:	e0ce      	b.n	80087ea <_dtoa_r+0xb8a>
 800864c:	9b07      	ldr	r3, [sp, #28]
 800864e:	930c      	str	r3, [sp, #48]	; 0x30
 8008650:	2c00      	cmp	r4, #0
 8008652:	dd05      	ble.n	8008660 <_dtoa_r+0xa00>
 8008654:	0029      	movs	r1, r5
 8008656:	0022      	movs	r2, r4
 8008658:	0038      	movs	r0, r7
 800865a:	f000 ff25 	bl	80094a8 <__lshift>
 800865e:	0005      	movs	r5, r0
 8008660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008662:	0028      	movs	r0, r5
 8008664:	2b00      	cmp	r3, #0
 8008666:	d022      	beq.n	80086ae <_dtoa_r+0xa4e>
 8008668:	0038      	movs	r0, r7
 800866a:	6869      	ldr	r1, [r5, #4]
 800866c:	f000 fcba 	bl	8008fe4 <_Balloc>
 8008670:	1e04      	subs	r4, r0, #0
 8008672:	d10f      	bne.n	8008694 <_dtoa_r+0xa34>
 8008674:	0002      	movs	r2, r0
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <_dtoa_r+0xa2c>)
 8008678:	4905      	ldr	r1, [pc, #20]	; (8008690 <_dtoa_r+0xa30>)
 800867a:	f7ff fb06 	bl	8007c8a <_dtoa_r+0x2a>
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	40240000 	.word	0x40240000
 8008684:	00000433 	.word	0x00000433
 8008688:	7ff00000 	.word	0x7ff00000
 800868c:	0800af00 	.word	0x0800af00
 8008690:	000002ea 	.word	0x000002ea
 8008694:	0029      	movs	r1, r5
 8008696:	692b      	ldr	r3, [r5, #16]
 8008698:	310c      	adds	r1, #12
 800869a:	1c9a      	adds	r2, r3, #2
 800869c:	0092      	lsls	r2, r2, #2
 800869e:	300c      	adds	r0, #12
 80086a0:	f000 fc97 	bl	8008fd2 <memcpy>
 80086a4:	2201      	movs	r2, #1
 80086a6:	0021      	movs	r1, r4
 80086a8:	0038      	movs	r0, r7
 80086aa:	f000 fefd 	bl	80094a8 <__lshift>
 80086ae:	9b06      	ldr	r3, [sp, #24]
 80086b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086b2:	930a      	str	r3, [sp, #40]	; 0x28
 80086b4:	3b01      	subs	r3, #1
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	2201      	movs	r2, #1
 80086ba:	002c      	movs	r4, r5
 80086bc:	0005      	movs	r5, r0
 80086be:	9314      	str	r3, [sp, #80]	; 0x50
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	4013      	ands	r3, r2
 80086c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80086c6:	0031      	movs	r1, r6
 80086c8:	9805      	ldr	r0, [sp, #20]
 80086ca:	f7ff fa3d 	bl	8007b48 <quorem>
 80086ce:	0003      	movs	r3, r0
 80086d0:	0021      	movs	r1, r4
 80086d2:	3330      	adds	r3, #48	; 0x30
 80086d4:	900d      	str	r0, [sp, #52]	; 0x34
 80086d6:	9805      	ldr	r0, [sp, #20]
 80086d8:	9307      	str	r3, [sp, #28]
 80086da:	f000 ff53 	bl	8009584 <__mcmp>
 80086de:	002a      	movs	r2, r5
 80086e0:	900e      	str	r0, [sp, #56]	; 0x38
 80086e2:	0031      	movs	r1, r6
 80086e4:	0038      	movs	r0, r7
 80086e6:	f000 ff69 	bl	80095bc <__mdiff>
 80086ea:	68c3      	ldr	r3, [r0, #12]
 80086ec:	9008      	str	r0, [sp, #32]
 80086ee:	9310      	str	r3, [sp, #64]	; 0x40
 80086f0:	2301      	movs	r3, #1
 80086f2:	930c      	str	r3, [sp, #48]	; 0x30
 80086f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <_dtoa_r+0xaa4>
 80086fa:	0001      	movs	r1, r0
 80086fc:	9805      	ldr	r0, [sp, #20]
 80086fe:	f000 ff41 	bl	8009584 <__mcmp>
 8008702:	900c      	str	r0, [sp, #48]	; 0x30
 8008704:	0038      	movs	r0, r7
 8008706:	9908      	ldr	r1, [sp, #32]
 8008708:	f000 fcb0 	bl	800906c <_Bfree>
 800870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008710:	3301      	adds	r3, #1
 8008712:	9308      	str	r3, [sp, #32]
 8008714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008716:	4313      	orrs	r3, r2
 8008718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800871a:	4313      	orrs	r3, r2
 800871c:	d10c      	bne.n	8008738 <_dtoa_r+0xad8>
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	2b39      	cmp	r3, #57	; 0x39
 8008722:	d026      	beq.n	8008772 <_dtoa_r+0xb12>
 8008724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd02      	ble.n	8008730 <_dtoa_r+0xad0>
 800872a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800872c:	3331      	adds	r3, #49	; 0x31
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	9a07      	ldr	r2, [sp, #28]
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e76a      	b.n	800860e <_dtoa_r+0x9ae>
 8008738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873a:	2b00      	cmp	r3, #0
 800873c:	db04      	blt.n	8008748 <_dtoa_r+0xae8>
 800873e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008740:	4313      	orrs	r3, r2
 8008742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008744:	4313      	orrs	r3, r2
 8008746:	d11f      	bne.n	8008788 <_dtoa_r+0xb28>
 8008748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	ddf0      	ble.n	8008730 <_dtoa_r+0xad0>
 800874e:	9905      	ldr	r1, [sp, #20]
 8008750:	2201      	movs	r2, #1
 8008752:	0038      	movs	r0, r7
 8008754:	f000 fea8 	bl	80094a8 <__lshift>
 8008758:	0031      	movs	r1, r6
 800875a:	9005      	str	r0, [sp, #20]
 800875c:	f000 ff12 	bl	8009584 <__mcmp>
 8008760:	2800      	cmp	r0, #0
 8008762:	dc03      	bgt.n	800876c <_dtoa_r+0xb0c>
 8008764:	d1e4      	bne.n	8008730 <_dtoa_r+0xad0>
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	07db      	lsls	r3, r3, #31
 800876a:	d5e1      	bpl.n	8008730 <_dtoa_r+0xad0>
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	2b39      	cmp	r3, #57	; 0x39
 8008770:	d1db      	bne.n	800872a <_dtoa_r+0xaca>
 8008772:	2339      	movs	r3, #57	; 0x39
 8008774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008776:	7013      	strb	r3, [r2, #0]
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	3b01      	subs	r3, #1
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	2a39      	cmp	r2, #57	; 0x39
 8008782:	d068      	beq.n	8008856 <_dtoa_r+0xbf6>
 8008784:	3201      	adds	r2, #1
 8008786:	e7d5      	b.n	8008734 <_dtoa_r+0xad4>
 8008788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd07      	ble.n	800879e <_dtoa_r+0xb3e>
 800878e:	9b07      	ldr	r3, [sp, #28]
 8008790:	2b39      	cmp	r3, #57	; 0x39
 8008792:	d0ee      	beq.n	8008772 <_dtoa_r+0xb12>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008798:	3301      	adds	r3, #1
 800879a:	7013      	strb	r3, [r2, #0]
 800879c:	e737      	b.n	800860e <_dtoa_r+0x9ae>
 800879e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a0:	9a07      	ldr	r2, [sp, #28]
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d03e      	beq.n	800882a <_dtoa_r+0xbca>
 80087ac:	2300      	movs	r3, #0
 80087ae:	220a      	movs	r2, #10
 80087b0:	9905      	ldr	r1, [sp, #20]
 80087b2:	0038      	movs	r0, r7
 80087b4:	f000 fc7e 	bl	80090b4 <__multadd>
 80087b8:	2300      	movs	r3, #0
 80087ba:	9005      	str	r0, [sp, #20]
 80087bc:	220a      	movs	r2, #10
 80087be:	0021      	movs	r1, r4
 80087c0:	0038      	movs	r0, r7
 80087c2:	42ac      	cmp	r4, r5
 80087c4:	d106      	bne.n	80087d4 <_dtoa_r+0xb74>
 80087c6:	f000 fc75 	bl	80090b4 <__multadd>
 80087ca:	0004      	movs	r4, r0
 80087cc:	0005      	movs	r5, r0
 80087ce:	9b08      	ldr	r3, [sp, #32]
 80087d0:	930a      	str	r3, [sp, #40]	; 0x28
 80087d2:	e778      	b.n	80086c6 <_dtoa_r+0xa66>
 80087d4:	f000 fc6e 	bl	80090b4 <__multadd>
 80087d8:	0029      	movs	r1, r5
 80087da:	0004      	movs	r4, r0
 80087dc:	2300      	movs	r3, #0
 80087de:	220a      	movs	r2, #10
 80087e0:	0038      	movs	r0, r7
 80087e2:	f000 fc67 	bl	80090b4 <__multadd>
 80087e6:	0005      	movs	r5, r0
 80087e8:	e7f1      	b.n	80087ce <_dtoa_r+0xb6e>
 80087ea:	9b07      	ldr	r3, [sp, #28]
 80087ec:	930c      	str	r3, [sp, #48]	; 0x30
 80087ee:	2400      	movs	r4, #0
 80087f0:	0031      	movs	r1, r6
 80087f2:	9805      	ldr	r0, [sp, #20]
 80087f4:	f7ff f9a8 	bl	8007b48 <quorem>
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	3030      	adds	r0, #48	; 0x30
 80087fc:	5518      	strb	r0, [r3, r4]
 80087fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008800:	3401      	adds	r4, #1
 8008802:	9007      	str	r0, [sp, #28]
 8008804:	42a3      	cmp	r3, r4
 8008806:	dd07      	ble.n	8008818 <_dtoa_r+0xbb8>
 8008808:	2300      	movs	r3, #0
 800880a:	220a      	movs	r2, #10
 800880c:	0038      	movs	r0, r7
 800880e:	9905      	ldr	r1, [sp, #20]
 8008810:	f000 fc50 	bl	80090b4 <__multadd>
 8008814:	9005      	str	r0, [sp, #20]
 8008816:	e7eb      	b.n	80087f0 <_dtoa_r+0xb90>
 8008818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800881a:	2001      	movs	r0, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd00      	ble.n	8008822 <_dtoa_r+0xbc2>
 8008820:	0018      	movs	r0, r3
 8008822:	2400      	movs	r4, #0
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	181b      	adds	r3, r3, r0
 8008828:	9308      	str	r3, [sp, #32]
 800882a:	9905      	ldr	r1, [sp, #20]
 800882c:	2201      	movs	r2, #1
 800882e:	0038      	movs	r0, r7
 8008830:	f000 fe3a 	bl	80094a8 <__lshift>
 8008834:	0031      	movs	r1, r6
 8008836:	9005      	str	r0, [sp, #20]
 8008838:	f000 fea4 	bl	8009584 <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	dc9b      	bgt.n	8008778 <_dtoa_r+0xb18>
 8008840:	d102      	bne.n	8008848 <_dtoa_r+0xbe8>
 8008842:	9b07      	ldr	r3, [sp, #28]
 8008844:	07db      	lsls	r3, r3, #31
 8008846:	d497      	bmi.n	8008778 <_dtoa_r+0xb18>
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	9308      	str	r3, [sp, #32]
 800884c:	3b01      	subs	r3, #1
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	2a30      	cmp	r2, #48	; 0x30
 8008852:	d0fa      	beq.n	800884a <_dtoa_r+0xbea>
 8008854:	e6db      	b.n	800860e <_dtoa_r+0x9ae>
 8008856:	9a06      	ldr	r2, [sp, #24]
 8008858:	429a      	cmp	r2, r3
 800885a:	d18e      	bne.n	800877a <_dtoa_r+0xb1a>
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	3301      	adds	r3, #1
 8008860:	9302      	str	r3, [sp, #8]
 8008862:	2331      	movs	r3, #49	; 0x31
 8008864:	e799      	b.n	800879a <_dtoa_r+0xb3a>
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <_dtoa_r+0xc2c>)
 8008868:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800886a:	9306      	str	r3, [sp, #24]
 800886c:	4b08      	ldr	r3, [pc, #32]	; (8008890 <_dtoa_r+0xc30>)
 800886e:	2a00      	cmp	r2, #0
 8008870:	d001      	beq.n	8008876 <_dtoa_r+0xc16>
 8008872:	f7ff fa3f 	bl	8007cf4 <_dtoa_r+0x94>
 8008876:	f7ff fa3f 	bl	8007cf8 <_dtoa_r+0x98>
 800887a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800887c:	2b00      	cmp	r3, #0
 800887e:	dcb6      	bgt.n	80087ee <_dtoa_r+0xb8e>
 8008880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008882:	2b02      	cmp	r3, #2
 8008884:	dd00      	ble.n	8008888 <_dtoa_r+0xc28>
 8008886:	e6ac      	b.n	80085e2 <_dtoa_r+0x982>
 8008888:	e7b1      	b.n	80087ee <_dtoa_r+0xb8e>
 800888a:	46c0      	nop			; (mov r8, r8)
 800888c:	0800ae81 	.word	0x0800ae81
 8008890:	0800ae89 	.word	0x0800ae89

08008894 <rshift>:
 8008894:	0002      	movs	r2, r0
 8008896:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008898:	6904      	ldr	r4, [r0, #16]
 800889a:	3214      	adds	r2, #20
 800889c:	0013      	movs	r3, r2
 800889e:	b085      	sub	sp, #20
 80088a0:	114f      	asrs	r7, r1, #5
 80088a2:	42bc      	cmp	r4, r7
 80088a4:	dd31      	ble.n	800890a <rshift+0x76>
 80088a6:	00bb      	lsls	r3, r7, #2
 80088a8:	18d3      	adds	r3, r2, r3
 80088aa:	261f      	movs	r6, #31
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	000b      	movs	r3, r1
 80088b0:	00a5      	lsls	r5, r4, #2
 80088b2:	4033      	ands	r3, r6
 80088b4:	1955      	adds	r5, r2, r5
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	4231      	tst	r1, r6
 80088ba:	d10c      	bne.n	80088d6 <rshift+0x42>
 80088bc:	0016      	movs	r6, r2
 80088be:	9901      	ldr	r1, [sp, #4]
 80088c0:	428d      	cmp	r5, r1
 80088c2:	d838      	bhi.n	8008936 <rshift+0xa2>
 80088c4:	9901      	ldr	r1, [sp, #4]
 80088c6:	2300      	movs	r3, #0
 80088c8:	3903      	subs	r1, #3
 80088ca:	428d      	cmp	r5, r1
 80088cc:	d301      	bcc.n	80088d2 <rshift+0x3e>
 80088ce:	1be3      	subs	r3, r4, r7
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	18d3      	adds	r3, r2, r3
 80088d4:	e019      	b.n	800890a <rshift+0x76>
 80088d6:	2120      	movs	r1, #32
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	9e01      	ldr	r6, [sp, #4]
 80088dc:	1acb      	subs	r3, r1, r3
 80088de:	9303      	str	r3, [sp, #12]
 80088e0:	ce02      	ldmia	r6!, {r1}
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	4694      	mov	ip, r2
 80088e6:	40d9      	lsrs	r1, r3
 80088e8:	9100      	str	r1, [sp, #0]
 80088ea:	42b5      	cmp	r5, r6
 80088ec:	d816      	bhi.n	800891c <rshift+0x88>
 80088ee:	9e01      	ldr	r6, [sp, #4]
 80088f0:	2300      	movs	r3, #0
 80088f2:	3601      	adds	r6, #1
 80088f4:	42b5      	cmp	r5, r6
 80088f6:	d302      	bcc.n	80088fe <rshift+0x6a>
 80088f8:	1be3      	subs	r3, r4, r7
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	3b04      	subs	r3, #4
 80088fe:	9900      	ldr	r1, [sp, #0]
 8008900:	18d3      	adds	r3, r2, r3
 8008902:	6019      	str	r1, [r3, #0]
 8008904:	2900      	cmp	r1, #0
 8008906:	d000      	beq.n	800890a <rshift+0x76>
 8008908:	3304      	adds	r3, #4
 800890a:	1a99      	subs	r1, r3, r2
 800890c:	1089      	asrs	r1, r1, #2
 800890e:	6101      	str	r1, [r0, #16]
 8008910:	4293      	cmp	r3, r2
 8008912:	d101      	bne.n	8008918 <rshift+0x84>
 8008914:	2300      	movs	r3, #0
 8008916:	6143      	str	r3, [r0, #20]
 8008918:	b005      	add	sp, #20
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	9903      	ldr	r1, [sp, #12]
 8008920:	408b      	lsls	r3, r1
 8008922:	9900      	ldr	r1, [sp, #0]
 8008924:	4319      	orrs	r1, r3
 8008926:	4663      	mov	r3, ip
 8008928:	c302      	stmia	r3!, {r1}
 800892a:	469c      	mov	ip, r3
 800892c:	ce02      	ldmia	r6!, {r1}
 800892e:	9b02      	ldr	r3, [sp, #8]
 8008930:	40d9      	lsrs	r1, r3
 8008932:	9100      	str	r1, [sp, #0]
 8008934:	e7d9      	b.n	80088ea <rshift+0x56>
 8008936:	c908      	ldmia	r1!, {r3}
 8008938:	c608      	stmia	r6!, {r3}
 800893a:	e7c1      	b.n	80088c0 <rshift+0x2c>

0800893c <__hexdig_fun>:
 800893c:	0002      	movs	r2, r0
 800893e:	3a30      	subs	r2, #48	; 0x30
 8008940:	0003      	movs	r3, r0
 8008942:	2a09      	cmp	r2, #9
 8008944:	d802      	bhi.n	800894c <__hexdig_fun+0x10>
 8008946:	3b20      	subs	r3, #32
 8008948:	b2d8      	uxtb	r0, r3
 800894a:	4770      	bx	lr
 800894c:	0002      	movs	r2, r0
 800894e:	3a61      	subs	r2, #97	; 0x61
 8008950:	2a05      	cmp	r2, #5
 8008952:	d801      	bhi.n	8008958 <__hexdig_fun+0x1c>
 8008954:	3b47      	subs	r3, #71	; 0x47
 8008956:	e7f7      	b.n	8008948 <__hexdig_fun+0xc>
 8008958:	001a      	movs	r2, r3
 800895a:	3a41      	subs	r2, #65	; 0x41
 800895c:	2000      	movs	r0, #0
 800895e:	2a05      	cmp	r2, #5
 8008960:	d8f3      	bhi.n	800894a <__hexdig_fun+0xe>
 8008962:	3b27      	subs	r3, #39	; 0x27
 8008964:	e7f0      	b.n	8008948 <__hexdig_fun+0xc>
	...

08008968 <__gethex>:
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	b08d      	sub	sp, #52	; 0x34
 800896c:	930a      	str	r3, [sp, #40]	; 0x28
 800896e:	4bbf      	ldr	r3, [pc, #764]	; (8008c6c <__gethex+0x304>)
 8008970:	9005      	str	r0, [sp, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9109      	str	r1, [sp, #36]	; 0x24
 8008976:	0018      	movs	r0, r3
 8008978:	9202      	str	r2, [sp, #8]
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	f7f7 fbc2 	bl	8000104 <strlen>
 8008980:	2202      	movs	r2, #2
 8008982:	9b07      	ldr	r3, [sp, #28]
 8008984:	4252      	negs	r2, r2
 8008986:	181b      	adds	r3, r3, r0
 8008988:	3b01      	subs	r3, #1
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	9003      	str	r0, [sp, #12]
 800898e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	1c8b      	adds	r3, r1, #2
 8008996:	1a52      	subs	r2, r2, r1
 8008998:	18d1      	adds	r1, r2, r3
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	9108      	str	r1, [sp, #32]
 800899e:	9901      	ldr	r1, [sp, #4]
 80089a0:	3301      	adds	r3, #1
 80089a2:	7808      	ldrb	r0, [r1, #0]
 80089a4:	2830      	cmp	r0, #48	; 0x30
 80089a6:	d0f7      	beq.n	8008998 <__gethex+0x30>
 80089a8:	f7ff ffc8 	bl	800893c <__hexdig_fun>
 80089ac:	2300      	movs	r3, #0
 80089ae:	001c      	movs	r4, r3
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	4298      	cmp	r0, r3
 80089b4:	d11f      	bne.n	80089f6 <__gethex+0x8e>
 80089b6:	9a03      	ldr	r2, [sp, #12]
 80089b8:	9907      	ldr	r1, [sp, #28]
 80089ba:	9801      	ldr	r0, [sp, #4]
 80089bc:	f001 fa64 	bl	8009e88 <strncmp>
 80089c0:	0007      	movs	r7, r0
 80089c2:	42a0      	cmp	r0, r4
 80089c4:	d000      	beq.n	80089c8 <__gethex+0x60>
 80089c6:	e06b      	b.n	8008aa0 <__gethex+0x138>
 80089c8:	9b01      	ldr	r3, [sp, #4]
 80089ca:	9a03      	ldr	r2, [sp, #12]
 80089cc:	5c98      	ldrb	r0, [r3, r2]
 80089ce:	189d      	adds	r5, r3, r2
 80089d0:	f7ff ffb4 	bl	800893c <__hexdig_fun>
 80089d4:	2301      	movs	r3, #1
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	42a0      	cmp	r0, r4
 80089da:	d030      	beq.n	8008a3e <__gethex+0xd6>
 80089dc:	9501      	str	r5, [sp, #4]
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	7818      	ldrb	r0, [r3, #0]
 80089e2:	2830      	cmp	r0, #48	; 0x30
 80089e4:	d009      	beq.n	80089fa <__gethex+0x92>
 80089e6:	f7ff ffa9 	bl	800893c <__hexdig_fun>
 80089ea:	4242      	negs	r2, r0
 80089ec:	4142      	adcs	r2, r0
 80089ee:	2301      	movs	r3, #1
 80089f0:	002c      	movs	r4, r5
 80089f2:	9204      	str	r2, [sp, #16]
 80089f4:	9308      	str	r3, [sp, #32]
 80089f6:	9d01      	ldr	r5, [sp, #4]
 80089f8:	e004      	b.n	8008a04 <__gethex+0x9c>
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	3301      	adds	r3, #1
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	e7ed      	b.n	80089de <__gethex+0x76>
 8008a02:	3501      	adds	r5, #1
 8008a04:	7828      	ldrb	r0, [r5, #0]
 8008a06:	f7ff ff99 	bl	800893c <__hexdig_fun>
 8008a0a:	1e07      	subs	r7, r0, #0
 8008a0c:	d1f9      	bne.n	8008a02 <__gethex+0x9a>
 8008a0e:	0028      	movs	r0, r5
 8008a10:	9a03      	ldr	r2, [sp, #12]
 8008a12:	9907      	ldr	r1, [sp, #28]
 8008a14:	f001 fa38 	bl	8009e88 <strncmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d10e      	bne.n	8008a3a <__gethex+0xd2>
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	d107      	bne.n	8008a30 <__gethex+0xc8>
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	18ed      	adds	r5, r5, r3
 8008a24:	002c      	movs	r4, r5
 8008a26:	7828      	ldrb	r0, [r5, #0]
 8008a28:	f7ff ff88 	bl	800893c <__hexdig_fun>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d102      	bne.n	8008a36 <__gethex+0xce>
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	00a7      	lsls	r7, r4, #2
 8008a34:	e003      	b.n	8008a3e <__gethex+0xd6>
 8008a36:	3501      	adds	r5, #1
 8008a38:	e7f5      	b.n	8008a26 <__gethex+0xbe>
 8008a3a:	2c00      	cmp	r4, #0
 8008a3c:	d1f8      	bne.n	8008a30 <__gethex+0xc8>
 8008a3e:	2220      	movs	r2, #32
 8008a40:	782b      	ldrb	r3, [r5, #0]
 8008a42:	002e      	movs	r6, r5
 8008a44:	4393      	bics	r3, r2
 8008a46:	2b50      	cmp	r3, #80	; 0x50
 8008a48:	d11d      	bne.n	8008a86 <__gethex+0x11e>
 8008a4a:	786b      	ldrb	r3, [r5, #1]
 8008a4c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a4e:	d02c      	beq.n	8008aaa <__gethex+0x142>
 8008a50:	2b2d      	cmp	r3, #45	; 0x2d
 8008a52:	d02e      	beq.n	8008ab2 <__gethex+0x14a>
 8008a54:	2300      	movs	r3, #0
 8008a56:	1c6e      	adds	r6, r5, #1
 8008a58:	9306      	str	r3, [sp, #24]
 8008a5a:	7830      	ldrb	r0, [r6, #0]
 8008a5c:	f7ff ff6e 	bl	800893c <__hexdig_fun>
 8008a60:	1e43      	subs	r3, r0, #1
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b18      	cmp	r3, #24
 8008a66:	d82b      	bhi.n	8008ac0 <__gethex+0x158>
 8008a68:	3810      	subs	r0, #16
 8008a6a:	0004      	movs	r4, r0
 8008a6c:	7870      	ldrb	r0, [r6, #1]
 8008a6e:	f7ff ff65 	bl	800893c <__hexdig_fun>
 8008a72:	1e43      	subs	r3, r0, #1
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	2b18      	cmp	r3, #24
 8008a7a:	d91c      	bls.n	8008ab6 <__gethex+0x14e>
 8008a7c:	9b06      	ldr	r3, [sp, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d000      	beq.n	8008a84 <__gethex+0x11c>
 8008a82:	4264      	negs	r4, r4
 8008a84:	193f      	adds	r7, r7, r4
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	601e      	str	r6, [r3, #0]
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d019      	beq.n	8008ac4 <__gethex+0x15c>
 8008a90:	2600      	movs	r6, #0
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	42b3      	cmp	r3, r6
 8008a96:	d100      	bne.n	8008a9a <__gethex+0x132>
 8008a98:	3606      	adds	r6, #6
 8008a9a:	0030      	movs	r0, r6
 8008a9c:	b00d      	add	sp, #52	; 0x34
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	2700      	movs	r7, #0
 8008aa4:	9d01      	ldr	r5, [sp, #4]
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	e7c9      	b.n	8008a3e <__gethex+0xd6>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9306      	str	r3, [sp, #24]
 8008aae:	1cae      	adds	r6, r5, #2
 8008ab0:	e7d3      	b.n	8008a5a <__gethex+0xf2>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7fa      	b.n	8008aac <__gethex+0x144>
 8008ab6:	230a      	movs	r3, #10
 8008ab8:	435c      	muls	r4, r3
 8008aba:	1824      	adds	r4, r4, r0
 8008abc:	3c10      	subs	r4, #16
 8008abe:	e7d5      	b.n	8008a6c <__gethex+0x104>
 8008ac0:	002e      	movs	r6, r5
 8008ac2:	e7e0      	b.n	8008a86 <__gethex+0x11e>
 8008ac4:	9b01      	ldr	r3, [sp, #4]
 8008ac6:	9904      	ldr	r1, [sp, #16]
 8008ac8:	1aeb      	subs	r3, r5, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	2b07      	cmp	r3, #7
 8008ace:	dc0a      	bgt.n	8008ae6 <__gethex+0x17e>
 8008ad0:	9805      	ldr	r0, [sp, #20]
 8008ad2:	f000 fa87 	bl	8008fe4 <_Balloc>
 8008ad6:	1e04      	subs	r4, r0, #0
 8008ad8:	d108      	bne.n	8008aec <__gethex+0x184>
 8008ada:	0002      	movs	r2, r0
 8008adc:	21de      	movs	r1, #222	; 0xde
 8008ade:	4b64      	ldr	r3, [pc, #400]	; (8008c70 <__gethex+0x308>)
 8008ae0:	4864      	ldr	r0, [pc, #400]	; (8008c74 <__gethex+0x30c>)
 8008ae2:	f001 f9f1 	bl	8009ec8 <__assert_func>
 8008ae6:	3101      	adds	r1, #1
 8008ae8:	105b      	asrs	r3, r3, #1
 8008aea:	e7ef      	b.n	8008acc <__gethex+0x164>
 8008aec:	0003      	movs	r3, r0
 8008aee:	3314      	adds	r3, #20
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	9309      	str	r3, [sp, #36]	; 0x24
 8008af4:	2300      	movs	r3, #0
 8008af6:	001e      	movs	r6, r3
 8008af8:	9306      	str	r3, [sp, #24]
 8008afa:	9b01      	ldr	r3, [sp, #4]
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	d340      	bcc.n	8008b82 <__gethex+0x21a>
 8008b00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	c540      	stmia	r5!, {r6}
 8008b06:	1aed      	subs	r5, r5, r3
 8008b08:	10ad      	asrs	r5, r5, #2
 8008b0a:	0030      	movs	r0, r6
 8008b0c:	6125      	str	r5, [r4, #16]
 8008b0e:	f000 fb61 	bl	80091d4 <__hi0bits>
 8008b12:	9b02      	ldr	r3, [sp, #8]
 8008b14:	016d      	lsls	r5, r5, #5
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	1a2e      	subs	r6, r5, r0
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	429e      	cmp	r6, r3
 8008b1e:	dd5a      	ble.n	8008bd6 <__gethex+0x26e>
 8008b20:	1af6      	subs	r6, r6, r3
 8008b22:	0031      	movs	r1, r6
 8008b24:	0020      	movs	r0, r4
 8008b26:	f000 ff03 	bl	8009930 <__any_on>
 8008b2a:	1e05      	subs	r5, r0, #0
 8008b2c:	d016      	beq.n	8008b5c <__gethex+0x1f4>
 8008b2e:	2501      	movs	r5, #1
 8008b30:	211f      	movs	r1, #31
 8008b32:	0028      	movs	r0, r5
 8008b34:	1e73      	subs	r3, r6, #1
 8008b36:	4019      	ands	r1, r3
 8008b38:	4088      	lsls	r0, r1
 8008b3a:	0001      	movs	r1, r0
 8008b3c:	115a      	asrs	r2, r3, #5
 8008b3e:	9804      	ldr	r0, [sp, #16]
 8008b40:	0092      	lsls	r2, r2, #2
 8008b42:	5812      	ldr	r2, [r2, r0]
 8008b44:	420a      	tst	r2, r1
 8008b46:	d009      	beq.n	8008b5c <__gethex+0x1f4>
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	dd06      	ble.n	8008b5a <__gethex+0x1f2>
 8008b4c:	0020      	movs	r0, r4
 8008b4e:	1eb1      	subs	r1, r6, #2
 8008b50:	f000 feee 	bl	8009930 <__any_on>
 8008b54:	3502      	adds	r5, #2
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d100      	bne.n	8008b5c <__gethex+0x1f4>
 8008b5a:	2502      	movs	r5, #2
 8008b5c:	0031      	movs	r1, r6
 8008b5e:	0020      	movs	r0, r4
 8008b60:	f7ff fe98 	bl	8008894 <rshift>
 8008b64:	19bf      	adds	r7, r7, r6
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	42bb      	cmp	r3, r7
 8008b6e:	da42      	bge.n	8008bf6 <__gethex+0x28e>
 8008b70:	0021      	movs	r1, r4
 8008b72:	9805      	ldr	r0, [sp, #20]
 8008b74:	f000 fa7a 	bl	800906c <_Bfree>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b7c:	26a3      	movs	r6, #163	; 0xa3
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e78b      	b.n	8008a9a <__gethex+0x132>
 8008b82:	1e6b      	subs	r3, r5, #1
 8008b84:	9308      	str	r3, [sp, #32]
 8008b86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d014      	beq.n	8008bb8 <__gethex+0x250>
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d104      	bne.n	8008b9e <__gethex+0x236>
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	c340      	stmia	r3!, {r6}
 8008b98:	2600      	movs	r6, #0
 8008b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9c:	9606      	str	r6, [sp, #24]
 8008b9e:	9b08      	ldr	r3, [sp, #32]
 8008ba0:	7818      	ldrb	r0, [r3, #0]
 8008ba2:	f7ff fecb 	bl	800893c <__hexdig_fun>
 8008ba6:	230f      	movs	r3, #15
 8008ba8:	4018      	ands	r0, r3
 8008baa:	9b06      	ldr	r3, [sp, #24]
 8008bac:	9d08      	ldr	r5, [sp, #32]
 8008bae:	4098      	lsls	r0, r3
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4306      	orrs	r6, r0
 8008bb4:	9306      	str	r3, [sp, #24]
 8008bb6:	e7a0      	b.n	8008afa <__gethex+0x192>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	9a03      	ldr	r2, [sp, #12]
 8008bbc:	1a9d      	subs	r5, r3, r2
 8008bbe:	9b08      	ldr	r3, [sp, #32]
 8008bc0:	195d      	adds	r5, r3, r5
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	429d      	cmp	r5, r3
 8008bc6:	d3e2      	bcc.n	8008b8e <__gethex+0x226>
 8008bc8:	0028      	movs	r0, r5
 8008bca:	9907      	ldr	r1, [sp, #28]
 8008bcc:	f001 f95c 	bl	8009e88 <strncmp>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d1dc      	bne.n	8008b8e <__gethex+0x226>
 8008bd4:	e791      	b.n	8008afa <__gethex+0x192>
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	2500      	movs	r5, #0
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	dac3      	bge.n	8008b66 <__gethex+0x1fe>
 8008bde:	1b9e      	subs	r6, r3, r6
 8008be0:	0021      	movs	r1, r4
 8008be2:	0032      	movs	r2, r6
 8008be4:	9805      	ldr	r0, [sp, #20]
 8008be6:	f000 fc5f 	bl	80094a8 <__lshift>
 8008bea:	0003      	movs	r3, r0
 8008bec:	3314      	adds	r3, #20
 8008bee:	0004      	movs	r4, r0
 8008bf0:	1bbf      	subs	r7, r7, r6
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	e7b7      	b.n	8008b66 <__gethex+0x1fe>
 8008bf6:	9b02      	ldr	r3, [sp, #8]
 8008bf8:	685e      	ldr	r6, [r3, #4]
 8008bfa:	42be      	cmp	r6, r7
 8008bfc:	dd71      	ble.n	8008ce2 <__gethex+0x37a>
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	1bf6      	subs	r6, r6, r7
 8008c02:	42b3      	cmp	r3, r6
 8008c04:	dc38      	bgt.n	8008c78 <__gethex+0x310>
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d026      	beq.n	8008c5c <__gethex+0x2f4>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d028      	beq.n	8008c64 <__gethex+0x2fc>
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d119      	bne.n	8008c4a <__gethex+0x2e2>
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	42b3      	cmp	r3, r6
 8008c1a:	d116      	bne.n	8008c4a <__gethex+0x2e2>
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d10d      	bne.n	8008c3c <__gethex+0x2d4>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2662      	movs	r6, #98	; 0x62
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	2301      	movs	r3, #1
 8008c30:	9a04      	ldr	r2, [sp, #16]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c38:	601c      	str	r4, [r3, #0]
 8008c3a:	e72e      	b.n	8008a9a <__gethex+0x132>
 8008c3c:	9901      	ldr	r1, [sp, #4]
 8008c3e:	0020      	movs	r0, r4
 8008c40:	3901      	subs	r1, #1
 8008c42:	f000 fe75 	bl	8009930 <__any_on>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d1ea      	bne.n	8008c20 <__gethex+0x2b8>
 8008c4a:	0021      	movs	r1, r4
 8008c4c:	9805      	ldr	r0, [sp, #20]
 8008c4e:	f000 fa0d 	bl	800906c <_Bfree>
 8008c52:	2300      	movs	r3, #0
 8008c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c56:	2650      	movs	r6, #80	; 0x50
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e71e      	b.n	8008a9a <__gethex+0x132>
 8008c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f3      	bne.n	8008c4a <__gethex+0x2e2>
 8008c62:	e7dd      	b.n	8008c20 <__gethex+0x2b8>
 8008c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1da      	bne.n	8008c20 <__gethex+0x2b8>
 8008c6a:	e7ee      	b.n	8008c4a <__gethex+0x2e2>
 8008c6c:	0800af78 	.word	0x0800af78
 8008c70:	0800af00 	.word	0x0800af00
 8008c74:	0800af11 	.word	0x0800af11
 8008c78:	1e77      	subs	r7, r6, #1
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	d12f      	bne.n	8008cde <__gethex+0x376>
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	d004      	beq.n	8008c8c <__gethex+0x324>
 8008c82:	0039      	movs	r1, r7
 8008c84:	0020      	movs	r0, r4
 8008c86:	f000 fe53 	bl	8009930 <__any_on>
 8008c8a:	0005      	movs	r5, r0
 8008c8c:	231f      	movs	r3, #31
 8008c8e:	117a      	asrs	r2, r7, #5
 8008c90:	401f      	ands	r7, r3
 8008c92:	3b1e      	subs	r3, #30
 8008c94:	40bb      	lsls	r3, r7
 8008c96:	9904      	ldr	r1, [sp, #16]
 8008c98:	0092      	lsls	r2, r2, #2
 8008c9a:	5852      	ldr	r2, [r2, r1]
 8008c9c:	421a      	tst	r2, r3
 8008c9e:	d001      	beq.n	8008ca4 <__gethex+0x33c>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	431d      	orrs	r5, r3
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	0031      	movs	r1, r6
 8008ca8:	1b9b      	subs	r3, r3, r6
 8008caa:	2602      	movs	r6, #2
 8008cac:	0020      	movs	r0, r4
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	f7ff fdf0 	bl	8008894 <rshift>
 8008cb4:	9b02      	ldr	r3, [sp, #8]
 8008cb6:	685f      	ldr	r7, [r3, #4]
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	d041      	beq.n	8008d40 <__gethex+0x3d8>
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d010      	beq.n	8008ce6 <__gethex+0x37e>
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d012      	beq.n	8008cee <__gethex+0x386>
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d106      	bne.n	8008cda <__gethex+0x372>
 8008ccc:	07aa      	lsls	r2, r5, #30
 8008cce:	d504      	bpl.n	8008cda <__gethex+0x372>
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	6810      	ldr	r0, [r2, #0]
 8008cd4:	4305      	orrs	r5, r0
 8008cd6:	421d      	tst	r5, r3
 8008cd8:	d10c      	bne.n	8008cf4 <__gethex+0x38c>
 8008cda:	2310      	movs	r3, #16
 8008cdc:	e02f      	b.n	8008d3e <__gethex+0x3d6>
 8008cde:	2501      	movs	r5, #1
 8008ce0:	e7d4      	b.n	8008c8c <__gethex+0x324>
 8008ce2:	2601      	movs	r6, #1
 8008ce4:	e7e8      	b.n	8008cb8 <__gethex+0x350>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f2      	beq.n	8008cda <__gethex+0x372>
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	9303      	str	r3, [sp, #12]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	9304      	str	r3, [sp, #16]
 8008cfe:	0023      	movs	r3, r4
 8008d00:	9a04      	ldr	r2, [sp, #16]
 8008d02:	3314      	adds	r3, #20
 8008d04:	1899      	adds	r1, r3, r2
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	1c55      	adds	r5, r2, #1
 8008d0a:	d01e      	beq.n	8008d4a <__gethex+0x3e2>
 8008d0c:	3201      	adds	r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	0023      	movs	r3, r4
 8008d12:	3314      	adds	r3, #20
 8008d14:	2e02      	cmp	r6, #2
 8008d16:	d140      	bne.n	8008d9a <__gethex+0x432>
 8008d18:	9a02      	ldr	r2, [sp, #8]
 8008d1a:	9901      	ldr	r1, [sp, #4]
 8008d1c:	6812      	ldr	r2, [r2, #0]
 8008d1e:	3a01      	subs	r2, #1
 8008d20:	428a      	cmp	r2, r1
 8008d22:	d10b      	bne.n	8008d3c <__gethex+0x3d4>
 8008d24:	114a      	asrs	r2, r1, #5
 8008d26:	211f      	movs	r1, #31
 8008d28:	9801      	ldr	r0, [sp, #4]
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	4001      	ands	r1, r0
 8008d2e:	2001      	movs	r0, #1
 8008d30:	0005      	movs	r5, r0
 8008d32:	408d      	lsls	r5, r1
 8008d34:	58d3      	ldr	r3, [r2, r3]
 8008d36:	422b      	tst	r3, r5
 8008d38:	d000      	beq.n	8008d3c <__gethex+0x3d4>
 8008d3a:	2601      	movs	r6, #1
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	431e      	orrs	r6, r3
 8008d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d42:	601c      	str	r4, [r3, #0]
 8008d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d46:	601f      	str	r7, [r3, #0]
 8008d48:	e6a7      	b.n	8008a9a <__gethex+0x132>
 8008d4a:	c301      	stmia	r3!, {r0}
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	d8da      	bhi.n	8008d06 <__gethex+0x39e>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	68a2      	ldr	r2, [r4, #8]
 8008d54:	4293      	cmp	r3, r2
 8008d56:	db17      	blt.n	8008d88 <__gethex+0x420>
 8008d58:	6863      	ldr	r3, [r4, #4]
 8008d5a:	9805      	ldr	r0, [sp, #20]
 8008d5c:	1c59      	adds	r1, r3, #1
 8008d5e:	f000 f941 	bl	8008fe4 <_Balloc>
 8008d62:	1e05      	subs	r5, r0, #0
 8008d64:	d103      	bne.n	8008d6e <__gethex+0x406>
 8008d66:	0002      	movs	r2, r0
 8008d68:	2184      	movs	r1, #132	; 0x84
 8008d6a:	4b1c      	ldr	r3, [pc, #112]	; (8008ddc <__gethex+0x474>)
 8008d6c:	e6b8      	b.n	8008ae0 <__gethex+0x178>
 8008d6e:	0021      	movs	r1, r4
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	310c      	adds	r1, #12
 8008d74:	1c9a      	adds	r2, r3, #2
 8008d76:	0092      	lsls	r2, r2, #2
 8008d78:	300c      	adds	r0, #12
 8008d7a:	f000 f92a 	bl	8008fd2 <memcpy>
 8008d7e:	0021      	movs	r1, r4
 8008d80:	9805      	ldr	r0, [sp, #20]
 8008d82:	f000 f973 	bl	800906c <_Bfree>
 8008d86:	002c      	movs	r4, r5
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	6122      	str	r2, [r4, #16]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	3304      	adds	r3, #4
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	18e3      	adds	r3, r4, r3
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	e7ba      	b.n	8008d10 <__gethex+0x3a8>
 8008d9a:	6922      	ldr	r2, [r4, #16]
 8008d9c:	9903      	ldr	r1, [sp, #12]
 8008d9e:	428a      	cmp	r2, r1
 8008da0:	dd09      	ble.n	8008db6 <__gethex+0x44e>
 8008da2:	2101      	movs	r1, #1
 8008da4:	0020      	movs	r0, r4
 8008da6:	f7ff fd75 	bl	8008894 <rshift>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	3701      	adds	r7, #1
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	42bb      	cmp	r3, r7
 8008db2:	dac2      	bge.n	8008d3a <__gethex+0x3d2>
 8008db4:	e6dc      	b.n	8008b70 <__gethex+0x208>
 8008db6:	221f      	movs	r2, #31
 8008db8:	9d01      	ldr	r5, [sp, #4]
 8008dba:	9901      	ldr	r1, [sp, #4]
 8008dbc:	2601      	movs	r6, #1
 8008dbe:	4015      	ands	r5, r2
 8008dc0:	4211      	tst	r1, r2
 8008dc2:	d0bb      	beq.n	8008d3c <__gethex+0x3d4>
 8008dc4:	9a04      	ldr	r2, [sp, #16]
 8008dc6:	189b      	adds	r3, r3, r2
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	f000 fa02 	bl	80091d4 <__hi0bits>
 8008dd0:	2320      	movs	r3, #32
 8008dd2:	1b5d      	subs	r5, r3, r5
 8008dd4:	42a8      	cmp	r0, r5
 8008dd6:	dbe4      	blt.n	8008da2 <__gethex+0x43a>
 8008dd8:	e7b0      	b.n	8008d3c <__gethex+0x3d4>
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	0800af00 	.word	0x0800af00

08008de0 <L_shift>:
 8008de0:	2308      	movs	r3, #8
 8008de2:	b570      	push	{r4, r5, r6, lr}
 8008de4:	2520      	movs	r5, #32
 8008de6:	1a9a      	subs	r2, r3, r2
 8008de8:	0092      	lsls	r2, r2, #2
 8008dea:	1aad      	subs	r5, r5, r2
 8008dec:	6843      	ldr	r3, [r0, #4]
 8008dee:	6806      	ldr	r6, [r0, #0]
 8008df0:	001c      	movs	r4, r3
 8008df2:	40ac      	lsls	r4, r5
 8008df4:	40d3      	lsrs	r3, r2
 8008df6:	4334      	orrs	r4, r6
 8008df8:	6004      	str	r4, [r0, #0]
 8008dfa:	6043      	str	r3, [r0, #4]
 8008dfc:	3004      	adds	r0, #4
 8008dfe:	4288      	cmp	r0, r1
 8008e00:	d3f4      	bcc.n	8008dec <L_shift+0xc>
 8008e02:	bd70      	pop	{r4, r5, r6, pc}

08008e04 <__match>:
 8008e04:	b530      	push	{r4, r5, lr}
 8008e06:	6803      	ldr	r3, [r0, #0]
 8008e08:	780c      	ldrb	r4, [r1, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d102      	bne.n	8008e16 <__match+0x12>
 8008e10:	6003      	str	r3, [r0, #0]
 8008e12:	2001      	movs	r0, #1
 8008e14:	bd30      	pop	{r4, r5, pc}
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	0015      	movs	r5, r2
 8008e1a:	3d41      	subs	r5, #65	; 0x41
 8008e1c:	2d19      	cmp	r5, #25
 8008e1e:	d800      	bhi.n	8008e22 <__match+0x1e>
 8008e20:	3220      	adds	r2, #32
 8008e22:	3101      	adds	r1, #1
 8008e24:	42a2      	cmp	r2, r4
 8008e26:	d0ef      	beq.n	8008e08 <__match+0x4>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e7f3      	b.n	8008e14 <__match+0x10>

08008e2c <__hexnan>:
 8008e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	b08b      	sub	sp, #44	; 0x2c
 8008e32:	9201      	str	r2, [sp, #4]
 8008e34:	9901      	ldr	r1, [sp, #4]
 8008e36:	115a      	asrs	r2, r3, #5
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	188a      	adds	r2, r1, r2
 8008e3c:	9202      	str	r2, [sp, #8]
 8008e3e:	0019      	movs	r1, r3
 8008e40:	221f      	movs	r2, #31
 8008e42:	4011      	ands	r1, r2
 8008e44:	9008      	str	r0, [sp, #32]
 8008e46:	9106      	str	r1, [sp, #24]
 8008e48:	4213      	tst	r3, r2
 8008e4a:	d002      	beq.n	8008e52 <__hexnan+0x26>
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	9b02      	ldr	r3, [sp, #8]
 8008e54:	2500      	movs	r5, #0
 8008e56:	1f1e      	subs	r6, r3, #4
 8008e58:	0037      	movs	r7, r6
 8008e5a:	0034      	movs	r4, r6
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	6035      	str	r5, [r6, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	9507      	str	r5, [sp, #28]
 8008e64:	9305      	str	r3, [sp, #20]
 8008e66:	9503      	str	r5, [sp, #12]
 8008e68:	9b05      	ldr	r3, [sp, #20]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6e:	9b05      	ldr	r3, [sp, #20]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d028      	beq.n	8008eca <__hexnan+0x9e>
 8008e78:	9804      	ldr	r0, [sp, #16]
 8008e7a:	f7ff fd5f 	bl	800893c <__hexdig_fun>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d154      	bne.n	8008f2c <__hexnan+0x100>
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	d819      	bhi.n	8008ebc <__hexnan+0x90>
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	9a07      	ldr	r2, [sp, #28]
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	dd12      	ble.n	8008eb6 <__hexnan+0x8a>
 8008e90:	42bc      	cmp	r4, r7
 8008e92:	d206      	bcs.n	8008ea2 <__hexnan+0x76>
 8008e94:	2d07      	cmp	r5, #7
 8008e96:	dc04      	bgt.n	8008ea2 <__hexnan+0x76>
 8008e98:	002a      	movs	r2, r5
 8008e9a:	0039      	movs	r1, r7
 8008e9c:	0020      	movs	r0, r4
 8008e9e:	f7ff ff9f 	bl	8008de0 <L_shift>
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	2508      	movs	r5, #8
 8008ea6:	429c      	cmp	r4, r3
 8008ea8:	d905      	bls.n	8008eb6 <__hexnan+0x8a>
 8008eaa:	1f27      	subs	r7, r4, #4
 8008eac:	2500      	movs	r5, #0
 8008eae:	003c      	movs	r4, r7
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	603d      	str	r5, [r7, #0]
 8008eb4:	9307      	str	r3, [sp, #28]
 8008eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb8:	9305      	str	r3, [sp, #20]
 8008eba:	e7d5      	b.n	8008e68 <__hexnan+0x3c>
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	2b29      	cmp	r3, #41	; 0x29
 8008ec0:	d159      	bne.n	8008f76 <__hexnan+0x14a>
 8008ec2:	9b05      	ldr	r3, [sp, #20]
 8008ec4:	9a08      	ldr	r2, [sp, #32]
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d052      	beq.n	8008f76 <__hexnan+0x14a>
 8008ed0:	42bc      	cmp	r4, r7
 8008ed2:	d206      	bcs.n	8008ee2 <__hexnan+0xb6>
 8008ed4:	2d07      	cmp	r5, #7
 8008ed6:	dc04      	bgt.n	8008ee2 <__hexnan+0xb6>
 8008ed8:	002a      	movs	r2, r5
 8008eda:	0039      	movs	r1, r7
 8008edc:	0020      	movs	r0, r4
 8008ede:	f7ff ff7f 	bl	8008de0 <L_shift>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d935      	bls.n	8008f54 <__hexnan+0x128>
 8008ee8:	001a      	movs	r2, r3
 8008eea:	0023      	movs	r3, r4
 8008eec:	cb02      	ldmia	r3!, {r1}
 8008eee:	c202      	stmia	r2!, {r1}
 8008ef0:	429e      	cmp	r6, r3
 8008ef2:	d2fb      	bcs.n	8008eec <__hexnan+0xc0>
 8008ef4:	9b02      	ldr	r3, [sp, #8]
 8008ef6:	1c61      	adds	r1, r4, #1
 8008ef8:	1eda      	subs	r2, r3, #3
 8008efa:	2304      	movs	r3, #4
 8008efc:	4291      	cmp	r1, r2
 8008efe:	d805      	bhi.n	8008f0c <__hexnan+0xe0>
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	3b04      	subs	r3, #4
 8008f04:	1b1b      	subs	r3, r3, r4
 8008f06:	089b      	lsrs	r3, r3, #2
 8008f08:	3301      	adds	r3, #1
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	9a01      	ldr	r2, [sp, #4]
 8008f0e:	18d3      	adds	r3, r2, r3
 8008f10:	2200      	movs	r2, #0
 8008f12:	c304      	stmia	r3!, {r2}
 8008f14:	429e      	cmp	r6, r3
 8008f16:	d2fc      	bcs.n	8008f12 <__hexnan+0xe6>
 8008f18:	6833      	ldr	r3, [r6, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d104      	bne.n	8008f28 <__hexnan+0xfc>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	429e      	cmp	r6, r3
 8008f22:	d126      	bne.n	8008f72 <__hexnan+0x146>
 8008f24:	2301      	movs	r3, #1
 8008f26:	6033      	str	r3, [r6, #0]
 8008f28:	2005      	movs	r0, #5
 8008f2a:	e025      	b.n	8008f78 <__hexnan+0x14c>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	3501      	adds	r5, #1
 8008f30:	3301      	adds	r3, #1
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	2d08      	cmp	r5, #8
 8008f36:	dd06      	ble.n	8008f46 <__hexnan+0x11a>
 8008f38:	9b01      	ldr	r3, [sp, #4]
 8008f3a:	429c      	cmp	r4, r3
 8008f3c:	d9bb      	bls.n	8008eb6 <__hexnan+0x8a>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2501      	movs	r5, #1
 8008f42:	3c04      	subs	r4, #4
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	220f      	movs	r2, #15
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	4010      	ands	r0, r2
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	4318      	orrs	r0, r3
 8008f50:	6020      	str	r0, [r4, #0]
 8008f52:	e7b0      	b.n	8008eb6 <__hexnan+0x8a>
 8008f54:	9b06      	ldr	r3, [sp, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0de      	beq.n	8008f18 <__hexnan+0xec>
 8008f5a:	2120      	movs	r1, #32
 8008f5c:	9a06      	ldr	r2, [sp, #24]
 8008f5e:	9b02      	ldr	r3, [sp, #8]
 8008f60:	1a89      	subs	r1, r1, r2
 8008f62:	2201      	movs	r2, #1
 8008f64:	4252      	negs	r2, r2
 8008f66:	40ca      	lsrs	r2, r1
 8008f68:	3b04      	subs	r3, #4
 8008f6a:	6819      	ldr	r1, [r3, #0]
 8008f6c:	400a      	ands	r2, r1
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	e7d2      	b.n	8008f18 <__hexnan+0xec>
 8008f72:	3e04      	subs	r6, #4
 8008f74:	e7d0      	b.n	8008f18 <__hexnan+0xec>
 8008f76:	2004      	movs	r0, #4
 8008f78:	b00b      	add	sp, #44	; 0x2c
 8008f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f7c <_localeconv_r>:
 8008f7c:	4800      	ldr	r0, [pc, #0]	; (8008f80 <_localeconv_r+0x4>)
 8008f7e:	4770      	bx	lr
 8008f80:	20000164 	.word	0x20000164

08008f84 <malloc>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <malloc+0x10>)
 8008f88:	0001      	movs	r1, r0
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	f000 fd8c 	bl	8009aa8 <_malloc_r>
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	2000000c 	.word	0x2000000c

08008f98 <__ascii_mbtowc>:
 8008f98:	b082      	sub	sp, #8
 8008f9a:	2900      	cmp	r1, #0
 8008f9c:	d100      	bne.n	8008fa0 <__ascii_mbtowc+0x8>
 8008f9e:	a901      	add	r1, sp, #4
 8008fa0:	1e10      	subs	r0, r2, #0
 8008fa2:	d006      	beq.n	8008fb2 <__ascii_mbtowc+0x1a>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <__ascii_mbtowc+0x1e>
 8008fa8:	7813      	ldrb	r3, [r2, #0]
 8008faa:	600b      	str	r3, [r1, #0]
 8008fac:	7810      	ldrb	r0, [r2, #0]
 8008fae:	1e43      	subs	r3, r0, #1
 8008fb0:	4198      	sbcs	r0, r3
 8008fb2:	b002      	add	sp, #8
 8008fb4:	4770      	bx	lr
 8008fb6:	2002      	movs	r0, #2
 8008fb8:	4240      	negs	r0, r0
 8008fba:	e7fa      	b.n	8008fb2 <__ascii_mbtowc+0x1a>

08008fbc <memchr>:
 8008fbc:	b2c9      	uxtb	r1, r1
 8008fbe:	1882      	adds	r2, r0, r2
 8008fc0:	4290      	cmp	r0, r2
 8008fc2:	d101      	bne.n	8008fc8 <memchr+0xc>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	4770      	bx	lr
 8008fc8:	7803      	ldrb	r3, [r0, #0]
 8008fca:	428b      	cmp	r3, r1
 8008fcc:	d0fb      	beq.n	8008fc6 <memchr+0xa>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	e7f6      	b.n	8008fc0 <memchr+0x4>

08008fd2 <memcpy>:
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d100      	bne.n	8008fdc <memcpy+0xa>
 8008fda:	bd10      	pop	{r4, pc}
 8008fdc:	5ccc      	ldrb	r4, [r1, r3]
 8008fde:	54c4      	strb	r4, [r0, r3]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	e7f8      	b.n	8008fd6 <memcpy+0x4>

08008fe4 <_Balloc>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fe8:	0006      	movs	r6, r0
 8008fea:	000c      	movs	r4, r1
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	d10e      	bne.n	800900e <_Balloc+0x2a>
 8008ff0:	2010      	movs	r0, #16
 8008ff2:	f7ff ffc7 	bl	8008f84 <malloc>
 8008ff6:	1e02      	subs	r2, r0, #0
 8008ff8:	6270      	str	r0, [r6, #36]	; 0x24
 8008ffa:	d104      	bne.n	8009006 <_Balloc+0x22>
 8008ffc:	2166      	movs	r1, #102	; 0x66
 8008ffe:	4b19      	ldr	r3, [pc, #100]	; (8009064 <_Balloc+0x80>)
 8009000:	4819      	ldr	r0, [pc, #100]	; (8009068 <_Balloc+0x84>)
 8009002:	f000 ff61 	bl	8009ec8 <__assert_func>
 8009006:	6045      	str	r5, [r0, #4]
 8009008:	6085      	str	r5, [r0, #8]
 800900a:	6005      	str	r5, [r0, #0]
 800900c:	60c5      	str	r5, [r0, #12]
 800900e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009010:	68eb      	ldr	r3, [r5, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d013      	beq.n	800903e <_Balloc+0x5a>
 8009016:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009018:	00a2      	lsls	r2, r4, #2
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	189b      	adds	r3, r3, r2
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	2800      	cmp	r0, #0
 8009022:	d118      	bne.n	8009056 <_Balloc+0x72>
 8009024:	2101      	movs	r1, #1
 8009026:	000d      	movs	r5, r1
 8009028:	40a5      	lsls	r5, r4
 800902a:	1d6a      	adds	r2, r5, #5
 800902c:	0030      	movs	r0, r6
 800902e:	0092      	lsls	r2, r2, #2
 8009030:	f000 fca1 	bl	8009976 <_calloc_r>
 8009034:	2800      	cmp	r0, #0
 8009036:	d00c      	beq.n	8009052 <_Balloc+0x6e>
 8009038:	6044      	str	r4, [r0, #4]
 800903a:	6085      	str	r5, [r0, #8]
 800903c:	e00d      	b.n	800905a <_Balloc+0x76>
 800903e:	2221      	movs	r2, #33	; 0x21
 8009040:	2104      	movs	r1, #4
 8009042:	0030      	movs	r0, r6
 8009044:	f000 fc97 	bl	8009976 <_calloc_r>
 8009048:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800904a:	60e8      	str	r0, [r5, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e1      	bne.n	8009016 <_Balloc+0x32>
 8009052:	2000      	movs	r0, #0
 8009054:	bd70      	pop	{r4, r5, r6, pc}
 8009056:	6802      	ldr	r2, [r0, #0]
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	2300      	movs	r3, #0
 800905c:	6103      	str	r3, [r0, #16]
 800905e:	60c3      	str	r3, [r0, #12]
 8009060:	e7f8      	b.n	8009054 <_Balloc+0x70>
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	0800ae8e 	.word	0x0800ae8e
 8009068:	0800af8c 	.word	0x0800af8c

0800906c <_Bfree>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009070:	0005      	movs	r5, r0
 8009072:	000c      	movs	r4, r1
 8009074:	2e00      	cmp	r6, #0
 8009076:	d10e      	bne.n	8009096 <_Bfree+0x2a>
 8009078:	2010      	movs	r0, #16
 800907a:	f7ff ff83 	bl	8008f84 <malloc>
 800907e:	1e02      	subs	r2, r0, #0
 8009080:	6268      	str	r0, [r5, #36]	; 0x24
 8009082:	d104      	bne.n	800908e <_Bfree+0x22>
 8009084:	218a      	movs	r1, #138	; 0x8a
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <_Bfree+0x40>)
 8009088:	4809      	ldr	r0, [pc, #36]	; (80090b0 <_Bfree+0x44>)
 800908a:	f000 ff1d 	bl	8009ec8 <__assert_func>
 800908e:	6046      	str	r6, [r0, #4]
 8009090:	6086      	str	r6, [r0, #8]
 8009092:	6006      	str	r6, [r0, #0]
 8009094:	60c6      	str	r6, [r0, #12]
 8009096:	2c00      	cmp	r4, #0
 8009098:	d007      	beq.n	80090aa <_Bfree+0x3e>
 800909a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800909c:	6862      	ldr	r2, [r4, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	0092      	lsls	r2, r2, #2
 80090a2:	189b      	adds	r3, r3, r2
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	6022      	str	r2, [r4, #0]
 80090a8:	601c      	str	r4, [r3, #0]
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	0800ae8e 	.word	0x0800ae8e
 80090b0:	0800af8c 	.word	0x0800af8c

080090b4 <__multadd>:
 80090b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b6:	000e      	movs	r6, r1
 80090b8:	9001      	str	r0, [sp, #4]
 80090ba:	000c      	movs	r4, r1
 80090bc:	001d      	movs	r5, r3
 80090be:	2000      	movs	r0, #0
 80090c0:	690f      	ldr	r7, [r1, #16]
 80090c2:	3614      	adds	r6, #20
 80090c4:	6833      	ldr	r3, [r6, #0]
 80090c6:	3001      	adds	r0, #1
 80090c8:	b299      	uxth	r1, r3
 80090ca:	4351      	muls	r1, r2
 80090cc:	0c1b      	lsrs	r3, r3, #16
 80090ce:	4353      	muls	r3, r2
 80090d0:	1949      	adds	r1, r1, r5
 80090d2:	0c0d      	lsrs	r5, r1, #16
 80090d4:	195b      	adds	r3, r3, r5
 80090d6:	0c1d      	lsrs	r5, r3, #16
 80090d8:	b289      	uxth	r1, r1
 80090da:	041b      	lsls	r3, r3, #16
 80090dc:	185b      	adds	r3, r3, r1
 80090de:	c608      	stmia	r6!, {r3}
 80090e0:	4287      	cmp	r7, r0
 80090e2:	dcef      	bgt.n	80090c4 <__multadd+0x10>
 80090e4:	2d00      	cmp	r5, #0
 80090e6:	d022      	beq.n	800912e <__multadd+0x7a>
 80090e8:	68a3      	ldr	r3, [r4, #8]
 80090ea:	42bb      	cmp	r3, r7
 80090ec:	dc19      	bgt.n	8009122 <__multadd+0x6e>
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	9801      	ldr	r0, [sp, #4]
 80090f2:	1c59      	adds	r1, r3, #1
 80090f4:	f7ff ff76 	bl	8008fe4 <_Balloc>
 80090f8:	1e06      	subs	r6, r0, #0
 80090fa:	d105      	bne.n	8009108 <__multadd+0x54>
 80090fc:	0002      	movs	r2, r0
 80090fe:	21b5      	movs	r1, #181	; 0xb5
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <__multadd+0x80>)
 8009102:	480d      	ldr	r0, [pc, #52]	; (8009138 <__multadd+0x84>)
 8009104:	f000 fee0 	bl	8009ec8 <__assert_func>
 8009108:	0021      	movs	r1, r4
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	310c      	adds	r1, #12
 800910e:	1c9a      	adds	r2, r3, #2
 8009110:	0092      	lsls	r2, r2, #2
 8009112:	300c      	adds	r0, #12
 8009114:	f7ff ff5d 	bl	8008fd2 <memcpy>
 8009118:	0021      	movs	r1, r4
 800911a:	9801      	ldr	r0, [sp, #4]
 800911c:	f7ff ffa6 	bl	800906c <_Bfree>
 8009120:	0034      	movs	r4, r6
 8009122:	1d3b      	adds	r3, r7, #4
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	18e3      	adds	r3, r4, r3
 8009128:	605d      	str	r5, [r3, #4]
 800912a:	1c7b      	adds	r3, r7, #1
 800912c:	6123      	str	r3, [r4, #16]
 800912e:	0020      	movs	r0, r4
 8009130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009132:	46c0      	nop			; (mov r8, r8)
 8009134:	0800af00 	.word	0x0800af00
 8009138:	0800af8c 	.word	0x0800af8c

0800913c <__s2b>:
 800913c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800913e:	0006      	movs	r6, r0
 8009140:	0018      	movs	r0, r3
 8009142:	000c      	movs	r4, r1
 8009144:	3008      	adds	r0, #8
 8009146:	2109      	movs	r1, #9
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	0015      	movs	r5, r2
 800914c:	f7f7 f880 	bl	8000250 <__divsi3>
 8009150:	2301      	movs	r3, #1
 8009152:	2100      	movs	r1, #0
 8009154:	4283      	cmp	r3, r0
 8009156:	db0a      	blt.n	800916e <__s2b+0x32>
 8009158:	0030      	movs	r0, r6
 800915a:	f7ff ff43 	bl	8008fe4 <_Balloc>
 800915e:	1e01      	subs	r1, r0, #0
 8009160:	d108      	bne.n	8009174 <__s2b+0x38>
 8009162:	0002      	movs	r2, r0
 8009164:	4b19      	ldr	r3, [pc, #100]	; (80091cc <__s2b+0x90>)
 8009166:	481a      	ldr	r0, [pc, #104]	; (80091d0 <__s2b+0x94>)
 8009168:	31ce      	adds	r1, #206	; 0xce
 800916a:	f000 fead 	bl	8009ec8 <__assert_func>
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	3101      	adds	r1, #1
 8009172:	e7ef      	b.n	8009154 <__s2b+0x18>
 8009174:	9b08      	ldr	r3, [sp, #32]
 8009176:	6143      	str	r3, [r0, #20]
 8009178:	2301      	movs	r3, #1
 800917a:	6103      	str	r3, [r0, #16]
 800917c:	2d09      	cmp	r5, #9
 800917e:	dd18      	ble.n	80091b2 <__s2b+0x76>
 8009180:	0023      	movs	r3, r4
 8009182:	3309      	adds	r3, #9
 8009184:	001f      	movs	r7, r3
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	1964      	adds	r4, r4, r5
 800918a:	783b      	ldrb	r3, [r7, #0]
 800918c:	220a      	movs	r2, #10
 800918e:	0030      	movs	r0, r6
 8009190:	3b30      	subs	r3, #48	; 0x30
 8009192:	f7ff ff8f 	bl	80090b4 <__multadd>
 8009196:	3701      	adds	r7, #1
 8009198:	0001      	movs	r1, r0
 800919a:	42a7      	cmp	r7, r4
 800919c:	d1f5      	bne.n	800918a <__s2b+0x4e>
 800919e:	002c      	movs	r4, r5
 80091a0:	9b00      	ldr	r3, [sp, #0]
 80091a2:	3c08      	subs	r4, #8
 80091a4:	191c      	adds	r4, r3, r4
 80091a6:	002f      	movs	r7, r5
 80091a8:	9b01      	ldr	r3, [sp, #4]
 80091aa:	429f      	cmp	r7, r3
 80091ac:	db04      	blt.n	80091b8 <__s2b+0x7c>
 80091ae:	0008      	movs	r0, r1
 80091b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091b2:	2509      	movs	r5, #9
 80091b4:	340a      	adds	r4, #10
 80091b6:	e7f6      	b.n	80091a6 <__s2b+0x6a>
 80091b8:	1b63      	subs	r3, r4, r5
 80091ba:	5ddb      	ldrb	r3, [r3, r7]
 80091bc:	220a      	movs	r2, #10
 80091be:	0030      	movs	r0, r6
 80091c0:	3b30      	subs	r3, #48	; 0x30
 80091c2:	f7ff ff77 	bl	80090b4 <__multadd>
 80091c6:	3701      	adds	r7, #1
 80091c8:	0001      	movs	r1, r0
 80091ca:	e7ed      	b.n	80091a8 <__s2b+0x6c>
 80091cc:	0800af00 	.word	0x0800af00
 80091d0:	0800af8c 	.word	0x0800af8c

080091d4 <__hi0bits>:
 80091d4:	0003      	movs	r3, r0
 80091d6:	0c02      	lsrs	r2, r0, #16
 80091d8:	2000      	movs	r0, #0
 80091da:	4282      	cmp	r2, r0
 80091dc:	d101      	bne.n	80091e2 <__hi0bits+0xe>
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	3010      	adds	r0, #16
 80091e2:	0e1a      	lsrs	r2, r3, #24
 80091e4:	d101      	bne.n	80091ea <__hi0bits+0x16>
 80091e6:	3008      	adds	r0, #8
 80091e8:	021b      	lsls	r3, r3, #8
 80091ea:	0f1a      	lsrs	r2, r3, #28
 80091ec:	d101      	bne.n	80091f2 <__hi0bits+0x1e>
 80091ee:	3004      	adds	r0, #4
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	0f9a      	lsrs	r2, r3, #30
 80091f4:	d101      	bne.n	80091fa <__hi0bits+0x26>
 80091f6:	3002      	adds	r0, #2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	db03      	blt.n	8009206 <__hi0bits+0x32>
 80091fe:	3001      	adds	r0, #1
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	d400      	bmi.n	8009206 <__hi0bits+0x32>
 8009204:	2020      	movs	r0, #32
 8009206:	4770      	bx	lr

08009208 <__lo0bits>:
 8009208:	6803      	ldr	r3, [r0, #0]
 800920a:	0002      	movs	r2, r0
 800920c:	2107      	movs	r1, #7
 800920e:	0018      	movs	r0, r3
 8009210:	4008      	ands	r0, r1
 8009212:	420b      	tst	r3, r1
 8009214:	d00d      	beq.n	8009232 <__lo0bits+0x2a>
 8009216:	3906      	subs	r1, #6
 8009218:	2000      	movs	r0, #0
 800921a:	420b      	tst	r3, r1
 800921c:	d105      	bne.n	800922a <__lo0bits+0x22>
 800921e:	3002      	adds	r0, #2
 8009220:	4203      	tst	r3, r0
 8009222:	d003      	beq.n	800922c <__lo0bits+0x24>
 8009224:	40cb      	lsrs	r3, r1
 8009226:	0008      	movs	r0, r1
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	4770      	bx	lr
 800922c:	089b      	lsrs	r3, r3, #2
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	e7fb      	b.n	800922a <__lo0bits+0x22>
 8009232:	b299      	uxth	r1, r3
 8009234:	2900      	cmp	r1, #0
 8009236:	d101      	bne.n	800923c <__lo0bits+0x34>
 8009238:	2010      	movs	r0, #16
 800923a:	0c1b      	lsrs	r3, r3, #16
 800923c:	b2d9      	uxtb	r1, r3
 800923e:	2900      	cmp	r1, #0
 8009240:	d101      	bne.n	8009246 <__lo0bits+0x3e>
 8009242:	3008      	adds	r0, #8
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	0719      	lsls	r1, r3, #28
 8009248:	d101      	bne.n	800924e <__lo0bits+0x46>
 800924a:	3004      	adds	r0, #4
 800924c:	091b      	lsrs	r3, r3, #4
 800924e:	0799      	lsls	r1, r3, #30
 8009250:	d101      	bne.n	8009256 <__lo0bits+0x4e>
 8009252:	3002      	adds	r0, #2
 8009254:	089b      	lsrs	r3, r3, #2
 8009256:	07d9      	lsls	r1, r3, #31
 8009258:	d4e9      	bmi.n	800922e <__lo0bits+0x26>
 800925a:	3001      	adds	r0, #1
 800925c:	085b      	lsrs	r3, r3, #1
 800925e:	d1e6      	bne.n	800922e <__lo0bits+0x26>
 8009260:	2020      	movs	r0, #32
 8009262:	e7e2      	b.n	800922a <__lo0bits+0x22>

08009264 <__i2b>:
 8009264:	b510      	push	{r4, lr}
 8009266:	000c      	movs	r4, r1
 8009268:	2101      	movs	r1, #1
 800926a:	f7ff febb 	bl	8008fe4 <_Balloc>
 800926e:	2800      	cmp	r0, #0
 8009270:	d106      	bne.n	8009280 <__i2b+0x1c>
 8009272:	21a0      	movs	r1, #160	; 0xa0
 8009274:	0002      	movs	r2, r0
 8009276:	4b04      	ldr	r3, [pc, #16]	; (8009288 <__i2b+0x24>)
 8009278:	4804      	ldr	r0, [pc, #16]	; (800928c <__i2b+0x28>)
 800927a:	0049      	lsls	r1, r1, #1
 800927c:	f000 fe24 	bl	8009ec8 <__assert_func>
 8009280:	2301      	movs	r3, #1
 8009282:	6144      	str	r4, [r0, #20]
 8009284:	6103      	str	r3, [r0, #16]
 8009286:	bd10      	pop	{r4, pc}
 8009288:	0800af00 	.word	0x0800af00
 800928c:	0800af8c 	.word	0x0800af8c

08009290 <__multiply>:
 8009290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009292:	690b      	ldr	r3, [r1, #16]
 8009294:	0014      	movs	r4, r2
 8009296:	6912      	ldr	r2, [r2, #16]
 8009298:	000d      	movs	r5, r1
 800929a:	b089      	sub	sp, #36	; 0x24
 800929c:	4293      	cmp	r3, r2
 800929e:	da01      	bge.n	80092a4 <__multiply+0x14>
 80092a0:	0025      	movs	r5, r4
 80092a2:	000c      	movs	r4, r1
 80092a4:	692f      	ldr	r7, [r5, #16]
 80092a6:	6926      	ldr	r6, [r4, #16]
 80092a8:	6869      	ldr	r1, [r5, #4]
 80092aa:	19bb      	adds	r3, r7, r6
 80092ac:	9302      	str	r3, [sp, #8]
 80092ae:	68ab      	ldr	r3, [r5, #8]
 80092b0:	19ba      	adds	r2, r7, r6
 80092b2:	4293      	cmp	r3, r2
 80092b4:	da00      	bge.n	80092b8 <__multiply+0x28>
 80092b6:	3101      	adds	r1, #1
 80092b8:	f7ff fe94 	bl	8008fe4 <_Balloc>
 80092bc:	9001      	str	r0, [sp, #4]
 80092be:	2800      	cmp	r0, #0
 80092c0:	d106      	bne.n	80092d0 <__multiply+0x40>
 80092c2:	215e      	movs	r1, #94	; 0x5e
 80092c4:	0002      	movs	r2, r0
 80092c6:	4b48      	ldr	r3, [pc, #288]	; (80093e8 <__multiply+0x158>)
 80092c8:	4848      	ldr	r0, [pc, #288]	; (80093ec <__multiply+0x15c>)
 80092ca:	31ff      	adds	r1, #255	; 0xff
 80092cc:	f000 fdfc 	bl	8009ec8 <__assert_func>
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	3314      	adds	r3, #20
 80092d6:	469c      	mov	ip, r3
 80092d8:	19bb      	adds	r3, r7, r6
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4463      	add	r3, ip
 80092de:	9303      	str	r3, [sp, #12]
 80092e0:	4663      	mov	r3, ip
 80092e2:	9903      	ldr	r1, [sp, #12]
 80092e4:	428b      	cmp	r3, r1
 80092e6:	d32c      	bcc.n	8009342 <__multiply+0xb2>
 80092e8:	002b      	movs	r3, r5
 80092ea:	0022      	movs	r2, r4
 80092ec:	3314      	adds	r3, #20
 80092ee:	00bf      	lsls	r7, r7, #2
 80092f0:	3214      	adds	r2, #20
 80092f2:	9306      	str	r3, [sp, #24]
 80092f4:	00b6      	lsls	r6, r6, #2
 80092f6:	19db      	adds	r3, r3, r7
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	1993      	adds	r3, r2, r6
 80092fc:	9307      	str	r3, [sp, #28]
 80092fe:	2304      	movs	r3, #4
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	002b      	movs	r3, r5
 8009304:	9904      	ldr	r1, [sp, #16]
 8009306:	3315      	adds	r3, #21
 8009308:	9200      	str	r2, [sp, #0]
 800930a:	4299      	cmp	r1, r3
 800930c:	d305      	bcc.n	800931a <__multiply+0x8a>
 800930e:	1b4b      	subs	r3, r1, r5
 8009310:	3b15      	subs	r3, #21
 8009312:	089b      	lsrs	r3, r3, #2
 8009314:	3301      	adds	r3, #1
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	9b07      	ldr	r3, [sp, #28]
 800931c:	9a00      	ldr	r2, [sp, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d311      	bcc.n	8009346 <__multiply+0xb6>
 8009322:	9b02      	ldr	r3, [sp, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd06      	ble.n	8009336 <__multiply+0xa6>
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	3b04      	subs	r3, #4
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d053      	beq.n	80093de <__multiply+0x14e>
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	9a02      	ldr	r2, [sp, #8]
 800933a:	0018      	movs	r0, r3
 800933c:	611a      	str	r2, [r3, #16]
 800933e:	b009      	add	sp, #36	; 0x24
 8009340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009342:	c304      	stmia	r3!, {r2}
 8009344:	e7cd      	b.n	80092e2 <__multiply+0x52>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	b298      	uxth	r0, r3
 800934c:	2800      	cmp	r0, #0
 800934e:	d01b      	beq.n	8009388 <__multiply+0xf8>
 8009350:	4667      	mov	r7, ip
 8009352:	2400      	movs	r4, #0
 8009354:	9e06      	ldr	r6, [sp, #24]
 8009356:	ce02      	ldmia	r6!, {r1}
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	b28b      	uxth	r3, r1
 800935c:	4343      	muls	r3, r0
 800935e:	b292      	uxth	r2, r2
 8009360:	189b      	adds	r3, r3, r2
 8009362:	191b      	adds	r3, r3, r4
 8009364:	0c0c      	lsrs	r4, r1, #16
 8009366:	4344      	muls	r4, r0
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	0c11      	lsrs	r1, r2, #16
 800936c:	1861      	adds	r1, r4, r1
 800936e:	0c1c      	lsrs	r4, r3, #16
 8009370:	1909      	adds	r1, r1, r4
 8009372:	0c0c      	lsrs	r4, r1, #16
 8009374:	b29b      	uxth	r3, r3
 8009376:	0409      	lsls	r1, r1, #16
 8009378:	430b      	orrs	r3, r1
 800937a:	c708      	stmia	r7!, {r3}
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	42b3      	cmp	r3, r6
 8009380:	d8e9      	bhi.n	8009356 <__multiply+0xc6>
 8009382:	4663      	mov	r3, ip
 8009384:	9a05      	ldr	r2, [sp, #20]
 8009386:	509c      	str	r4, [r3, r2]
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	0c1e      	lsrs	r6, r3, #16
 800938e:	d020      	beq.n	80093d2 <__multiply+0x142>
 8009390:	4663      	mov	r3, ip
 8009392:	002c      	movs	r4, r5
 8009394:	4660      	mov	r0, ip
 8009396:	2700      	movs	r7, #0
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3414      	adds	r4, #20
 800939c:	6822      	ldr	r2, [r4, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	b291      	uxth	r1, r2
 80093a2:	4371      	muls	r1, r6
 80093a4:	6802      	ldr	r2, [r0, #0]
 80093a6:	0c12      	lsrs	r2, r2, #16
 80093a8:	1889      	adds	r1, r1, r2
 80093aa:	19cf      	adds	r7, r1, r7
 80093ac:	0439      	lsls	r1, r7, #16
 80093ae:	430b      	orrs	r3, r1
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	cc02      	ldmia	r4!, {r1}
 80093b4:	6843      	ldr	r3, [r0, #4]
 80093b6:	0c09      	lsrs	r1, r1, #16
 80093b8:	4371      	muls	r1, r6
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	0c3f      	lsrs	r7, r7, #16
 80093be:	18cb      	adds	r3, r1, r3
 80093c0:	9a04      	ldr	r2, [sp, #16]
 80093c2:	19db      	adds	r3, r3, r7
 80093c4:	0c1f      	lsrs	r7, r3, #16
 80093c6:	3004      	adds	r0, #4
 80093c8:	42a2      	cmp	r2, r4
 80093ca:	d8e7      	bhi.n	800939c <__multiply+0x10c>
 80093cc:	4662      	mov	r2, ip
 80093ce:	9905      	ldr	r1, [sp, #20]
 80093d0:	5053      	str	r3, [r2, r1]
 80093d2:	9b00      	ldr	r3, [sp, #0]
 80093d4:	3304      	adds	r3, #4
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2304      	movs	r3, #4
 80093da:	449c      	add	ip, r3
 80093dc:	e79d      	b.n	800931a <__multiply+0x8a>
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	e79d      	b.n	8009322 <__multiply+0x92>
 80093e6:	46c0      	nop			; (mov r8, r8)
 80093e8:	0800af00 	.word	0x0800af00
 80093ec:	0800af8c 	.word	0x0800af8c

080093f0 <__pow5mult>:
 80093f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093f2:	2303      	movs	r3, #3
 80093f4:	0015      	movs	r5, r2
 80093f6:	0007      	movs	r7, r0
 80093f8:	000e      	movs	r6, r1
 80093fa:	401a      	ands	r2, r3
 80093fc:	421d      	tst	r5, r3
 80093fe:	d008      	beq.n	8009412 <__pow5mult+0x22>
 8009400:	4925      	ldr	r1, [pc, #148]	; (8009498 <__pow5mult+0xa8>)
 8009402:	3a01      	subs	r2, #1
 8009404:	0092      	lsls	r2, r2, #2
 8009406:	5852      	ldr	r2, [r2, r1]
 8009408:	2300      	movs	r3, #0
 800940a:	0031      	movs	r1, r6
 800940c:	f7ff fe52 	bl	80090b4 <__multadd>
 8009410:	0006      	movs	r6, r0
 8009412:	10ad      	asrs	r5, r5, #2
 8009414:	d03d      	beq.n	8009492 <__pow5mult+0xa2>
 8009416:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009418:	2c00      	cmp	r4, #0
 800941a:	d10f      	bne.n	800943c <__pow5mult+0x4c>
 800941c:	2010      	movs	r0, #16
 800941e:	f7ff fdb1 	bl	8008f84 <malloc>
 8009422:	1e02      	subs	r2, r0, #0
 8009424:	6278      	str	r0, [r7, #36]	; 0x24
 8009426:	d105      	bne.n	8009434 <__pow5mult+0x44>
 8009428:	21d7      	movs	r1, #215	; 0xd7
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <__pow5mult+0xac>)
 800942c:	481c      	ldr	r0, [pc, #112]	; (80094a0 <__pow5mult+0xb0>)
 800942e:	0049      	lsls	r1, r1, #1
 8009430:	f000 fd4a 	bl	8009ec8 <__assert_func>
 8009434:	6044      	str	r4, [r0, #4]
 8009436:	6084      	str	r4, [r0, #8]
 8009438:	6004      	str	r4, [r0, #0]
 800943a:	60c4      	str	r4, [r0, #12]
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	689c      	ldr	r4, [r3, #8]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	2c00      	cmp	r4, #0
 8009444:	d108      	bne.n	8009458 <__pow5mult+0x68>
 8009446:	0038      	movs	r0, r7
 8009448:	4916      	ldr	r1, [pc, #88]	; (80094a4 <__pow5mult+0xb4>)
 800944a:	f7ff ff0b 	bl	8009264 <__i2b>
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	0004      	movs	r4, r0
 8009452:	6098      	str	r0, [r3, #8]
 8009454:	2300      	movs	r3, #0
 8009456:	6003      	str	r3, [r0, #0]
 8009458:	2301      	movs	r3, #1
 800945a:	421d      	tst	r5, r3
 800945c:	d00a      	beq.n	8009474 <__pow5mult+0x84>
 800945e:	0031      	movs	r1, r6
 8009460:	0022      	movs	r2, r4
 8009462:	0038      	movs	r0, r7
 8009464:	f7ff ff14 	bl	8009290 <__multiply>
 8009468:	0031      	movs	r1, r6
 800946a:	9001      	str	r0, [sp, #4]
 800946c:	0038      	movs	r0, r7
 800946e:	f7ff fdfd 	bl	800906c <_Bfree>
 8009472:	9e01      	ldr	r6, [sp, #4]
 8009474:	106d      	asrs	r5, r5, #1
 8009476:	d00c      	beq.n	8009492 <__pow5mult+0xa2>
 8009478:	6820      	ldr	r0, [r4, #0]
 800947a:	2800      	cmp	r0, #0
 800947c:	d107      	bne.n	800948e <__pow5mult+0x9e>
 800947e:	0022      	movs	r2, r4
 8009480:	0021      	movs	r1, r4
 8009482:	0038      	movs	r0, r7
 8009484:	f7ff ff04 	bl	8009290 <__multiply>
 8009488:	2300      	movs	r3, #0
 800948a:	6020      	str	r0, [r4, #0]
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	0004      	movs	r4, r0
 8009490:	e7e2      	b.n	8009458 <__pow5mult+0x68>
 8009492:	0030      	movs	r0, r6
 8009494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	0800b0d8 	.word	0x0800b0d8
 800949c:	0800ae8e 	.word	0x0800ae8e
 80094a0:	0800af8c 	.word	0x0800af8c
 80094a4:	00000271 	.word	0x00000271

080094a8 <__lshift>:
 80094a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094aa:	000c      	movs	r4, r1
 80094ac:	0017      	movs	r7, r2
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	1155      	asrs	r5, r2, #5
 80094b2:	b087      	sub	sp, #28
 80094b4:	18eb      	adds	r3, r5, r3
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	3301      	adds	r3, #1
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	6849      	ldr	r1, [r1, #4]
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	9004      	str	r0, [sp, #16]
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	4293      	cmp	r3, r2
 80094c6:	db10      	blt.n	80094ea <__lshift+0x42>
 80094c8:	9804      	ldr	r0, [sp, #16]
 80094ca:	f7ff fd8b 	bl	8008fe4 <_Balloc>
 80094ce:	2300      	movs	r3, #0
 80094d0:	0002      	movs	r2, r0
 80094d2:	0006      	movs	r6, r0
 80094d4:	0019      	movs	r1, r3
 80094d6:	3214      	adds	r2, #20
 80094d8:	4298      	cmp	r0, r3
 80094da:	d10c      	bne.n	80094f6 <__lshift+0x4e>
 80094dc:	21da      	movs	r1, #218	; 0xda
 80094de:	0002      	movs	r2, r0
 80094e0:	4b26      	ldr	r3, [pc, #152]	; (800957c <__lshift+0xd4>)
 80094e2:	4827      	ldr	r0, [pc, #156]	; (8009580 <__lshift+0xd8>)
 80094e4:	31ff      	adds	r1, #255	; 0xff
 80094e6:	f000 fcef 	bl	8009ec8 <__assert_func>
 80094ea:	3101      	adds	r1, #1
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	e7e8      	b.n	80094c2 <__lshift+0x1a>
 80094f0:	0098      	lsls	r0, r3, #2
 80094f2:	5011      	str	r1, [r2, r0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	42ab      	cmp	r3, r5
 80094f8:	dbfa      	blt.n	80094f0 <__lshift+0x48>
 80094fa:	43eb      	mvns	r3, r5
 80094fc:	17db      	asrs	r3, r3, #31
 80094fe:	401d      	ands	r5, r3
 8009500:	211f      	movs	r1, #31
 8009502:	0023      	movs	r3, r4
 8009504:	0038      	movs	r0, r7
 8009506:	00ad      	lsls	r5, r5, #2
 8009508:	1955      	adds	r5, r2, r5
 800950a:	6922      	ldr	r2, [r4, #16]
 800950c:	3314      	adds	r3, #20
 800950e:	0092      	lsls	r2, r2, #2
 8009510:	4008      	ands	r0, r1
 8009512:	4684      	mov	ip, r0
 8009514:	189a      	adds	r2, r3, r2
 8009516:	420f      	tst	r7, r1
 8009518:	d02a      	beq.n	8009570 <__lshift+0xc8>
 800951a:	3101      	adds	r1, #1
 800951c:	1a09      	subs	r1, r1, r0
 800951e:	9105      	str	r1, [sp, #20]
 8009520:	2100      	movs	r1, #0
 8009522:	9503      	str	r5, [sp, #12]
 8009524:	4667      	mov	r7, ip
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	40b8      	lsls	r0, r7
 800952a:	4301      	orrs	r1, r0
 800952c:	9803      	ldr	r0, [sp, #12]
 800952e:	c002      	stmia	r0!, {r1}
 8009530:	cb02      	ldmia	r3!, {r1}
 8009532:	9003      	str	r0, [sp, #12]
 8009534:	9805      	ldr	r0, [sp, #20]
 8009536:	40c1      	lsrs	r1, r0
 8009538:	429a      	cmp	r2, r3
 800953a:	d8f3      	bhi.n	8009524 <__lshift+0x7c>
 800953c:	0020      	movs	r0, r4
 800953e:	3015      	adds	r0, #21
 8009540:	2304      	movs	r3, #4
 8009542:	4282      	cmp	r2, r0
 8009544:	d304      	bcc.n	8009550 <__lshift+0xa8>
 8009546:	1b13      	subs	r3, r2, r4
 8009548:	3b15      	subs	r3, #21
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	3301      	adds	r3, #1
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	50e9      	str	r1, [r5, r3]
 8009552:	2900      	cmp	r1, #0
 8009554:	d002      	beq.n	800955c <__lshift+0xb4>
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	3302      	adds	r3, #2
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	9804      	ldr	r0, [sp, #16]
 8009560:	3b01      	subs	r3, #1
 8009562:	0021      	movs	r1, r4
 8009564:	6133      	str	r3, [r6, #16]
 8009566:	f7ff fd81 	bl	800906c <_Bfree>
 800956a:	0030      	movs	r0, r6
 800956c:	b007      	add	sp, #28
 800956e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009570:	cb02      	ldmia	r3!, {r1}
 8009572:	c502      	stmia	r5!, {r1}
 8009574:	429a      	cmp	r2, r3
 8009576:	d8fb      	bhi.n	8009570 <__lshift+0xc8>
 8009578:	e7f0      	b.n	800955c <__lshift+0xb4>
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	0800af00 	.word	0x0800af00
 8009580:	0800af8c 	.word	0x0800af8c

08009584 <__mcmp>:
 8009584:	6902      	ldr	r2, [r0, #16]
 8009586:	690b      	ldr	r3, [r1, #16]
 8009588:	b530      	push	{r4, r5, lr}
 800958a:	0004      	movs	r4, r0
 800958c:	1ad0      	subs	r0, r2, r3
 800958e:	429a      	cmp	r2, r3
 8009590:	d10d      	bne.n	80095ae <__mcmp+0x2a>
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	3414      	adds	r4, #20
 8009596:	3114      	adds	r1, #20
 8009598:	18e2      	adds	r2, r4, r3
 800959a:	18c9      	adds	r1, r1, r3
 800959c:	3a04      	subs	r2, #4
 800959e:	3904      	subs	r1, #4
 80095a0:	6815      	ldr	r5, [r2, #0]
 80095a2:	680b      	ldr	r3, [r1, #0]
 80095a4:	429d      	cmp	r5, r3
 80095a6:	d003      	beq.n	80095b0 <__mcmp+0x2c>
 80095a8:	2001      	movs	r0, #1
 80095aa:	429d      	cmp	r5, r3
 80095ac:	d303      	bcc.n	80095b6 <__mcmp+0x32>
 80095ae:	bd30      	pop	{r4, r5, pc}
 80095b0:	4294      	cmp	r4, r2
 80095b2:	d3f3      	bcc.n	800959c <__mcmp+0x18>
 80095b4:	e7fb      	b.n	80095ae <__mcmp+0x2a>
 80095b6:	4240      	negs	r0, r0
 80095b8:	e7f9      	b.n	80095ae <__mcmp+0x2a>
	...

080095bc <__mdiff>:
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	000e      	movs	r6, r1
 80095c0:	0007      	movs	r7, r0
 80095c2:	0011      	movs	r1, r2
 80095c4:	0030      	movs	r0, r6
 80095c6:	b087      	sub	sp, #28
 80095c8:	0014      	movs	r4, r2
 80095ca:	f7ff ffdb 	bl	8009584 <__mcmp>
 80095ce:	1e05      	subs	r5, r0, #0
 80095d0:	d110      	bne.n	80095f4 <__mdiff+0x38>
 80095d2:	0001      	movs	r1, r0
 80095d4:	0038      	movs	r0, r7
 80095d6:	f7ff fd05 	bl	8008fe4 <_Balloc>
 80095da:	1e02      	subs	r2, r0, #0
 80095dc:	d104      	bne.n	80095e8 <__mdiff+0x2c>
 80095de:	4b40      	ldr	r3, [pc, #256]	; (80096e0 <__mdiff+0x124>)
 80095e0:	4940      	ldr	r1, [pc, #256]	; (80096e4 <__mdiff+0x128>)
 80095e2:	4841      	ldr	r0, [pc, #260]	; (80096e8 <__mdiff+0x12c>)
 80095e4:	f000 fc70 	bl	8009ec8 <__assert_func>
 80095e8:	2301      	movs	r3, #1
 80095ea:	6145      	str	r5, [r0, #20]
 80095ec:	6103      	str	r3, [r0, #16]
 80095ee:	0010      	movs	r0, r2
 80095f0:	b007      	add	sp, #28
 80095f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f4:	2301      	movs	r3, #1
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	2800      	cmp	r0, #0
 80095fa:	db04      	blt.n	8009606 <__mdiff+0x4a>
 80095fc:	0023      	movs	r3, r4
 80095fe:	0034      	movs	r4, r6
 8009600:	001e      	movs	r6, r3
 8009602:	2300      	movs	r3, #0
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	0038      	movs	r0, r7
 8009608:	6861      	ldr	r1, [r4, #4]
 800960a:	f7ff fceb 	bl	8008fe4 <_Balloc>
 800960e:	1e02      	subs	r2, r0, #0
 8009610:	d103      	bne.n	800961a <__mdiff+0x5e>
 8009612:	2190      	movs	r1, #144	; 0x90
 8009614:	4b32      	ldr	r3, [pc, #200]	; (80096e0 <__mdiff+0x124>)
 8009616:	0089      	lsls	r1, r1, #2
 8009618:	e7e3      	b.n	80095e2 <__mdiff+0x26>
 800961a:	9b01      	ldr	r3, [sp, #4]
 800961c:	2700      	movs	r7, #0
 800961e:	60c3      	str	r3, [r0, #12]
 8009620:	6920      	ldr	r0, [r4, #16]
 8009622:	3414      	adds	r4, #20
 8009624:	9401      	str	r4, [sp, #4]
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	0084      	lsls	r4, r0, #2
 800962a:	191b      	adds	r3, r3, r4
 800962c:	0034      	movs	r4, r6
 800962e:	9302      	str	r3, [sp, #8]
 8009630:	6933      	ldr	r3, [r6, #16]
 8009632:	3414      	adds	r4, #20
 8009634:	0099      	lsls	r1, r3, #2
 8009636:	1863      	adds	r3, r4, r1
 8009638:	9303      	str	r3, [sp, #12]
 800963a:	0013      	movs	r3, r2
 800963c:	3314      	adds	r3, #20
 800963e:	469c      	mov	ip, r3
 8009640:	9305      	str	r3, [sp, #20]
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	cc02      	ldmia	r4!, {r1}
 800964a:	cb20      	ldmia	r3!, {r5}
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	b2ab      	uxth	r3, r5
 8009650:	19df      	adds	r7, r3, r7
 8009652:	b28b      	uxth	r3, r1
 8009654:	1afb      	subs	r3, r7, r3
 8009656:	0c09      	lsrs	r1, r1, #16
 8009658:	0c2d      	lsrs	r5, r5, #16
 800965a:	1a6d      	subs	r5, r5, r1
 800965c:	1419      	asrs	r1, r3, #16
 800965e:	186d      	adds	r5, r5, r1
 8009660:	4661      	mov	r1, ip
 8009662:	142f      	asrs	r7, r5, #16
 8009664:	b29b      	uxth	r3, r3
 8009666:	042d      	lsls	r5, r5, #16
 8009668:	432b      	orrs	r3, r5
 800966a:	c108      	stmia	r1!, {r3}
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	468c      	mov	ip, r1
 8009670:	42a3      	cmp	r3, r4
 8009672:	d8e8      	bhi.n	8009646 <__mdiff+0x8a>
 8009674:	0031      	movs	r1, r6
 8009676:	9c03      	ldr	r4, [sp, #12]
 8009678:	3115      	adds	r1, #21
 800967a:	2304      	movs	r3, #4
 800967c:	428c      	cmp	r4, r1
 800967e:	d304      	bcc.n	800968a <__mdiff+0xce>
 8009680:	1ba3      	subs	r3, r4, r6
 8009682:	3b15      	subs	r3, #21
 8009684:	089b      	lsrs	r3, r3, #2
 8009686:	3301      	adds	r3, #1
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	9901      	ldr	r1, [sp, #4]
 800968c:	18cc      	adds	r4, r1, r3
 800968e:	9905      	ldr	r1, [sp, #20]
 8009690:	0026      	movs	r6, r4
 8009692:	18cb      	adds	r3, r1, r3
 8009694:	469c      	mov	ip, r3
 8009696:	9902      	ldr	r1, [sp, #8]
 8009698:	428e      	cmp	r6, r1
 800969a:	d310      	bcc.n	80096be <__mdiff+0x102>
 800969c:	9e02      	ldr	r6, [sp, #8]
 800969e:	1ee1      	subs	r1, r4, #3
 80096a0:	2500      	movs	r5, #0
 80096a2:	428e      	cmp	r6, r1
 80096a4:	d304      	bcc.n	80096b0 <__mdiff+0xf4>
 80096a6:	0031      	movs	r1, r6
 80096a8:	3103      	adds	r1, #3
 80096aa:	1b0c      	subs	r4, r1, r4
 80096ac:	08a4      	lsrs	r4, r4, #2
 80096ae:	00a5      	lsls	r5, r4, #2
 80096b0:	195b      	adds	r3, r3, r5
 80096b2:	3b04      	subs	r3, #4
 80096b4:	6819      	ldr	r1, [r3, #0]
 80096b6:	2900      	cmp	r1, #0
 80096b8:	d00f      	beq.n	80096da <__mdiff+0x11e>
 80096ba:	6110      	str	r0, [r2, #16]
 80096bc:	e797      	b.n	80095ee <__mdiff+0x32>
 80096be:	ce02      	ldmia	r6!, {r1}
 80096c0:	b28d      	uxth	r5, r1
 80096c2:	19ed      	adds	r5, r5, r7
 80096c4:	0c0f      	lsrs	r7, r1, #16
 80096c6:	1429      	asrs	r1, r5, #16
 80096c8:	1879      	adds	r1, r7, r1
 80096ca:	140f      	asrs	r7, r1, #16
 80096cc:	b2ad      	uxth	r5, r5
 80096ce:	0409      	lsls	r1, r1, #16
 80096d0:	430d      	orrs	r5, r1
 80096d2:	4661      	mov	r1, ip
 80096d4:	c120      	stmia	r1!, {r5}
 80096d6:	468c      	mov	ip, r1
 80096d8:	e7dd      	b.n	8009696 <__mdiff+0xda>
 80096da:	3801      	subs	r0, #1
 80096dc:	e7e9      	b.n	80096b2 <__mdiff+0xf6>
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	0800af00 	.word	0x0800af00
 80096e4:	00000232 	.word	0x00000232
 80096e8:	0800af8c 	.word	0x0800af8c

080096ec <__ulp>:
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <__ulp+0x40>)
 80096ee:	4019      	ands	r1, r3
 80096f0:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <__ulp+0x44>)
 80096f2:	18c9      	adds	r1, r1, r3
 80096f4:	2900      	cmp	r1, #0
 80096f6:	dd04      	ble.n	8009702 <__ulp+0x16>
 80096f8:	2200      	movs	r2, #0
 80096fa:	000b      	movs	r3, r1
 80096fc:	0010      	movs	r0, r2
 80096fe:	0019      	movs	r1, r3
 8009700:	4770      	bx	lr
 8009702:	4249      	negs	r1, r1
 8009704:	2200      	movs	r2, #0
 8009706:	2300      	movs	r3, #0
 8009708:	1509      	asrs	r1, r1, #20
 800970a:	2913      	cmp	r1, #19
 800970c:	dc04      	bgt.n	8009718 <__ulp+0x2c>
 800970e:	2080      	movs	r0, #128	; 0x80
 8009710:	0300      	lsls	r0, r0, #12
 8009712:	4108      	asrs	r0, r1
 8009714:	0003      	movs	r3, r0
 8009716:	e7f1      	b.n	80096fc <__ulp+0x10>
 8009718:	3914      	subs	r1, #20
 800971a:	2001      	movs	r0, #1
 800971c:	291e      	cmp	r1, #30
 800971e:	dc02      	bgt.n	8009726 <__ulp+0x3a>
 8009720:	2080      	movs	r0, #128	; 0x80
 8009722:	0600      	lsls	r0, r0, #24
 8009724:	40c8      	lsrs	r0, r1
 8009726:	0002      	movs	r2, r0
 8009728:	e7e8      	b.n	80096fc <__ulp+0x10>
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	7ff00000 	.word	0x7ff00000
 8009730:	fcc00000 	.word	0xfcc00000

08009734 <__b2d>:
 8009734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009736:	0006      	movs	r6, r0
 8009738:	6903      	ldr	r3, [r0, #16]
 800973a:	3614      	adds	r6, #20
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	18f3      	adds	r3, r6, r3
 8009740:	1f1d      	subs	r5, r3, #4
 8009742:	682c      	ldr	r4, [r5, #0]
 8009744:	000f      	movs	r7, r1
 8009746:	0020      	movs	r0, r4
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f7ff fd43 	bl	80091d4 <__hi0bits>
 800974e:	2320      	movs	r3, #32
 8009750:	1a1b      	subs	r3, r3, r0
 8009752:	491f      	ldr	r1, [pc, #124]	; (80097d0 <__b2d+0x9c>)
 8009754:	603b      	str	r3, [r7, #0]
 8009756:	280a      	cmp	r0, #10
 8009758:	dc16      	bgt.n	8009788 <__b2d+0x54>
 800975a:	230b      	movs	r3, #11
 800975c:	0027      	movs	r7, r4
 800975e:	1a1b      	subs	r3, r3, r0
 8009760:	40df      	lsrs	r7, r3
 8009762:	4339      	orrs	r1, r7
 8009764:	469c      	mov	ip, r3
 8009766:	000b      	movs	r3, r1
 8009768:	2100      	movs	r1, #0
 800976a:	42ae      	cmp	r6, r5
 800976c:	d202      	bcs.n	8009774 <__b2d+0x40>
 800976e:	9901      	ldr	r1, [sp, #4]
 8009770:	3908      	subs	r1, #8
 8009772:	6809      	ldr	r1, [r1, #0]
 8009774:	3015      	adds	r0, #21
 8009776:	4084      	lsls	r4, r0
 8009778:	4660      	mov	r0, ip
 800977a:	40c1      	lsrs	r1, r0
 800977c:	430c      	orrs	r4, r1
 800977e:	0022      	movs	r2, r4
 8009780:	0010      	movs	r0, r2
 8009782:	0019      	movs	r1, r3
 8009784:	b003      	add	sp, #12
 8009786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009788:	2700      	movs	r7, #0
 800978a:	42ae      	cmp	r6, r5
 800978c:	d202      	bcs.n	8009794 <__b2d+0x60>
 800978e:	9d01      	ldr	r5, [sp, #4]
 8009790:	3d08      	subs	r5, #8
 8009792:	682f      	ldr	r7, [r5, #0]
 8009794:	230b      	movs	r3, #11
 8009796:	425b      	negs	r3, r3
 8009798:	469c      	mov	ip, r3
 800979a:	4484      	add	ip, r0
 800979c:	280b      	cmp	r0, #11
 800979e:	d013      	beq.n	80097c8 <__b2d+0x94>
 80097a0:	4663      	mov	r3, ip
 80097a2:	2020      	movs	r0, #32
 80097a4:	409c      	lsls	r4, r3
 80097a6:	1ac0      	subs	r0, r0, r3
 80097a8:	003b      	movs	r3, r7
 80097aa:	40c3      	lsrs	r3, r0
 80097ac:	431c      	orrs	r4, r3
 80097ae:	4321      	orrs	r1, r4
 80097b0:	000b      	movs	r3, r1
 80097b2:	2100      	movs	r1, #0
 80097b4:	42b5      	cmp	r5, r6
 80097b6:	d901      	bls.n	80097bc <__b2d+0x88>
 80097b8:	3d04      	subs	r5, #4
 80097ba:	6829      	ldr	r1, [r5, #0]
 80097bc:	4664      	mov	r4, ip
 80097be:	40c1      	lsrs	r1, r0
 80097c0:	40a7      	lsls	r7, r4
 80097c2:	430f      	orrs	r7, r1
 80097c4:	003a      	movs	r2, r7
 80097c6:	e7db      	b.n	8009780 <__b2d+0x4c>
 80097c8:	4321      	orrs	r1, r4
 80097ca:	000b      	movs	r3, r1
 80097cc:	e7fa      	b.n	80097c4 <__b2d+0x90>
 80097ce:	46c0      	nop			; (mov r8, r8)
 80097d0:	3ff00000 	.word	0x3ff00000

080097d4 <__d2b>:
 80097d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097d6:	2101      	movs	r1, #1
 80097d8:	0014      	movs	r4, r2
 80097da:	001e      	movs	r6, r3
 80097dc:	9f08      	ldr	r7, [sp, #32]
 80097de:	f7ff fc01 	bl	8008fe4 <_Balloc>
 80097e2:	1e05      	subs	r5, r0, #0
 80097e4:	d105      	bne.n	80097f2 <__d2b+0x1e>
 80097e6:	0002      	movs	r2, r0
 80097e8:	4b26      	ldr	r3, [pc, #152]	; (8009884 <__d2b+0xb0>)
 80097ea:	4927      	ldr	r1, [pc, #156]	; (8009888 <__d2b+0xb4>)
 80097ec:	4827      	ldr	r0, [pc, #156]	; (800988c <__d2b+0xb8>)
 80097ee:	f000 fb6b 	bl	8009ec8 <__assert_func>
 80097f2:	0333      	lsls	r3, r6, #12
 80097f4:	0076      	lsls	r6, r6, #1
 80097f6:	0b1b      	lsrs	r3, r3, #12
 80097f8:	0d76      	lsrs	r6, r6, #21
 80097fa:	d124      	bne.n	8009846 <__d2b+0x72>
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	2c00      	cmp	r4, #0
 8009800:	d027      	beq.n	8009852 <__d2b+0x7e>
 8009802:	4668      	mov	r0, sp
 8009804:	9400      	str	r4, [sp, #0]
 8009806:	f7ff fcff 	bl	8009208 <__lo0bits>
 800980a:	9c00      	ldr	r4, [sp, #0]
 800980c:	2800      	cmp	r0, #0
 800980e:	d01e      	beq.n	800984e <__d2b+0x7a>
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	2120      	movs	r1, #32
 8009814:	001a      	movs	r2, r3
 8009816:	1a09      	subs	r1, r1, r0
 8009818:	408a      	lsls	r2, r1
 800981a:	40c3      	lsrs	r3, r0
 800981c:	4322      	orrs	r2, r4
 800981e:	616a      	str	r2, [r5, #20]
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	9c01      	ldr	r4, [sp, #4]
 8009824:	61ac      	str	r4, [r5, #24]
 8009826:	1e63      	subs	r3, r4, #1
 8009828:	419c      	sbcs	r4, r3
 800982a:	3401      	adds	r4, #1
 800982c:	612c      	str	r4, [r5, #16]
 800982e:	2e00      	cmp	r6, #0
 8009830:	d018      	beq.n	8009864 <__d2b+0x90>
 8009832:	4b17      	ldr	r3, [pc, #92]	; (8009890 <__d2b+0xbc>)
 8009834:	18f6      	adds	r6, r6, r3
 8009836:	2335      	movs	r3, #53	; 0x35
 8009838:	1836      	adds	r6, r6, r0
 800983a:	1a18      	subs	r0, r3, r0
 800983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983e:	603e      	str	r6, [r7, #0]
 8009840:	6018      	str	r0, [r3, #0]
 8009842:	0028      	movs	r0, r5
 8009844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009846:	2280      	movs	r2, #128	; 0x80
 8009848:	0352      	lsls	r2, r2, #13
 800984a:	4313      	orrs	r3, r2
 800984c:	e7d6      	b.n	80097fc <__d2b+0x28>
 800984e:	616c      	str	r4, [r5, #20]
 8009850:	e7e7      	b.n	8009822 <__d2b+0x4e>
 8009852:	a801      	add	r0, sp, #4
 8009854:	f7ff fcd8 	bl	8009208 <__lo0bits>
 8009858:	2401      	movs	r4, #1
 800985a:	9b01      	ldr	r3, [sp, #4]
 800985c:	612c      	str	r4, [r5, #16]
 800985e:	616b      	str	r3, [r5, #20]
 8009860:	3020      	adds	r0, #32
 8009862:	e7e4      	b.n	800982e <__d2b+0x5a>
 8009864:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <__d2b+0xc0>)
 8009866:	18c0      	adds	r0, r0, r3
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <__d2b+0xc4>)
 800986a:	6038      	str	r0, [r7, #0]
 800986c:	18e3      	adds	r3, r4, r3
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	18eb      	adds	r3, r5, r3
 8009872:	6958      	ldr	r0, [r3, #20]
 8009874:	f7ff fcae 	bl	80091d4 <__hi0bits>
 8009878:	0164      	lsls	r4, r4, #5
 800987a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987c:	1a24      	subs	r4, r4, r0
 800987e:	601c      	str	r4, [r3, #0]
 8009880:	e7df      	b.n	8009842 <__d2b+0x6e>
 8009882:	46c0      	nop			; (mov r8, r8)
 8009884:	0800af00 	.word	0x0800af00
 8009888:	0000030a 	.word	0x0000030a
 800988c:	0800af8c 	.word	0x0800af8c
 8009890:	fffffbcd 	.word	0xfffffbcd
 8009894:	fffffbce 	.word	0xfffffbce
 8009898:	3fffffff 	.word	0x3fffffff

0800989c <__ratio>:
 800989c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989e:	b087      	sub	sp, #28
 80098a0:	000f      	movs	r7, r1
 80098a2:	a904      	add	r1, sp, #16
 80098a4:	0006      	movs	r6, r0
 80098a6:	f7ff ff45 	bl	8009734 <__b2d>
 80098aa:	9000      	str	r0, [sp, #0]
 80098ac:	9101      	str	r1, [sp, #4]
 80098ae:	9c00      	ldr	r4, [sp, #0]
 80098b0:	9d01      	ldr	r5, [sp, #4]
 80098b2:	0038      	movs	r0, r7
 80098b4:	a905      	add	r1, sp, #20
 80098b6:	f7ff ff3d 	bl	8009734 <__b2d>
 80098ba:	9002      	str	r0, [sp, #8]
 80098bc:	9103      	str	r1, [sp, #12]
 80098be:	9a02      	ldr	r2, [sp, #8]
 80098c0:	9b03      	ldr	r3, [sp, #12]
 80098c2:	6931      	ldr	r1, [r6, #16]
 80098c4:	6938      	ldr	r0, [r7, #16]
 80098c6:	9e05      	ldr	r6, [sp, #20]
 80098c8:	1a08      	subs	r0, r1, r0
 80098ca:	9904      	ldr	r1, [sp, #16]
 80098cc:	0140      	lsls	r0, r0, #5
 80098ce:	1b89      	subs	r1, r1, r6
 80098d0:	1841      	adds	r1, r0, r1
 80098d2:	0508      	lsls	r0, r1, #20
 80098d4:	2900      	cmp	r1, #0
 80098d6:	dd07      	ble.n	80098e8 <__ratio+0x4c>
 80098d8:	9901      	ldr	r1, [sp, #4]
 80098da:	1845      	adds	r5, r0, r1
 80098dc:	0020      	movs	r0, r4
 80098de:	0029      	movs	r1, r5
 80098e0:	f7f7 fea6 	bl	8001630 <__aeabi_ddiv>
 80098e4:	b007      	add	sp, #28
 80098e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e8:	9903      	ldr	r1, [sp, #12]
 80098ea:	1a0b      	subs	r3, r1, r0
 80098ec:	e7f6      	b.n	80098dc <__ratio+0x40>

080098ee <__copybits>:
 80098ee:	b570      	push	{r4, r5, r6, lr}
 80098f0:	0014      	movs	r4, r2
 80098f2:	0005      	movs	r5, r0
 80098f4:	3901      	subs	r1, #1
 80098f6:	6913      	ldr	r3, [r2, #16]
 80098f8:	1149      	asrs	r1, r1, #5
 80098fa:	3101      	adds	r1, #1
 80098fc:	0089      	lsls	r1, r1, #2
 80098fe:	3414      	adds	r4, #20
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	1841      	adds	r1, r0, r1
 8009904:	18e3      	adds	r3, r4, r3
 8009906:	42a3      	cmp	r3, r4
 8009908:	d80d      	bhi.n	8009926 <__copybits+0x38>
 800990a:	0014      	movs	r4, r2
 800990c:	3411      	adds	r4, #17
 800990e:	2500      	movs	r5, #0
 8009910:	429c      	cmp	r4, r3
 8009912:	d803      	bhi.n	800991c <__copybits+0x2e>
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	3b11      	subs	r3, #17
 8009918:	089b      	lsrs	r3, r3, #2
 800991a:	009d      	lsls	r5, r3, #2
 800991c:	2300      	movs	r3, #0
 800991e:	1940      	adds	r0, r0, r5
 8009920:	4281      	cmp	r1, r0
 8009922:	d803      	bhi.n	800992c <__copybits+0x3e>
 8009924:	bd70      	pop	{r4, r5, r6, pc}
 8009926:	cc40      	ldmia	r4!, {r6}
 8009928:	c540      	stmia	r5!, {r6}
 800992a:	e7ec      	b.n	8009906 <__copybits+0x18>
 800992c:	c008      	stmia	r0!, {r3}
 800992e:	e7f7      	b.n	8009920 <__copybits+0x32>

08009930 <__any_on>:
 8009930:	0002      	movs	r2, r0
 8009932:	6900      	ldr	r0, [r0, #16]
 8009934:	b510      	push	{r4, lr}
 8009936:	3214      	adds	r2, #20
 8009938:	114b      	asrs	r3, r1, #5
 800993a:	4298      	cmp	r0, r3
 800993c:	db13      	blt.n	8009966 <__any_on+0x36>
 800993e:	dd0c      	ble.n	800995a <__any_on+0x2a>
 8009940:	241f      	movs	r4, #31
 8009942:	0008      	movs	r0, r1
 8009944:	4020      	ands	r0, r4
 8009946:	4221      	tst	r1, r4
 8009948:	d007      	beq.n	800995a <__any_on+0x2a>
 800994a:	0099      	lsls	r1, r3, #2
 800994c:	588c      	ldr	r4, [r1, r2]
 800994e:	0021      	movs	r1, r4
 8009950:	40c1      	lsrs	r1, r0
 8009952:	4081      	lsls	r1, r0
 8009954:	2001      	movs	r0, #1
 8009956:	428c      	cmp	r4, r1
 8009958:	d104      	bne.n	8009964 <__any_on+0x34>
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	18d3      	adds	r3, r2, r3
 800995e:	4293      	cmp	r3, r2
 8009960:	d803      	bhi.n	800996a <__any_on+0x3a>
 8009962:	2000      	movs	r0, #0
 8009964:	bd10      	pop	{r4, pc}
 8009966:	0003      	movs	r3, r0
 8009968:	e7f7      	b.n	800995a <__any_on+0x2a>
 800996a:	3b04      	subs	r3, #4
 800996c:	6819      	ldr	r1, [r3, #0]
 800996e:	2900      	cmp	r1, #0
 8009970:	d0f5      	beq.n	800995e <__any_on+0x2e>
 8009972:	2001      	movs	r0, #1
 8009974:	e7f6      	b.n	8009964 <__any_on+0x34>

08009976 <_calloc_r>:
 8009976:	b570      	push	{r4, r5, r6, lr}
 8009978:	0c13      	lsrs	r3, r2, #16
 800997a:	0c0d      	lsrs	r5, r1, #16
 800997c:	d11e      	bne.n	80099bc <_calloc_r+0x46>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10c      	bne.n	800999c <_calloc_r+0x26>
 8009982:	b289      	uxth	r1, r1
 8009984:	b294      	uxth	r4, r2
 8009986:	434c      	muls	r4, r1
 8009988:	0021      	movs	r1, r4
 800998a:	f000 f88d 	bl	8009aa8 <_malloc_r>
 800998e:	1e05      	subs	r5, r0, #0
 8009990:	d01b      	beq.n	80099ca <_calloc_r+0x54>
 8009992:	0022      	movs	r2, r4
 8009994:	2100      	movs	r1, #0
 8009996:	f7fc fb6f 	bl	8006078 <memset>
 800999a:	e016      	b.n	80099ca <_calloc_r+0x54>
 800999c:	1c1d      	adds	r5, r3, #0
 800999e:	1c0b      	adds	r3, r1, #0
 80099a0:	b292      	uxth	r2, r2
 80099a2:	b289      	uxth	r1, r1
 80099a4:	b29c      	uxth	r4, r3
 80099a6:	4351      	muls	r1, r2
 80099a8:	b2ab      	uxth	r3, r5
 80099aa:	4363      	muls	r3, r4
 80099ac:	0c0c      	lsrs	r4, r1, #16
 80099ae:	191c      	adds	r4, r3, r4
 80099b0:	0c22      	lsrs	r2, r4, #16
 80099b2:	d107      	bne.n	80099c4 <_calloc_r+0x4e>
 80099b4:	0424      	lsls	r4, r4, #16
 80099b6:	b289      	uxth	r1, r1
 80099b8:	430c      	orrs	r4, r1
 80099ba:	e7e5      	b.n	8009988 <_calloc_r+0x12>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <_calloc_r+0x4e>
 80099c0:	1c13      	adds	r3, r2, #0
 80099c2:	e7ed      	b.n	80099a0 <_calloc_r+0x2a>
 80099c4:	230c      	movs	r3, #12
 80099c6:	2500      	movs	r5, #0
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	0028      	movs	r0, r5
 80099cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080099d0 <_free_r>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	0005      	movs	r5, r0
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d010      	beq.n	80099fa <_free_r+0x2a>
 80099d8:	1f0c      	subs	r4, r1, #4
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da00      	bge.n	80099e2 <_free_r+0x12>
 80099e0:	18e4      	adds	r4, r4, r3
 80099e2:	0028      	movs	r0, r5
 80099e4:	f000 fab2 	bl	8009f4c <__malloc_lock>
 80099e8:	4a1d      	ldr	r2, [pc, #116]	; (8009a60 <_free_r+0x90>)
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d105      	bne.n	80099fc <_free_r+0x2c>
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6014      	str	r4, [r2, #0]
 80099f4:	0028      	movs	r0, r5
 80099f6:	f000 fab1 	bl	8009f5c <__malloc_unlock>
 80099fa:	bd70      	pop	{r4, r5, r6, pc}
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d908      	bls.n	8009a12 <_free_r+0x42>
 8009a00:	6821      	ldr	r1, [r4, #0]
 8009a02:	1860      	adds	r0, r4, r1
 8009a04:	4283      	cmp	r3, r0
 8009a06:	d1f3      	bne.n	80099f0 <_free_r+0x20>
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	1841      	adds	r1, r0, r1
 8009a0e:	6021      	str	r1, [r4, #0]
 8009a10:	e7ee      	b.n	80099f0 <_free_r+0x20>
 8009a12:	001a      	movs	r2, r3
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <_free_r+0x4e>
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	d9f9      	bls.n	8009a12 <_free_r+0x42>
 8009a1e:	6811      	ldr	r1, [r2, #0]
 8009a20:	1850      	adds	r0, r2, r1
 8009a22:	42a0      	cmp	r0, r4
 8009a24:	d10b      	bne.n	8009a3e <_free_r+0x6e>
 8009a26:	6820      	ldr	r0, [r4, #0]
 8009a28:	1809      	adds	r1, r1, r0
 8009a2a:	1850      	adds	r0, r2, r1
 8009a2c:	6011      	str	r1, [r2, #0]
 8009a2e:	4283      	cmp	r3, r0
 8009a30:	d1e0      	bne.n	80099f4 <_free_r+0x24>
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	1841      	adds	r1, r0, r1
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	6053      	str	r3, [r2, #4]
 8009a3c:	e7da      	b.n	80099f4 <_free_r+0x24>
 8009a3e:	42a0      	cmp	r0, r4
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x78>
 8009a42:	230c      	movs	r3, #12
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	e7d5      	b.n	80099f4 <_free_r+0x24>
 8009a48:	6821      	ldr	r1, [r4, #0]
 8009a4a:	1860      	adds	r0, r4, r1
 8009a4c:	4283      	cmp	r3, r0
 8009a4e:	d103      	bne.n	8009a58 <_free_r+0x88>
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	1841      	adds	r1, r0, r1
 8009a56:	6021      	str	r1, [r4, #0]
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	6054      	str	r4, [r2, #4]
 8009a5c:	e7ca      	b.n	80099f4 <_free_r+0x24>
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	20000348 	.word	0x20000348

08009a64 <sbrk_aligned>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4e0f      	ldr	r6, [pc, #60]	; (8009aa4 <sbrk_aligned+0x40>)
 8009a68:	000d      	movs	r5, r1
 8009a6a:	6831      	ldr	r1, [r6, #0]
 8009a6c:	0004      	movs	r4, r0
 8009a6e:	2900      	cmp	r1, #0
 8009a70:	d102      	bne.n	8009a78 <sbrk_aligned+0x14>
 8009a72:	f000 f9f7 	bl	8009e64 <_sbrk_r>
 8009a76:	6030      	str	r0, [r6, #0]
 8009a78:	0029      	movs	r1, r5
 8009a7a:	0020      	movs	r0, r4
 8009a7c:	f000 f9f2 	bl	8009e64 <_sbrk_r>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d00a      	beq.n	8009a9a <sbrk_aligned+0x36>
 8009a84:	2303      	movs	r3, #3
 8009a86:	1cc5      	adds	r5, r0, #3
 8009a88:	439d      	bics	r5, r3
 8009a8a:	42a8      	cmp	r0, r5
 8009a8c:	d007      	beq.n	8009a9e <sbrk_aligned+0x3a>
 8009a8e:	1a29      	subs	r1, r5, r0
 8009a90:	0020      	movs	r0, r4
 8009a92:	f000 f9e7 	bl	8009e64 <_sbrk_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d101      	bne.n	8009a9e <sbrk_aligned+0x3a>
 8009a9a:	2501      	movs	r5, #1
 8009a9c:	426d      	negs	r5, r5
 8009a9e:	0028      	movs	r0, r5
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
 8009aa2:	46c0      	nop			; (mov r8, r8)
 8009aa4:	2000034c 	.word	0x2000034c

08009aa8 <_malloc_r>:
 8009aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aaa:	2203      	movs	r2, #3
 8009aac:	1ccb      	adds	r3, r1, #3
 8009aae:	4393      	bics	r3, r2
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	0006      	movs	r6, r0
 8009ab4:	001f      	movs	r7, r3
 8009ab6:	2b0c      	cmp	r3, #12
 8009ab8:	d232      	bcs.n	8009b20 <_malloc_r+0x78>
 8009aba:	270c      	movs	r7, #12
 8009abc:	42b9      	cmp	r1, r7
 8009abe:	d831      	bhi.n	8009b24 <_malloc_r+0x7c>
 8009ac0:	0030      	movs	r0, r6
 8009ac2:	f000 fa43 	bl	8009f4c <__malloc_lock>
 8009ac6:	4d32      	ldr	r5, [pc, #200]	; (8009b90 <_malloc_r+0xe8>)
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	001c      	movs	r4, r3
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	d12e      	bne.n	8009b2e <_malloc_r+0x86>
 8009ad0:	0039      	movs	r1, r7
 8009ad2:	0030      	movs	r0, r6
 8009ad4:	f7ff ffc6 	bl	8009a64 <sbrk_aligned>
 8009ad8:	0004      	movs	r4, r0
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d11e      	bne.n	8009b1c <_malloc_r+0x74>
 8009ade:	682c      	ldr	r4, [r5, #0]
 8009ae0:	0025      	movs	r5, r4
 8009ae2:	2d00      	cmp	r5, #0
 8009ae4:	d14a      	bne.n	8009b7c <_malloc_r+0xd4>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	0029      	movs	r1, r5
 8009aea:	18e3      	adds	r3, r4, r3
 8009aec:	0030      	movs	r0, r6
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	f000 f9b8 	bl	8009e64 <_sbrk_r>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	4283      	cmp	r3, r0
 8009af8:	d143      	bne.n	8009b82 <_malloc_r+0xda>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	3703      	adds	r7, #3
 8009afe:	1aff      	subs	r7, r7, r3
 8009b00:	2303      	movs	r3, #3
 8009b02:	439f      	bics	r7, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	2f0c      	cmp	r7, #12
 8009b08:	d200      	bcs.n	8009b0c <_malloc_r+0x64>
 8009b0a:	270c      	movs	r7, #12
 8009b0c:	0039      	movs	r1, r7
 8009b0e:	0030      	movs	r0, r6
 8009b10:	f7ff ffa8 	bl	8009a64 <sbrk_aligned>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d034      	beq.n	8009b82 <_malloc_r+0xda>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	19df      	adds	r7, r3, r7
 8009b1c:	6027      	str	r7, [r4, #0]
 8009b1e:	e013      	b.n	8009b48 <_malloc_r+0xa0>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dacb      	bge.n	8009abc <_malloc_r+0x14>
 8009b24:	230c      	movs	r3, #12
 8009b26:	2500      	movs	r5, #0
 8009b28:	6033      	str	r3, [r6, #0]
 8009b2a:	0028      	movs	r0, r5
 8009b2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b2e:	6822      	ldr	r2, [r4, #0]
 8009b30:	1bd1      	subs	r1, r2, r7
 8009b32:	d420      	bmi.n	8009b76 <_malloc_r+0xce>
 8009b34:	290b      	cmp	r1, #11
 8009b36:	d917      	bls.n	8009b68 <_malloc_r+0xc0>
 8009b38:	19e2      	adds	r2, r4, r7
 8009b3a:	6027      	str	r7, [r4, #0]
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	d111      	bne.n	8009b64 <_malloc_r+0xbc>
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	6863      	ldr	r3, [r4, #4]
 8009b44:	6011      	str	r1, [r2, #0]
 8009b46:	6053      	str	r3, [r2, #4]
 8009b48:	0030      	movs	r0, r6
 8009b4a:	0025      	movs	r5, r4
 8009b4c:	f000 fa06 	bl	8009f5c <__malloc_unlock>
 8009b50:	2207      	movs	r2, #7
 8009b52:	350b      	adds	r5, #11
 8009b54:	1d23      	adds	r3, r4, #4
 8009b56:	4395      	bics	r5, r2
 8009b58:	1aea      	subs	r2, r5, r3
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	d0e5      	beq.n	8009b2a <_malloc_r+0x82>
 8009b5e:	1b5b      	subs	r3, r3, r5
 8009b60:	50a3      	str	r3, [r4, r2]
 8009b62:	e7e2      	b.n	8009b2a <_malloc_r+0x82>
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	e7ec      	b.n	8009b42 <_malloc_r+0x9a>
 8009b68:	6862      	ldr	r2, [r4, #4]
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	d101      	bne.n	8009b72 <_malloc_r+0xca>
 8009b6e:	602a      	str	r2, [r5, #0]
 8009b70:	e7ea      	b.n	8009b48 <_malloc_r+0xa0>
 8009b72:	605a      	str	r2, [r3, #4]
 8009b74:	e7e8      	b.n	8009b48 <_malloc_r+0xa0>
 8009b76:	0023      	movs	r3, r4
 8009b78:	6864      	ldr	r4, [r4, #4]
 8009b7a:	e7a7      	b.n	8009acc <_malloc_r+0x24>
 8009b7c:	002c      	movs	r4, r5
 8009b7e:	686d      	ldr	r5, [r5, #4]
 8009b80:	e7af      	b.n	8009ae2 <_malloc_r+0x3a>
 8009b82:	230c      	movs	r3, #12
 8009b84:	0030      	movs	r0, r6
 8009b86:	6033      	str	r3, [r6, #0]
 8009b88:	f000 f9e8 	bl	8009f5c <__malloc_unlock>
 8009b8c:	e7cd      	b.n	8009b2a <_malloc_r+0x82>
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	20000348 	.word	0x20000348

08009b94 <__ssputs_r>:
 8009b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b96:	688e      	ldr	r6, [r1, #8]
 8009b98:	b085      	sub	sp, #20
 8009b9a:	0007      	movs	r7, r0
 8009b9c:	000c      	movs	r4, r1
 8009b9e:	9203      	str	r2, [sp, #12]
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	429e      	cmp	r6, r3
 8009ba4:	d83c      	bhi.n	8009c20 <__ssputs_r+0x8c>
 8009ba6:	2390      	movs	r3, #144	; 0x90
 8009ba8:	898a      	ldrh	r2, [r1, #12]
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	421a      	tst	r2, r3
 8009bae:	d034      	beq.n	8009c1a <__ssputs_r+0x86>
 8009bb0:	6909      	ldr	r1, [r1, #16]
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	6960      	ldr	r0, [r4, #20]
 8009bb6:	1a5b      	subs	r3, r3, r1
 8009bb8:	9302      	str	r3, [sp, #8]
 8009bba:	2303      	movs	r3, #3
 8009bbc:	4343      	muls	r3, r0
 8009bbe:	0fdd      	lsrs	r5, r3, #31
 8009bc0:	18ed      	adds	r5, r5, r3
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	9802      	ldr	r0, [sp, #8]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	181b      	adds	r3, r3, r0
 8009bca:	106d      	asrs	r5, r5, #1
 8009bcc:	42ab      	cmp	r3, r5
 8009bce:	d900      	bls.n	8009bd2 <__ssputs_r+0x3e>
 8009bd0:	001d      	movs	r5, r3
 8009bd2:	0553      	lsls	r3, r2, #21
 8009bd4:	d532      	bpl.n	8009c3c <__ssputs_r+0xa8>
 8009bd6:	0029      	movs	r1, r5
 8009bd8:	0038      	movs	r0, r7
 8009bda:	f7ff ff65 	bl	8009aa8 <_malloc_r>
 8009bde:	1e06      	subs	r6, r0, #0
 8009be0:	d109      	bne.n	8009bf6 <__ssputs_r+0x62>
 8009be2:	230c      	movs	r3, #12
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	2340      	movs	r3, #64	; 0x40
 8009be8:	2001      	movs	r0, #1
 8009bea:	89a2      	ldrh	r2, [r4, #12]
 8009bec:	4240      	negs	r0, r0
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	b005      	add	sp, #20
 8009bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bf6:	9a02      	ldr	r2, [sp, #8]
 8009bf8:	6921      	ldr	r1, [r4, #16]
 8009bfa:	f7ff f9ea 	bl	8008fd2 <memcpy>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	4a14      	ldr	r2, [pc, #80]	; (8009c54 <__ssputs_r+0xc0>)
 8009c02:	401a      	ands	r2, r3
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	4313      	orrs	r3, r2
 8009c08:	81a3      	strh	r3, [r4, #12]
 8009c0a:	9b02      	ldr	r3, [sp, #8]
 8009c0c:	6126      	str	r6, [r4, #16]
 8009c0e:	18f6      	adds	r6, r6, r3
 8009c10:	6026      	str	r6, [r4, #0]
 8009c12:	6165      	str	r5, [r4, #20]
 8009c14:	9e01      	ldr	r6, [sp, #4]
 8009c16:	1aed      	subs	r5, r5, r3
 8009c18:	60a5      	str	r5, [r4, #8]
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	429e      	cmp	r6, r3
 8009c1e:	d900      	bls.n	8009c22 <__ssputs_r+0x8e>
 8009c20:	9e01      	ldr	r6, [sp, #4]
 8009c22:	0032      	movs	r2, r6
 8009c24:	9903      	ldr	r1, [sp, #12]
 8009c26:	6820      	ldr	r0, [r4, #0]
 8009c28:	f000 f97c 	bl	8009f24 <memmove>
 8009c2c:	68a3      	ldr	r3, [r4, #8]
 8009c2e:	2000      	movs	r0, #0
 8009c30:	1b9b      	subs	r3, r3, r6
 8009c32:	60a3      	str	r3, [r4, #8]
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	199e      	adds	r6, r3, r6
 8009c38:	6026      	str	r6, [r4, #0]
 8009c3a:	e7da      	b.n	8009bf2 <__ssputs_r+0x5e>
 8009c3c:	002a      	movs	r2, r5
 8009c3e:	0038      	movs	r0, r7
 8009c40:	f000 f994 	bl	8009f6c <_realloc_r>
 8009c44:	1e06      	subs	r6, r0, #0
 8009c46:	d1e0      	bne.n	8009c0a <__ssputs_r+0x76>
 8009c48:	0038      	movs	r0, r7
 8009c4a:	6921      	ldr	r1, [r4, #16]
 8009c4c:	f7ff fec0 	bl	80099d0 <_free_r>
 8009c50:	e7c7      	b.n	8009be2 <__ssputs_r+0x4e>
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	fffffb7f 	.word	0xfffffb7f

08009c58 <_svfiprintf_r>:
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	b0a1      	sub	sp, #132	; 0x84
 8009c5c:	9003      	str	r0, [sp, #12]
 8009c5e:	001d      	movs	r5, r3
 8009c60:	898b      	ldrh	r3, [r1, #12]
 8009c62:	000f      	movs	r7, r1
 8009c64:	0016      	movs	r6, r2
 8009c66:	061b      	lsls	r3, r3, #24
 8009c68:	d511      	bpl.n	8009c8e <_svfiprintf_r+0x36>
 8009c6a:	690b      	ldr	r3, [r1, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10e      	bne.n	8009c8e <_svfiprintf_r+0x36>
 8009c70:	2140      	movs	r1, #64	; 0x40
 8009c72:	f7ff ff19 	bl	8009aa8 <_malloc_r>
 8009c76:	6038      	str	r0, [r7, #0]
 8009c78:	6138      	str	r0, [r7, #16]
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d105      	bne.n	8009c8a <_svfiprintf_r+0x32>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	9a03      	ldr	r2, [sp, #12]
 8009c82:	3801      	subs	r0, #1
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	b021      	add	sp, #132	; 0x84
 8009c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	617b      	str	r3, [r7, #20]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	ac08      	add	r4, sp, #32
 8009c92:	6163      	str	r3, [r4, #20]
 8009c94:	3320      	adds	r3, #32
 8009c96:	7663      	strb	r3, [r4, #25]
 8009c98:	3310      	adds	r3, #16
 8009c9a:	76a3      	strb	r3, [r4, #26]
 8009c9c:	9507      	str	r5, [sp, #28]
 8009c9e:	0035      	movs	r5, r6
 8009ca0:	782b      	ldrb	r3, [r5, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <_svfiprintf_r+0x52>
 8009ca6:	2b25      	cmp	r3, #37	; 0x25
 8009ca8:	d147      	bne.n	8009d3a <_svfiprintf_r+0xe2>
 8009caa:	1bab      	subs	r3, r5, r6
 8009cac:	9305      	str	r3, [sp, #20]
 8009cae:	42b5      	cmp	r5, r6
 8009cb0:	d00c      	beq.n	8009ccc <_svfiprintf_r+0x74>
 8009cb2:	0032      	movs	r2, r6
 8009cb4:	0039      	movs	r1, r7
 8009cb6:	9803      	ldr	r0, [sp, #12]
 8009cb8:	f7ff ff6c 	bl	8009b94 <__ssputs_r>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d100      	bne.n	8009cc2 <_svfiprintf_r+0x6a>
 8009cc0:	e0ae      	b.n	8009e20 <_svfiprintf_r+0x1c8>
 8009cc2:	6962      	ldr	r2, [r4, #20]
 8009cc4:	9b05      	ldr	r3, [sp, #20]
 8009cc6:	4694      	mov	ip, r2
 8009cc8:	4463      	add	r3, ip
 8009cca:	6163      	str	r3, [r4, #20]
 8009ccc:	782b      	ldrb	r3, [r5, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d100      	bne.n	8009cd4 <_svfiprintf_r+0x7c>
 8009cd2:	e0a5      	b.n	8009e20 <_svfiprintf_r+0x1c8>
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4252      	negs	r2, r2
 8009cda:	6062      	str	r2, [r4, #4]
 8009cdc:	a904      	add	r1, sp, #16
 8009cde:	3254      	adds	r2, #84	; 0x54
 8009ce0:	1852      	adds	r2, r2, r1
 8009ce2:	1c6e      	adds	r6, r5, #1
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	60e3      	str	r3, [r4, #12]
 8009ce8:	60a3      	str	r3, [r4, #8]
 8009cea:	7013      	strb	r3, [r2, #0]
 8009cec:	65a3      	str	r3, [r4, #88]	; 0x58
 8009cee:	2205      	movs	r2, #5
 8009cf0:	7831      	ldrb	r1, [r6, #0]
 8009cf2:	4854      	ldr	r0, [pc, #336]	; (8009e44 <_svfiprintf_r+0x1ec>)
 8009cf4:	f7ff f962 	bl	8008fbc <memchr>
 8009cf8:	1c75      	adds	r5, r6, #1
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d11f      	bne.n	8009d3e <_svfiprintf_r+0xe6>
 8009cfe:	6822      	ldr	r2, [r4, #0]
 8009d00:	06d3      	lsls	r3, r2, #27
 8009d02:	d504      	bpl.n	8009d0e <_svfiprintf_r+0xb6>
 8009d04:	2353      	movs	r3, #83	; 0x53
 8009d06:	a904      	add	r1, sp, #16
 8009d08:	185b      	adds	r3, r3, r1
 8009d0a:	2120      	movs	r1, #32
 8009d0c:	7019      	strb	r1, [r3, #0]
 8009d0e:	0713      	lsls	r3, r2, #28
 8009d10:	d504      	bpl.n	8009d1c <_svfiprintf_r+0xc4>
 8009d12:	2353      	movs	r3, #83	; 0x53
 8009d14:	a904      	add	r1, sp, #16
 8009d16:	185b      	adds	r3, r3, r1
 8009d18:	212b      	movs	r1, #43	; 0x2b
 8009d1a:	7019      	strb	r1, [r3, #0]
 8009d1c:	7833      	ldrb	r3, [r6, #0]
 8009d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d20:	d016      	beq.n	8009d50 <_svfiprintf_r+0xf8>
 8009d22:	0035      	movs	r5, r6
 8009d24:	2100      	movs	r1, #0
 8009d26:	200a      	movs	r0, #10
 8009d28:	68e3      	ldr	r3, [r4, #12]
 8009d2a:	782a      	ldrb	r2, [r5, #0]
 8009d2c:	1c6e      	adds	r6, r5, #1
 8009d2e:	3a30      	subs	r2, #48	; 0x30
 8009d30:	2a09      	cmp	r2, #9
 8009d32:	d94e      	bls.n	8009dd2 <_svfiprintf_r+0x17a>
 8009d34:	2900      	cmp	r1, #0
 8009d36:	d111      	bne.n	8009d5c <_svfiprintf_r+0x104>
 8009d38:	e017      	b.n	8009d6a <_svfiprintf_r+0x112>
 8009d3a:	3501      	adds	r5, #1
 8009d3c:	e7b0      	b.n	8009ca0 <_svfiprintf_r+0x48>
 8009d3e:	4b41      	ldr	r3, [pc, #260]	; (8009e44 <_svfiprintf_r+0x1ec>)
 8009d40:	6822      	ldr	r2, [r4, #0]
 8009d42:	1ac0      	subs	r0, r0, r3
 8009d44:	2301      	movs	r3, #1
 8009d46:	4083      	lsls	r3, r0
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	002e      	movs	r6, r5
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	e7ce      	b.n	8009cee <_svfiprintf_r+0x96>
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	1d19      	adds	r1, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	9107      	str	r1, [sp, #28]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	db01      	blt.n	8009d60 <_svfiprintf_r+0x108>
 8009d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d5e:	e004      	b.n	8009d6a <_svfiprintf_r+0x112>
 8009d60:	425b      	negs	r3, r3
 8009d62:	60e3      	str	r3, [r4, #12]
 8009d64:	2302      	movs	r3, #2
 8009d66:	4313      	orrs	r3, r2
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	782b      	ldrb	r3, [r5, #0]
 8009d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d6e:	d10a      	bne.n	8009d86 <_svfiprintf_r+0x12e>
 8009d70:	786b      	ldrb	r3, [r5, #1]
 8009d72:	2b2a      	cmp	r3, #42	; 0x2a
 8009d74:	d135      	bne.n	8009de2 <_svfiprintf_r+0x18a>
 8009d76:	9b07      	ldr	r3, [sp, #28]
 8009d78:	3502      	adds	r5, #2
 8009d7a:	1d1a      	adds	r2, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	9207      	str	r2, [sp, #28]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	db2b      	blt.n	8009ddc <_svfiprintf_r+0x184>
 8009d84:	9309      	str	r3, [sp, #36]	; 0x24
 8009d86:	4e30      	ldr	r6, [pc, #192]	; (8009e48 <_svfiprintf_r+0x1f0>)
 8009d88:	2203      	movs	r2, #3
 8009d8a:	0030      	movs	r0, r6
 8009d8c:	7829      	ldrb	r1, [r5, #0]
 8009d8e:	f7ff f915 	bl	8008fbc <memchr>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d006      	beq.n	8009da4 <_svfiprintf_r+0x14c>
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	1b80      	subs	r0, r0, r6
 8009d9a:	4083      	lsls	r3, r0
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	3501      	adds	r5, #1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	7829      	ldrb	r1, [r5, #0]
 8009da6:	2206      	movs	r2, #6
 8009da8:	4828      	ldr	r0, [pc, #160]	; (8009e4c <_svfiprintf_r+0x1f4>)
 8009daa:	1c6e      	adds	r6, r5, #1
 8009dac:	7621      	strb	r1, [r4, #24]
 8009dae:	f7ff f905 	bl	8008fbc <memchr>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d03c      	beq.n	8009e30 <_svfiprintf_r+0x1d8>
 8009db6:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <_svfiprintf_r+0x1f8>)
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d125      	bne.n	8009e08 <_svfiprintf_r+0x1b0>
 8009dbc:	2207      	movs	r2, #7
 8009dbe:	9b07      	ldr	r3, [sp, #28]
 8009dc0:	3307      	adds	r3, #7
 8009dc2:	4393      	bics	r3, r2
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	6963      	ldr	r3, [r4, #20]
 8009dca:	9a04      	ldr	r2, [sp, #16]
 8009dcc:	189b      	adds	r3, r3, r2
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	e765      	b.n	8009c9e <_svfiprintf_r+0x46>
 8009dd2:	4343      	muls	r3, r0
 8009dd4:	0035      	movs	r5, r6
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	189b      	adds	r3, r3, r2
 8009dda:	e7a6      	b.n	8009d2a <_svfiprintf_r+0xd2>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	425b      	negs	r3, r3
 8009de0:	e7d0      	b.n	8009d84 <_svfiprintf_r+0x12c>
 8009de2:	2300      	movs	r3, #0
 8009de4:	200a      	movs	r0, #10
 8009de6:	001a      	movs	r2, r3
 8009de8:	3501      	adds	r5, #1
 8009dea:	6063      	str	r3, [r4, #4]
 8009dec:	7829      	ldrb	r1, [r5, #0]
 8009dee:	1c6e      	adds	r6, r5, #1
 8009df0:	3930      	subs	r1, #48	; 0x30
 8009df2:	2909      	cmp	r1, #9
 8009df4:	d903      	bls.n	8009dfe <_svfiprintf_r+0x1a6>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0c5      	beq.n	8009d86 <_svfiprintf_r+0x12e>
 8009dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8009dfc:	e7c3      	b.n	8009d86 <_svfiprintf_r+0x12e>
 8009dfe:	4342      	muls	r2, r0
 8009e00:	0035      	movs	r5, r6
 8009e02:	2301      	movs	r3, #1
 8009e04:	1852      	adds	r2, r2, r1
 8009e06:	e7f1      	b.n	8009dec <_svfiprintf_r+0x194>
 8009e08:	ab07      	add	r3, sp, #28
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	003a      	movs	r2, r7
 8009e0e:	0021      	movs	r1, r4
 8009e10:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <_svfiprintf_r+0x1fc>)
 8009e12:	9803      	ldr	r0, [sp, #12]
 8009e14:	f7fc f9e2 	bl	80061dc <_printf_float>
 8009e18:	9004      	str	r0, [sp, #16]
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	d1d3      	bne.n	8009dc8 <_svfiprintf_r+0x170>
 8009e20:	89bb      	ldrh	r3, [r7, #12]
 8009e22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e24:	065b      	lsls	r3, r3, #25
 8009e26:	d400      	bmi.n	8009e2a <_svfiprintf_r+0x1d2>
 8009e28:	e72d      	b.n	8009c86 <_svfiprintf_r+0x2e>
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	4240      	negs	r0, r0
 8009e2e:	e72a      	b.n	8009c86 <_svfiprintf_r+0x2e>
 8009e30:	ab07      	add	r3, sp, #28
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	003a      	movs	r2, r7
 8009e36:	0021      	movs	r1, r4
 8009e38:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <_svfiprintf_r+0x1fc>)
 8009e3a:	9803      	ldr	r0, [sp, #12]
 8009e3c:	f7fc fc80 	bl	8006740 <_printf_i>
 8009e40:	e7ea      	b.n	8009e18 <_svfiprintf_r+0x1c0>
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	0800b0e4 	.word	0x0800b0e4
 8009e48:	0800b0ea 	.word	0x0800b0ea
 8009e4c:	0800b0ee 	.word	0x0800b0ee
 8009e50:	080061dd 	.word	0x080061dd
 8009e54:	08009b95 	.word	0x08009b95

08009e58 <nan>:
 8009e58:	2000      	movs	r0, #0
 8009e5a:	4901      	ldr	r1, [pc, #4]	; (8009e60 <nan+0x8>)
 8009e5c:	4770      	bx	lr
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	7ff80000 	.word	0x7ff80000

08009e64 <_sbrk_r>:
 8009e64:	2300      	movs	r3, #0
 8009e66:	b570      	push	{r4, r5, r6, lr}
 8009e68:	4d06      	ldr	r5, [pc, #24]	; (8009e84 <_sbrk_r+0x20>)
 8009e6a:	0004      	movs	r4, r0
 8009e6c:	0008      	movs	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7f9 f9a6 	bl	80031c0 <_sbrk>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d103      	bne.n	8009e80 <_sbrk_r+0x1c>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d000      	beq.n	8009e80 <_sbrk_r+0x1c>
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	bd70      	pop	{r4, r5, r6, pc}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	20000350 	.word	0x20000350

08009e88 <strncmp>:
 8009e88:	b530      	push	{r4, r5, lr}
 8009e8a:	0005      	movs	r5, r0
 8009e8c:	1e10      	subs	r0, r2, #0
 8009e8e:	d008      	beq.n	8009ea2 <strncmp+0x1a>
 8009e90:	2400      	movs	r4, #0
 8009e92:	3a01      	subs	r2, #1
 8009e94:	5d2b      	ldrb	r3, [r5, r4]
 8009e96:	5d08      	ldrb	r0, [r1, r4]
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	d101      	bne.n	8009ea0 <strncmp+0x18>
 8009e9c:	4294      	cmp	r4, r2
 8009e9e:	d101      	bne.n	8009ea4 <strncmp+0x1c>
 8009ea0:	1a18      	subs	r0, r3, r0
 8009ea2:	bd30      	pop	{r4, r5, pc}
 8009ea4:	3401      	adds	r4, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f4      	bne.n	8009e94 <strncmp+0xc>
 8009eaa:	e7f9      	b.n	8009ea0 <strncmp+0x18>

08009eac <__ascii_wctomb>:
 8009eac:	0003      	movs	r3, r0
 8009eae:	1e08      	subs	r0, r1, #0
 8009eb0:	d005      	beq.n	8009ebe <__ascii_wctomb+0x12>
 8009eb2:	2aff      	cmp	r2, #255	; 0xff
 8009eb4:	d904      	bls.n	8009ec0 <__ascii_wctomb+0x14>
 8009eb6:	228a      	movs	r2, #138	; 0x8a
 8009eb8:	2001      	movs	r0, #1
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	4240      	negs	r0, r0
 8009ebe:	4770      	bx	lr
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	700a      	strb	r2, [r1, #0]
 8009ec4:	e7fb      	b.n	8009ebe <__ascii_wctomb+0x12>
	...

08009ec8 <__assert_func>:
 8009ec8:	b530      	push	{r4, r5, lr}
 8009eca:	0014      	movs	r4, r2
 8009ecc:	001a      	movs	r2, r3
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <__assert_func+0x2c>)
 8009ed0:	0005      	movs	r5, r0
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	68d8      	ldr	r0, [r3, #12]
 8009ed8:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <__assert_func+0x30>)
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d101      	bne.n	8009ee2 <__assert_func+0x1a>
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <__assert_func+0x34>)
 8009ee0:	001c      	movs	r4, r3
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	9100      	str	r1, [sp, #0]
 8009ee6:	002b      	movs	r3, r5
 8009ee8:	4905      	ldr	r1, [pc, #20]	; (8009f00 <__assert_func+0x38>)
 8009eea:	9402      	str	r4, [sp, #8]
 8009eec:	f000 f80a 	bl	8009f04 <fiprintf>
 8009ef0:	f000 fa9a 	bl	800a428 <abort>
 8009ef4:	2000000c 	.word	0x2000000c
 8009ef8:	0800b0f5 	.word	0x0800b0f5
 8009efc:	0800b130 	.word	0x0800b130
 8009f00:	0800b102 	.word	0x0800b102

08009f04 <fiprintf>:
 8009f04:	b40e      	push	{r1, r2, r3}
 8009f06:	b503      	push	{r0, r1, lr}
 8009f08:	0001      	movs	r1, r0
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	4804      	ldr	r0, [pc, #16]	; (8009f20 <fiprintf+0x1c>)
 8009f0e:	cb04      	ldmia	r3!, {r2}
 8009f10:	6800      	ldr	r0, [r0, #0]
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	f000 f880 	bl	800a018 <_vfiprintf_r>
 8009f18:	b002      	add	sp, #8
 8009f1a:	bc08      	pop	{r3}
 8009f1c:	b003      	add	sp, #12
 8009f1e:	4718      	bx	r3
 8009f20:	2000000c 	.word	0x2000000c

08009f24 <memmove>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	4288      	cmp	r0, r1
 8009f28:	d902      	bls.n	8009f30 <memmove+0xc>
 8009f2a:	188b      	adds	r3, r1, r2
 8009f2c:	4298      	cmp	r0, r3
 8009f2e:	d303      	bcc.n	8009f38 <memmove+0x14>
 8009f30:	2300      	movs	r3, #0
 8009f32:	e007      	b.n	8009f44 <memmove+0x20>
 8009f34:	5c8b      	ldrb	r3, [r1, r2]
 8009f36:	5483      	strb	r3, [r0, r2]
 8009f38:	3a01      	subs	r2, #1
 8009f3a:	d2fb      	bcs.n	8009f34 <memmove+0x10>
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	5ccc      	ldrb	r4, [r1, r3]
 8009f40:	54c4      	strb	r4, [r0, r3]
 8009f42:	3301      	adds	r3, #1
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d1fa      	bne.n	8009f3e <memmove+0x1a>
 8009f48:	e7f8      	b.n	8009f3c <memmove+0x18>
	...

08009f4c <__malloc_lock>:
 8009f4c:	b510      	push	{r4, lr}
 8009f4e:	4802      	ldr	r0, [pc, #8]	; (8009f58 <__malloc_lock+0xc>)
 8009f50:	f000 fc41 	bl	800a7d6 <__retarget_lock_acquire_recursive>
 8009f54:	bd10      	pop	{r4, pc}
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	20000354 	.word	0x20000354

08009f5c <__malloc_unlock>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	4802      	ldr	r0, [pc, #8]	; (8009f68 <__malloc_unlock+0xc>)
 8009f60:	f000 fc3a 	bl	800a7d8 <__retarget_lock_release_recursive>
 8009f64:	bd10      	pop	{r4, pc}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	20000354 	.word	0x20000354

08009f6c <_realloc_r>:
 8009f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f6e:	0007      	movs	r7, r0
 8009f70:	000e      	movs	r6, r1
 8009f72:	0014      	movs	r4, r2
 8009f74:	2900      	cmp	r1, #0
 8009f76:	d105      	bne.n	8009f84 <_realloc_r+0x18>
 8009f78:	0011      	movs	r1, r2
 8009f7a:	f7ff fd95 	bl	8009aa8 <_malloc_r>
 8009f7e:	0005      	movs	r5, r0
 8009f80:	0028      	movs	r0, r5
 8009f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	d103      	bne.n	8009f90 <_realloc_r+0x24>
 8009f88:	f7ff fd22 	bl	80099d0 <_free_r>
 8009f8c:	0025      	movs	r5, r4
 8009f8e:	e7f7      	b.n	8009f80 <_realloc_r+0x14>
 8009f90:	f000 fc90 	bl	800a8b4 <_malloc_usable_size_r>
 8009f94:	9001      	str	r0, [sp, #4]
 8009f96:	4284      	cmp	r4, r0
 8009f98:	d803      	bhi.n	8009fa2 <_realloc_r+0x36>
 8009f9a:	0035      	movs	r5, r6
 8009f9c:	0843      	lsrs	r3, r0, #1
 8009f9e:	42a3      	cmp	r3, r4
 8009fa0:	d3ee      	bcc.n	8009f80 <_realloc_r+0x14>
 8009fa2:	0021      	movs	r1, r4
 8009fa4:	0038      	movs	r0, r7
 8009fa6:	f7ff fd7f 	bl	8009aa8 <_malloc_r>
 8009faa:	1e05      	subs	r5, r0, #0
 8009fac:	d0e8      	beq.n	8009f80 <_realloc_r+0x14>
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	0022      	movs	r2, r4
 8009fb2:	429c      	cmp	r4, r3
 8009fb4:	d900      	bls.n	8009fb8 <_realloc_r+0x4c>
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	0031      	movs	r1, r6
 8009fba:	0028      	movs	r0, r5
 8009fbc:	f7ff f809 	bl	8008fd2 <memcpy>
 8009fc0:	0031      	movs	r1, r6
 8009fc2:	0038      	movs	r0, r7
 8009fc4:	f7ff fd04 	bl	80099d0 <_free_r>
 8009fc8:	e7da      	b.n	8009f80 <_realloc_r+0x14>

08009fca <__sfputc_r>:
 8009fca:	6893      	ldr	r3, [r2, #8]
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	6093      	str	r3, [r2, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da04      	bge.n	8009fe0 <__sfputc_r+0x16>
 8009fd6:	6994      	ldr	r4, [r2, #24]
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	db07      	blt.n	8009fec <__sfputc_r+0x22>
 8009fdc:	290a      	cmp	r1, #10
 8009fde:	d005      	beq.n	8009fec <__sfputc_r+0x22>
 8009fe0:	6813      	ldr	r3, [r2, #0]
 8009fe2:	1c58      	adds	r0, r3, #1
 8009fe4:	6010      	str	r0, [r2, #0]
 8009fe6:	7019      	strb	r1, [r3, #0]
 8009fe8:	0008      	movs	r0, r1
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	f000 f94e 	bl	800a28c <__swbuf_r>
 8009ff0:	0001      	movs	r1, r0
 8009ff2:	e7f9      	b.n	8009fe8 <__sfputc_r+0x1e>

08009ff4 <__sfputs_r>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	0006      	movs	r6, r0
 8009ff8:	000f      	movs	r7, r1
 8009ffa:	0014      	movs	r4, r2
 8009ffc:	18d5      	adds	r5, r2, r3
 8009ffe:	42ac      	cmp	r4, r5
 800a000:	d101      	bne.n	800a006 <__sfputs_r+0x12>
 800a002:	2000      	movs	r0, #0
 800a004:	e007      	b.n	800a016 <__sfputs_r+0x22>
 800a006:	7821      	ldrb	r1, [r4, #0]
 800a008:	003a      	movs	r2, r7
 800a00a:	0030      	movs	r0, r6
 800a00c:	f7ff ffdd 	bl	8009fca <__sfputc_r>
 800a010:	3401      	adds	r4, #1
 800a012:	1c43      	adds	r3, r0, #1
 800a014:	d1f3      	bne.n	8009ffe <__sfputs_r+0xa>
 800a016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a018 <_vfiprintf_r>:
 800a018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a01a:	b0a1      	sub	sp, #132	; 0x84
 800a01c:	0006      	movs	r6, r0
 800a01e:	000c      	movs	r4, r1
 800a020:	001f      	movs	r7, r3
 800a022:	9203      	str	r2, [sp, #12]
 800a024:	2800      	cmp	r0, #0
 800a026:	d004      	beq.n	800a032 <_vfiprintf_r+0x1a>
 800a028:	6983      	ldr	r3, [r0, #24]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <_vfiprintf_r+0x1a>
 800a02e:	f000 fb31 	bl	800a694 <__sinit>
 800a032:	4b8e      	ldr	r3, [pc, #568]	; (800a26c <_vfiprintf_r+0x254>)
 800a034:	429c      	cmp	r4, r3
 800a036:	d11c      	bne.n	800a072 <_vfiprintf_r+0x5a>
 800a038:	6874      	ldr	r4, [r6, #4]
 800a03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a03c:	07db      	lsls	r3, r3, #31
 800a03e:	d405      	bmi.n	800a04c <_vfiprintf_r+0x34>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	059b      	lsls	r3, r3, #22
 800a044:	d402      	bmi.n	800a04c <_vfiprintf_r+0x34>
 800a046:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a048:	f000 fbc5 	bl	800a7d6 <__retarget_lock_acquire_recursive>
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	071b      	lsls	r3, r3, #28
 800a050:	d502      	bpl.n	800a058 <_vfiprintf_r+0x40>
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11d      	bne.n	800a094 <_vfiprintf_r+0x7c>
 800a058:	0021      	movs	r1, r4
 800a05a:	0030      	movs	r0, r6
 800a05c:	f000 f96c 	bl	800a338 <__swsetup_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	d017      	beq.n	800a094 <_vfiprintf_r+0x7c>
 800a064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a066:	07db      	lsls	r3, r3, #31
 800a068:	d50d      	bpl.n	800a086 <_vfiprintf_r+0x6e>
 800a06a:	2001      	movs	r0, #1
 800a06c:	4240      	negs	r0, r0
 800a06e:	b021      	add	sp, #132	; 0x84
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a072:	4b7f      	ldr	r3, [pc, #508]	; (800a270 <_vfiprintf_r+0x258>)
 800a074:	429c      	cmp	r4, r3
 800a076:	d101      	bne.n	800a07c <_vfiprintf_r+0x64>
 800a078:	68b4      	ldr	r4, [r6, #8]
 800a07a:	e7de      	b.n	800a03a <_vfiprintf_r+0x22>
 800a07c:	4b7d      	ldr	r3, [pc, #500]	; (800a274 <_vfiprintf_r+0x25c>)
 800a07e:	429c      	cmp	r4, r3
 800a080:	d1db      	bne.n	800a03a <_vfiprintf_r+0x22>
 800a082:	68f4      	ldr	r4, [r6, #12]
 800a084:	e7d9      	b.n	800a03a <_vfiprintf_r+0x22>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	059b      	lsls	r3, r3, #22
 800a08a:	d4ee      	bmi.n	800a06a <_vfiprintf_r+0x52>
 800a08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a08e:	f000 fba3 	bl	800a7d8 <__retarget_lock_release_recursive>
 800a092:	e7ea      	b.n	800a06a <_vfiprintf_r+0x52>
 800a094:	2300      	movs	r3, #0
 800a096:	ad08      	add	r5, sp, #32
 800a098:	616b      	str	r3, [r5, #20]
 800a09a:	3320      	adds	r3, #32
 800a09c:	766b      	strb	r3, [r5, #25]
 800a09e:	3310      	adds	r3, #16
 800a0a0:	76ab      	strb	r3, [r5, #26]
 800a0a2:	9707      	str	r7, [sp, #28]
 800a0a4:	9f03      	ldr	r7, [sp, #12]
 800a0a6:	783b      	ldrb	r3, [r7, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <_vfiprintf_r+0x98>
 800a0ac:	2b25      	cmp	r3, #37	; 0x25
 800a0ae:	d14e      	bne.n	800a14e <_vfiprintf_r+0x136>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	1afb      	subs	r3, r7, r3
 800a0b4:	9305      	str	r3, [sp, #20]
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	429f      	cmp	r7, r3
 800a0ba:	d00d      	beq.n	800a0d8 <_vfiprintf_r+0xc0>
 800a0bc:	9b05      	ldr	r3, [sp, #20]
 800a0be:	0021      	movs	r1, r4
 800a0c0:	0030      	movs	r0, r6
 800a0c2:	9a03      	ldr	r2, [sp, #12]
 800a0c4:	f7ff ff96 	bl	8009ff4 <__sfputs_r>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d100      	bne.n	800a0ce <_vfiprintf_r+0xb6>
 800a0cc:	e0b5      	b.n	800a23a <_vfiprintf_r+0x222>
 800a0ce:	696a      	ldr	r2, [r5, #20]
 800a0d0:	9b05      	ldr	r3, [sp, #20]
 800a0d2:	4694      	mov	ip, r2
 800a0d4:	4463      	add	r3, ip
 800a0d6:	616b      	str	r3, [r5, #20]
 800a0d8:	783b      	ldrb	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d100      	bne.n	800a0e0 <_vfiprintf_r+0xc8>
 800a0de:	e0ac      	b.n	800a23a <_vfiprintf_r+0x222>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	1c7b      	adds	r3, r7, #1
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4252      	negs	r2, r2
 800a0ea:	606a      	str	r2, [r5, #4]
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	3254      	adds	r2, #84	; 0x54
 800a0f0:	1852      	adds	r2, r2, r1
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	60eb      	str	r3, [r5, #12]
 800a0f6:	60ab      	str	r3, [r5, #8]
 800a0f8:	7013      	strb	r3, [r2, #0]
 800a0fa:	65ab      	str	r3, [r5, #88]	; 0x58
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	2205      	movs	r2, #5
 800a100:	7819      	ldrb	r1, [r3, #0]
 800a102:	485d      	ldr	r0, [pc, #372]	; (800a278 <_vfiprintf_r+0x260>)
 800a104:	f7fe ff5a 	bl	8008fbc <memchr>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1c5f      	adds	r7, r3, #1
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d120      	bne.n	800a152 <_vfiprintf_r+0x13a>
 800a110:	682a      	ldr	r2, [r5, #0]
 800a112:	06d3      	lsls	r3, r2, #27
 800a114:	d504      	bpl.n	800a120 <_vfiprintf_r+0x108>
 800a116:	2353      	movs	r3, #83	; 0x53
 800a118:	a904      	add	r1, sp, #16
 800a11a:	185b      	adds	r3, r3, r1
 800a11c:	2120      	movs	r1, #32
 800a11e:	7019      	strb	r1, [r3, #0]
 800a120:	0713      	lsls	r3, r2, #28
 800a122:	d504      	bpl.n	800a12e <_vfiprintf_r+0x116>
 800a124:	2353      	movs	r3, #83	; 0x53
 800a126:	a904      	add	r1, sp, #16
 800a128:	185b      	adds	r3, r3, r1
 800a12a:	212b      	movs	r1, #43	; 0x2b
 800a12c:	7019      	strb	r1, [r3, #0]
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b2a      	cmp	r3, #42	; 0x2a
 800a134:	d016      	beq.n	800a164 <_vfiprintf_r+0x14c>
 800a136:	2100      	movs	r1, #0
 800a138:	68eb      	ldr	r3, [r5, #12]
 800a13a:	9f03      	ldr	r7, [sp, #12]
 800a13c:	783a      	ldrb	r2, [r7, #0]
 800a13e:	1c78      	adds	r0, r7, #1
 800a140:	3a30      	subs	r2, #48	; 0x30
 800a142:	4684      	mov	ip, r0
 800a144:	2a09      	cmp	r2, #9
 800a146:	d94f      	bls.n	800a1e8 <_vfiprintf_r+0x1d0>
 800a148:	2900      	cmp	r1, #0
 800a14a:	d111      	bne.n	800a170 <_vfiprintf_r+0x158>
 800a14c:	e017      	b.n	800a17e <_vfiprintf_r+0x166>
 800a14e:	3701      	adds	r7, #1
 800a150:	e7a9      	b.n	800a0a6 <_vfiprintf_r+0x8e>
 800a152:	4b49      	ldr	r3, [pc, #292]	; (800a278 <_vfiprintf_r+0x260>)
 800a154:	682a      	ldr	r2, [r5, #0]
 800a156:	1ac0      	subs	r0, r0, r3
 800a158:	2301      	movs	r3, #1
 800a15a:	4083      	lsls	r3, r0
 800a15c:	4313      	orrs	r3, r2
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	9703      	str	r7, [sp, #12]
 800a162:	e7cb      	b.n	800a0fc <_vfiprintf_r+0xe4>
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	1d19      	adds	r1, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	9107      	str	r1, [sp, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	db01      	blt.n	800a174 <_vfiprintf_r+0x15c>
 800a170:	930b      	str	r3, [sp, #44]	; 0x2c
 800a172:	e004      	b.n	800a17e <_vfiprintf_r+0x166>
 800a174:	425b      	negs	r3, r3
 800a176:	60eb      	str	r3, [r5, #12]
 800a178:	2302      	movs	r3, #2
 800a17a:	4313      	orrs	r3, r2
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	783b      	ldrb	r3, [r7, #0]
 800a180:	2b2e      	cmp	r3, #46	; 0x2e
 800a182:	d10a      	bne.n	800a19a <_vfiprintf_r+0x182>
 800a184:	787b      	ldrb	r3, [r7, #1]
 800a186:	2b2a      	cmp	r3, #42	; 0x2a
 800a188:	d137      	bne.n	800a1fa <_vfiprintf_r+0x1e2>
 800a18a:	9b07      	ldr	r3, [sp, #28]
 800a18c:	3702      	adds	r7, #2
 800a18e:	1d1a      	adds	r2, r3, #4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	9207      	str	r2, [sp, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	db2d      	blt.n	800a1f4 <_vfiprintf_r+0x1dc>
 800a198:	9309      	str	r3, [sp, #36]	; 0x24
 800a19a:	2203      	movs	r2, #3
 800a19c:	7839      	ldrb	r1, [r7, #0]
 800a19e:	4837      	ldr	r0, [pc, #220]	; (800a27c <_vfiprintf_r+0x264>)
 800a1a0:	f7fe ff0c 	bl	8008fbc <memchr>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d007      	beq.n	800a1b8 <_vfiprintf_r+0x1a0>
 800a1a8:	4b34      	ldr	r3, [pc, #208]	; (800a27c <_vfiprintf_r+0x264>)
 800a1aa:	682a      	ldr	r2, [r5, #0]
 800a1ac:	1ac0      	subs	r0, r0, r3
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	4083      	lsls	r3, r0
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	3701      	adds	r7, #1
 800a1b6:	602b      	str	r3, [r5, #0]
 800a1b8:	7839      	ldrb	r1, [r7, #0]
 800a1ba:	1c7b      	adds	r3, r7, #1
 800a1bc:	2206      	movs	r2, #6
 800a1be:	4830      	ldr	r0, [pc, #192]	; (800a280 <_vfiprintf_r+0x268>)
 800a1c0:	9303      	str	r3, [sp, #12]
 800a1c2:	7629      	strb	r1, [r5, #24]
 800a1c4:	f7fe fefa 	bl	8008fbc <memchr>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d045      	beq.n	800a258 <_vfiprintf_r+0x240>
 800a1cc:	4b2d      	ldr	r3, [pc, #180]	; (800a284 <_vfiprintf_r+0x26c>)
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d127      	bne.n	800a222 <_vfiprintf_r+0x20a>
 800a1d2:	2207      	movs	r2, #7
 800a1d4:	9b07      	ldr	r3, [sp, #28]
 800a1d6:	3307      	adds	r3, #7
 800a1d8:	4393      	bics	r3, r2
 800a1da:	3308      	adds	r3, #8
 800a1dc:	9307      	str	r3, [sp, #28]
 800a1de:	696b      	ldr	r3, [r5, #20]
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	189b      	adds	r3, r3, r2
 800a1e4:	616b      	str	r3, [r5, #20]
 800a1e6:	e75d      	b.n	800a0a4 <_vfiprintf_r+0x8c>
 800a1e8:	210a      	movs	r1, #10
 800a1ea:	434b      	muls	r3, r1
 800a1ec:	4667      	mov	r7, ip
 800a1ee:	189b      	adds	r3, r3, r2
 800a1f0:	3909      	subs	r1, #9
 800a1f2:	e7a3      	b.n	800a13c <_vfiprintf_r+0x124>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	425b      	negs	r3, r3
 800a1f8:	e7ce      	b.n	800a198 <_vfiprintf_r+0x180>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	001a      	movs	r2, r3
 800a1fe:	3701      	adds	r7, #1
 800a200:	606b      	str	r3, [r5, #4]
 800a202:	7839      	ldrb	r1, [r7, #0]
 800a204:	1c78      	adds	r0, r7, #1
 800a206:	3930      	subs	r1, #48	; 0x30
 800a208:	4684      	mov	ip, r0
 800a20a:	2909      	cmp	r1, #9
 800a20c:	d903      	bls.n	800a216 <_vfiprintf_r+0x1fe>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0c3      	beq.n	800a19a <_vfiprintf_r+0x182>
 800a212:	9209      	str	r2, [sp, #36]	; 0x24
 800a214:	e7c1      	b.n	800a19a <_vfiprintf_r+0x182>
 800a216:	230a      	movs	r3, #10
 800a218:	435a      	muls	r2, r3
 800a21a:	4667      	mov	r7, ip
 800a21c:	1852      	adds	r2, r2, r1
 800a21e:	3b09      	subs	r3, #9
 800a220:	e7ef      	b.n	800a202 <_vfiprintf_r+0x1ea>
 800a222:	ab07      	add	r3, sp, #28
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	0022      	movs	r2, r4
 800a228:	0029      	movs	r1, r5
 800a22a:	0030      	movs	r0, r6
 800a22c:	4b16      	ldr	r3, [pc, #88]	; (800a288 <_vfiprintf_r+0x270>)
 800a22e:	f7fb ffd5 	bl	80061dc <_printf_float>
 800a232:	9004      	str	r0, [sp, #16]
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	3301      	adds	r3, #1
 800a238:	d1d1      	bne.n	800a1de <_vfiprintf_r+0x1c6>
 800a23a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a23c:	07db      	lsls	r3, r3, #31
 800a23e:	d405      	bmi.n	800a24c <_vfiprintf_r+0x234>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	059b      	lsls	r3, r3, #22
 800a244:	d402      	bmi.n	800a24c <_vfiprintf_r+0x234>
 800a246:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a248:	f000 fac6 	bl	800a7d8 <__retarget_lock_release_recursive>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	d500      	bpl.n	800a254 <_vfiprintf_r+0x23c>
 800a252:	e70a      	b.n	800a06a <_vfiprintf_r+0x52>
 800a254:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a256:	e70a      	b.n	800a06e <_vfiprintf_r+0x56>
 800a258:	ab07      	add	r3, sp, #28
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	0022      	movs	r2, r4
 800a25e:	0029      	movs	r1, r5
 800a260:	0030      	movs	r0, r6
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <_vfiprintf_r+0x270>)
 800a264:	f7fc fa6c 	bl	8006740 <_printf_i>
 800a268:	e7e3      	b.n	800a232 <_vfiprintf_r+0x21a>
 800a26a:	46c0      	nop			; (mov r8, r8)
 800a26c:	0800b154 	.word	0x0800b154
 800a270:	0800b174 	.word	0x0800b174
 800a274:	0800b134 	.word	0x0800b134
 800a278:	0800b0e4 	.word	0x0800b0e4
 800a27c:	0800b0ea 	.word	0x0800b0ea
 800a280:	0800b0ee 	.word	0x0800b0ee
 800a284:	080061dd 	.word	0x080061dd
 800a288:	08009ff5 	.word	0x08009ff5

0800a28c <__swbuf_r>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	0005      	movs	r5, r0
 800a290:	000e      	movs	r6, r1
 800a292:	0014      	movs	r4, r2
 800a294:	2800      	cmp	r0, #0
 800a296:	d004      	beq.n	800a2a2 <__swbuf_r+0x16>
 800a298:	6983      	ldr	r3, [r0, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <__swbuf_r+0x16>
 800a29e:	f000 f9f9 	bl	800a694 <__sinit>
 800a2a2:	4b22      	ldr	r3, [pc, #136]	; (800a32c <__swbuf_r+0xa0>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d12e      	bne.n	800a306 <__swbuf_r+0x7a>
 800a2a8:	686c      	ldr	r4, [r5, #4]
 800a2aa:	69a3      	ldr	r3, [r4, #24]
 800a2ac:	60a3      	str	r3, [r4, #8]
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	071b      	lsls	r3, r3, #28
 800a2b2:	d532      	bpl.n	800a31a <__swbuf_r+0x8e>
 800a2b4:	6923      	ldr	r3, [r4, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02f      	beq.n	800a31a <__swbuf_r+0x8e>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	6922      	ldr	r2, [r4, #16]
 800a2be:	b2f7      	uxtb	r7, r6
 800a2c0:	1a98      	subs	r0, r3, r2
 800a2c2:	6963      	ldr	r3, [r4, #20]
 800a2c4:	b2f6      	uxtb	r6, r6
 800a2c6:	4283      	cmp	r3, r0
 800a2c8:	dc05      	bgt.n	800a2d6 <__swbuf_r+0x4a>
 800a2ca:	0021      	movs	r1, r4
 800a2cc:	0028      	movs	r0, r5
 800a2ce:	f000 f93f 	bl	800a550 <_fflush_r>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d127      	bne.n	800a326 <__swbuf_r+0x9a>
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	3001      	adds	r0, #1
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	60a3      	str	r3, [r4, #8]
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	6022      	str	r2, [r4, #0]
 800a2e4:	701f      	strb	r7, [r3, #0]
 800a2e6:	6963      	ldr	r3, [r4, #20]
 800a2e8:	4283      	cmp	r3, r0
 800a2ea:	d004      	beq.n	800a2f6 <__swbuf_r+0x6a>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	07db      	lsls	r3, r3, #31
 800a2f0:	d507      	bpl.n	800a302 <__swbuf_r+0x76>
 800a2f2:	2e0a      	cmp	r6, #10
 800a2f4:	d105      	bne.n	800a302 <__swbuf_r+0x76>
 800a2f6:	0021      	movs	r1, r4
 800a2f8:	0028      	movs	r0, r5
 800a2fa:	f000 f929 	bl	800a550 <_fflush_r>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d111      	bne.n	800a326 <__swbuf_r+0x9a>
 800a302:	0030      	movs	r0, r6
 800a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a306:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <__swbuf_r+0xa4>)
 800a308:	429c      	cmp	r4, r3
 800a30a:	d101      	bne.n	800a310 <__swbuf_r+0x84>
 800a30c:	68ac      	ldr	r4, [r5, #8]
 800a30e:	e7cc      	b.n	800a2aa <__swbuf_r+0x1e>
 800a310:	4b08      	ldr	r3, [pc, #32]	; (800a334 <__swbuf_r+0xa8>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d1c9      	bne.n	800a2aa <__swbuf_r+0x1e>
 800a316:	68ec      	ldr	r4, [r5, #12]
 800a318:	e7c7      	b.n	800a2aa <__swbuf_r+0x1e>
 800a31a:	0021      	movs	r1, r4
 800a31c:	0028      	movs	r0, r5
 800a31e:	f000 f80b 	bl	800a338 <__swsetup_r>
 800a322:	2800      	cmp	r0, #0
 800a324:	d0c9      	beq.n	800a2ba <__swbuf_r+0x2e>
 800a326:	2601      	movs	r6, #1
 800a328:	4276      	negs	r6, r6
 800a32a:	e7ea      	b.n	800a302 <__swbuf_r+0x76>
 800a32c:	0800b154 	.word	0x0800b154
 800a330:	0800b174 	.word	0x0800b174
 800a334:	0800b134 	.word	0x0800b134

0800a338 <__swsetup_r>:
 800a338:	4b37      	ldr	r3, [pc, #220]	; (800a418 <__swsetup_r+0xe0>)
 800a33a:	b570      	push	{r4, r5, r6, lr}
 800a33c:	681d      	ldr	r5, [r3, #0]
 800a33e:	0006      	movs	r6, r0
 800a340:	000c      	movs	r4, r1
 800a342:	2d00      	cmp	r5, #0
 800a344:	d005      	beq.n	800a352 <__swsetup_r+0x1a>
 800a346:	69ab      	ldr	r3, [r5, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <__swsetup_r+0x1a>
 800a34c:	0028      	movs	r0, r5
 800a34e:	f000 f9a1 	bl	800a694 <__sinit>
 800a352:	4b32      	ldr	r3, [pc, #200]	; (800a41c <__swsetup_r+0xe4>)
 800a354:	429c      	cmp	r4, r3
 800a356:	d10f      	bne.n	800a378 <__swsetup_r+0x40>
 800a358:	686c      	ldr	r4, [r5, #4]
 800a35a:	230c      	movs	r3, #12
 800a35c:	5ee2      	ldrsh	r2, [r4, r3]
 800a35e:	b293      	uxth	r3, r2
 800a360:	0711      	lsls	r1, r2, #28
 800a362:	d42d      	bmi.n	800a3c0 <__swsetup_r+0x88>
 800a364:	06d9      	lsls	r1, r3, #27
 800a366:	d411      	bmi.n	800a38c <__swsetup_r+0x54>
 800a368:	2309      	movs	r3, #9
 800a36a:	2001      	movs	r0, #1
 800a36c:	6033      	str	r3, [r6, #0]
 800a36e:	3337      	adds	r3, #55	; 0x37
 800a370:	4313      	orrs	r3, r2
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	4240      	negs	r0, r0
 800a376:	bd70      	pop	{r4, r5, r6, pc}
 800a378:	4b29      	ldr	r3, [pc, #164]	; (800a420 <__swsetup_r+0xe8>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d101      	bne.n	800a382 <__swsetup_r+0x4a>
 800a37e:	68ac      	ldr	r4, [r5, #8]
 800a380:	e7eb      	b.n	800a35a <__swsetup_r+0x22>
 800a382:	4b28      	ldr	r3, [pc, #160]	; (800a424 <__swsetup_r+0xec>)
 800a384:	429c      	cmp	r4, r3
 800a386:	d1e8      	bne.n	800a35a <__swsetup_r+0x22>
 800a388:	68ec      	ldr	r4, [r5, #12]
 800a38a:	e7e6      	b.n	800a35a <__swsetup_r+0x22>
 800a38c:	075b      	lsls	r3, r3, #29
 800a38e:	d513      	bpl.n	800a3b8 <__swsetup_r+0x80>
 800a390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a392:	2900      	cmp	r1, #0
 800a394:	d008      	beq.n	800a3a8 <__swsetup_r+0x70>
 800a396:	0023      	movs	r3, r4
 800a398:	3344      	adds	r3, #68	; 0x44
 800a39a:	4299      	cmp	r1, r3
 800a39c:	d002      	beq.n	800a3a4 <__swsetup_r+0x6c>
 800a39e:	0030      	movs	r0, r6
 800a3a0:	f7ff fb16 	bl	80099d0 <_free_r>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a8:	2224      	movs	r2, #36	; 0x24
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	4393      	bics	r3, r2
 800a3ae:	81a3      	strh	r3, [r4, #12]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6063      	str	r3, [r4, #4]
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	2308      	movs	r3, #8
 800a3ba:	89a2      	ldrh	r2, [r4, #12]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10b      	bne.n	800a3de <__swsetup_r+0xa6>
 800a3c6:	21a0      	movs	r1, #160	; 0xa0
 800a3c8:	2280      	movs	r2, #128	; 0x80
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	0089      	lsls	r1, r1, #2
 800a3ce:	0092      	lsls	r2, r2, #2
 800a3d0:	400b      	ands	r3, r1
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d003      	beq.n	800a3de <__swsetup_r+0xa6>
 800a3d6:	0021      	movs	r1, r4
 800a3d8:	0030      	movs	r0, r6
 800a3da:	f000 fa27 	bl	800a82c <__smakebuf_r>
 800a3de:	220c      	movs	r2, #12
 800a3e0:	5ea3      	ldrsh	r3, [r4, r2]
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	001a      	movs	r2, r3
 800a3e6:	b299      	uxth	r1, r3
 800a3e8:	4002      	ands	r2, r0
 800a3ea:	4203      	tst	r3, r0
 800a3ec:	d00f      	beq.n	800a40e <__swsetup_r+0xd6>
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	60a2      	str	r2, [r4, #8]
 800a3f2:	6962      	ldr	r2, [r4, #20]
 800a3f4:	4252      	negs	r2, r2
 800a3f6:	61a2      	str	r2, [r4, #24]
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	6922      	ldr	r2, [r4, #16]
 800a3fc:	4282      	cmp	r2, r0
 800a3fe:	d1ba      	bne.n	800a376 <__swsetup_r+0x3e>
 800a400:	060a      	lsls	r2, r1, #24
 800a402:	d5b8      	bpl.n	800a376 <__swsetup_r+0x3e>
 800a404:	2240      	movs	r2, #64	; 0x40
 800a406:	4313      	orrs	r3, r2
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	3801      	subs	r0, #1
 800a40c:	e7b3      	b.n	800a376 <__swsetup_r+0x3e>
 800a40e:	0788      	lsls	r0, r1, #30
 800a410:	d400      	bmi.n	800a414 <__swsetup_r+0xdc>
 800a412:	6962      	ldr	r2, [r4, #20]
 800a414:	60a2      	str	r2, [r4, #8]
 800a416:	e7ef      	b.n	800a3f8 <__swsetup_r+0xc0>
 800a418:	2000000c 	.word	0x2000000c
 800a41c:	0800b154 	.word	0x0800b154
 800a420:	0800b174 	.word	0x0800b174
 800a424:	0800b134 	.word	0x0800b134

0800a428 <abort>:
 800a428:	2006      	movs	r0, #6
 800a42a:	b510      	push	{r4, lr}
 800a42c:	f000 fa74 	bl	800a918 <raise>
 800a430:	2001      	movs	r0, #1
 800a432:	f7f8 fe54 	bl	80030de <_exit>
	...

0800a438 <__sflush_r>:
 800a438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a43a:	898b      	ldrh	r3, [r1, #12]
 800a43c:	0005      	movs	r5, r0
 800a43e:	000c      	movs	r4, r1
 800a440:	071a      	lsls	r2, r3, #28
 800a442:	d45f      	bmi.n	800a504 <__sflush_r+0xcc>
 800a444:	684a      	ldr	r2, [r1, #4]
 800a446:	2a00      	cmp	r2, #0
 800a448:	dc04      	bgt.n	800a454 <__sflush_r+0x1c>
 800a44a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	dc01      	bgt.n	800a454 <__sflush_r+0x1c>
 800a450:	2000      	movs	r0, #0
 800a452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a454:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a456:	2f00      	cmp	r7, #0
 800a458:	d0fa      	beq.n	800a450 <__sflush_r+0x18>
 800a45a:	2200      	movs	r2, #0
 800a45c:	2180      	movs	r1, #128	; 0x80
 800a45e:	682e      	ldr	r6, [r5, #0]
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	001a      	movs	r2, r3
 800a464:	0149      	lsls	r1, r1, #5
 800a466:	400a      	ands	r2, r1
 800a468:	420b      	tst	r3, r1
 800a46a:	d034      	beq.n	800a4d6 <__sflush_r+0x9e>
 800a46c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	075b      	lsls	r3, r3, #29
 800a472:	d506      	bpl.n	800a482 <__sflush_r+0x4a>
 800a474:	6863      	ldr	r3, [r4, #4]
 800a476:	1ac0      	subs	r0, r0, r3
 800a478:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <__sflush_r+0x4a>
 800a47e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a480:	1ac0      	subs	r0, r0, r3
 800a482:	0002      	movs	r2, r0
 800a484:	6a21      	ldr	r1, [r4, #32]
 800a486:	2300      	movs	r3, #0
 800a488:	0028      	movs	r0, r5
 800a48a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a48c:	47b8      	blx	r7
 800a48e:	89a1      	ldrh	r1, [r4, #12]
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d106      	bne.n	800a4a2 <__sflush_r+0x6a>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	2b1d      	cmp	r3, #29
 800a498:	d831      	bhi.n	800a4fe <__sflush_r+0xc6>
 800a49a:	4a2c      	ldr	r2, [pc, #176]	; (800a54c <__sflush_r+0x114>)
 800a49c:	40da      	lsrs	r2, r3
 800a49e:	07d3      	lsls	r3, r2, #31
 800a4a0:	d52d      	bpl.n	800a4fe <__sflush_r+0xc6>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	6063      	str	r3, [r4, #4]
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	04cb      	lsls	r3, r1, #19
 800a4ac:	d505      	bpl.n	800a4ba <__sflush_r+0x82>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	d102      	bne.n	800a4b8 <__sflush_r+0x80>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d100      	bne.n	800a4ba <__sflush_r+0x82>
 800a4b8:	6560      	str	r0, [r4, #84]	; 0x54
 800a4ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4bc:	602e      	str	r6, [r5, #0]
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d0c6      	beq.n	800a450 <__sflush_r+0x18>
 800a4c2:	0023      	movs	r3, r4
 800a4c4:	3344      	adds	r3, #68	; 0x44
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	d002      	beq.n	800a4d0 <__sflush_r+0x98>
 800a4ca:	0028      	movs	r0, r5
 800a4cc:	f7ff fa80 	bl	80099d0 <_free_r>
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	6360      	str	r0, [r4, #52]	; 0x34
 800a4d4:	e7bd      	b.n	800a452 <__sflush_r+0x1a>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	0028      	movs	r0, r5
 800a4da:	6a21      	ldr	r1, [r4, #32]
 800a4dc:	47b8      	blx	r7
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	d1c5      	bne.n	800a46e <__sflush_r+0x36>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0c2      	beq.n	800a46e <__sflush_r+0x36>
 800a4e8:	2b1d      	cmp	r3, #29
 800a4ea:	d001      	beq.n	800a4f0 <__sflush_r+0xb8>
 800a4ec:	2b16      	cmp	r3, #22
 800a4ee:	d101      	bne.n	800a4f4 <__sflush_r+0xbc>
 800a4f0:	602e      	str	r6, [r5, #0]
 800a4f2:	e7ad      	b.n	800a450 <__sflush_r+0x18>
 800a4f4:	2340      	movs	r3, #64	; 0x40
 800a4f6:	89a2      	ldrh	r2, [r4, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	e7a9      	b.n	800a452 <__sflush_r+0x1a>
 800a4fe:	2340      	movs	r3, #64	; 0x40
 800a500:	430b      	orrs	r3, r1
 800a502:	e7fa      	b.n	800a4fa <__sflush_r+0xc2>
 800a504:	690f      	ldr	r7, [r1, #16]
 800a506:	2f00      	cmp	r7, #0
 800a508:	d0a2      	beq.n	800a450 <__sflush_r+0x18>
 800a50a:	680a      	ldr	r2, [r1, #0]
 800a50c:	600f      	str	r7, [r1, #0]
 800a50e:	1bd2      	subs	r2, r2, r7
 800a510:	9201      	str	r2, [sp, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	079b      	lsls	r3, r3, #30
 800a516:	d100      	bne.n	800a51a <__sflush_r+0xe2>
 800a518:	694a      	ldr	r2, [r1, #20]
 800a51a:	60a2      	str	r2, [r4, #8]
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	dc00      	bgt.n	800a524 <__sflush_r+0xec>
 800a522:	e795      	b.n	800a450 <__sflush_r+0x18>
 800a524:	003a      	movs	r2, r7
 800a526:	0028      	movs	r0, r5
 800a528:	9b01      	ldr	r3, [sp, #4]
 800a52a:	6a21      	ldr	r1, [r4, #32]
 800a52c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a52e:	47b0      	blx	r6
 800a530:	2800      	cmp	r0, #0
 800a532:	dc06      	bgt.n	800a542 <__sflush_r+0x10a>
 800a534:	2340      	movs	r3, #64	; 0x40
 800a536:	2001      	movs	r0, #1
 800a538:	89a2      	ldrh	r2, [r4, #12]
 800a53a:	4240      	negs	r0, r0
 800a53c:	4313      	orrs	r3, r2
 800a53e:	81a3      	strh	r3, [r4, #12]
 800a540:	e787      	b.n	800a452 <__sflush_r+0x1a>
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	183f      	adds	r7, r7, r0
 800a546:	1a1b      	subs	r3, r3, r0
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	e7e7      	b.n	800a51c <__sflush_r+0xe4>
 800a54c:	20400001 	.word	0x20400001

0800a550 <_fflush_r>:
 800a550:	690b      	ldr	r3, [r1, #16]
 800a552:	b570      	push	{r4, r5, r6, lr}
 800a554:	0005      	movs	r5, r0
 800a556:	000c      	movs	r4, r1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <_fflush_r+0x12>
 800a55c:	2500      	movs	r5, #0
 800a55e:	0028      	movs	r0, r5
 800a560:	bd70      	pop	{r4, r5, r6, pc}
 800a562:	2800      	cmp	r0, #0
 800a564:	d004      	beq.n	800a570 <_fflush_r+0x20>
 800a566:	6983      	ldr	r3, [r0, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <_fflush_r+0x20>
 800a56c:	f000 f892 	bl	800a694 <__sinit>
 800a570:	4b14      	ldr	r3, [pc, #80]	; (800a5c4 <_fflush_r+0x74>)
 800a572:	429c      	cmp	r4, r3
 800a574:	d11b      	bne.n	800a5ae <_fflush_r+0x5e>
 800a576:	686c      	ldr	r4, [r5, #4]
 800a578:	220c      	movs	r2, #12
 800a57a:	5ea3      	ldrsh	r3, [r4, r2]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0ed      	beq.n	800a55c <_fflush_r+0xc>
 800a580:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a582:	07d2      	lsls	r2, r2, #31
 800a584:	d404      	bmi.n	800a590 <_fflush_r+0x40>
 800a586:	059b      	lsls	r3, r3, #22
 800a588:	d402      	bmi.n	800a590 <_fflush_r+0x40>
 800a58a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a58c:	f000 f923 	bl	800a7d6 <__retarget_lock_acquire_recursive>
 800a590:	0028      	movs	r0, r5
 800a592:	0021      	movs	r1, r4
 800a594:	f7ff ff50 	bl	800a438 <__sflush_r>
 800a598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a59a:	0005      	movs	r5, r0
 800a59c:	07db      	lsls	r3, r3, #31
 800a59e:	d4de      	bmi.n	800a55e <_fflush_r+0xe>
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	059b      	lsls	r3, r3, #22
 800a5a4:	d4db      	bmi.n	800a55e <_fflush_r+0xe>
 800a5a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a8:	f000 f916 	bl	800a7d8 <__retarget_lock_release_recursive>
 800a5ac:	e7d7      	b.n	800a55e <_fflush_r+0xe>
 800a5ae:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <_fflush_r+0x78>)
 800a5b0:	429c      	cmp	r4, r3
 800a5b2:	d101      	bne.n	800a5b8 <_fflush_r+0x68>
 800a5b4:	68ac      	ldr	r4, [r5, #8]
 800a5b6:	e7df      	b.n	800a578 <_fflush_r+0x28>
 800a5b8:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <_fflush_r+0x7c>)
 800a5ba:	429c      	cmp	r4, r3
 800a5bc:	d1dc      	bne.n	800a578 <_fflush_r+0x28>
 800a5be:	68ec      	ldr	r4, [r5, #12]
 800a5c0:	e7da      	b.n	800a578 <_fflush_r+0x28>
 800a5c2:	46c0      	nop			; (mov r8, r8)
 800a5c4:	0800b154 	.word	0x0800b154
 800a5c8:	0800b174 	.word	0x0800b174
 800a5cc:	0800b134 	.word	0x0800b134

0800a5d0 <std>:
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	0004      	movs	r4, r0
 800a5d6:	6003      	str	r3, [r0, #0]
 800a5d8:	6043      	str	r3, [r0, #4]
 800a5da:	6083      	str	r3, [r0, #8]
 800a5dc:	8181      	strh	r1, [r0, #12]
 800a5de:	6643      	str	r3, [r0, #100]	; 0x64
 800a5e0:	0019      	movs	r1, r3
 800a5e2:	81c2      	strh	r2, [r0, #14]
 800a5e4:	6103      	str	r3, [r0, #16]
 800a5e6:	6143      	str	r3, [r0, #20]
 800a5e8:	6183      	str	r3, [r0, #24]
 800a5ea:	2208      	movs	r2, #8
 800a5ec:	305c      	adds	r0, #92	; 0x5c
 800a5ee:	f7fb fd43 	bl	8006078 <memset>
 800a5f2:	4b05      	ldr	r3, [pc, #20]	; (800a608 <std+0x38>)
 800a5f4:	6224      	str	r4, [r4, #32]
 800a5f6:	6263      	str	r3, [r4, #36]	; 0x24
 800a5f8:	4b04      	ldr	r3, [pc, #16]	; (800a60c <std+0x3c>)
 800a5fa:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5fc:	4b04      	ldr	r3, [pc, #16]	; (800a610 <std+0x40>)
 800a5fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a600:	4b04      	ldr	r3, [pc, #16]	; (800a614 <std+0x44>)
 800a602:	6323      	str	r3, [r4, #48]	; 0x30
 800a604:	bd10      	pop	{r4, pc}
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	0800a959 	.word	0x0800a959
 800a60c:	0800a981 	.word	0x0800a981
 800a610:	0800a9b9 	.word	0x0800a9b9
 800a614:	0800a9e5 	.word	0x0800a9e5

0800a618 <_cleanup_r>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	4902      	ldr	r1, [pc, #8]	; (800a624 <_cleanup_r+0xc>)
 800a61c:	f000 f8ba 	bl	800a794 <_fwalk_reent>
 800a620:	bd10      	pop	{r4, pc}
 800a622:	46c0      	nop			; (mov r8, r8)
 800a624:	0800a551 	.word	0x0800a551

0800a628 <__sfmoreglue>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	2568      	movs	r5, #104	; 0x68
 800a62c:	1e4a      	subs	r2, r1, #1
 800a62e:	4355      	muls	r5, r2
 800a630:	000e      	movs	r6, r1
 800a632:	0029      	movs	r1, r5
 800a634:	3174      	adds	r1, #116	; 0x74
 800a636:	f7ff fa37 	bl	8009aa8 <_malloc_r>
 800a63a:	1e04      	subs	r4, r0, #0
 800a63c:	d008      	beq.n	800a650 <__sfmoreglue+0x28>
 800a63e:	2100      	movs	r1, #0
 800a640:	002a      	movs	r2, r5
 800a642:	6001      	str	r1, [r0, #0]
 800a644:	6046      	str	r6, [r0, #4]
 800a646:	300c      	adds	r0, #12
 800a648:	60a0      	str	r0, [r4, #8]
 800a64a:	3268      	adds	r2, #104	; 0x68
 800a64c:	f7fb fd14 	bl	8006078 <memset>
 800a650:	0020      	movs	r0, r4
 800a652:	bd70      	pop	{r4, r5, r6, pc}

0800a654 <__sfp_lock_acquire>:
 800a654:	b510      	push	{r4, lr}
 800a656:	4802      	ldr	r0, [pc, #8]	; (800a660 <__sfp_lock_acquire+0xc>)
 800a658:	f000 f8bd 	bl	800a7d6 <__retarget_lock_acquire_recursive>
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	20000355 	.word	0x20000355

0800a664 <__sfp_lock_release>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4802      	ldr	r0, [pc, #8]	; (800a670 <__sfp_lock_release+0xc>)
 800a668:	f000 f8b6 	bl	800a7d8 <__retarget_lock_release_recursive>
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	20000355 	.word	0x20000355

0800a674 <__sinit_lock_acquire>:
 800a674:	b510      	push	{r4, lr}
 800a676:	4802      	ldr	r0, [pc, #8]	; (800a680 <__sinit_lock_acquire+0xc>)
 800a678:	f000 f8ad 	bl	800a7d6 <__retarget_lock_acquire_recursive>
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	20000356 	.word	0x20000356

0800a684 <__sinit_lock_release>:
 800a684:	b510      	push	{r4, lr}
 800a686:	4802      	ldr	r0, [pc, #8]	; (800a690 <__sinit_lock_release+0xc>)
 800a688:	f000 f8a6 	bl	800a7d8 <__retarget_lock_release_recursive>
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	20000356 	.word	0x20000356

0800a694 <__sinit>:
 800a694:	b513      	push	{r0, r1, r4, lr}
 800a696:	0004      	movs	r4, r0
 800a698:	f7ff ffec 	bl	800a674 <__sinit_lock_acquire>
 800a69c:	69a3      	ldr	r3, [r4, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <__sinit+0x14>
 800a6a2:	f7ff ffef 	bl	800a684 <__sinit_lock_release>
 800a6a6:	bd13      	pop	{r0, r1, r4, pc}
 800a6a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800a6aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <__sinit+0x68>)
 800a6b0:	4a13      	ldr	r2, [pc, #76]	; (800a700 <__sinit+0x6c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	42a3      	cmp	r3, r4
 800a6ba:	d101      	bne.n	800a6c0 <__sinit+0x2c>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	61a3      	str	r3, [r4, #24]
 800a6c0:	0020      	movs	r0, r4
 800a6c2:	f000 f81f 	bl	800a704 <__sfp>
 800a6c6:	6060      	str	r0, [r4, #4]
 800a6c8:	0020      	movs	r0, r4
 800a6ca:	f000 f81b 	bl	800a704 <__sfp>
 800a6ce:	60a0      	str	r0, [r4, #8]
 800a6d0:	0020      	movs	r0, r4
 800a6d2:	f000 f817 	bl	800a704 <__sfp>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2104      	movs	r1, #4
 800a6da:	60e0      	str	r0, [r4, #12]
 800a6dc:	6860      	ldr	r0, [r4, #4]
 800a6de:	f7ff ff77 	bl	800a5d0 <std>
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	2109      	movs	r1, #9
 800a6e6:	68a0      	ldr	r0, [r4, #8]
 800a6e8:	f7ff ff72 	bl	800a5d0 <std>
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	2112      	movs	r1, #18
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	f7ff ff6d 	bl	800a5d0 <std>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	61a3      	str	r3, [r4, #24]
 800a6fa:	e7d2      	b.n	800a6a2 <__sinit+0xe>
 800a6fc:	0800acf0 	.word	0x0800acf0
 800a700:	0800a619 	.word	0x0800a619

0800a704 <__sfp>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	0007      	movs	r7, r0
 800a708:	f7ff ffa4 	bl	800a654 <__sfp_lock_acquire>
 800a70c:	4b1f      	ldr	r3, [pc, #124]	; (800a78c <__sfp+0x88>)
 800a70e:	681e      	ldr	r6, [r3, #0]
 800a710:	69b3      	ldr	r3, [r6, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <__sfp+0x18>
 800a716:	0030      	movs	r0, r6
 800a718:	f7ff ffbc 	bl	800a694 <__sinit>
 800a71c:	3648      	adds	r6, #72	; 0x48
 800a71e:	68b4      	ldr	r4, [r6, #8]
 800a720:	6873      	ldr	r3, [r6, #4]
 800a722:	3b01      	subs	r3, #1
 800a724:	d504      	bpl.n	800a730 <__sfp+0x2c>
 800a726:	6833      	ldr	r3, [r6, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d022      	beq.n	800a772 <__sfp+0x6e>
 800a72c:	6836      	ldr	r6, [r6, #0]
 800a72e:	e7f6      	b.n	800a71e <__sfp+0x1a>
 800a730:	220c      	movs	r2, #12
 800a732:	5ea5      	ldrsh	r5, [r4, r2]
 800a734:	2d00      	cmp	r5, #0
 800a736:	d11a      	bne.n	800a76e <__sfp+0x6a>
 800a738:	0020      	movs	r0, r4
 800a73a:	4b15      	ldr	r3, [pc, #84]	; (800a790 <__sfp+0x8c>)
 800a73c:	3058      	adds	r0, #88	; 0x58
 800a73e:	60e3      	str	r3, [r4, #12]
 800a740:	6665      	str	r5, [r4, #100]	; 0x64
 800a742:	f000 f847 	bl	800a7d4 <__retarget_lock_init_recursive>
 800a746:	f7ff ff8d 	bl	800a664 <__sfp_lock_release>
 800a74a:	0020      	movs	r0, r4
 800a74c:	2208      	movs	r2, #8
 800a74e:	0029      	movs	r1, r5
 800a750:	6025      	str	r5, [r4, #0]
 800a752:	60a5      	str	r5, [r4, #8]
 800a754:	6065      	str	r5, [r4, #4]
 800a756:	6125      	str	r5, [r4, #16]
 800a758:	6165      	str	r5, [r4, #20]
 800a75a:	61a5      	str	r5, [r4, #24]
 800a75c:	305c      	adds	r0, #92	; 0x5c
 800a75e:	f7fb fc8b 	bl	8006078 <memset>
 800a762:	6365      	str	r5, [r4, #52]	; 0x34
 800a764:	63a5      	str	r5, [r4, #56]	; 0x38
 800a766:	64a5      	str	r5, [r4, #72]	; 0x48
 800a768:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a76a:	0020      	movs	r0, r4
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76e:	3468      	adds	r4, #104	; 0x68
 800a770:	e7d7      	b.n	800a722 <__sfp+0x1e>
 800a772:	2104      	movs	r1, #4
 800a774:	0038      	movs	r0, r7
 800a776:	f7ff ff57 	bl	800a628 <__sfmoreglue>
 800a77a:	1e04      	subs	r4, r0, #0
 800a77c:	6030      	str	r0, [r6, #0]
 800a77e:	d1d5      	bne.n	800a72c <__sfp+0x28>
 800a780:	f7ff ff70 	bl	800a664 <__sfp_lock_release>
 800a784:	230c      	movs	r3, #12
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	e7ef      	b.n	800a76a <__sfp+0x66>
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	0800acf0 	.word	0x0800acf0
 800a790:	ffff0001 	.word	0xffff0001

0800a794 <_fwalk_reent>:
 800a794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a796:	0004      	movs	r4, r0
 800a798:	0006      	movs	r6, r0
 800a79a:	2700      	movs	r7, #0
 800a79c:	9101      	str	r1, [sp, #4]
 800a79e:	3448      	adds	r4, #72	; 0x48
 800a7a0:	6863      	ldr	r3, [r4, #4]
 800a7a2:	68a5      	ldr	r5, [r4, #8]
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	9b00      	ldr	r3, [sp, #0]
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	d504      	bpl.n	800a7b8 <_fwalk_reent+0x24>
 800a7ae:	6824      	ldr	r4, [r4, #0]
 800a7b0:	2c00      	cmp	r4, #0
 800a7b2:	d1f5      	bne.n	800a7a0 <_fwalk_reent+0xc>
 800a7b4:	0038      	movs	r0, r7
 800a7b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7b8:	89ab      	ldrh	r3, [r5, #12]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d908      	bls.n	800a7d0 <_fwalk_reent+0x3c>
 800a7be:	220e      	movs	r2, #14
 800a7c0:	5eab      	ldrsh	r3, [r5, r2]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	d004      	beq.n	800a7d0 <_fwalk_reent+0x3c>
 800a7c6:	0029      	movs	r1, r5
 800a7c8:	0030      	movs	r0, r6
 800a7ca:	9b01      	ldr	r3, [sp, #4]
 800a7cc:	4798      	blx	r3
 800a7ce:	4307      	orrs	r7, r0
 800a7d0:	3568      	adds	r5, #104	; 0x68
 800a7d2:	e7e8      	b.n	800a7a6 <_fwalk_reent+0x12>

0800a7d4 <__retarget_lock_init_recursive>:
 800a7d4:	4770      	bx	lr

0800a7d6 <__retarget_lock_acquire_recursive>:
 800a7d6:	4770      	bx	lr

0800a7d8 <__retarget_lock_release_recursive>:
 800a7d8:	4770      	bx	lr
	...

0800a7dc <__swhatbuf_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	000e      	movs	r6, r1
 800a7e0:	001d      	movs	r5, r3
 800a7e2:	230e      	movs	r3, #14
 800a7e4:	5ec9      	ldrsh	r1, [r1, r3]
 800a7e6:	0014      	movs	r4, r2
 800a7e8:	b096      	sub	sp, #88	; 0x58
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	da08      	bge.n	800a800 <__swhatbuf_r+0x24>
 800a7ee:	220c      	movs	r2, #12
 800a7f0:	5eb3      	ldrsh	r3, [r6, r2]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	602a      	str	r2, [r5, #0]
 800a7f6:	061b      	lsls	r3, r3, #24
 800a7f8:	d411      	bmi.n	800a81e <__swhatbuf_r+0x42>
 800a7fa:	2380      	movs	r3, #128	; 0x80
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	e00f      	b.n	800a820 <__swhatbuf_r+0x44>
 800a800:	466a      	mov	r2, sp
 800a802:	f000 f91b 	bl	800aa3c <_fstat_r>
 800a806:	2800      	cmp	r0, #0
 800a808:	dbf1      	blt.n	800a7ee <__swhatbuf_r+0x12>
 800a80a:	23f0      	movs	r3, #240	; 0xf0
 800a80c:	9901      	ldr	r1, [sp, #4]
 800a80e:	021b      	lsls	r3, r3, #8
 800a810:	4019      	ands	r1, r3
 800a812:	4b05      	ldr	r3, [pc, #20]	; (800a828 <__swhatbuf_r+0x4c>)
 800a814:	18c9      	adds	r1, r1, r3
 800a816:	424b      	negs	r3, r1
 800a818:	4159      	adcs	r1, r3
 800a81a:	6029      	str	r1, [r5, #0]
 800a81c:	e7ed      	b.n	800a7fa <__swhatbuf_r+0x1e>
 800a81e:	2340      	movs	r3, #64	; 0x40
 800a820:	2000      	movs	r0, #0
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	b016      	add	sp, #88	; 0x58
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	ffffe000 	.word	0xffffe000

0800a82c <__smakebuf_r>:
 800a82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a82e:	2602      	movs	r6, #2
 800a830:	898b      	ldrh	r3, [r1, #12]
 800a832:	0005      	movs	r5, r0
 800a834:	000c      	movs	r4, r1
 800a836:	4233      	tst	r3, r6
 800a838:	d006      	beq.n	800a848 <__smakebuf_r+0x1c>
 800a83a:	0023      	movs	r3, r4
 800a83c:	3347      	adds	r3, #71	; 0x47
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	2301      	movs	r3, #1
 800a844:	6163      	str	r3, [r4, #20]
 800a846:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a848:	466a      	mov	r2, sp
 800a84a:	ab01      	add	r3, sp, #4
 800a84c:	f7ff ffc6 	bl	800a7dc <__swhatbuf_r>
 800a850:	9900      	ldr	r1, [sp, #0]
 800a852:	0007      	movs	r7, r0
 800a854:	0028      	movs	r0, r5
 800a856:	f7ff f927 	bl	8009aa8 <_malloc_r>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d108      	bne.n	800a870 <__smakebuf_r+0x44>
 800a85e:	220c      	movs	r2, #12
 800a860:	5ea3      	ldrsh	r3, [r4, r2]
 800a862:	059a      	lsls	r2, r3, #22
 800a864:	d4ef      	bmi.n	800a846 <__smakebuf_r+0x1a>
 800a866:	2203      	movs	r2, #3
 800a868:	4393      	bics	r3, r2
 800a86a:	431e      	orrs	r6, r3
 800a86c:	81a6      	strh	r6, [r4, #12]
 800a86e:	e7e4      	b.n	800a83a <__smakebuf_r+0xe>
 800a870:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <__smakebuf_r+0x84>)
 800a872:	62ab      	str	r3, [r5, #40]	; 0x28
 800a874:	2380      	movs	r3, #128	; 0x80
 800a876:	89a2      	ldrh	r2, [r4, #12]
 800a878:	6020      	str	r0, [r4, #0]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	6120      	str	r0, [r4, #16]
 800a882:	6163      	str	r3, [r4, #20]
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00d      	beq.n	800a8a6 <__smakebuf_r+0x7a>
 800a88a:	0028      	movs	r0, r5
 800a88c:	230e      	movs	r3, #14
 800a88e:	5ee1      	ldrsh	r1, [r4, r3]
 800a890:	f000 f8e6 	bl	800aa60 <_isatty_r>
 800a894:	2800      	cmp	r0, #0
 800a896:	d006      	beq.n	800a8a6 <__smakebuf_r+0x7a>
 800a898:	2203      	movs	r2, #3
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	4393      	bics	r3, r2
 800a89e:	001a      	movs	r2, r3
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	89a0      	ldrh	r0, [r4, #12]
 800a8a8:	4307      	orrs	r7, r0
 800a8aa:	81a7      	strh	r7, [r4, #12]
 800a8ac:	e7cb      	b.n	800a846 <__smakebuf_r+0x1a>
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	0800a619 	.word	0x0800a619

0800a8b4 <_malloc_usable_size_r>:
 800a8b4:	1f0b      	subs	r3, r1, #4
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	1f18      	subs	r0, r3, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da01      	bge.n	800a8c2 <_malloc_usable_size_r+0xe>
 800a8be:	580b      	ldr	r3, [r1, r0]
 800a8c0:	18c0      	adds	r0, r0, r3
 800a8c2:	4770      	bx	lr

0800a8c4 <_raise_r>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	0004      	movs	r4, r0
 800a8c8:	000d      	movs	r5, r1
 800a8ca:	291f      	cmp	r1, #31
 800a8cc:	d904      	bls.n	800a8d8 <_raise_r+0x14>
 800a8ce:	2316      	movs	r3, #22
 800a8d0:	6003      	str	r3, [r0, #0]
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	4240      	negs	r0, r0
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <_raise_r+0x24>
 800a8de:	008a      	lsls	r2, r1, #2
 800a8e0:	189b      	adds	r3, r3, r2
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	2a00      	cmp	r2, #0
 800a8e6:	d108      	bne.n	800a8fa <_raise_r+0x36>
 800a8e8:	0020      	movs	r0, r4
 800a8ea:	f000 f831 	bl	800a950 <_getpid_r>
 800a8ee:	002a      	movs	r2, r5
 800a8f0:	0001      	movs	r1, r0
 800a8f2:	0020      	movs	r0, r4
 800a8f4:	f000 f81a 	bl	800a92c <_kill_r>
 800a8f8:	e7ed      	b.n	800a8d6 <_raise_r+0x12>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	2a01      	cmp	r2, #1
 800a8fe:	d0ea      	beq.n	800a8d6 <_raise_r+0x12>
 800a900:	1c51      	adds	r1, r2, #1
 800a902:	d103      	bne.n	800a90c <_raise_r+0x48>
 800a904:	2316      	movs	r3, #22
 800a906:	3001      	adds	r0, #1
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	e7e4      	b.n	800a8d6 <_raise_r+0x12>
 800a90c:	2400      	movs	r4, #0
 800a90e:	0028      	movs	r0, r5
 800a910:	601c      	str	r4, [r3, #0]
 800a912:	4790      	blx	r2
 800a914:	0020      	movs	r0, r4
 800a916:	e7de      	b.n	800a8d6 <_raise_r+0x12>

0800a918 <raise>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	4b03      	ldr	r3, [pc, #12]	; (800a928 <raise+0x10>)
 800a91c:	0001      	movs	r1, r0
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	f7ff ffd0 	bl	800a8c4 <_raise_r>
 800a924:	bd10      	pop	{r4, pc}
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	2000000c 	.word	0x2000000c

0800a92c <_kill_r>:
 800a92c:	2300      	movs	r3, #0
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	4d06      	ldr	r5, [pc, #24]	; (800a94c <_kill_r+0x20>)
 800a932:	0004      	movs	r4, r0
 800a934:	0008      	movs	r0, r1
 800a936:	0011      	movs	r1, r2
 800a938:	602b      	str	r3, [r5, #0]
 800a93a:	f7f8 fbc0 	bl	80030be <_kill>
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	d103      	bne.n	800a94a <_kill_r+0x1e>
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d000      	beq.n	800a94a <_kill_r+0x1e>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	20000350 	.word	0x20000350

0800a950 <_getpid_r>:
 800a950:	b510      	push	{r4, lr}
 800a952:	f7f8 fbae 	bl	80030b2 <_getpid>
 800a956:	bd10      	pop	{r4, pc}

0800a958 <__sread>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	000c      	movs	r4, r1
 800a95c:	250e      	movs	r5, #14
 800a95e:	5f49      	ldrsh	r1, [r1, r5]
 800a960:	f000 f8a4 	bl	800aaac <_read_r>
 800a964:	2800      	cmp	r0, #0
 800a966:	db03      	blt.n	800a970 <__sread+0x18>
 800a968:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a96a:	181b      	adds	r3, r3, r0
 800a96c:	6563      	str	r3, [r4, #84]	; 0x54
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	4a02      	ldr	r2, [pc, #8]	; (800a97c <__sread+0x24>)
 800a974:	4013      	ands	r3, r2
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	e7f9      	b.n	800a96e <__sread+0x16>
 800a97a:	46c0      	nop			; (mov r8, r8)
 800a97c:	ffffefff 	.word	0xffffefff

0800a980 <__swrite>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	001f      	movs	r7, r3
 800a984:	898b      	ldrh	r3, [r1, #12]
 800a986:	0005      	movs	r5, r0
 800a988:	000c      	movs	r4, r1
 800a98a:	0016      	movs	r6, r2
 800a98c:	05db      	lsls	r3, r3, #23
 800a98e:	d505      	bpl.n	800a99c <__swrite+0x1c>
 800a990:	230e      	movs	r3, #14
 800a992:	5ec9      	ldrsh	r1, [r1, r3]
 800a994:	2200      	movs	r2, #0
 800a996:	2302      	movs	r3, #2
 800a998:	f000 f874 	bl	800aa84 <_lseek_r>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	4a05      	ldr	r2, [pc, #20]	; (800a9b4 <__swrite+0x34>)
 800a9a0:	0028      	movs	r0, r5
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	81a3      	strh	r3, [r4, #12]
 800a9a6:	0032      	movs	r2, r6
 800a9a8:	230e      	movs	r3, #14
 800a9aa:	5ee1      	ldrsh	r1, [r4, r3]
 800a9ac:	003b      	movs	r3, r7
 800a9ae:	f000 f81f 	bl	800a9f0 <_write_r>
 800a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b4:	ffffefff 	.word	0xffffefff

0800a9b8 <__sseek>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	000c      	movs	r4, r1
 800a9bc:	250e      	movs	r5, #14
 800a9be:	5f49      	ldrsh	r1, [r1, r5]
 800a9c0:	f000 f860 	bl	800aa84 <_lseek_r>
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	1c42      	adds	r2, r0, #1
 800a9c8:	d103      	bne.n	800a9d2 <__sseek+0x1a>
 800a9ca:	4a05      	ldr	r2, [pc, #20]	; (800a9e0 <__sseek+0x28>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	bd70      	pop	{r4, r5, r6, pc}
 800a9d2:	2280      	movs	r2, #128	; 0x80
 800a9d4:	0152      	lsls	r2, r2, #5
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	6560      	str	r0, [r4, #84]	; 0x54
 800a9dc:	e7f8      	b.n	800a9d0 <__sseek+0x18>
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	ffffefff 	.word	0xffffefff

0800a9e4 <__sclose>:
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	230e      	movs	r3, #14
 800a9e8:	5ec9      	ldrsh	r1, [r1, r3]
 800a9ea:	f000 f815 	bl	800aa18 <_close_r>
 800a9ee:	bd10      	pop	{r4, pc}

0800a9f0 <_write_r>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	0004      	movs	r4, r0
 800a9f4:	0008      	movs	r0, r1
 800a9f6:	0011      	movs	r1, r2
 800a9f8:	001a      	movs	r2, r3
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4d05      	ldr	r5, [pc, #20]	; (800aa14 <_write_r+0x24>)
 800a9fe:	602b      	str	r3, [r5, #0]
 800aa00:	f7f8 fb96 	bl	8003130 <_write>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d103      	bne.n	800aa10 <_write_r+0x20>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d000      	beq.n	800aa10 <_write_r+0x20>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	20000350 	.word	0x20000350

0800aa18 <_close_r>:
 800aa18:	2300      	movs	r3, #0
 800aa1a:	b570      	push	{r4, r5, r6, lr}
 800aa1c:	4d06      	ldr	r5, [pc, #24]	; (800aa38 <_close_r+0x20>)
 800aa1e:	0004      	movs	r4, r0
 800aa20:	0008      	movs	r0, r1
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f8 fba0 	bl	8003168 <_close>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d103      	bne.n	800aa34 <_close_r+0x1c>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d000      	beq.n	800aa34 <_close_r+0x1c>
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
 800aa36:	46c0      	nop			; (mov r8, r8)
 800aa38:	20000350 	.word	0x20000350

0800aa3c <_fstat_r>:
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	b570      	push	{r4, r5, r6, lr}
 800aa40:	4d06      	ldr	r5, [pc, #24]	; (800aa5c <_fstat_r+0x20>)
 800aa42:	0004      	movs	r4, r0
 800aa44:	0008      	movs	r0, r1
 800aa46:	0011      	movs	r1, r2
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	f7f8 fb97 	bl	800317c <_fstat>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d103      	bne.n	800aa5a <_fstat_r+0x1e>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d000      	beq.n	800aa5a <_fstat_r+0x1e>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	20000350 	.word	0x20000350

0800aa60 <_isatty_r>:
 800aa60:	2300      	movs	r3, #0
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	4d06      	ldr	r5, [pc, #24]	; (800aa80 <_isatty_r+0x20>)
 800aa66:	0004      	movs	r4, r0
 800aa68:	0008      	movs	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f8 fb94 	bl	8003198 <_isatty>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d103      	bne.n	800aa7c <_isatty_r+0x1c>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d000      	beq.n	800aa7c <_isatty_r+0x1c>
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	20000350 	.word	0x20000350

0800aa84 <_lseek_r>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	0004      	movs	r4, r0
 800aa88:	0008      	movs	r0, r1
 800aa8a:	0011      	movs	r1, r2
 800aa8c:	001a      	movs	r2, r3
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4d05      	ldr	r5, [pc, #20]	; (800aaa8 <_lseek_r+0x24>)
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f8 fb89 	bl	80031aa <_lseek>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d103      	bne.n	800aaa4 <_lseek_r+0x20>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d000      	beq.n	800aaa4 <_lseek_r+0x20>
 800aaa2:	6023      	str	r3, [r4, #0]
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	20000350 	.word	0x20000350

0800aaac <_read_r>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	0004      	movs	r4, r0
 800aab0:	0008      	movs	r0, r1
 800aab2:	0011      	movs	r1, r2
 800aab4:	001a      	movs	r2, r3
 800aab6:	2300      	movs	r3, #0
 800aab8:	4d05      	ldr	r5, [pc, #20]	; (800aad0 <_read_r+0x24>)
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f8 fb1b 	bl	80030f6 <_read>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d103      	bne.n	800aacc <_read_r+0x20>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d000      	beq.n	800aacc <_read_r+0x20>
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	20000350 	.word	0x20000350

0800aad4 <_init>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr

0800aae0 <_fini>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr
